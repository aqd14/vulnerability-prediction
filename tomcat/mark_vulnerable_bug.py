
cutoff=0.30

def find_similarity():

    out_file=open("possible_vulnerability.csv",'w+')

    out_file.write('REQUIREMENT_ID')

    for qid in range(number_of_query):
        scores=query(query_files[qid])
        filtered_scores=[]
        index=0
        #print("for "+query_files[qid]+"\n");
        for x in scores:
           #print("     "+(SINGLETON.file_names[index]).replace(PROJECT_ROOT + '\\data\\profile\\processed\\', '')+" "+format(x))
            if x>cutoff:
                filtered_scores.append((index,x))
            index += 1

        if filtered_scores != []:
            for (doc, score) in filtered_scores:
                class_id = (SINGLETON.file_names[doc]).replace(PROJECT_ROOT + '\\data\\processed_profile\\', '')
                out_file.write('\n' + os.path.basename(query_files[qid]).replace('.txt', '') + ',' + class_id)

    out_file.close()

print('Generating profiles...\n')
init()
print('Finished profile generation...\n')
print('Finding similarities...\n')

clearContent=True
for x in range(80,100,10):

    cutoff=0.01*float(x)
    find_similarity()
    print('Reporting scores for cuttoff: '+str(cutoff)+'\n')
    evaluate_r_to_s.writeTo('report_scipy_r_to_s.csv',cutoff, clearContent)
    #generated_requirement_to_vulneraility_mapping_generator.generateRtoV()
    #evaluate_r_to_v.writeTo('report_scipy_r_to_v.csv',cutoff,clearContent)
    clearContent=False

print('Program Finished\n')